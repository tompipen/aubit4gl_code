
			Aubit automated testing framework README 
			----------------------------------------

This test framework enables Aubit compiled programs to execute keyboard 
keypress files for automated run-time execution scripting, and dump screen 
states in the file.

Then, expected output (screen dumps, report files) are diff-ed against
acutual output of scripted programs execution,

What we really need help at this stage is with testing programs
themselves; we need more of them. We want to get to the point where every 
4GL statement will be used in at least one test script.

This is also a fastes and 100% guaranteed way to report and resolve any
bugs - if you create a test that fails, but should work, it will be a
matter of days (if not hours) before it's fixed. You have my personal
guaranty ;-)

Description
-----------

The original idea was just to have a simple system without having to worry 
about figuring out a meaningful name and at the same time identifying what 
was a test and what was some script needed to run the tests (anything that 
begins with [0-9] is a test).

The build tests are bascially just a makefile that compiles and optionally 
(although usually) runs a program and returns the exit status.

An exit status of 0 means everything is ok, anything else is reported as a 
failiure.

There is a template for normal tests which can be generated by 
running 'run_tests -new x'

$ cd tools/test/build_tests
$ sh run_tests -new 9999

Where 9999 is the number of the test you want to create...

You should check with Mike or Andrej for a bank of numbers to use if you want 
to upload them/ make sure we dont use the same numbers  - see script_ranges
file for currently alocated ranges

Tests from aproximately 210 and up use new-style makefile from template/ 
directory.

'run_tests -new' will generate a nice Makefile for you - modify the 
template unless you can't avoid making your own from scratch.

You can also use 'exit program 0' and 'exit program 1' in the 4gl to detect 
if everything is ok and use that for the makefile

We have a good collection of functions to handling automated testing.
The major one is the ability to read and write keylog files.

	export A4GL_KEYLOG=somefile

run your programs and use it normally

This will generate a file called 'somefile' with a list of all keystrokes 
used.

You can replay that file by setting A4GL_KEYFILE=somefile.

Tests by default use "keys.in" as the filename in the testscripts - but it can be 
anything.

(Don't forget to unset A4GL_KEYLOG - it doesn't like them both being set as it 
would be trying to write to a file it was reading from!)

There is also the A4GL_KEYDELAY=.. which specifies a number of microseconds to 
wait between each key press. This is useful if you're trying to watch the 
replay, to slow it down to a reasonable pace.

A4GL_KEYDELAY=1000000

would replay them at 1 keystroke per second..

Other notes :

to do a screen dump:

	call aclfgl_dump_screen("filename.out")

There is a version of dump screen available in the 
lib/extra_libs/infx_dump_screen/infx.o object file which can be added to the 
compile line in c4gl to help generate the expected results.

	$ c4gl myprog.4gl $AUBITDIR/lib/extra_libs/infx_dump_screen/infx.o -o prog.4ge

This screen dump will automatically append ".infx" to whatever the filename 
passed to aclfgl_dump_screen..

I quite often use an 'ON KEY(..)' to trigger a screen dump.

In order to make sure that the output is always the same size regardless of 
the terminal size - set the 

        A4GL_TRIMDUMP=24x80

This will trim the output to 24 lines by 80 characters...

Other ways to test 4GL programs:

> > On Sun, 2004-01-18 at 11:42, SÃ©rgio Ferreira wrote:
> >> I am making some work on automated test of docfgl.
> >> It is commited to CVS on doc4gl/parser/fgl_parser/test and uses cppunit
> >> to make unit tests to the new parser.

				Content of this directory
				-------------------------

Files: 
	catalogue.txt - Automatically generated catalogue of all tests
	Makefile-common - Common make file included from all test makefiles (new ones) 
	odbc.ini and odbcinst.ini - ODBC configuration files - created & changed 
		automaticaly by run_tests
	run_tests - main tests execution script (see -help for options)
	script_ranges - text file documenting developers that own test ranges
	testdb.sql - SQL script used to create test database for all target RDBMS systems
	genMakefileTest.pl - OBSOLETE - remove from CVS
	tests.xml - OBSOLETE - remove from CVS	
	
Log files (created by executing tests):
	time.log
	alldb.log
	build.log
	resources.log
	debug.out - creted by Aubit programs & compilers when using -debug flag

Directories:
	template - DIRECTORY containing test template files used with 'run_tests -new'
	all other directoryes - contain test files for each test  
	
	
				To - do 
				-------
				
calculate % of success
				
----------------------------------------------------------------------
TODO - testing script
create a test to compile only using libSQL_FILESCHEMA.so
check if we have xdr .so befire using -xdr
Fail on silent: 11 WHY?
fix SILENT/NO_ECHO

----------------------------------------------------------------------
TODO - add testing for:
libEXDTYPE_mpz.so libEXREPORT_PDF.so
Additional libs: 	libA4GL_cint.so libA4GL_file.so libA4GL_pop.so libA4GL_string.so
RPC stuff: 		libRPC_XDR.so libRPC_XMLRPC.so
Not finished: 		libLEX_CS.so libLEX_PERL.so
GTK+ stuff - how to test this? libUI_GTK.so libMENU_GENERIC.so libMENU_XDR.so
Cant test without manual setup: libIM_JABBER.so
ace compiler

How/what for are this guys used?:
libMSG_NATIVE.so
libHELP_std.so
Embedding packed forms into memory rather than reading them from files.
Have a look at the help display routine which uses it.
so, testing hepl sub-system will test this too: libPACKER_MEMPACKED.so

----------------------------------------------------------------------

TODO - get this descriptors automatically:
DB_TESTS=grep 4gl files for DATABASE stmt 
WINDOW_TESTS=grep for open window
TUI_TESTS=grep fpr dump_screen function call
FORM_TESTS=grep for open form
REPORT_TESTS=grep for "END REPORT"
DUMP_SCREEN_TESTS=grep for aclfgl_aclfgl_dump_screen, A4GL_clr_window or aclfgl_fgl_drawbox


---------------------------------- EOF ------------------------------------



