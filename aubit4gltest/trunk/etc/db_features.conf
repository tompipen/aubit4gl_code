##############################################################################
# This file contatins information about operational status of all SQL/db
# realated features used in Aubit regression tests, and therefore hopefully
# all db/SQL related features that exist in x4GL grammar.
#
# It is loaded in incl/functions_incl.sh file, in function define_sql_features()
#
# All lines STARTING with # are treated as comments and discarded when loading.
#
# General goal is to distinguish (describe) between known (documented) and 
# therefore expected and unknown and therefore unexpected (as per documented) 
# behaviour.
#
# Problems which this approach is trying to solve are:
#
# a) Preserving testing results integrity
#    ------------------------------------
#    Purpose of any testing is to determine which functionality is working and 
#    which is not, so it can be documented, and ideally fixed/implemented. 
#    But there are situations in which feature/functionality/test 
#    is not working, but this cannot be fixed, since it depends on functionality 
#    outside of software which we are testing, or this functionality is not
#    implemented, and therefore cannot be expected to work . Allowing such tests 
#    to run will
#    allways result in failure, which will corrupt the result of all testing.
#    Using information stored in this file, and comparing it with information
#    stored in each tests descriptions (in its makefile) we can determine this
#    kind of sittuations and skip the test we know cannot work (not because of
#    the bug, but because it is not compatible, and never will be, or because
#    finctionality needed for it to work was not implemented) and therefore
#    preserve the integrity of the testing results.
#
#    An example: if one of the tests a car manufacturer has to perform before
#    shipping a car out of the factory would be to test if a car can fly, all
#    cars would fail that test, and result of testing would be a failure. This 
#    would be an example of not implemented feature - in theory possible,
#    but not implemented. OTOH, if they would test if car engine works under
#    water, all engines would fail. This would be an example of functionality 
#    not possible because of external factors - namely lack of oxigen. If they
#    run a significant number of such obviously ridicolous tests, like we did
#    in the past, they would end up with results such as that car passed only
#    50% of all tests. If you looked at that result, and did not know what 
#    they did, what would you think about that car? If you did know what they 
#    did, what would you think about there testing procedure? And this is 
#    exactly what we had before this functionality was introduced.
#    For example, we would run a test trying to create stored procedure 
#    using Informix-only syntax, agains PostgreSQL database. It would of course 
#    fail, and after running a number of such (pointless) tests we would end 
#    up with result showing that Aubit compiler using PostgreSQL database
#    passes less then 55% of all database tests, which is meaningless.
#    
#
# b) Gap analysis
#    ------------
#    having a knowlage of features used in tests, allow us to run regression
#    tests against any database type, database version, configuration,
#    environment, operating system, connectivity method, etc., and instantly 
#    collect information about all working and non-working features. This is
#    also usefull for creating initial status informtion for some database
#    in this file - all passed features would receive initial (S)upported status,
#    while all passed features would receive initial (P)ossible. Then, an developer
#    with knowlage of Aubit functionality AND knowlage of used database wolud
#    manually sort out P status - changing it to:
#		(S)upported if feature should work and functionality needed for it is implemented, 
#         but does not because of Aubit bug, OR in the case when test containing
#         this feature failed for some other reason, and feature does work.
#       (I)mposible if feature is not possble using this database no matter what we do
#       ...or leave it as (P)ossible if feature CAN in theory work with this database,
#         but it does not because supporting functionality needed for it to work
#         is not (yet) implemented in Aubit compiler.
#   
#
# c) DB/SQL features support status reporting
#    ----------------------------------------
#    after a status of each feature is recorded in this file, we can instantly 
#    produce comphensive report of
#    support status for any database with maintained status, which is absolutely
#    nececery to have in manual/documentation, for users to know what they can
#    use with particular database, and what not to use. This is also needed to 
#    plan porting applications to different databases.
#
# To make all this work, developers adding or modifying Aubit regression tests
# need to perform following tasks:
#
# 1) Maintain the list of DB/SQL features used in every test that needs a database
#    in the makefile of each test, in make target "sql_features_used:" If the feature
#    used in test allready exists in this file, use its name/descriptor. If it 
#    does not, add new descriptor to this file, as well as in makefile
#
# 2) Maintain the list of DB/SQL features used in regression tests, and there
#    status in this file. 
#
# TO-DO
# ------
# rename in makefiles:
# CLUSTER_INDEX -> CREATE_INDEX_CLUSTER
# DESC_INDEX -> XXX
# DDL_SYNONYM -> CREATE_SYSNONYM
#
# SQL_UNIQUE - what is that?
#
# Create documentation describing what each feature name refers to
#
# Legend for feature status fields:
# ---------------------------------
# (P)OSSIBLE - all non-ANSI compatible SQL or db features that is posible
# to translate/emulate, but this is __NOT__ currently working because
# it is not implemented (NOT because there is a bug in it - if this is
# the case, list it as supported and let it fail so we can see it as a 
# bug [Should we create another status for it, like (B)ug maybe?] and 
# list it as expected to fail in fail_list_inc.sh)
# It is anticipated that support for them will be/can be implemented in the 
# near future. 
# By default, tests that use this feature will be skipped 
#
# (S)UPPORTED - all non-ANSI compatible SQL or db features that is posible
# to translate/emulate, and is implemented in Aubit and fully working
# By default, tests that use this feature will be executed
#
# (D)EPENDS - all non-ANSI compatible SQL or db features that is NOT posible
# to translate/emulate, so there behaviour will depend on functionality
# and/or configuration of the database back-end used. Only ANSI and 
# ANSI-CNV should use this status type.
# By default, tests that use this feature will be executed
#
# P(A)RTIAL - some uses of the feature are supported, but not all. For example,
# DDL_DATETIME will work with PostgreSQL only as YEAR to SECOND, but not in 
# any other combination of timeframes. This status should be avoided, and such 
# ambigous features should be broken down to multiple features that are 
# sufficiently atomic to indicate absolute support status, and then removed.
# Use it only as transitional support status indicator.
#
# (I)MPOSSIBLE - all non-ANSI compatible SQL or db features that is NOT posible
# to translate/emulate, and never will be since it depends on the
# functionality of the back-end that CANNOT be emulated, translated
# or subsitituted
# By default, tests that use this feature will be skipped
#
# I(G)NORED - The feature will be silently ignored. There will be no attempt 
# to emulate or translate the feature. Your program using it
# will compile, but it is not guarantied to run, depanding on the way the 
# feature is used. If you program explicitly depends on the particular 
# functionality of the feature that is ignored, it will probably fail. Since the
# feature is ignored, the tests using it will be ignored (skipped) by default
# too.


# Legend for feature type field:
# ------------------------------
# D=DDL statement  (Data Definition Language statement)
# S=SQL statement (Datata Manipulation Statement)
# C=Conectivity statement
# P=Procedure & trigger (Server Side Statement) 
# F=Functions (Server Side)
# X=miXed - feature refers to more then one of above types
#
#
# Fields:
# -------
#  TODO - do we need to differentiate between ODBC and native connections?
#  TODO - do we need to differentiate between vanilla PG 7.4 and 8?

# Field 1 - Feature status for any ANSI 92 compliant database (that has .cnv file)
# Field 2 - Feature status for any ANSI 92 compliant database (that does NOT have .cnv file)
# Field 3 - Feature status for Informix On-Line (5.x, 7.x, 9.x) databases
# Field 4 - Feature status for Informix SE (All versions) databases
# Field 5 - Feature status for PG 7.4 with Informix compatibility patch
# Field 6 - Feature status for vanilla (not patched) PostgreSQL 7.4 and 8
# Field 7 - Feature status for SQLite version xyz (via ODBC)
# Field 8 - Feature status for MySQL version xyz
# Field 9 - Feature status for MaxDB (SAP DB/Adabas-D) version xyz (In native mode - not Oracle or DB2)
# Field 10 - Feature status for Oracle version xyz
# Field 11 - Feature status for DB2 version xyz
# Field 12 - Feature status for MS SQL server version xyz
# Field 13 - Feature status for Sybase version xyz
# Field 14 - Feature status for Progress version xyz
# Field 15 - Feature status for CA Ingres version R3
# Field 16 - Feature status for FireBird (Borland Interbase) version 1.x (not in Oracle mode)
# Field 17 - Feature status for xx version xyz (reserved for future use)
# Field 18 - Feature status for xx version xyz (reserved for future use)
# Field 19 - Feature status for xx version xyz (reserved for future use)

# Field 20 - Feature type
# Field 21 - Feature name
##############################################################################
#adding 12 rows

#PG8 notes:
#   Change Column Types
#          A column's data type can now be changed with ALTER TABLE.
#               Allow DECLARE CURSOR to take parameters
#Unsupported isolation levels are now accepted and promoted to the
#       nearest supported level
#
#    * Add new server configuration parameter default_with_oids to
#       control whether tables are created with OIDs by default
#    * Add WITH / WITHOUT OIDS clause to CREATE TABLE AS (Neil)
#
#Allow ALTER ... ADD COLUMN with defaults and NOT NULL constraints;
#       works per SQL spec
#
#     * Add pg_get_serial_sequence() to return a serial column's sequence
#       name (Christopher)
#       This allows automated scripts to reliabily find the serial
#       sequence name.


#Comments: each feature line can be FOLLOWED by none, one or more
#comment lines. Comment lines MUST begin with # symbol as a first 
#character on the line. Lines beginning with 3 or more # symbols 
#are ignored, as they are expected to contain filed numbers to 
#make orientation easier when editing the file. You can use HTML formating tags
#in comments, that will be applied when HTML putput is generated from this 
#file


#Fields:
#                     10                  20
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1
	I I S I I I I S S S S S S S S S S S S D ADD_CONSTRAINT 
#LCL: Unverified/Unsure<br>
	I I S S S S S S S S S S S S S S S S S D ALTER_INDEX
	P P S S S I S S S S S S S S S S S S S D ALTER_TABLE
#Delivered in pg_ifx 1.7	
	I I S S S I S S S S S S S S S S S S S D ALTER_TABLE_ADD
#Delivered in pg_ifx 1.7
	I I S S S I S S S S S S S S S S S S S D ALTER_TABLE_ADD_BEFORE
#Delivered in pg_ifx 1.7	
	I I S S S I S S S S S S S S S S S S S D ALTER_TABLE_DROP
#Delivered in pg_ifx 1.7	
	I I S S I I S S S S S S S S S S S S S D ALTER_TABLE_LOCK_MODE
	S S S S S S S S S S S S S S S S S S S S ANSI_DELETE 
	S S S S S S S S S S S S S S S S S S S S ANSI_INSERT 
	S S S S S S S S S S S S S S S S S S S S ANSI_SELECT 
	S S S S S S S S S S S S S S S S S S S S ANSI_UPDATE 
	S S S S S S S S S S S S S S S S S S S S BEGIN_WORK 
	S S S S S S S S S S S S S S S S S S S S CLOSE_CURSOR 
	S S S S S S S S S S S S S S S S S S S C CLOSE_DATABASE 
	I I S S I I S S S S S S S S S S S S S D CLUSTER_INDEX 
	S S S S S S S S S S S S S S S S S S S S COMMIT_WORK 
	I I I S I I I I I I I I I I I I I I I D CREATE_AUDIT 
	P P S S S S S S S S S S S S S S S S S D CREATE_DATABASE 
	I I S S S S S S S S S S S S S S S S S D CREATE_DATABASE_IN 
	I I S I S S S S S S S S S S S S S S S D CREATE_DATABASE_MODE_ANSI 
	I I S S S S S S S S S S S S S S S S S D CREATE_DATABASE_WITH_LOG 
	S S S S S S S S S S S S S S S S S S S D CREATE_INDEX 
	P P S S S S S S S S S S S S S S S S S D CREATE_INDEX_ASC
#LCL: Not Supported by Postgres, changed our code<br>
#I beleive that ASCending index is default index in PG, and fully working?
	I I S S S S S S S S S S S S S S S S S D CREATE_INDEX_ASC_DESC 
#LCL: Not Supported by Postgres, changed our code<br>
#Seems to be working in PG - see test 568
	I I S S S S S S S S S S S S S S S S S D CREATE_INDEX_CLUSTER 
#LCL: Used in EC program but #ifdef handles syntax compatibility<br>
	I I S S S S S S S S S S S S S S S S S D CREATE_INDEX_COMPOSITE 
	I I S S S S S S S S S S S S S S S S S D CREATE_INDEX_DESC 
#LCL: Not Supported by Postgres, changed our code<br>
#Seems to be working in PG - see test 568
	S S S S S S S S S S S S S S S S S S S D CREATE_INDEX_UNIQUE 
	I I S S S S S S S S S S S S S S S S S D CREATE_INDEX_UNIQUE_COMPOSITE
	I I S S I S S S S S S S S S S S S S S D CREATE_INDEX_QUALIFIED_PATH
	I I S I S S S S S S S S S S S S S S S P CREATE_PROCEDURE
#LCL: Stop using them due to EC and shell compatibility.<br>
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1	
	I I S S I I S S S S S S S S S S S S S D CREATE_SYNONYM
	I I S S I I S S S S S S S S S S S S S D CREATE_SYNONYM_QUALIFIED_PATH
	S S S S S S S S S S S S S S S S S S S D CREATE_TABLE 
	I I S I I I I S S S S S S S S S S S S D CREATE_TABLE_EXTENT 
	I I S S I I I S S S S S S S S S S S S D CREATE_TABLE_IN 
	I I S S I I I S S S S S S S S S S S S D CREATE_TABLE_LOCK_MODE
	I I S I I I I S S S S S S S S S S S S D CREATE_TABLE_NEXT_SIZE
	I I S I I I I S S S S S S S S S S S S D CREATE_TABLE_QUALIFIED_PATH	
	S S S S S S S S S S S S S S S S S S S D CREATE_TEMP_TABLE 
	I I S S S S S S S S S S S S S S S S S D CREATE_TEMP_TABLE_NO_LOG
	S S S S S S S S S S S S S S S S S S S D CREATE_VIEW	
#LCL: Stop using them for maintenance reasons<br>
	S S S S S S S S S S S S S S S S S S S D CREATE_VIEW_AS_SELECT 
	S S S S S S S S S S S S S S S S S S S D CREATE_VIEW_AS_SELECT_MULTI_TABLE 
	I I S S I I S S S S S S S S S S S S S D CREATE_VIEW_SELECT_WITH_CHECK 
	I I S S I I S S S S S S S S S S S S S D CREATE_VIEW_QUALIFIED_PATH
	S S S S S S S S S S S S S S S S S S S S CURSOR_SELECT 
	S S S S S S S S S S S S S S S S S S S S CURSOR_SELECT_FOR_UPDATE 
#LCL: Works only in conjuction with 'set_sequential_scan'<br>
#SW: Work arounds implemented during conversion
	S S S S S S S S S S S S S S S S S S S C DATABASE 
	I I S S S S S S S S S S S S S S S S S C DATABASE_EXCLUSIVE
	S S S S I I S S S S S S S S S S S S S C DATABASE_PREPARED
# Refers to attempt to prepare an DATABASE xyz statement	
	I I S S P P S S S S S S S S S S S S S C DATABASE_QUALIFIED_PATH
#LCL: Unverified/Unsure<br>
#abbility to select a database at run-time using server-database notation
#instad just a database name
	P S S S S S S S S S S S S S S S S S S F DATETIME_EXTEND 
	P S S S S S S S S S S S S S S S S S S D DDL_BYTE 
	I I S S S S S S S S S S S S S S S S S D DDL_CHECK 
	I I S S I I S S S S S S S S S S S S S D DDL_CONSTRAINT 
	S S S S S S S S S S S S S S S S S S S D DDL_DATE 
	S S S S A A S S S S S S S S S S S S S D DDL_DATETIME
#LCL: Only datetime year to second is supported. (PG)<br>
	S S S S P P S S S S S S S S S S S S S D DDL_DATETIME_Y2Y
	S S S S P P S S S S S S S S S S S S S D DDL_DATETIME_Y2M
	S S S S P P S S S S S S S S S S S S S D DDL_DATETIME_Y2D
	S S S S P P S S S S S S S S S S S S S D DDL_DATETIME_Y2H
	S S S S P P S S S S S S S S S S S S S D DDL_DATETIME_Y2M
	S S S S S S S S S S S S S S S S S S S D DDL_DATETIME_Y2S
	S S S S P P S S S S S S S S S S S S S D DDL_DATETIME_Y2F
	S S S S P P S S S S S S S S S S S S S D DDL_DATETIME_Y2F2
	S S S S S S S S S S S S S S S S S S S D DDL_DEFAULT_VALUE
	S S S S S S S S S S S S S S S S S S S D DDL_DEFAULT_VALUE
#Refers to abbility to establish default value for a cloumn in DDL statement
#LCL: Unverified/Unsure<br>
	S S S S P P S S S S S S S S S S S S S D DDL_DEFAULT_DATETIME
	P P S S S S S S S S S S S S S S S S S D DDL_DOUBLE_PRECISION 
	P P S S I I S S S S S S S S S S S S S D DDL_FOREIGN_KEY 
	I I S S S S S S S S S S S S S S S S S D DDL_INTERVAL 
#LCL: No longer used since qualifiers are not supported.<br>
	S S S S S S S S S S S S S S S S S S S D DDL_MONEY 
#LCL: Removed during conversion<br>
	P P S S S S S S S S S S S S S S S S S D DDL_NCHAR 
	I I S I I I I S S S S S S S S S S S S D DDL_NEXT_SIZE
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1	
	S S S S S S S S S S S S S S S S S S S D DDL_NOT_NULL 
	P P S S S S S S S S S S S S S S S S S D DDL_NVARCHAR 
	P P S S S S S S S S S S S S S S S S S D DDL_PRIMARY_KEY 
	I I S S S S S S S S S S S S S S S S S D DDL_REFERENCES 
	P P S S S S S S S S S S S S S S S S S D DDL_SERIAL
#PG: Supported in DDL, but behaves somewhat differently
	I I S S S S S S S S S S S S S S S S S D DDL_SET_CONSTRAINT 
	I I S S I I S S S S S S S S S S S S S D DDL_SYNONYM 
	P P S S S S S S S S S S S S S S S S S D DDL_TEXT 
	P P S S S S S S S S S S S S S S S S S D DDL_UNIQUE 
	S S S S S S S S S S S S S S S S S S S X DEFINE_LIKE
#LCL: Unverified/Unsure<br>
#Refers to 4GL "DEFINE ... LIKE ..." stmt, as abillity to retrive 
#field types at compile time from the database, to define 4GL variable
	P P S S S S S S S S S S S S S S S S S X DEFINE_LIKE_QUALIFIED_PATH 
#LCL: Unverified/Unsure<br>
#Same as DEFINE_LIKE, but uses qulified path to the database to be referenced
#instead of the current DATABASE as declared in 4GL code
	I I S S S S S S S S S S S S S S S S S S DELETE_FROM_WHERE_ALL_SUBSELECT 
	I I S S S S S S S S S S S S S S S S S S DELETE_FROM_WHERE_ANY_SUBSELECT 
	P P S S S S S S S S S S S S S S S S S S DELETE_FROM_WHERE_EXISTS_SUBSELECT 
	S S S S S S S S S S S S S S S S S S S S DELETE_FROM_WHERE_NULL 
	I I S S S S S S S S S S S S S S S S S S DELETE_FROM_WHERE_SOME_SUBSELECT 
	S S S S S S S S S S S S S S S S S S S S DELETE_FROM_WHERE_WITH_SUBSELECT 
	I I S S S S S S S S S S S S S S S S S S DELETE_WHERE_CURRENT_OF
#LCL: Same as update<br>	
	I I S S P P S S S S S S S S S S S S S S DELETE_QUALIFIED_PATH
	I I S S I I S S S S S S S S S S S S S D DESC_INDEX 
	I I I S I I I I I I I I I I I I I I I D DROP_AUDIT 
	I I S I I I I S S S S S S S S S S S S D DROP_CONSTRAINT 
	P P S S S S S S S S S S S S S S S S S D DROP_DATABASE 
	S S S S S S S S S S S S S S S S S S S D DROP_INDEX
	I I S S I S S S S S S S S S S S S S S D DROP_INDEX_QUALIFIED_PATH
	I I S I S S S S S S S S S S S S S S S F DROP_PROCEDURE 
	I I S S I I S S S S S S S S S S S S S D DROP_SYNONYM
	I I S S I I S S S S S S S S S S S S S D DROP_SYNONYM_QUALIFIED_PATH	
	S S S S S S S S S S S S S S S S S S S D DROP_TABLE
	S S S S I S S S S S S S S S S S S S S D DROP_TABLE_QUALIFIED_PATH	
	I I S I I S S S S S S S S S S S S S S F DROP_TRIGGER 
	S S S S S S S S S S S S S S S S S S S D DROP_VIEW
	S S S S I S S S S S S S S S S S S S S D DROP_VIEW_QUALIFIED_PATH	
	S S S S S S S S S S S S S S S S S S S S EXECUTE_INTO_USING
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1	
	S S S S S S S S S S S S S S S S S S S S EXECUTE_USING 
	P P S S I S S S S S S S S S S S S S S S FETCH_RELATIVE
#SW: No longer Used, but FETCH ABOLUTE is required
	S S S S S S S S S S S S S S S S S S S S FETCH_ABSOLUTE
#SW: we haven't found any problem in using this feature. Chris has advised me 
#we can take this usage out easily if it is a problem. <br>
#Needed by SW - no tests exist?
	S S S S S S S S S S S S S S S S S S S X FGL_CURRENT
#update/insert ... set .... = current
	S S S S S S S S S S S S S S S S S S S S FREE_CURSOR 
	S S S S S S S S S S S S S S S S S S S X FREE_LOB 
	P P S S I I S S S S S S S S S S S S S F FUNC_DATETIME
	D D P P S S S S S S S S S S S S S S S F FUNC_ORD
#function ord() exists by defailt only in PG RDBMS
	P P S S S S S S S S S S S S S S S S S F FUNC_EXTEND 
#LCL: Works according to LCL requirements<br>	
	P P S S I I S S S S S S S S S S S S S F FUNC_INTERVAL
	P P S S P P S S S S S S S S S S S S S F FUNC_MDY
	D D S S S S S S S S S S S S S S S S S F FUNC_SUBSTR 
	S S S S A A S S S S S S S S S S S S S D GRANT
#SW: Used only in sql script. 'Grant connect to public'. This is kept for 
#historical reason. It is really not required in the Postgres environment. <br>
#
	S S S S S S S S S S S S S S S S S S S S GROUP_BY 
	S S S S S S S S S S S S S S S S S S S S GROUP_BY_NUMBER 
	I I S S A A S S S S S S S S S S S S S D IFX_SYSTABLES
#LCL: Unverified/Unsure<br>
#Refers to abbility of the target RDBMS to provide emulation of 
#Informix sys* tables (tabid < 100) For example, PG can use bsystables.ec
#to provide emulation of some sys tables in Informix format
	I I S I I I I S S S S S S S S S S S S D INDEX_FILLFACTOR 
	S S S S S S S S S S S S S S S S S S S X INITIALIZE_LIKE 
#LCL: Unverified/Unsure<br>
#Abbility of 4GL code to initialise 4GL variable at run-time to a default
#as established in the database with an DDL statement with DEFAULT clause
	S S S S S S S S S S S S S S S S S S S S INSERT_COLUMNLIST_EQ_VALUELIST 
	I I S S P P S S S S S S S S S S S S S S INSERT_COLUMNLIST_EQ_VALUELIST_QUALIFIED_PATH
	I I S S P P S S S S S S S S S S S S S S INSERT_CURSOR
#Example: declare c1 cursor for insert into tabname values(pr_rec.*)
#there may well be a work around for this though 
#(as we can just copy the insert statement and perform it on each put)
	S S S S S S S S S S S S S S S S S S S S INSERT_INTO_SELECT_FROM 
	S S S S S S S S S S S S S S S S S S S X LOAD_FROM_INSERT_INTO 
#LCL: Use pg_ifx syntax to be consistant outside of 4gl<br>
	I I S S S S S S S S S S S S S S S S S S LOCK_TABLE 
#LCL: Bogus in Postgres.  Wrote application level lock.<br>	
	I I S S S S S S S S S S S S S S S S S S LOCK_TABLE_EXCLUSIVE 
	I I S S S S S S S S S S S S S S S S S S LOCK_TABLE_SHARED 
	I I S S I I S S S S S S S S S S S S S S META_DELETE_FROM_SYNONYM 
#LCL: Unverified/Unsure<br>
#Abbility to delete a record from table referenced by its synonym
	P P S S I I S S S S S S S S S S S S S S META_DELETE_FROM_VIEW 
#LCL: Unverified/Unsure<br>
#Abbility to delete a record from view based on one table
	P P S S S S S S S S S S S S S S S S S S META_DELETE_FROM_VIEW_MULTI_TABLE
#LCL: Unverified/Unsure<br>
#abbility to delete a record from a view which was defined using more then one table
	I I S S S S S S S S S S S S S S S S S S META_INSERT_MULTITABLE_VIEW 
#LCL: Unverified/Unsure<br>
#abbility to insert a record into a view which was defined using more then one table
	I I S S I I S S S S S S S S S S S S S S META_INSERT_SYNONYM 
#LCL: Unverified/Unsure<br>
#Abbility to insert a record into a table referenced by its synonym
	I I S S I I S S S S S S S S S S S S S S META_INSERT_VIEW 
#LCL: Unverified/Unsure<br>
#Abbility to insert a record into a view based on one table
	P P S S S S S S S S S S S S S S S S S S META_SELECT_AS_ALIAS 
#LCL: Unverified/Unsure<br>
#See test 727
	I I S S I I S S S S S S S S S S S S S S META_SELECT_FROM_SYNONYM 
#LCL: Unverified/Unsure<br>
#Abbility to select data from a table referenced by its synonym
	S S S S I I S S S S S S S S S S S S S S META_SELECT_FROM_VIEW
#LCL: Unverified/Unsure<br>
#Abbility to select data from a view based on only one table
	I I S S S S S S S S S S S S S S S S S S META_UPDATE_MULTI_TABLE_VIEW
#LCL: Unverified/Unsure<br>
#abbility to update a record in a view which was defined using more then one table
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1	
	I I S S I I S S S S S S S S S S S S S S META_UPDATE_VIEW 
#LCL: Unverified/Unsure<br>
#Abbility to update a revord in a view defined on one table
	S S S S S S S S S S S S S S S S S S S X NONE	
#Use NONE for tests that need database, but do not use any 
#database features directly, for instance when test needs database for ORDER BY in report
	S S S S S S S S S S S S S S S S S S S S ORDER_BY 
	S S S S S S S S S S S S S S S S S S S S ORDER_BY_ASC 
	I I S S S S S S S S S S S S S S S S S S ORDER_BY_DESC 
	S S S S S S S S S S S S S S S S S S S S ORDER_BY_NUMBER 
	P P S S P P S S S S S S S S S S S S S S PUT_CURSOR
#Not implemented for PG - is it possible?
	I I I S I I S S S S S S S S S S S S S D RECOVER_TABLE 
	I I S S S S S S S S S S S S S S S S S D RENAME_COLUMN 
	I I S S S S S S S S S S S S S S S S S D RENAME_TABLE 
	S S S S S S S S S S S S S S S S S S S X REPORT_ORDER_BY 
	S S S S P P S S S S S S S S S S S S S D REVOKE 
	S S S S S S S S S S S S S S S S S S S S ROLLBACK_WORK 
	I I I S I I S S S S S S S S S S S S S D ROLLFORWARD_DATABASE 
	I I S S S S S S S S S S S S S S S S S D ROWID 
#LCL: ROWID is synonym to OID which is global.<br>
	I I S S S S S S S S S S S S S S S S S S SCROLL_CURSOR
#SW: required	
	S S S S S S S S S S S S S S S S S S S S SELECT_ALL 
	S S S S S S S S S S S S S S S S S S S S SELECT_AS 
	S S S S S S S S S S S S S S S S S S S F SELECT_AVG 
	S S S S S S S S S S S S S S S S S S S F SELECT_AVG_ALL 
	S S S S S S S S S S S S S S S S S S S F SELECT_COUNT 
	I I S S S S S S S S S S S S S S S S S F SELECT_COUNT_DISTINCT 
	S S S S S S S S S S S S S S S S S S S S SELECT_DISTINCT 
#LCL: Dropped using synonym UNIQUE<br>
	S S S S S S S S S S S S S S S S S S S S SELECT_FOR_UPDATE 
	S S S S I I S S S S S S S S S S S S S S SELECT_FOR_UPDATE_CURSOR
#LCL: conditional - Must 'set_seq_scan' on<br>
	S S S S S S S S S S S S S S S S S S S X SELECT_HAVING_COUNT 
	S S S S S S S S S S S S S S S S S S S S SELECT_INTO_TEMP 
	S S S S G G S S S S S S S S S S S S S X SELECT_INTO_TEMP_WITH_NO_LOG
#a4gl silently drop 'with no log' with pg_ifx	
	S S S S S S S S S S S S S S S S S S S F SELECT_MAX 
	S S S S S S S S S S S S S S S S S S S X SELECT_MAX_ALL
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1	
	S S S S S S S S S S S S S S S S S S S F SELECT_MIN 
	S S S S S S S S S S S S S S S S S S S X SELECT_MIN_ALL 
	I I S S I I S S S S S S S S S S S S S S SELECT_OUTER 
#LCL: Accepted - Runtime check for appropriate syntax<br>
#postgres fully supports left and right outer joins - you just need to 'join' 
#them rather than use the 'WHERE' clause.
#see http://www.aubit.com/mantis/view.php?id=620
	D D S S I S S S S S S S S S S S S S S S SELECT_RELATIVE 
	D D S S S S S S S S S S S S S S S S S F SELECT_SUBSTRING 
	S S S S S S S S S S S S S S S S S S S F SELECT_SUM 
	S S S S S S S S S S S S S S S S S S S X SELECT_SUM_ALL 
	S S S S S S S S S S S S S S S S S S S X SELECT_STAR_INTO_VARLISTLIST_LESS 
	S S S S I I S S S S S S S S S S S S S X SELECT_STAR_INTO_VARLISTLIST_MORE	
	D D S S S S S S S S S S S S S S S S S S SELECT_UNION 
	D D S S S S S S S S S S S S S S S S S S SELECT_UNION_ALL 
	D D S S S S S S S S S S S S S S S S S S SELECT_WHERE_ALL_SUBSELECT 
	S S S S S S S S S S S S S S S S S S S S SELECT_WHERE_BETWEEN 
	S S S S S S S S S S S S S S S S S S S S SELECT_WHERE_EXISTS_SUBSELECT 
	S S S S S S S S S S S S S S S S S S S S SELECT_WHERE_IN 
	S S S S S S S S S S S S S S S S S S S S SELECT_WHERE_IN_SUBSELECT 
	S S S S S S S S S S S S S S S S S S S S SELECT_WHERE_LIKE 
	S S S S S S S S S S S S S S S S S S S S SELECT_WHERE_MATCHES 
	S S S S S S S S S S S S S S S S S S S S SELECT_WHERE_NULL 
	I I S S I I S S S S S S S S S S S S S D SET_BUFFERED_LOG 
	I I S S S S S S S S S S S S S S S S S F SET_EXPLAIN 
#LCL: IIRC does not work at runtime.<br>	
	I I S S I I S S S S S S S S S S S S S X SET_ISOLATION 
	D D S S P P S S S S S S S S S S S S S X SET_LOCK_MODE
#SW: 'Set lock mode to wait'. We haven't found any problem in the 
#implementation of this feature. <br>
	D D I S I I S S S S S S S S S S S S S X SET_LOG 
	S S S S S S S S S S S S S S S S S S S X SQLCA_SQLAWARN1 
#LCL: Unverified/Unsure	<br>
	S S S S S S S S S S S S S S S S S S S X SQLCA_SQLAWARN2
#Set to W when the database now open uses a transaction log.	
#LCL: Unverified/Unsure	<br>
#postgres always has transactions enabled 
	S S S S I I S S S S S S S S S S S S S X SQLCA_SQLAWARN3 
	S S S S I I S S S S S S S S S S S S S X SQLCA_SQLAWARN4 
	S S S S S S S S S S S S S S S S S S S X SQLCA_SQLCODE 
	S S S S I I S S S S S S S S S S S S S X SQLCA_SQLERRD1 
#LCL: Unverified/Unsure	<br>
	S S S S I I S S S S S S S S S S S S S X SQLCA_SQLERRD2
#LCL: Unverified/Unsure<br>
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1	
	S S S S S S S S S S S S S S S S S S S X SQLCA_SQLERRD3
#LCL: Unverified/Unsure	<br>
	S S S S I I S S S S S S S S S S S S S X SQLCA_SQLERRD4
#LCL: Unverified/Unsure<br>
	S S S S I I S S S S S S S S S S S S S X SQLCA_SQLERRD5
#LCL: Unverified/Unsure<br>
	S S S S S S S S S S S S S S S S S S S X SQLCA_SQLERRD6
#LCL: Unverified/Unsure	<br>
	S S S S I I S S S S S S S S S S S S S X SQLCA_SQLERRM
#LCL: Unverified/Unsure	<br>
	S S S S I S S S S S S S S S S S S S S X SQL_END_SQL_BLOCK 
	I I I S I I S S S S S S S S S S S S S D START_DATABASE 
	I I I S I I S S S S S S S S S S S S S D START_DATABASE_WITH_LOG 
	I I I S I I S S S S S S S S S S S S S D START_DATABASE_WITH_LOG_MODE_ANSI
	S S S S S S S S S S S S S S S S S S S X STATUS	
	D D S S I S S S S S S S S S S S S S S X TABLENAME_DB_SERVER_USER_TABLE 
	D D S S I S S S S S S S S S S S S S S X TABLENAME_DB_TABLE 
	D D S S I S S S S S S S S S S S S S S X TABLENAME_DB_USER_TABLE 
	P P S S S S S S S S S S S S S S S S S X UNLOAD_PATH_RELATIVE 
#LCL: Is the only way with pg_ifx<br>
	S S S S S S S S S S S S S S S S S S S X UNLOAD_TO
# 	 632(SE0) 633(SE0) 634(SE0) 635(SE0) 636(SE0)
#We have 3 variants of UNLOAD_TO - should we consolidate them?<br>
#LCL: Use pg_ifx syntax to be consistant outside of 4gl<br>
	S S S S S S S S S S S S S S S S S S S X UNLOAD_TO_SELECT_FROM 
# 	 107(5) 108(5) 1208(5) 1209(5)	<br>
#LCL: Use pg_ifx syntax to be consistant outside of 4gl<br>
	S S S S S S S S S S S S S S S S S S S X UNLOAD_TO_SELECT_FROM_WHERE 
#    286(S0) 287(S0) 288(5)	<br>
#LCL: Use pg_ifx syntax to be consistant outside of 4gl<br>
	D D S S S S S S S S S S S S S S S S S S UNLOCK_TABLE 
#LCL: Unverified/Unsure - Use application level locks<br>
	S S S S S S S S S S S S S S S S S S S S UPDATE_COLUMNLIST_EQ_VALUELIST 
	P P S S S S S S S S S S S S S S S S S S UPDATE_COLUMNLIST_EQ_VALUELIST_WITH_THRU 
	S S S S S S S S S S S S S S S S S S S S UPDATE_SET_STAR 
	S S S S S S S S S S S S S S S S S S S S UPDATE_SET_VALUE_WITH_SUBSELECT 
	I I S S S S S S S S S S S S S S S S S D UPDATE_STATISTICS 
#LCL: VACUUM ANALYSE is run in shell scripts	<br>
	D D S S S S S S S S S S S S S S S S S S UPDATE_WHERE_CURRENT_OF 
	S S S S S S S S S S S S S S S S S S S X VALIDATE_LIKE 
	S S S S S S S S S S S S S S S S S S S S WHERE_ANY_SUBSELECT 
	S S S S S S S S S S S S S S S S S S S S WHERE_BETWEEN 
	S S S S S S S S S S S S S S S S S S S S WHERE_LIKE 
	I I S S I I S S S S S S S S S S S S S S WHERE_LIKE_ESCAPE 
	S S S S S I S S S S S S S S S S S S S S WHERE_MATCHES
#why is this I?? (775) there is also SELECT_WHERE_MATCHES above	
####1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1	
	I I S S I I S S S S S S S S S S S S S S WHERE_MATCHES_ESCAPE
#LCL: Unverified/Unsure<br>
#see test 761
	S S S S S S S S S S S S S S S S S S S S WHERE_NOT_IN
	S S S S S S S S S S S S S S S S S S S S WHERE_NULL
#why was this I?? (773) - also have SELECT_WHERE_NULL
	I I S S S S S S S S S S S S S S S S S S WHERE_SOME_SUBSELECT 
	

# ------------------------------------- EOF ---------------------------------

