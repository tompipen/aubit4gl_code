#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble

\usepackage{ifpdf}
\ifpdf
 \usepackage{lmodern}
 \usepackage{hyperref}
 \pdfinfo{ /Title (Aubit4GL) 
 /Subject(User Manual)
 /Author( Mike Aubury, Andrej Falout, edited John O'Gorman)
}
 \pdfcatalog{/PageMode(/UseOutlines)}
\fi
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 5
\tocdepth 5
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle fancy

\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Chapter

A4GL features
\layout Section

4GL
\layout Standard

Informix 4GL was co-designed by Roger Sippl (founder of Informix ) and Chris
 Maloney.
 They combined the elements of Perform (the screen package designed by Betty
 Chang), Ace (the report writer written by Bill Hedge), and the SQL engine
 written by Roy Harrington into a Pascal-like language which Informix released
 in 1986 - the same year that the first ANSI standard for SQL was promulgated.
\layout Standard

Informix 4GL complied with the SQL86 standard.
 I4GL was phenominally successful in the marketplace.
 More applications were written in I4GL in the 1990s than in any other language.
\layout Section

Aubit 4GL
\layout Standard

Aubit 4GL is a free opensource work-alike for Informix 4GL.
 The project was started by Mike Aubury and he continues to contribute to
 the project which is now under the management of Andrej Falout.
\layout Standard

Where Informix 4GL was locked into working only with Informix's own database
 engines: SE and IDS, Aubit 4GL can work with any SQL compliant engine.
 Currently supported engines are Informix SE and IDS, PostgreSQL, SAPDB,
 SQLite and using ODBC (unixODBC or iODBC on Linux/Unix) any other engine
 for which ODBC interfaces exist.
\layout Section

A4GL benefits 
\layout Subsection

GNU,\SpecialChar ~
GPL,\SpecialChar ~
OpenSource
\layout Standard

Yes, it will cost you nothing, but there are much more important implications
 that this, in our view.
 It's future does not depend on anyone but you.
 To find out more about implications of this feature, please see 
\begin_inset LatexCommand \htmlurl{http://www.opensource.org}

\end_inset 

 and 
\begin_inset LatexCommand \htmlurl{http://www.gnu.org}

\end_inset 

.
\layout Subsection

Commercially Supported
\layout Standard

Commercial support is available from Aubit if you want it.
 Aubit is Mike Aubury's company.
\layout Standard

This will guarantee you can use Aubit 4gl in business-critical situations
 with confidence, and bring together best from both worlds.
 To learn more, please visit 
\begin_inset LatexCommand \url{http://www.aubit.com}

\end_inset 

.
\layout Subsection

Productive
\layout Standard

Based on a robust, mature, stable, efficient, and productive language, x4GL
 is dedicated to writing business related, database oriented applications,
 and this is what it does, in our opinion, best in the world.
 
\layout Standard

It is easy to learn, implement, and maintain.
 And most of all, it is at least 3 times more productive in all aspect of
 software lifecycle compared to third generation languages like C, and at
 least two times compared to best component development environments.
 
\layout Subsection

Fast
\layout Standard

It's FAST! Full n tier deployment, native C code generation compiled by
 optimized C compilers bring together advantages of high, human-like development
 language, and low, machine-level runtime execution performance.
 Not to mention you can interpolate C code directly in 4GL code!
\layout Subsection

Compatible
\layout Standard

Aubit4GL is compatible with a number of commercial products giving you the
 freedom to mix and match features and environments based on particular
 situation.
 You will never again be locked into one compiler, one company or one database.
 You can develop with commercial products, deploy with Aubit 4GL and save
 on runtime licensing, at the same time gaining the speed of C compiled
 runtime.
 Or you can use 4GL Wizard functionality and templates in development, and
 deploy using a commercial runtime that supports client side functionality
 that is not present in Aubit 4GL at the moment
\layout Subsection

Engine Independent
\layout Standard

Database, OS, platform, and user interface independent ODBC means choosing
 a database engine is no longer an issue.
 
\layout Standard

You can develop and deploy wherever a GCC compiler is available with a single
 recompile.
 And because of full n-tier support, you can use CUI, GUI and Web interfaces
 from the same code, and the same compiled program, at the same time, just
 by setting environment variables.
 It already has a big developer base, and a large existing applications
 base 
\layout Standard

This is not a new language, just a new implementation of a mature and successful
 language.
 So you will not need to look hard to find developers for your projects.
 And since 4GL is English-like in syntax, programmers with experience in
 any language will be productive in just a few days.
 On top of that, you will not need to look far to find commercial, tried
 and tested applications in any field of business oriented database applications.
 
\layout Section

A4GL Extensions
\layout Standard

A4GL fully supports the features and syntax of Informix 4GL, but we have
 extended the language with many enhancements.
\layout Description

Associative\SpecialChar ~
Arrays This productivity enhancement will make complex Array
 manipulations easy and fast, and at the same time make your code easier
 to maintain and understand 
\layout Description

PAUSE\SpecialChar ~
Screen Handling Will enhance usability over the slower connection lines,
 no matter which front-end implementation you deploy 
\layout Description

ODBC Compliance Is the crucial feature for unprecedented connectivity and
 freedom of database options in 4GL world 
\layout Description

Multiple\SpecialChar ~
Concurrent\SpecialChar ~
Connections Based on ODBC access concept, this feature
 will enable you to not only easily open several databases at the same time,
 and keep them open, but also to open several databases from several vendors
 from different servers, bringing together all database resources in corporate
 environments 
\layout Description

Application\SpecialChar ~
Constants Small but effective contribution to error free programs
 that are easier to maintain and debug 
\layout Description

Map\SpecialChar ~
Files will for the first time enable you to have full overview of what
 is your code doing, how, and where.
 Indispensable for debugging and understanding of unfamiliar code, and behaviour
 of the compiler.
 
\layout Description

Variable\SpecialChar ~
IDs No more hard-coded ID names! You can specify and reference all
 4GL objects in the runtime! No more copy-and-paste code just to change
 ID names, resulting in higher productivity and code that is compact and
 easier to maintain.
 
\layout Description

Passing\SpecialChar ~
IDs\SpecialChar ~
to\SpecialChar ~
functions One of the implications of Variable IDs, it will allow
 you to name objects passed to functions, even in another module.
 
\layout Description

Embedded\SpecialChar ~
C\SpecialChar ~
code.
 No more messing around with external C code, and no more complex make and
 link process.
 Just embed your C code inside your 4GL code, between the keywords CODE
 ...ENDCODE.
 
\layout Description

MOVE/SHOW/HIDE\SpecialChar ~
WINDOW Enhanced windows manipulation resulting in more usable
 and flexible user interfaces.
 
\layout Description

WHENEVER\SpecialChar ~
SUCCESS/SQLSUCCESS Will give you new options for conditional code
 execution, instead of always depending on error conditions.
 
\layout Description

Multilevel\SpecialChar ~
Menus\SpecialChar ~
User\SpecialChar ~
interface enhancement that will make the coding and using
 applications faster and easier.
 
\layout Description

Extended\SpecialChar ~
DISPLAY\SpecialChar ~
ARRAY control providing many of features of INPUT ARRAY,
 and dynamically setting current and display lines of array.
 This will eliminate the need to use INPUT ARRAY logic where input is not
 needed, making the result safer and the code cleaner and easier to maintain.
 
\layout Description

Extended\SpecialChar ~
USING\SpecialChar ~
syntax provides more options for commonly used date formatting
 in reports and on the display, without the need to write additional code
 to handle this formatting, making especially report writing more productive.
 
\layout Description

Local\SpecialChar ~
functions defining a function to be local to the module opens possibilities
 fore some interesting and productive program structuring, and can also
 contribute to more easily maintainable and problem-free code.
 
\layout Description

get_info\SpecialChar ~
function will enable you to get almost all of the information about
 the state of the running program at runtime.
 It will allow you to write code more flexible than ever before, and achieve
 tasks that were simply not possible with other x4GL compilers.
 
\layout Description

Dynamic\SpecialChar ~
Screen\SpecialChar ~
Fields allow input field to accept more data than it will fit
 in screen field size, making for more usable and flexible user interfaces.
 
\layout Description

Remote\SpecialChar ~
Function\SpecialChar ~
Calls Will make x4GL applications for the first time enter
 the n-tier world.
 Running programs on the same or different machines, or even platforms,
 call each other to execute functions and return results.
 This can not only enhance typical 3-tier role separation, but also facilitate
 multi-processing on the level of the application, application partitioning
 on protocol level and enable wierd things like accessing UNIX database
 from Windows PC that have no ODBC drivers for a specific platform....
 
\layout Description

SELECT/DELETE/UPDATE\SpecialChar ~
USING by linking a record with a table and it's primary
 key, this extreme productive enhancement will automate and simplify multi-table
 data manipulation to the extreme, the way it was always supposed to be,
 gaining productivity and maintainability in the ways you did not experience
 before.
 
\layout Description

ON\SpecialChar ~
ANY\SpecialChar ~
KEY extremely useful with array manipulation, it will simplify user
 interaction logic in many places.
 
\layout Description

Compile\SpecialChar ~
Time\SpecialChar ~
Environment can override many library settings at compile time
 will enable you to control compiler behavior in ways not imaginable with
 other x4GL compilers
\layout Description

SET\SpecialChar ~
SESSION\SpecialChar ~
Option/SET\SpecialChar ~
CURSOR\SpecialChar ~
option Thanks to the ODBC connectivity, it is
 possible to assign and change all attributes of database connection and
 defined database cursor at runtime, resulting in adjustable connection
 attributes at the same time exploring all the power of target ODBC driver
 and database from simple A4GL statements.
 
\layout Description

Application\SpecialChar ~
Partitioning Thanks to user interface layer on one side, and
 ODBC layer on the other, and combined with RPC calling functionality, it
 is now possible to fully utilize all the resources of the enterprise environmen
t, end-to-end, and deploy a4GL programs from one single computer, to hundreds
 of connected computers running different or same layers.
 
\layout Description

Y2K\SpecialChar ~
Runtime\SpecialChar ~
Translation Two digit year support is implemented using run-time
 environment variable setting, enabling you to dynamically decide interpretation
 of year while preserving the code that was not written using 4 digit year
 functionality.
 Aubit 4GL is, of course, fully Y2K compliant.
 
\layout Description

Globbing You can freely mix and use all IDs as module specific or global,
 allowing you do make distinction when naming ID's at runtime, thanks to
 'Variable ID's' and the ability to pass ID's to functions as parameters.
 This functionality alone can save significant time in the coding process,
 and allow you to isolate ID related problems easily.
 
\layout Description

A4GL\SpecialChar ~
Wizard and program templates will allow the generation of full 4GL code
 for typical table oriented screens, just by specifying and compiling the
 template with a few simple definitions, much in the way that users used
 to use the Informix ISQL tool, but with full code generation and unprecedented
 flexibility, even to the point of direct inclusion in other 4GL programs.
 
\layout Description

PDF\SpecialChar ~
Report\SpecialChar ~
Generation Built using PDFlib, allows you to produce reports in
 PDF format with fancy fonts.
\layout Description

GUI (Graphical User Interface) Built using GTK+, this can allow normal 4GL
 programs to substitute a GUI version of the normal ASCII form based screens.
 Alternatively, you can exploit Aubit extensions to the classic language
 to create GTK widgets (e.g.
 cascading menus, pulldown lists, checkboxes, dialogues, etc.)
\layout Description

Packages This is a fetaure borrowed from languages like Java, perl, and
 Python.
 It allows you to call functions from external libraries using normal 
\family typewriter 
CALL function()
\family default 
 syntax.
\layout Description

IDE (Independent Development Environment) Written completely in 4GL, this
 application facilitates rapid development of any x4GL language application,
 while thanks to available source code remaining fully customizable using
 tools and language familiar to any 4GL language developer.
 FIXME: add JL's instructions to "Development Environment" page Please see
 appropriate sections of "A4GL enhancements to standard x4GL language for
 details of all features and syntax.
 
\layout Chapter

Installation
\layout Section

Platforms
\layout Standard

You can install Aubit on recent versions of Linux (e.g Redhat 7 or later,
 SuSE 8 or later), other Unix systems, or Microsoft Windows 95, NT, 2000
 or later with or without Cygwin.
\layout Subsection

Problems
\layout Standard

There is a difficulty for those with Informix IDS v 9 systems.
 Versions earlier than 9.4 do not run on recent versions of Linux while Aubit4GL
 will not compile on earlier versions of Linux.
\layout Subsection

Source or Binary
\layout Standard

You can install A4GL from source or binary.
 Binary is easier if we have created the binary on the same system that
 you have.
 Otherwise you need to get the source and compile it.
\layout Section

Get Source
\layout Standard

Create and select a directory like 
\family typewriter 
/opt/aubit
\family default 
 or 
\family typewriter 
/usr/local/aubit
\family default 
 for installing the source.
 Call this 
\family typewriter 
SRCDIR e.g.
\newline 
export SRCDIR=/opt/aubit
\layout Standard

The Aubit4GL development site is 
\family typewriter 
aubit4gl.sourceforge.net
\family default 
.
\layout Standard

You have 3 ways to get the source:
\layout Itemize

From a source tar ball (e.g.
 aubit4glsrc-n.nn-r.tgz)
\layout Itemize

From a source RPM
\layout Itemize

From CVS.
 
\layout Subsection

Tarball
\layout Standard

If you are getting the source from a gzipped tar ball, point a browser at
 the project home page.
 Follow the links to the download page and down load the file to $SRCDIR
 then:
\layout LyX-Code


\newline 
tar xvfz aubit4glsrc0.47-32.tgz
\layout Standard

The above assumes that you downloaded the tar file into the AUBITDIR directory.
 If you have put it somewhere else supply the full path to the tar file
 e.g.
\layout LyX-Code

tar xvfz /home/informix/aubit4glsrc0.47-32.tgz
\layout Standard

On systems where the z option does not work, run gzip and pipe its output
 into the tar command e.g.:
\layout LyX-Code

gzip -cd aubit4glsrc0.47-32.tgz | tar xvf -
\layout Standard

You can examine the contents of a gzipped tarball by using the command:
\layout LyX-Code

tar tvfz aubit4glsrc0.47-32.tgz
\layout Subsection

SRPM
\layout Standard

As for the tar ball, point the browser at the project home page.
 Follow the links to the download page and down load the file to $SRCDIR
 then:
\layout LyX-Code

rpm -Uvh aubit4glsrc0.47-32.rpm
\layout Standard

The U option is really intended for update but it works equally well for
 a new install and saves you the bother of learning a separate install syntax.
 The v option (verbose) will tell you what rpm is doing.
 The h option will display conforting hash marks on screen for blocks of
 characters loaded.
 
\layout Standard

You can examine the contents of an rpm file before intalling it, the command
 is:
\layout LyX-Code

rpm -qpl aubit4glsrc0.47-32.rpm
\layout Subsection

CVS
\layout Standard

You can get the bleeding edge current version of Aubit4GL from the CVS (Concurre
nt Versions System).
 To do this:
\layout Enumerate

cd $SRCDIR
\layout Enumerate

Set an environment variable CVSROOT as follows:
\newline 

\family typewriter 
export CVSROOT=:pserver:anonymous@cvs.sourceforge.net:/cvsroot/aubit4gl
\layout Enumerate

Login to the aubit cvs pserver
\newline 

\family typewriter 
cvs login
\family default 

\newline 
When it prompts for a password, just hit RETURN.
\layout Enumerate

Checkout the module you want: aubit4glsrc or aubit4gldoc
\newline 

\family typewriter 
cvs -z3 co aubit4glsrc
\layout Standard

Be warned that from time to time the cvs version may be broken.
 Development is ongoing and you cannot make an omelet without breaking eggs.
\layout Standard

Note: Put the CVSROOT value in a file called (say) AUBITCVSROOT.
 Then whenever you wish to checkout or update from cvs, you can set CVSROOT
 using the command
\newline 

\family typewriter 
$export CVSROOT=$(cat AUBITCVSROOT)
\layout Standard

The above works for ksh and bash.
 If your shell does not accept the $( ...
 ) syntax, then use backticks instead:
\newline 

\family typewriter 
$CVSROOT=`cat AUBITCVSROOT` export CVSROOT
\layout Subsection

MARS Landings
\layout Standard

An alternative location for obtaining binaries of Aubit4GL builds is: 
\family typewriter 
www.aubit.com/aubit4gl/
\family default 
 where you can find 
\emph on 
Mike Aubury's Reasonably Stable
\emph default 
 (MARS) tarballs.
 This site is a good place to look for versions to run on older Linux versions
 (e.g.
 SuSE 7.1 or RedHat 7.3).
 Mike is currently developing on a SuSE 9.0 platform - so your best chances
 of compiling his CVS source will be on that platform.
\layout Section

Prerequisites 
\layout Subsection

C Compiler
\layout Standard

The source for Aubit4GL is written in the C programming language with some
 Unix shell scripts.
 So if you need to install from source, you will need a full GNU GCC or
 equivalent compiler and GNU make.
 (These tools come with nearly all distributions of Linux.)
\layout Subsection

Options
\layout Standard

The following software and/or libraries can be exploited by Aubit 4GL.
 They will be discovered and linked by the autoconfig 
\family typewriter 
configure
\family default 
 script when you install A4GL:
\layout Itemize

ODBC manager libraries for database connection: unixODBC, iODBC (or Windows
 ODBC)
\layout Itemize

Native database connections for Informix, PostgreSQL, SAPDB, or SQLite
\layout Itemize

PDF library for fancy reports
\layout Itemize

Curses Library (for screen DISPLAY, MENU, etc statements)
\layout Itemize

GTK+ Library (for GUI frontend)
\layout Itemize

Jabber IM library (for instant messaging)
\layout Itemize

SUN RPC package (for n-tier applications using Remote Procedure Calls)
\layout Itemize

RPC-XML libraries (for communicating with XML format files)
\layout Itemize

Perl interpreter
\layout Itemize

SWIG libraries (for Perl output instead of C )
\layout Standard

Run the configure script to see which of these you have (or don't have).
 If configure reports something missing when you know you have it, you may
 have installed it in as unexpected location.
 Rerun configure
\newline 

\family typewriter 
./configure --help
\layout Standard

To see how to point autoconfig to where you have installed the library.
 For example, if you installed pdflib in 
\family typewriter 
/usr/john/pdflib
\family default 
 then you can run configure with the command:
\newline 
.
\family typewriter 
/configure --with-pdflib=/usr/john/pdflib
\layout Standard

On Linux systems the command 
\family typewriter 
rpm -qa
\family default 
 will give you a (huge) list of all software installed using rpm (RedHat
 Package Manager).
 To find any rpms related to, say, PDF run the the following:
\newline 

\family typewriter 
rpm -qa | grep -i pdf
\layout Standard

On Linux systems you can find non rpm installed software with the locate
 command:e.g.
\newline 

\family typewriter 
locate pdf
\layout Subsection

Database
\layout Standard

For most people, the most important component of the informix 4GL language
 is its embedded SQL.
 (At whim, you can put SQL code into any x4GL program).
 For this feature to work, you must have a database engine which both the
 A4GL compiler and your 4GL program can connect to.
 Classical Informix 4GL has a builtin native connection to Informix engines
 (SE, or IDS 7, or IDS 9).
 
\layout Subsubsection

Engines
\layout Standard

Informix, Ingres, PostgreSQL, and Sybase engines have their origins in Unix
 at Berkeley in the 1970s.
 They share some features which are counter to the ANSI SQL standards which
 were later defined in 1986.
 
\layout Itemize

Lower Case.
 By default, they downshift all words before parsing (unless the words are
 protected by quotes).
 This is natural for Unix users but is the inverse of the ANSI standard
 which upshifts all unquoted words.
 The standard was dominated by mainframe system vendors (IBM DB2, Oracle,
 SAP, etc).
\layout Itemize

Database concept.
 Each instance of an Informix or Postgres engine can have many databases.
 In contrast, IBM, Oracle, SAP, etc have only one database per engine instance.
 The Informix concept of separate databases is implemented on these other
 systems each as a SCHEMA.
\layout Itemize

Outer Joins.
 These were originally a controversial concept and not defined in the 1986
 SQL standard.
 The 1992 SQL standard added a JOIN clause to SQL SELECT statements to implement
 outer joins.
 Prior to that each database vendor had its own extension to the standard
 to implement outer joins.
\layout Itemize

Temporary tables.
 The SQL standard did not provide for capturing the rows from a SELECT statement
 into a tempory table.
 Informix and Postgres both allow this but with differing syntax.
\layout Itemize

SERIAL datatype.
 Not part of the SQL standard but an Informix extension.
 Postgres has a SERIAL type but it is used differently.
 With Informix, you supply a zero as the SERIAL value, and the engine replaces
 the zero with the next serial number.
 With Postgres, you don't supply a value and the engine supplies the next
 serial number as a default.
 If you supply a zero, it is accepted!
\layout Itemize

Functions.
 Informix has a number of functions TODAY, CURRENT, USER, MDY(m,d,y), EXTEND,
 etc which are not in the SQL standard or have different names (e,g NOW(),
 CURRENT_DATE, etc).
\layout Itemize

MATCHES clause.
 Informix, in addition to the SQL standard LIKE clause, allows you to SELECT
 rows which match patterns using the Unix shell wildcard symbols ([]*?).
 PostgreSQL has a ~ operator which matches RE (regular expression) patterns
 in the manner of perl.
\layout Itemize

Mandatory FROM clause.
 In Informix, the SELECT statement must have a FROM clause.
 Postgres (and others like Sybase) does not require a FROM clause.
\layout Itemize

MONEY datatype.
 A variant on DECIMAL which is suitable for financial systems.
\layout Standard

A4GL allows you to connect to different database engines.
 This leads to difficulties when you are coding into your 4GL programs any
 of the above Informix idioms which are not part of the SQL standard.
 To use Aubit4GL with non Informix engines, you need to confine yourself
 to just the ANSI standard, or rely on Aubit4GL's translation mechanism
 to convert to Informix, or get a special version of the engine which supports
 the Informix variations.
 Nearly all major applications written in 4GL exploit the Informix SERIAL
 behaviour and the 4GL code usually relies on getting the serial value for
 the 
\family typewriter 
sqlca.sqlerrd
\family default 
 record.
 For this you need an Informix compatible engine.
\layout Standard

Aubit4GL can connect directly to
\layout Itemize

Informix SE, IDS 7, or IDS 9.
 Best of breed commercial engines with full SQL92 compliance.
 You must purchase a licence from IBM-Informix in order to use it.
 Has a multi-threaded architecture which gives it a performance advantage
 over all of its rivals.
 Now that it is owned by IBM, it will gradually be absorbed into IBM's own
 DB2 range of products and will gradually disappear.
\layout Itemize

PostgreSQL a free opensource engine now with full SQL92 compliance.
 Fully free and opensource.
 Shares its origins with Ingres at UCB (University of California Berkeley).
 Unlike Informix IDS, it is not based on a threaded architecture and each
 frontend connection results in a separate backend process being spawned
 to service it.
 You can get postgresql from :
\newline 

\family typewriter 
www.postgresql.org.

\family default 
 
\family typewriter 

\newline 

\family default 
At the time of writing, the current version is 7.4.2.
 Each Linux distribution has its own RPMs which you get from the distribution
 site (try a Google search).
 There is a special version of PostgreSQL patched to imitate the Informix
 behaviour mentioned above: The site for this project is: 
\newline 

\family typewriter 
gborg.postgresql.org/projects/pginformix/download/download.php
\family default 

\newline 
and you can get the source tarballs there.
 Get the RPMs from
\family typewriter 
 
\family default 

\newline 

\family typewriter 
informix.postgresintl.com.
\family default 

\newline 
These RPMs are known to install OK on SuSE 9.0 and you may be lucky on similar
 systems of equivalent vintage.
 The RPMS are patched from version 7.4.
 If you are installing the RPMs on a system with PostgreSQL RPMs already
 installed, you may need to add the 
\family typewriter 
--oldpackage
\family default 
 argument to the rpm -Uvh command if the installed version is 7.4.1 or 7.4.2.
 It is hoped that future versions of PostgreSQL will fold these Informix
 patches into the regular distribution.
 
\layout Itemize

SAPDB a recently free and opensource engine up to version 7.4 with threaded
 architecture.
 The engine is SAP's tried and true commercial product and is solid and
 very fast.
 Unfortunately, MySQL have acquired the rights to develop the next version
 of SAPDB (to be renamed MAXDB) and the interfaces will no longer be free
 (GPL but not LGPL licensed).
 Best avoided unless a project based on the LGPL base is spawned.
\layout Itemize

SQLite a free and opensource embeddable engine with nearly full SQL92 compliance.
 A small engine (only 25K lines of C source code) which we actually deliver
 statically linked into our binary distributions of Aubit4GL.
 It supports most of the SQL92 standard but is typeless (everything is either
 a char type or numeric and the distinction is not enforced).
 Get it from 
\family typewriter 
www.sqlite.org
\layout Itemize

Any other database engine with an ODBC interface including PREPARE and SCROLL
 CURSOR statements.
\layout Subsubsection

No SQL
\layout Standard

It is possible to use 4GL without using any embedded SQL.
 The 4GL language can be used as a general purpose programming tool.
 A dummy set of SQL functions is invoked with the A4GL_SQLTYPE=nosql option.
\layout Standard

More usually of course, you will want to use SQL within your 4GL programs.
 You can use ODBC or one of several possible native connections to a RDBMS
 (Relational Database Management System).
 You tell the Aubit4GL compiler (or programs compiled by it) where to send
 its SQL statements by setting an environment variable: A4GL_SQLTYPE.
\layout Subsubsection

ODBC
\layout Standard

ODBC (Open Database Connectivity) is an X/Open and ANSI standard CLI (Call
 Level Interface) for communicating with database backends through a common
 library called a Driver Manager which in turn uses another library (called
 a driver) appropriate to the backend desired.
 All ODBC libraries implement common functions (an API or Application Programmin
g Interface) with the details of the functions tailored to the particular
 backend,
\layout Standard

ODBC comes in two broad categories:
\layout Enumerate

Driver Managers (e.g.
 unixODBC, iODBC, Windows ODBC) which act as a go-between and can plug in
 vendors' drivers
\layout Enumerate

Direct (e.g.
 Informix, PostgreSQL, SAPDB, SQLite) which link directly to the vendors
 drivers
\layout Standard

Aubit4GL can handle embedded SQL with a library of ODBC (Open Database Connectiv
ity) functions intended for passing to an implementation of ODBC.
 You need to install the ODBC application as well as the database vendor's
 odbc library files.
 (These latter may or may not come with the ODBC application).
\layout Standard

On Unix/Linux platforms the ODBC options supported are
\layout Itemize

unixodbc a free opensource ODBC manager with a supplied SQL frontend (good
 for testing the database).
 See 
\family typewriter 
www.unixodbc.org
\layout Itemize

iodbc an ODBC manager from OpenLink, commercial but free to use.
 See 
\family typewriter 
www.iodbc.org
\layout Itemize

ifxodbc direct ODBC to Informix engines (using libraries from Informix CSDK
 )
\layout Itemize

pgodbc direct ODBC to PostgreSQL engines (free opensource)
\layout Itemize

sapodbc direct ODBC with SAPDB (a free opensource Database Engine up till
 version 7.3)
\layout Subsubsection

ODBC config files
\layout Standard

ODBC configuration is held in files: 
\family typewriter 
/etc/odbcinst.ini
\family default 
 (driver info) and 
\family typewriter 
/etc/odbc.ini
\family default 
 (datasources).
 Each user may have his own configuration in 
\family typewriter 
~/.odbc.ini
\family default 
 (where ~ means the user's home directory).
 Applications often supply nice GUI applications to simplify editing these
 files.
 Unfortunately implementation of ODBC is so inconsistent between database
 suppliers, that these GUIs are useless.
 Use vi and edit the files by hand.
 Then observe the notes for each vendor and copy or link the files appropriately
l
\layout Paragraph

Sample odbcinst.ini
\layout Standard

The file odbcinst.ini holds a list of ODBC drivers.
 An example:
\layout LyX-Code

[Informix]
\newline 
Driver=/opt/informix/lib/cli/libifcli.so
\newline 
Setup=/opt/informix/lib/cli/libifcli.so
\newline 
APILevel=1
\newline 
ConnectFunctions=YYY
\newline 
DriverODBCVer=03.00
\newline 
FileUsage=0
\newline 
SQLLevel=1
\layout LyX-Code

smProcessPerConnect=Y
\layout LyX-Code

 
\newline 
[PostgreSQL]
\newline 
Driver=/usr/lib/libodbcpsql.so
\newline 
Setup=/usr/lbi/libodbcpsqlS.so
\newline 
FileUsage=1
\newline 
Threading=2
\layout LyX-Code

 
\newline 
[SAPDB]
\newline 
Driver=/opt/sapdb/interfaces/odbc/lib/libsqlod.so
\newline 
Setup=/usr/lib/libsapdbS.so
\newline 
FileUsage=1
\newline 
CPTimeout=
\newline 
CPReuse=
\layout Standard

The Informix drivers will not tolerate whitespace (blanks or tabs) in the
 above file.
\layout Subsubsection

ODBC Datasources
\layout Standard

Access to ODBC databases is configured in odbc.ini files which contain all
 the information required by the vendor's drivers to allow a connection.
 For example:
\layout LyX-Code

[infstores]
\newline 
Description=Informixstores demo database
\newline 
Driver=/opt/informix/lib/libifcli.so
\newline 
Database=stores7
\newline 
LogonID=fred
\newline 
pwd=zxcv132
\newline 
ServerName=elvis
\newline 
CLIENT_LOCALE=en_us.8859-1
\newline 
TRANSLATIONDLL=/opt/informix/lib/esql/igo4a304.so
\newline 
[pgstores]
\newline 
Description=Postgres stores demo database
\newline 
Driver=PostgreSQL
\newline 
Trace=Yes
\newline 
Tracefile=sql.log
\newline 
Database=pgstores
\newline 
Servername=localhost
\newline 
UserName=
\newline 
Password=
\newline 
Port=5432
\newline 
Protocol=6.4
\newline 
ReadOnly=No
\newline 
RowVersioning=No
\newline 
ShowSystemTables=No
\newline 
ShowOidColumn=No
\newline 
FakeOidIndex=No
\newline 
ConSettings=
\newline 
[SAPstores]
\newline 
Description=SAP stores demo database
\newline 
Driver=SAPDB
\newline 
ServerNode=elvis
\newline 
ServerDB=stores
\layout LyX-Code

\layout Standard

In principle, the Server property should be the name from the odbcinst.ini
 list of drivers, but the Informix driver needs the full path to the driver
 library file.
\layout Standard

The Informix driver will not find the /etc/odbc.ini file unless you point
 to it with the environment variable: ODBCINI
\layout LyX-Code

export ODBCINI=/etc/odbc.ini
\layout Standard

Note that the different vendors use different keywords for naming the same
 things, and they have different sets of properties.
\layout LyX-Code

\layout LyX-Code

\layout Subsubsection

Informix ODBC Drivers
\layout Standard

Informix give a choice of 4 ODBC drivers.
 They are installed in $INFORMIXDIR/lib/cli (usually /opt/informix/lib/cli
 on Linux systems).
 There appear to be 7 files but 3 of them are links to other files.
 Informix does not use separate files for setup; each library file contains
 both driver and driver setup functions.
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="5">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Static
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Dynamic
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Threaded
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libthcli.a
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libthcli.so
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

or 
\family typewriter 
oclit09b.so
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Unthreaded
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libcli.a
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

or 
\family typewriter 
libifcli.a
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libifcli.so
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

or 
\family typewriter 
iclis09b.so
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Paragraph

Informix Driver Manager
\layout Standard

Informix supplies a driver manager replacement (DMR) file with 2 links:
\newline 

\family typewriter 
libifdmr.so
\family default 

\newline 

\family typewriter 
idmrs09a.so
\layout Subsubsection

PostgreSQL Drivers
\layout Standard

PostgreSQL ODBC drivers are installed by default in /usr/lib
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Static
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Dynamic
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

driver
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libodbcpsql.a
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libodbcpsqlso
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

driver setup
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libodbcpsqlS.a
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libodbcpsqlS.so
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

Note that there is a separate file Postgres driver setup.
\layout Subsubsection

SAPDB Drivers
\layout Standard

SAPDB drivers are installed by default in 
\family typewriter 
/opt/sapdb/interfaces/odbc/lib/
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Static
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Dynamic
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Driver
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libsqlod.a
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
libsqlod.so
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

For SAPDB, use driver setup file from unixODBC: 
\family typewriter 
/usr/lib/libsapdbS.so
\layout Standard

SAPDB will not find its odbc.ini file unless it is in 
\family typewriter 
/usr/spool/sql/ini
\family default 
 (which it will have created at install time).
 You must either copy or link 
\family typewriter 
/etc/odbc.ini
\family default 
 to that directory:
\layout LyX-Code

cd /usr/spool/sql/ini
\newline 
ln -s /etc/odbc.ini .
\layout Standard

On Linux systems 
\family typewriter 
/usr/spool
\family default 
 with be a symbolic link to 
\family typewriter 
/var/spool
\layout Subsubsection

ODBC Warning
\layout Standard

There are different versions of ODBC (2.5, 3.0, 3.5) - each with its own peculiarit
ies.
 There are also big differences between what is 
\emph on 
required
\emph default 
 and what is 
\emph on 
optional
\emph default 
 - not all drivers implement the full ODBC functionality.
\layout Subsubsection

Native
\layout Standard

Aubit 4GL can process DATABASE statements directly if it has a native interface
 to the database engine.
 To achieve this, we need the database vendor's ESQL/C compiler (Embedded
 SQL in C) available when we compile the A4GL compilers.
 
\layout Standard

Embedded SQL/C is an ANSI SQL standard for allowing you to embed SQL statements
 into C source files.
 The SQL statements are enclosed within 
\family typewriter 
EXEC SQL ...
 END SQL
\family default 
 tags.
 Traditionally the ESQL/C file has a 
\family typewriter 
.ec
\family default 
 suffix.
 A vendor supplied pre-compiler then replaces the SQL statements with appropriat
e calls to functions in the vendor's libraries.
 The result of the compile is a C code 
\family typewriter 
.c 
\family default 
file which can be compiled and linked to make executables, modules, or 
\family typewriter 
.so
\family default 
 or 
\family typewriter 
.a
\family default 
 library files.
\layout Standard

At install time, the Aubit 4GL configure program looks for vendors ESQLC
 files and builds an interface to each of the vendor databases detected.
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Backend
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ESQL compiler
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Suffix
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Informix
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
/opt/informix/bin/esql
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
.ec
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PostgreSQL
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
/usr/bin/ecpg
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
.pgc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SAPDB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
/opt/sapdb/interfaces/precompiler/bin/cpc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

.
\family typewriter 
cpc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

SQLite??? Help here please!
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="9" columns="4">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

A4GL Native Connections 
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SQLTYPE 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RDBMS
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Compiler
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Comment
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

esql
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Informix 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

esqlc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

esqlPG
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PostgreSQL
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ecpg
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

pg
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PostgreSQL
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ecpg
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

esqlSAP
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SAPDB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

cpc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

esqlQ
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Querix
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

esqlQ
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sqlite
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SQLite
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

???
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sqliteS
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SQLite
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

???
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Setup? Static link to 4glc?
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

The environment variable A4GL_SQLTYPE determines which connection is used
 when program (or 4glc compiler) is run.
\layout Subsection

Curses
\layout Standard

If you want A4GL to use 4GL's character screen control statements (e.g.
 MENU, DISPLAY, DISPLAY\SpecialChar ~
ARRAY, etc), you will need the curses library: NCURSES
 v 1.78 or later.
\layout Subsection

PDFLib
\layout Standard

An extension to the 4GL language allows A4GL to exploit a PDF (Portable
 Data Format) library to produce fancy reports.
 This is an optional feature and if unavailable when you build the A4GL
 compiler, a library of do-nothing dummy PDF functions will be builtin to
 the compiler.
\layout Standard

To get the PDFLib library go to the site: 
\family typewriter 
www.pdflib.org
\layout Subsection

GTK
\layout Standard

A4GL has the ability to:
\layout Itemize

display normal screen statements using Graphical Display widgets.
\layout Itemize

support a set of extensions to the language to interface with Graphical
 objects such as Checkboxes, Pulldowns, Buttons, etc.
\layout Standard

To exploit the graphical capabilities of A4GL, you need the GNOME GTK (Graphical
 Tool Kit) development library available at installation and run time.
\layout Subsection

Install Source 
\layout Standard

Having downloaded the source, whether from a tarball or via cvs
\layout Itemize

cd $SRCDIR/aubit4gl
\layout Itemize

Read the file README or README.txt
\layout Itemize

Run the configure command:
\newline 

\family typewriter 
./configure
\begin_deeper 
\layout Itemize

This will search for all the prerequisites and options and build Makefiles
 appropriately
\layout Itemize

configure has a lot of options.
 Try: 
\family typewriter 
./configure --help
\layout Itemize

The configure script will report all the prerequisites and options it finds
 and report any missing elements.
 If there are prerequisites missing or in non-standard locations, you can
 deal with this and run configure again.
\end_deeper 
\layout Itemize

If configure seems OK then run the make command:
\newline 

\family typewriter 
make
\newline 

\layout Itemize

There are other arguments to make which may be useful to you, especially
 if things go wrong and you have to alter your setup (e.g.
 by installing some missing optional software):
\newline 

\family typewriter 
make cleanall
\newline 
make log
\family default 

\newline 
The cleanall target will undo the effects of a previous make.
\newline 
The log target will save all the output from make into a file 
\family typewriter 
make.log
\family default 
 which you can email to the aubit email lists when you want help with an
 install problem.
\layout Itemize

You will know the make succeeded if you see a message like the following
\newline 

\family typewriter 
A4GL compiled successfully
\layout Itemize

If make runs with no untoward error messages then you can install.
 You need root permissions to do this:
\newline 

\family typewriter 
su
\newline 
make install
\newline 

\layout Standard

The install program will install the compiler in /opt/aubit4gl.
 It will create 2 links in /usr/local/bin:
\newline 

\family typewriter 
/usr/local/bin/aubit
\family default 
 and 
\family typewriter 
/usr/local/bin/aubit-config.
\layout Standard

You may now remove the contents of $SRCDIR - they have served their purpose.
\layout Subsection

/usr/local/bin/aubit
\layout Standard

This program reads the Aubit configuration files and sets its environment
 variables so that the commands you submit to it will run correctly.
 e.g.
\layout LyX-Code

aubit 4glc hello.4gl -o hello
\layout Standard

will compile the module hello.4gl and create an executable hello.
 The 
\family typewriter 
aubit
\family default 
 program obviates the need to have 
\family typewriter 
4gl
\family default 
c and its friends in your PATH.
 
\layout Standard

Note: If you put 
\family typewriter 
/opt/aubit4gl/bin
\family default 
 in your PATH, and set up your environment vars to match the contents of
 
\family typewriter 
aubitrc
\family default 
, then you could dispense with the aubit command and simply type:
\layout LyX-Code

4glc hello.4gl -o hello
\layout Subsection

/usr/local/bin/aubit-config
\layout Standard


\family typewriter 
/usr/local/bin/aubit
\family default 
 uses 
\family typewriter 
/usr/local/bin/aubit-config
\family default 
 to find the Aubit configuration file settings and sets its own environment
 variables to match.
 You can use it to inspect 1 or all of these settings.
 The values set are held the file:
\family typewriter 
/etc/opt/aubit4gl/aubitrc
\family default 
 which is created by the make install command.
 
\layout Standard

Run the command 
\family typewriter 
aubit-config -a
\family default 
 to see what has been configured.
\layout Standard

Run the command 
\family typewriter 
aubit-config A4GL_SQLTYPE
\family default 
 to get the value of that variable.
\layout Itemize

configure your .a4glrc defaults; they are used in the compiling of the compiler,
 and later when the 4glpc script is invoked.
\begin_deeper 
\layout Itemize

Especially be careful to point ODBC_LIB_DIR to location of your ODBC shared
 library: For Openlink it should be 
\family typewriter 
libiodbc.so
\family default 
 file in openlink_inst_dir/lib.
 
\layout Itemize

The a4glrc file in $AUBITDIR is read first.
 If you have one in $HOME, it will override the one in $AUBITDIR
\end_deeper 
\layout Itemize

If your make process exited with message "Aubit 4GL compiler is now compiled",
 go to section "Testing the installation".
 
\layout Standard

Please be aware that to perform database related operations, you will need
 in addition to a database engine installed, and a database created:
\layout Itemize

an ODBC manager and ODBC driver installed
\layout Itemize

odbc.ini file appropriate for your database, database engine and ODBC manager.
 
\newline 
You can use odbc.ini.example file in "test" directory as example.
 This will unfortunately not eliminate the need to read the documentation
 for these products.
 
\layout Section

Install Binaries
\layout Standard

We will in future distribute binaries as RPM (RedHat Package Manager) files.
 The command to install an RPM file is:
\newline 

\family typewriter 
rpm -Uvh aubit4glbin-0.47-32.rpm
\layout Itemize

Prerequisites are same as for Installation: 
\layout Itemize

Please note: the binary only distribution is not available at the moment.
 Please contact the development team if you can assist in making RPM distributio
n
\layout Itemize

copy the a4glrc.sample to $HOME/.a4glrc 
\layout Itemize

When your compiler is installed, read "Testing the installation of compiler"
 
\layout Itemize

Please see Aubit 4GL download page for available binary builds.
 I Plan to provide both tar.gz and RPM, and make this scriptable using main
 makefile, and stuff it in corn, so I can provide nightly builds...
\layout Subsection

Testing the compiler 
\layout Itemize

cd to $AUBITDIR/test directory:
\newline 

\family typewriter 
cd $AUBITDIR/test
\layout Itemize

compile the hello.4gl program:
\newline 

\family typewriter 
aubit 4glc hello.4gl -o hello
\layout Itemize

Test the form compiler: 
\newline 

\family typewriter 
aubit fcompile form
\layout Itemize

Run the hello program: 
\newline 

\family typewriter 
./hello
\family default 
 
\newline 
and you should see a little program with with three options in the menu
 on the top: 
\newline 

\family typewriter 
Hello test: window prompt form config exit
\family default 

\newline 
If you do, congratulations, you have just compiled your first 4GL program
 using Aubit 4GL!
\layout Standard

There are few more test files there.
 Most important is 
\family typewriter 
hello_db.4g
\family default 
l, that is connecting to the database.
 For it to compile and run, you will need to have a database, and ODBC DSN
 configured.
 
\layout Chapter

Configuration
\layout Section

Warning: 
\layout Standard

This chapter is under drastic revision.
\layout Standard


\series bold 
New stuff starts here
\layout Standard

Classical Informix 4GL does the following:
\layout Enumerate

Processes Informix SQL statements embedded in 4GL code.
\layout Enumerate

Outputs a program in the C language.
\layout Enumerate

Connects to an Informix Database Engine (IDS or SE)
\layout Enumerate

Interfaces with the user using curses on a terminal (or xterm emulator)
\layout Standard

Aubit 4GL does all of this but is much more versatile.
\layout Enumerate

It can process other dialects of SQL: (PostgreSQL, Oracle, SAPDB, ODBC)
\layout Enumerate

It can output (by design at least) in Perl.
 One day it may produce Java.
\layout Enumerate

It can connect to other database engines:(PostgreSQL, Oracle, SAPDB, SQLite,
 ODBC)
\layout Enumerate

It can interface using Graphics (via GTK Gnome Tool Kit) or even a no curses
 console.
 In addition, a special graphical menu structure is available.
\layout Enumerate

It can optionally output reports in PDF format (using A4GL enhancements
 to the 4GL language.
\layout Enumerate

It can use RPC (Remote Procedure Calls) for n-tier applications
\layout Standard

By the magic of Dynamically Linked Libraries (called shared objects in Unix/Linu
x), most of the these options can be chosen at runtime.
 Different libraries implement the same set of required functions for each
 option.
\layout Standard

The programmer or the user can choose from these myriad options by editing
 by setting environment variables before invoking the compiler (or the compiled
 program).
\layout Standard

Usually however, you setup the default options in 
\family typewriter 
aubitrc
\family default 
 files then on Unix/Linux systems you invoke the 
\family typewriter 
aubit
\family default 
 program to run the programs you want to call.
 The aubit program sets environment variables from the aubitrc files and
 also ensures the library files are available.
\layout Subsection

configurator
\layout Standard

Aubit 4GL supplies a 4GL program configurator which shows you all the switches
 and their permitted values.
 You run it with the command:
\layout LyX-Code

aubit configurator
\layout Standard

Note on Microsoft systems there is no 
\family typewriter 
aubit
\family default 
 script.
 configurator will be in your PATH, so just type 
\family typewriter 
configurator
\layout Subsection

A4GL_SQLTYPE=nosql
\layout Standard

This switch chooses where to send SQL embedded in the 4GL code.
 Default is nosql.
 (which means use dummy do-nothing functions for SQL code).
\layout Standard

Other options are:
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Option
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Database Backend
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

esql
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Informix esql/c native 
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

pgodbc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

postgreSQL odbc
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sapodbc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

SAPDB odbc
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

iodbc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Openlink ODBC
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

unixodbc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

unixodbc (free opensource)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ifxodbc
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Informix CLI (now called ODBC)
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

odbc32
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Only on Windows systems
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

A4GL_UI=CONSOLE
\layout Standard

This switch determines which frontend you are using.
 Options are CONSOLE, TUI, GTK.
\layout Standard

The CVS also supports 2 Higher Level options: HL_TUI and HL_GTK.
 These are under development and will eventually supercede the current TUI
 and GTK options respectively.
\layout Standard


\series bold 
old stuff resumes here ***********************************
\layout Section

aubitrc files
\layout Standard

The aubit program sets A4GL_xxx environment variable then executes the arguments
 on the command line.
 It reads configuration options in the following files in order:
\layout Enumerate


\family typewriter 
/etc/opt/aubit4gl/aubitrc
\layout Enumerate


\family typewriter 
$AUBITDIR/etc/aubitrc (AUBITDIR=/opt/aubit4gl by default)
\layout Enumerate


\family typewriter 
~/.aubit4gl/aubitrc
\layout Enumerate


\family typewriter 
./.aubitrc
\layout Enumerate

Environment variables
\layout Standard

As each of these files is read, it overwrites the values of previous files.
 The environment variables have final precedence.
\layout Standard

To set up your A4GL system, you edit these files with text editor (e.g.
 vi)
\layout Standard

For system wide configuration, edit /etc/opt/aubit4gl/aubitrc whereas for
 personal idiosyncrasies edit your home directory's .aubitrc file.
\layout Standard

****** new again! ********************************
\layout Subsection

UNIX environment 
\layout Standard

The following list of environment variables was derived from the configurator
 program's description file.
\layout List
\labelwidthstring 00.00.0000

A4GL_AUTOBANG=YES|NO UI/TUI/MENU 
\newline 
Enable automatic ! for command entry(like dbaccess menus) for all applicable
 statements
\layout List
\labelwidthstring 00.00.0000

A4GL_CINT COMPILE/RUNTIME 
\newline 
Full path to CINT C-code interpreter, if installed, othewise 'no'.
 Used by 4glc compiler to run C compiled code after compilation.
\layout List
\labelwidthstring 00.00.0000

A4GL_C_COMP COMPILE 
\newline 
Name of the executable of C compiler to use.
 Note that 4glpc uses $CC
\layout List
\labelwidthstring 00.00.0000

A4GL_EXE_EXT COMPILE 
\newline 
Extension to use for executable files compiled by Aubit compiler.
 Aubit default extensions for compiled resources (forms,menus,help) and
 objects as used by Amake and Aubit compiler (see resources.c) Amake does
 NOT read this file (?-check) note that composite variables A4GL_FRM_EXT
 and A4GL_MNU_EXT exist only in/for Amake defaults:
\newline 
A4GL_MNU_BASE_EXT=.mnu
\newline 
A4GL_HLP_EXT=.hlp
\newline 
A4GL_FRM_BASE_EXT=.afr
\newline 
A4GL_XML_EXT=.xml
\newline 
A4GL_PACKED_EXT=.dat
\newline 
A4GL_OBJ_EXT=.ao
\newline 
A4GL_LIB_EXT=.aox
\newline 
A4GL_SOB_EXT=.aso
\newline 
A4GL_SOL_EXT=.asx
\newline 
A4GL_EXE_EXT=.4ae
\newline 
To emulate Informix p-code extensions (for instance, to re-use legacy make
 files) you would use this settings; note that doing this is not recomended
 and that created files will still be in Aubit format, not Informix one:
\newline 
A4GL_MNU_EXT=<no equivalent>
\newline 
A4GL_HLP_EXT=.iem
\newline 
A4GL_FRM_BASE_EXT=.frm
\newline 
A4GL_XML_EXT=''
\newline 
A4GL_PACKED_EXT=''
\newline 
A4GL_OBJ_EXT=.4go
\newline 
A4GL_LIB_EXT=<no (standard) equivalent>
\newline 
A4GL_SOB_EXT=<no equivalent>
\newline 
A4GL_SOL_EXT=<no equivalent>
\newline 
A4GL_EXE_EXT=.4gi
\layout List
\labelwidthstring 00.00.0000

A4GL_FORMTYPE FORMS/RUNTIME 
\newline 
Determine which runtime library to use for reading forms $AUBITDIR/lib/libFORM_?.
so Default forms driver to be loaded When used: run-time only
\newline 
Options: (GENERIC), NOFORM, XDR
\newline 
Generic implies that format specified with A4GL_PACKER will be used
\layout List
\labelwidthstring 00.00.0000

A4GL_FRM_BASE_EXT RUNTIME/COMPILE/FORMS 
\newline 
Default form extension (for all packing types)
\layout List
\labelwidthstring 00.00.0000

A4GL_HELPTYPE HELP/RUNTIME 
\newline 
Determine which runtime library to use for displaying help messages $AUBITDIR/li
b/libHELP_?.so
\layout List
\labelwidthstring 00.00.0000

A4GL_HLP_EXT HELP/RUNTIME/COMPILE 
\newline 
Specify the default extension for a help file
\layout List
\labelwidthstring 00.00.0000

A4GL_INIFILE COMPILE/RUNTIME 
\newline 
Environment variable optionaly specifiying aubitrc file to use
\layout List
\labelwidthstring 00.00.0000

A4GL_LEXDIALECT ESQL/COMPILE 
\newline 
Determine which ESQL/C dialect to use $AUBITDIR/lib/libESQL_?.so When A4GL_LEXTYP
E=EC, specify type of EC compiler to be used.
 Ignored if A4GL_LEXTYPE is not set to EC When used: compile-time only
\newline 
Options: (INFORMIX), POSTGRES, SAPDB, QUERIX
\layout List
\labelwidthstring 00.00.0000

A4GL_LEXTYPE COMPILE 
\newline 
Determine what language to convert the 4GL code into $AUBITDIR/lib/libLEX_?.so
 Default output language driver for 4gl compiler: When used: compile-time
 only
\newline 
Options: (C), PERL, EC, CS
\newline 
Note CS means C#
\newline 
Note: EC (Embedded SQL C) can be Informix ESQL/C, SAP DB pre-compiler, Querix
 esqlc or PostgreSQL ecpg.
 Using EC will limit Aubit DB connectivity at run-time to that of used EC
 compiler, ignoring setting of A4GL_SQLTYPE
\layout List
\labelwidthstring 00.00.0000

A4GL_LIB_EXT COMPILE 
\newline 
Extension to use for libraries created by Aubit compiler
\layout List
\labelwidthstring 00.00.0000

A4GL_LINK_LIBS COMPILE 
\newline 
Libraries to link against when producing executables
\layout List
\labelwidthstring 00.00.0000

A4GL_MENUTYPE MENU/COMPILE/RUNTIME 
\newline 
Determine library to use for menuhandlers (not normal 4GL menus) $AUBITDIR/lib/l
ibMENU_?.so Default menu driver to be loaded: When used: run-time only
\newline 
Options: (NOMENU), XDR, GENERIC
\newline 
Generic implies that format specified with A4GL_PACKER will be used
\layout List
\labelwidthstring 00.00.0000

A4GL_MNU_BASE_EXT COMPILE/RUNTIME/MENU 
\newline 
Base extension for compiled menu files Base extension (without packer extension)
 to use when compiling/opening menu files
\layout List
\labelwidthstring 00.00.0000

A4GL_MSGTYPE HELP/RUNTIME 
\newline 
Determine library for help message handling $AUBITDIR/lib/libMSG_?.so Default
 help message driver to be loaded: When used: run-time only
\newline 
Options: (NATIVE), XML (??? XML? check this!)
\layout List
\labelwidthstring 00.00.0000

A4GL_MV_CMD COMPILE 
\newline 
Command to ise to move files on the file system
\layout List
\labelwidthstring 00.00.0000

A4GL_OBJ_EXT COMPILE extension to use when compiling 4GL modules to objects
\layout List
\labelwidthstring 00.00.0000

A4GL_OMIT_NO_LOG
\layout List
\labelwidthstring 00.00.0000

A4GL_PACKED_EXT COMPILE/RUNTIME 
\newline 
Determine file extension for packing
\layout List
\labelwidthstring 00.00.0000

A4GL_PACKER MENU/FORMS/HELP/COMPILE/RUNTIME 
\newline 
Determine library for packing forms/menus/help etc $AUBITDIR/lib/libPACKER_?.so
 You can select which packer to use 
\newline 
Options:(PACKED),XDR, XML, PERL
\newline 
(PACKED) - default This is very similar to XDR in that data is written in
 a hopefully portable way (optionally non-portable if the required functions
 aren't available).
 This will probably give the smallest output files
\newline 
XDR This is the same as doing it the old way
\newline 
XML This stores and reads the data in an XML file.
 The reading is very limited and can basically only read the XML files that
 it generates - IT IS NOT A FULL BLOWN XML PARSER.
 It uses some odd constructs and isn't ideal - but you'll get the idea when
 you see the output.
 Size of created files is much larger then PACKED or XDR
\newline 
PERL This generates a data structure which can be used inside a perl program
 - its pretty complicated stuff though using hashes for the data representation.
 What you do with it after you've generated it is up to you, because this
 is an output only library (ie it can't read back what its written).
\layout List
\labelwidthstring 00.00.0000

A4GL_PDFTYPE REPORT/RUNTIME 
\newline 
Determine which library to use for extended reports $AUBITDIR/lib/libEXREPORT_?.s
o Determine default driver for Extended Reporting When used: run-time only
\newline 
Options: PDF, (NOPDF)
\layout List
\labelwidthstring 00.00.0000

A4GL_RESERVEWORDS COMPILE --obsolete?-- Reserved word handling Used to determine
 if traditionaly reserved words in 4GL language should be treated as reserved
 Procesing of reserved word is experimental.
 Set this to YES, if you want to disable this functionality.
 When set to NO, compiler will try to process most reserved words, instead
 of reporting the error.
\layout List
\labelwidthstring 00.00.0000

A4GL_RM_CMD COMPILE 
\newline 
Command to use for deleting files on the file system
\layout List
\labelwidthstring 00.00.0000

A4GL_SAPDB_ESQLC ESQL/COMPILE 
\newline 
Full path to SAP DB ESQL/C compiler full path to SAP-DB ESQL/C pre-compiler
 executable used when compiling EC output for SAP DB(does not have to be
 in the path)
\layout List
\labelwidthstring 00.00.0000

A4GL_SQLTYPE SQL/RUNTIME/COMPILE Determine which library to use to connect
 to the database $AUBITDIR/libSQL_?.so Name of default SQL library plug-in
 to use.
 When used: run-time and compile-time
\newline 
Options: (nosql) , <ODBC MANAGERS> iodbc unixodbc odbc32 (Windows only),
\newline 
<DIRECT ODBC> ifxodbc, pgodbc, sapodbc, sqliteodbc,
\newline 
<NATIVE> esql esqpPG esqlSAP esqlQ sqlite sqliteS pg
\newline 
<SPECIAL> FILESCHEMA
\newline 
FILESCHEMA is to be used for compiling programs where either the database
 doesn't exist yet - or you can't get immediate access to it.
 This takes the 'database' as a filename (with a .schema extension) and uses
 that to collect the data used by compiler(s) Warning: this setting is ignored
 at run-rime when A4GL_LEXTYPE is set to 'EC'.
 At compile time, it is used by compilers regardless of A4GL_LEXTYPE setting
\layout List
\labelwidthstring 00.00.0000

A4GL_UI UI/RUNTIME 
\newline 
Determine which plug-in to use for the user interface $AUBITDIR/lib/libUI_?.so
 Defines default UI (user intertface) driver plug-in to load When used:
 run-time only
\newline 
Options: (CONSOLE) [no deps.], HL_TUI [curses], GTK [GTK+], HL_GTK.
\layout List
\labelwidthstring 00.00.0000

A4GL_USE_ALIAS_AS=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_XML_EXT COMPILE/RUNTIME 
\newline 
extension to use with XML packer Used when when creating output (forms,menus)
 or opening resource files using XML packer Default: SEE ALSO: A4GL_ALWAYSCLOBBE
R=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_ANSI_ERROR SQL/COMPILE 
\newline 
ANSI SQL 92 error checking mode When ANSI_ERROR is set to Yes, compiler
 will abort if non ANSI SQL 92 statement is found in source code (Static
 SQL only).
 If neither A4GL_ANSI_WARN or A4GL_ANSI_ERROR is set, no checking is performed.
\layout List
\labelwidthstring 00.00.0000

A4GL_ANSI_WARN SQL/COMPILE 
\newline 
ANSI SQL 92 warning checking mode When ANSI_WARN is set to Yes compiler
 will display a warning if it encounters static SQL statement not confitming
 to ANSI SQL 92 specification If neither A4GL_ANSI_WARN or A4GL_ANSI_ERROR
 is set, no checking is performed.
\layout List
\labelwidthstring 00.00.0000

A4GL_ARR_DIR_MSG UI/TUI Display/Input array message 'There are no more rows
 in that direction'
\layout List
\labelwidthstring 00.00.0000

AUBITDIR COMPILE/RUNTIME Specify the location of the aubit source tree or
 installation Default for source distribution:/opt/aubit/aubit4glsrc Default
 for binary distribution:/opt/aubit4gl Usually set using --prefix=/path
 to 'configure' script
\layout List
\labelwidthstring 00.00.0000

AUBITETC COMPILE/RUNTIME 
\newline 
Location of global Aubit configuration directory This internal variable
 points to default location of Aubit config files Default: /etc/opt/aubit4gl
 You should not need to change this.
\layout List
\labelwidthstring 00.00.0000

AUBIT_Y2K RUNTIME 
\newline 
Specify Y2K handling of dates: 
\newline 
+n (n<100) - set to nearest year using +n years from today as limit for
 future
\newline 
-n (n>-100) - set to nearest year using -n from today as limit for past
 (note: -25 = +75 ) eg if year=1997 n=20 > 17 will be taken as historic
 anything <17 is future n=-20 <77 will be taken as future >77 is in the
 past
\newline 
XX00 - always use century XX
\newline 
999 - Do not add anything - dealing with AD 0-99
\newline 
-999 - use current century
\layout List
\labelwidthstring 00.00.0000

A4GL_AUTONULL COMPILE 
\newline 
Auto initializing module and function local variables
\newline 
=YES|NO
\newline 
This setting is used at compile-time only.
 Numeric variables are initializet to 0, everything else to NULL To turn
 on, set to 'Y' (??? or is that YES ???)
\layout List
\labelwidthstring 00.00.0000

A4GL_BACKGROUND UI/TUI 
\newline 
Default background character (in hex) when creating a window (eg 2E for
 a '.') Application windows background colour xxxx is a HEX code of a colour
 attribute - eg 1400 (for 0x1400) for blue and reverse.
 Applies to all windows created when no attribute is specified (including
 the main screen)
\layout List
\labelwidthstring 00.00.0000

A4GL_CLASSIC_I4GL_MONO UI/TUI 
\newline 
Inhibit mapping of colours to attributes (like red->BOLD)
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_BKG UI/TUI 
\newline 
specify the default background color
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_BKG_DEF UI/TUI 
\newline 
specify the default background color
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_BLACK UI/TUI 
\newline 
Remap black screen colour to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_BLUE UI/TUI 
\newline 
Remap blue screen color to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_CYAN UI/TUI 
\newline 
Remap cyan screen color to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_FG UI/TUI 
\newline 
specify the default fg color
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_FG_DEF UI/TUI 
\newline 
specify the default fg color
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_GREEN UI/TUI 
\newline 
Remap green screen color to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_MAGENTA UI/TUI 
\newline 
Remap magenta screen color to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_RED UI/TUI 
\newline 
Remap red screen color to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_WHITE UI/TUI 
\newline 
Remap white screen color to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLOR_TUI_YELLOW UI/TUI 
\newline 
Remap yellow screen color to alternative
\layout List
\labelwidthstring 00.00.0000

A4GL_COLUMNS UI/TUI 
\newline 
Specify the width of the screen See A4GL_LINES for description
\layout List
\labelwidthstring 00.00.0000

A4GL_COMMENTS COMPILE 
\newline 
Add comments to the generated code
\layout List
\labelwidthstring 00.00.0000

A4GL_COMMENT_LIKE_DISPLAY UI 
\newline 
Specify comments to be in current display color
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_COMMENT_LIKE_INPUT UI 
\newline 
Specify comments to be in current input color
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_CONSTANT2DEFINES COMPILE 
\newline 
Print on standard output a #define for all constants
\newline 
=YES|NO (can be used to generate a .h file)
\layout List
\labelwidthstring 00.00.0000

DBDATE RUNTIME 
\newline 
Specifies how dates will be formated
\layout List
\labelwidthstring 00.00.0000

DBEDIT RUNTIME 
\newline 
Name of the editor to use for TEXT BLOB fields Applies to asql only?
\layout List
\labelwidthstring 00.00.0000

A4GL_DBPATH RUNTIME/COMPILE 
\newline 
Path to look in for databases and resource files See 'DBPATH' for more informati
on
\layout List
\labelwidthstring 00.00.0000

DBPATH SQL/HELP/FORMS/MENU/RUNTIME/COMPILE 
\newline 
Path to look in for databases and resource files DBPATH variable containls
 list of directory(es) that will be searched for objects like compiled form,
 help and menu files, and SQLite databases.
 Use coloumn (:) as a delimiter between paths you want searched, (;) on
 Windows.
 Default: tools/ in Aubit source code root directory and tools/ in Aubit
 binaryinstallation directory.
 As opposed to most Aubit settings that are exclusive and order of there
 source (environment, aubitrc, built-in resources) decides which one will
 prevail, DBPATH and A4GL_DBPATH are cumulated from both variables, and
 added one to another in order depending on their source.
 So if you have path 1 in environment variable A4GL_DBPATH path 2 in environment
 variable DBPATH, path 3 in A4GL_DBPATH in aubitrc, path 4 in DBPATH in
 aubitrc, cumulated value will look like this: 1:2:3:4.
 Search for the file in DBPATH will then be performed from left to right,
 and first path found to contain file looked for will be used.
 NOTE: DBPATH to xxx/incl is for adbaccess form files Only SQLite databases
 are searched for using DBPATH.
 Resources file are:compiled forms/menus/help/p-code files
\layout List
\labelwidthstring 00.00.0000

DBPRINT PRINT/RUNTIME/REPORT 
\newline 
Printing command Name of command to use to pass report output when executing
 reports defines as START REPORT ...
 TO PRINTER
\layout List
\labelwidthstring 00.00.0000

A4GL_DEBUG DEBUG/COMPILE/RUNTIME 
\newline 
Log extensive information for tracing bugs in Aubit4gl code When you encounter
 programs that crash, use this for debugging - it will create file 
\family typewriter 
debug.out
\family default 
 that can be very useful when you don't get a core dump, so you don't have
 file 
\family typewriter 
core
\family default 
 to run 
\family typewriter 
gdb
\family default 
 on.
 WARNING: do not set this under normal circumstances - all programs will
 create debug.out file when they run, files can be VERY large, and they will
 slow down program execution considerably.
 This setting applies to all Aubit compiler executables (including all compilers
) and to all 4gl programs compiled with the Aubit compiler.
\newline 
FIXME: we should have separate settings for compilers and compiled programs,
 like A4GL_DEBUG_COMP and A4GL_DEBUG_PRG
\newline 
FIXME: add note about priority numbers 
\newline 
Default=<not set>
\layout List
\labelwidthstring 00.00.0000

A4GL_DEBUG_CFG DEBUG
\layout List
\labelwidthstring 00.00.0000

A4GL_DEBUG_DECIMAL DEBUG
\layout List
\labelwidthstring 00.00.0000

A4GL_DEBUG_LEVEL DEBUG/COMPILE/RUNTIME 
\newline 
Specify the detail in which debug messages will be logged
\layout List
\labelwidthstring 00.00.0000

A4GL_DEFPRINTER PRINT
\layout List
\labelwidthstring 00.00.0000

A4GL_DUMPCOMMENTS FORMS/COMPILE 
\newline 
Dump form file attributes when compiling form to stdout
\layout List
\labelwidthstring 00.00.0000

A4GL_DUMPSTRINGS COMPILE 
\newline 
Dump all the strings in a 4GL to a file called strings.out
\newline 
=YES|NO (normally set to 'ident') (see TRANSLATEFILE)
\layout List
\labelwidthstring 00.00.0000

A4GL_DUMP_CORE DEBUG/RUNTIME 
\newline 
Action to perform when aubit/4gl programs crash
\newline 
=YES|NO either print a sorry message (Internal Error...) , or dump core (seg
 fault)
\layout List
\labelwidthstring 00.00.0000

A4GL_ERROR_MSG
\layout List
\labelwidthstring 00.00.0000

A4GL_ESQL_UNLOAD ESQL/RUNTIME
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_EXTENDED_ERRORLOG DEBUG/RUNTIME 
\newline 
Error log handling Add module and line when writing to the error log from
 CALL errorlog(..)
\layout List
\labelwidthstring 00.00.0000

A4GL_EXTENDED_GRAPHICS FORMS/UI/TUI 
\newline 
enable the use of extended graphics from form files (+<>^v for cross and
 tee's) If set to Y allows forms to contain the additional graphics characters
 <,>,^,v, and + to be used for tee's and an intersection.So the following
 :
\newline 

\backslash 

\family typewriter 
gp--v--q
\backslash 
g
\family default 

\newline 

\family typewriter 

\backslash 
g|\SpecialChar ~
\SpecialChar ~
|\SpecialChar ~
\SpecialChar ~
|
\backslash 
g
\family default 

\newline 

\family typewriter 

\backslash 
g>--+--<
\backslash 
g
\family default 

\newline 

\backslash 

\family typewriter 
g|\SpecialChar ~
\SpecialChar ~
|\SpecialChar ~
\SpecialChar ~
|
\backslash 
g
\family default 

\newline 

\family typewriter 

\backslash 
gb--^--d
\backslash 
g 
\family default 
Will draw a box with an intersecting horizonal and vertical line.
 Note - you'll need to set this before you compile the form as well as when
 you run program that will use form file compiled this way
\layout List
\labelwidthstring 00.00.0000

A4GL_FAKELEXTYPE PCODE/COMPILE 
\newline 
Compile C code resulting from 4gl compilation to P-code
\layout List
\labelwidthstring 00.00.0000

A4GL_FAKE_IMMEDIATE
\layout List
\labelwidthstring 00.00.0000

A4GL_FIELD_CONSTR_EXPR UI/TUI 
\newline 
Message to display when a fields value cannot be used for a construct statement
\layout List
\labelwidthstring 00.00.0000

A4GL_FIELD_ERROR_MSG UI/TUI 
\newline 
Message to display when a fields value is invalid (eg non numeric in numeric
 field)
\layout List
\labelwidthstring 00.00.0000

A4GL_FIELD_INCL_MSG UI/TUI 
\newline 
Message to display when a value in a field is not in the include list
\layout List
\labelwidthstring 00.00.0000

A4GL_FIELD_PICTURE_MSG UI/TUI 
\newline 
Message to display when a pressed which is invalid for picture fields
\layout List
\labelwidthstring 00.00.0000

A4GL_FIELD_REQD_MSG UI/TUI 
\newline 
Message to display when a field requires a value to be entered
\layout List
\labelwidthstring 00.00.0000

A4GL_FIXUPDATE=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_FORMAT_OVERFLOW RUNTIME 
\newline 
Determines what happens when a decimal number is too large to fit [ROUND,REFORMA
T]
\newline 
=ROUND|REFORMAT
\layout List
\labelwidthstring 00.00.0000

A4GL_GTKGUI UI/RUNTIME GTK+ ---obsolete?---
\layout List
\labelwidthstring 00.00.0000

GTKRC UI/RUNTIME GTK+ 
\newline 
resources file to use when running in GTK+ GUI mode --probaly obsolete,
 GTK libs use this themselves?--
\layout List
\labelwidthstring 00.00.0000

A4GL_GTK_INC_PATH UI/COMPILE Path to includes needed ghen compiling GTK
 gui enabled code ---should be obsolete--- Full path to GTK+ includes (header)
 files, used when ...? FIXME: why do we need this?
\layout List
\labelwidthstring 00.00.0000

A4GL_GUIPORT UI/RUNTIME ---obsolete?---
\layout List
\labelwidthstring 00.00.0000

A4GL_HIDE_MENU MENU/UI/TUI 
\newline 
Remove menu when finished with it, default is to leave it displayed
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_DIM_INACTIVE_MENU MENU/UI/TUI 
\newline 
Leave menu displayed - but as DIM rather than NORMAL to show its inactive
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

HOME COMPILE/RUNTIME 
\newline 
System environement vatialbe pointing to current user's home directory Used
 to find user-scpecific copy of Aubit configuration file (aubitrc) if any
\layout List
\labelwidthstring 00.00.0000

A4GL_INCLINES DEBUG/COMPILE 
\newline 
Adds originating line number to genrated source code
\newline 
=YES|NO Adds originating line number of each created target language statement
 coresponding to 4gl source code, to created target language source code,
 which is useful for debugging.
 e.g.: #line 2 '../tools/test/test_build.4gl'
\layout List
\labelwidthstring 00.00.0000

INFORMIXDIR ESQL/COMPILE 
\newline 
Location of Informix ESQL/C installation Used when compiling EC ouptput
 using Informix ESQL/C compiler
\layout List
\labelwidthstring 00.00.0000

A4GL_INIT_COL_REFRESH UI/TUI 
\newline 
Reinitialise curses colors on exit Used when curses colours must be reinitialize
d when returning to Screen mode (terminal specific)
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_INPARRAY_FULL_MSG UI/TUI Message to display when input array becomes
 full
\layout List
\labelwidthstring 00.00.0000

A4GL_KEEP_QUALIFIER=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_KEYFILE DEBUG/UI/RUNTIME 
\newline 
Read keystokes from a file and replay them Mechanism for doing automated
 testing A4GL_KEYFILE=(some filename in DBPATH) SEE ALSO: A4GL_KEYDELAY
\layout List
\labelwidthstring 00.00.0000

A4GL_KEYDELAY DEBUG/UI/RUNTIME 
\newline 
Speed to replay keystokes Mechanism for doing automated testing
\layout List
\labelwidthstring 00.00.0000

A4GL_KEYDELAY=(time in usec 1000000 = 1 second, defaults to 0.1s) SEE ALSO:
 A4GL_KEYFILE
\layout List
\labelwidthstring 00.00.0000

A4GL_NEEDALLKEYS DEBUG/UI/RUNTIME 
\newline 
Keyfile handling.
 Specifies an error if more key stokes are requested than appear in the
 keystoke file (otherwise -return to keyboard input) SEE ALSO: A4GL_KEYFILE
\layout List
\labelwidthstring 00.00.0000

A4GL_KEYLOG DEBUG/UI/RUNTIME 
\newline 
Log all keystokes to the specified file
\layout List
\labelwidthstring 00.00.0000

A4GL_LANGUAGE
\layout List
\labelwidthstring 00.00.0000

A4GL_LINES UI/TUI 
\newline 
Number of rows on the screen.
 Terminal size This should make programs work with a normal (not xterm)
 terminal session.
 Defaults:
\newline 
A4GL_COLUMNS=80
\newline 
A4GL_LINES=24 FIXME: is this really A4GL_ variable - terminal will set LINES/COL
UMNS, not A4GL_LINES/A4GL_COLUMNS SEE ALSO: A4GL_COLUMNS
\layout List
\labelwidthstring 00.00.0000

A4GL_LOGNAME DEBUG/RUNTIME
\layout List
\labelwidthstring 00.00.0000

MAKE
\layout List
\labelwidthstring 00.00.0000

A4GL_MAP4GL=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_MARK_SCOPE
\layout List
\labelwidthstring 00.00.0000

A4GL_MONEY_AS_DECIMAL=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_MONEY_AS_MONEY=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_MONO UI/TUI 
\newline 
Force monochrome output
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_NOCFILE=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_NOCLOBBER=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_NO_INVIS_ATTR UI/TUI 
\newline 
Disable usage of A_INVIS in curses - attempt alternative method for concealment
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_PAGER
\layout List
\labelwidthstring 00.00.0000

A4GL_PAUSE_MSG REPORT/RUNTIME 
\newline 
Message to show when executing PAUSE statement in REPORT
\layout List
\labelwidthstring 00.00.0000

A4GL_PGKEYSMOVE UI 
\newline 
Defines the use of the PgUp and PgDn keys as the same as NEXT KEY or for
 ON KEY (PGDN)
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

POSTGRESDIR ESQL/COMPILE 
\newline 
Base directory of PostgreSQL installation.
 Used when looking for includes or libraries to link with, when compiling
 usign PostgreSQL ESQL compiler
\layout List
\labelwidthstring 00.00.0000

A4GL_PRINTPROGRESS
\layout List
\labelwidthstring 00.00.0000

A4GL_PRINTSCRFILE DEBUG/UI/TUI 
\newline 
Specify a file to dump screen to (start with a | to pipe to a command)
\layout List
\labelwidthstring 00.00.0000

A4GL_PRINTSCRKEY DEBUG/UI/TUI 
\newline 
Specify a key to automatically dump the screen with (goes to PRINTSCRFILE)
\layout List
\labelwidthstring 00.00.0000

A4GL_RPCTYPE RUNTIME 
\newline 
Determine which library to use for remote procedure calls $AUBITDIR/lib/libRPC_?.
so Determine default RPC (Remote Procedure Call) driver to load When used:
 run-time only
\newline 
Options: SUNRPC, (NORPC), XMLRPC
\newline 
Note: XMLRPC is client only at the moment
\layout List
\labelwidthstring 00.00.0000

A4GL_SCROLLBACKTO1 UI/TUI 
\newline 
Display array handling
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_SCROLLTOEND UI/TUI 
\newline 
Display array handling
\newline 
=YES|NO In display array scroll back to first line if PgUp is used rather
 than to just first page
\layout List
\labelwidthstring 00.00.0000

A4GL_SIMPLE_GRAPHICS UI/TUI 
\newline 
Force usage of simple graphics for borders
\newline 
=YES|NO if set to YES then +,|,- will be used to draw graphics characters
 instead of proper borders (if available)
\layout List
\labelwidthstring 00.00.0000

A4GL_SQLCNVPATH RUNTIME/SQL 
\newline 
Specifies the location of the conversion details for SQL grammars CONFIG
 FILE BASED CONVERSIONS convert_sql() now uses configuration files.
 These are by default located in /opt/aubit4gl/etc/convertsql/, but that
 can be changed with A4GL_SQLCNVPATH.
\layout List
\labelwidthstring 00.00.0000

A4GL_SQLCONVERT COMPILE/RUNTIME/SQL 
\newline 
Autoconvert SQL from sources files dialect to runtime dialect.
 Conversion of SQL statements in 4GL code, to the SQL dialect of target
 RDBMS.
 Conversion is only done if you set A4GL_SQLCONVERT=YES and only if the
 dialect used by the program differs from that used by the DBMS interface.
\layout List
\labelwidthstring 00.00.0000

A4GL_SQLDIALECT COMPILE/RUNTIME/SQL 
\newline 
SQL Dialect used for the source file.
 Declares the SQL dialect of SQL code in 4GL source code.
 an 4GL directive to change the default SQL dialect at runtime is: SET SQL
 DIALECT TO ORACLE by default the system assumes the 4GL application is
 using Informix SQL syntax, but this can be changed by setting, for example:A4GL
_SQLEXEC SQL
\layout List
\labelwidthstring 00.00.0000

A4GL_SQLPWD SQL/COMPILE/RUNTIME 
\newline 
Database access password See A4GL_SQLUID for description
\layout List
\labelwidthstring 00.00.0000

A4GL_SQLUID SQL/COMPILE/RUNTIME 
\newline 
Database access user name FIXME: is not odbc.ini supposed to have default
 login name and password? Defines username and password for accessing database
 server via ODBC: needed for DATABASE and DEFINE LIKE statements at compile
 time, and procedural DATABASE statement ar run-time.
 You can use OPEN SESSION and supply login information at run-time, but
 NOT at compile time:
\newline 
Default=<no default value> WARNING!! BE CAREFULL NOT TO HAVE A TAB OR OTHER
 SPECIAL CHARACTRS IN THE VALUE OF THIS VARIABLES !!!!!!!!!!
\layout List
\labelwidthstring 00.00.0000

A4GL_SQL_CURRENT_FUNCTION SQL
\layout List
\labelwidthstring 00.00.0000

A4GL_SYSTEM
\layout List
\labelwidthstring 00.00.0000

A4GL_SYSTEMDIR
\layout List
\labelwidthstring 00.00.0000

A4GL_SYSUSER
\layout List
\labelwidthstring 00.00.0000

A4GL_TEMPDIR
\layout List
\labelwidthstring 00.00.0000

A4GL_TRANSLATEFILE COMPILE 
\newline 
Specifies the location of a translation file.
 This is used for transforming 4GL strings via a message file (see DUMPSTRINGS)
\layout List
\labelwidthstring 00.00.0000

A4GL_TRANSMODE
\layout List
\labelwidthstring 00.00.0000

A4GL_TRIMDUMP DEBUG/UI/TUI 
\newline 
Trim the results of a dump screen to a specified screen size (eg 24x80)
 =24x80|25x80|24x132|25x132
\layout List
\labelwidthstring 00.00.0000

A4GL_TRIMUSINGFMT RUNTIME 
\newline 
Trim trailing spaces from a using string variable before applying it
\layout List
\labelwidthstring 00.00.0000

A4GL_USEPAGEKEYS UI 
\newline 
Does odd processing with PgUp PgDn keys on keyboard
\layout List
\labelwidthstring 00.00.0000

A4GL_USE_BINDING_FOR_PUT SQL
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_USE_DATABASE_STMT SQL
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_USE_FORM_SIZE FORMS/UI/RUNTIME
\newline 
Aubit used to honouring the size y by x in the form, this has been removed.
 If you require to specify the size, it can still be used by setting A4GL_USE_FO
RM_SIZE=Y (using this is an Aubit extension - and not default informix behaviour
!)
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_USE_INDICATOR ESQL/COMPILE 
\newline 
Use indicator variables in ESQL/C generated code
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

VISUAL RUNTIME 
\newline 
Name of the editor for BLOB fields (?)
\layout List
\labelwidthstring 00.00.0000

A4GL_YYDEBUG DEBUG/COMPILE 
\newline 
Aubit parser debugging
\layout List
\labelwidthstring 00.00.0000

A4GL_EXDTYPE RUNTIME 
\newline 
External data types support to be loaded $AUBITDIR/lib/libEXDTYPE_?.so Currently
 only MPZ (large integers) are supported FIME: not sure if this is needed
 - looks like this is loaded on request: see example testmpz.4gl into the
 tools/test directory.
\layout List
\labelwidthstring 00.00.0000

A4GL_NULL_DECIMAL_IF_BAD RUNTIME 
\newline 
Null a decimal value rather than set it to 0 if its invalid
\newline 
=YES|NO The standard informix behaviour seems to be to set the value to
 0 for decimals but sets dates to NULL.
 This is inconsistent and so this default behaviour is switchable via this
 configuration setting
\layout List
\labelwidthstring 00.00.0000

A4GL_BEEPONERROR RUNTIME 
\newline 
Indicates that a beep should be emitted by the ERROR statement
\newline 
=YES|NO
\layout List
\labelwidthstring 00.00.0000

A4GL_FLASHONERROR RUNTIME 
\newline 
Indicates that a screen flash should be emitted by the ERROR statement
\newline 
=YES|NO Not all terminals are capable of emitting a screen flash.
 If a screen flash is not possible then the terminal bell is rung instead.
\layout List
\labelwidthstring 00.00.0000

A4GL_REFRESH_AFTER_MOVE UI/TUI 
\newline 
Issue a screen update after a cursor movement
\newline 
=YES|NO This is a screen drawing optimisation function.
 Normally a screen update is not required but there may be some instances
 where the screen cursor does not move to the right place if this isn't
 set.
 If you're not too worried about where the screen cursor is, or your application
 doesn't suffer from this problem then set this to N
\layout List
\labelwidthstring 00.00.0000

A4GL_FIRSTCOL_ONERR UI/TUI 
\newline 
Move to the beginning of a field after an error
\newline 
=YES|NO Can only be set if CLR_FIELD_ON_ERROR=N See CLR_FIELD_ON_ERROR
\layout List
\labelwidthstring 00.00.0000

A4GL_CLR_FIELD_ON_ERROR UI/TUI 
\newline 
Clears a field after an error
\newline 
=YES|NO If this is set them FIRSTCOL_ONERR will never be triggered See FIRSTCOL_
ONERR
\layout List
\labelwidthstring 00.00.0000

A4GL_NO_REFRESH_AFTER_SYSTEM UI 
\newline 
Issue a screen refresh after any sysem command
\newline 
=YES|NO In Informix 4GL, the screen is not refreshed after every system
 command but only after a new screen instruction is issued.
 This means that if you are running a lot of system commands, Aubit4GL's
 screen may appear to flicker between line mode and screen mode.
 Set this to N to inhibit the automatic screen refresh.
\layout List
\labelwidthstring 00.00.0000

A4GL_NO_ARRAY_EXPAND COMPILE 
\newline 
Remove the array expansion code
\newline 
=YES|NO This is solely for backward compatibilty with older Aubit4GL versions.
 It should be set to N in all other cases..
\layout List
\labelwidthstring 00.00.0000

RM_COMMENTS_FIRST COMPILE 
\newline 
remove any comments before compiling the 4GL code
\newline 
=YES|NO This defaults to Yes, if you have problems with compilation - it
 may be that this code is getting confused.
 Try setting to N, or setting DUMP_LAST
\layout List
\labelwidthstring 00.00.0000

GDB_ATTACH RUNTIME Attach GDB 
\newline 
to the process when a Segmentation Fault occurs
\newline 
=YES|NO This is useful for tracing back problems during runtime execution
 The first command to execute in gdb would normally be a 'bt' which should
 give something like :
\newline 
#0 0x402095a9 in __wait4 () from /lib/libc.so.6
\newline 
#1 0x40271ad8 in __DTOR_END__ () from /lib/libc.so.6
\newline 
#2 0x401ad506 in system () from /lib/libc.so.6
\newline 
#3 0x40038858 in A4GL_core_dump () at fglwrap.c:911
\newline 
#4 <signal handler called>
\newline 
#5 0x8048bbd in aclfgl_xxx (_nargs=0) at ./x1.c:95
\newline 
#6 0x8048a6d in main (argc=1, argv=0xbffff1d4) at ./x1.c:58
\newline 
#7 0x40180baf in __libc_start_main () from /lib/libc.so.6
\newline 
Ignore everything up to the <signal handler called>, and 'frame 5' (in this
 case) should show the offending line.
\layout List
\labelwidthstring 00.00.0000

DUMP_LAST COMPILE 
\newline 
output the results of the last remove comments
\newline 
=YES|NO This will produce a file 'last' which contains the file with the
 comments removed.
 This is used to check the operation of the RM_COMMENTS_FIRST code
\layout Chapter

Compiling 
\layout Section

A4GL compilers
\layout Standard

A4GL provides the following compilers:
\layout Itemize


\family typewriter 
4glc
\family default 
 which translates x4GL code into C
\layout Itemize


\family typewriter 
fcompile
\family default 
 which creates a binary form file from source
\layout Itemize


\family typewriter 
mcompile
\family default 
 which creates a binary menu file from source
\layout Itemize


\family typewriter 
amkmessage
\family default 
 which creates a binary help file from source
\layout Standard

On Linux/Unix systems these programs are usually invoked as arguments to
 /usr/local/bin/aubit e.g.
\newline 

\family typewriter 
aubit 4glc myprog.4gl -o myprog
\layout Standard

The aubit program sets the environment from Aubit4GL configuration files
 and ensures that LD_LIBRARY_PATH includes the appropriate A4GL libraries.
\layout Standard

This file if first read from Aubit 4GL installation directory, as specified
 by $AUBITDIR, and then, if it exists, from users home directory, as specified
 by $HOME, effectively overriding settings from $AUBITDIR/.aubitrc that exist
 in both places.
 It also accepts number of command line switches, and environment variables.
\layout Section

4glc 
\layout Standard

Aubit 4GL source compiler 4glc is generally invoked using script: 
\family typewriter 
aubit.

\family default 
 4glc is also capable of linking compiled objects into an executable program:
\layout Standard


\family typewriter 
aubit 4glc <filename>.4gl -o <executablename>
\layout Standard

The compiler script uses the normal C compiler and passes unknown options
 on e.g.: 
\family typewriter 

\newline 
aubit 4glc file.4gl -c -o file.o
\family default 

\newline 
compiles to an object file rather than a linked executable
\layout Standard

The compiler uses the following environment variables (command line equivs.):
\layout Standard

USE_SHARED :if set to 'Yes' always compiles with shared libraries (-shared/-stat
ic)
\layout Standard

DOIT :if set to 'echo' displays the CC command rather than execute it (-echo).
 This only inhibits the C compiler not the 4GL compiler
\layout Standard

INCLLINES -Include extra debugging code (-debug)
\layout Standard

MAP4GL - Generate additional map file code (-map/-nomap)
\layout Standard

e.g:
\layout Standard


\family typewriter 
aubit 4glc -shared file.4gl -o file.4ge
\layout Standard


\family typewriter 
aubit 4glc -static -echo file.4gl -o file.4ge
\layout Standard


\family typewriter 
aubit 4glc -debug file.4gl -o file.debug
\layout Standard


\family typewriter 
aubit 4glc -map -echo file.4gl
\layout Section

Compiling forms 
\layout Standard


\family typewriter 
aubit fcompile file
\layout Standard

This is the Aubit4GL equivalent of 
\family typewriter 
form4gl file
\layout Standard

Omit the suffix .per from the filename argument to fcompile.
 In 4GL code also omit the .afr (or .frm) suffix.
 At runtime the compiled aubit program will add the appropriate suffix (.afr,
 .afr.dat, .afr.xml, .afr.pl) depending on your configuration.
\layout Standard


\family typewriter 
fcompile
\family default 
 compiles form compatible with both GTK and TUI run-time modes.
 Be warned that the compiled file will be in 1 or 4 possible formats controlled
 by the configuration variable A4GL_PACKER:
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Format
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Suffix
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PACKED
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Normal
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

.afr.dat
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

XDR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Network standardised
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

.afr
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

XML
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

XML
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

.afr.xml
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PERL
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

perl hash statement
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

.afr.pl
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

The XDR format is likely to be what you want.
 The XML file is truly enormous.
\layout Standard

The PACKED and XDR formats are compact binary formats somewhat similar to
 Informix .frm files.
 The XML is a tagged description of the .per file's properties.
 The perl format is a fragment of perl code defining in a hash statement
 the properties of the form.
\layout Section

Compiling help files
\layout Subsection

amkmessage
\layout Standard

Compile help files using amkmessage 
\layout Standard


\family typewriter 
aubit amkmessage helpfilename.hlp helpfilename.iem 
\layout Standard


\family typewriter 
amkmessage
\family default 
 is intended to be a workalike for the Informix 
\family typewriter 
mkmessage
\family default 
 program.
 Both programs produce files with the same internal format.
\layout Standard

Help file source looks like this:
\layout LyX-Code

.1
\layout LyX-Code

This is message 1
\layout LyX-Code

.2
\layout LyX-Code

This is message 2
\layout Standard

Each message is preceded by a line beginning with a fullstop (.) and followed
 by a unique help number.
 Messages can be of any number of lines.
 But preferably each line should be 64 characters or fewer.
\layout Standard

The amkmessage program constructs an index (a list of message number with
 an offset to where the message text lies) which provides a fast efficient
 access to the message.
\layout Standard

Within your 4GL programs, you set the helpfile with an options statement
 e.g.:
\layout LyX-Code

OPTIONS HELP FILE "helpfilename.iem"
\layout Standard

Notice that the full filename including the suffix is necessary.
 In fact, you can use any suffixes you wish.
 It is however customary to use 
\family typewriter 
.msg
\family default 
 or 
\family typewriter 
.hlp
\family default 
 for the sourcefiles, and 
\family typewriter 
.iem
\family default 
 for the compiled binaries.
\layout Standard

You can display a help message with a call to the SHOWHELP statement e.g.:
\layout LyX-Code

CALL SHOWHELP(3)
\layout Subsection

fshow
\layout Standard

Aubit4GL provides the command: 
\family typewriter 
aubit fshow file
\family default 
 as a convenient way to display a compiled form.
 Note that you omit the suffix.
\layout Section

Compiling menu files 
\layout Standard

FIXME
\layout Section

Debugging and reporting bugs 
\layout Standard

Core_dumps:
\layout Standard

To find the reason for core dumps, create debug files, first make sure your
\layout Standard

Aubit compiler itself (4glc) is compiled with this option (set the CFLAGS
 in
\layout Standard

lib/makefile to have a 
\family typewriter 
-g
\family default 
, and compile Aubit compiler with 
\family typewriter 
4glpc -g 
\family default 
....
 but
\layout Standard

this should be default) then run through gdb, when it dumps core do a 'bt'
 in
\layout Standard

gdb..
\layout Standard


\family typewriter 
"aubit 4glc -g hello.4gl"
\layout Standard


\family typewriter 
"gdb 4glc core"
\layout Standard

Now type '
\family typewriter 
bt
\family default 
' inside gdb - that will give you a backtrace (with any luck).
\layout Standard

Failing that -
\layout Standard


\family typewriter 
$ export DEBUG=ALL
\layout Standard


\family typewriter 
aubit 4glc ....
\layout Standard

then examine the debug.out file - find the last thing in it and set a breakpoint...
\layout Standard


\family typewriter 
aubit 4glc hello.4gl
\layout Standard

This should generate
\family typewriter 
 hello.c
\family default 
 and a 
\family typewriter 
debug.out
\family default 
 file.
 Have a look see what gets generated in your case.
\layout Standard

With a simple hello.4gl :
\layout LyX-Code

main
\layout LyX-Code

  display "Hello"
\layout LyX-Code

end main
\layout Standard

Generates :
\layout LyX-Code

#define fgldate long
\layout LyX-Code

#include "4glhdr.h"
\layout LyX-Code

#include "hello.h"
\layout LyX-Code

static char _compiler_ser[]="XXXXXXXXXX";
\layout LyX-Code

static char _module_name[]="hello.4gl";
\layout LyX-Code

main(int argc,char *argv[]) {
\layout LyX-Code

  fgl_start(argc,argv);
\layout LyX-Code

  push_char("Hello");
\layout LyX-Code

  push_int(-1);push_int(-1); 
\layout LyX-Code

  display_at(1,0x0);
\layout LyX-Code

  if (sqlca.sqlcode !=0 || status !=0 || 0) {
\layout LyX-Code

     if (sqlca.sqlcode<0&&status==sqlca.sqlcode)
\layout LyX-Code

        chk_err(2,_module_name);
\layout LyX-Code

     if (status<0) chk_err(2,_module_name);
\layout LyX-Code

  }
\layout LyX-Code

  fgl_end();
\layout LyX-Code

}
\layout Standard

FIXME: explain how to set breakpoint in gdb
\layout Standard

Warning_about_core_dumps_coming_from_ODBC_manager:
\layout Standard

Do you have SQLUID and SQLPWD ser? If not so - I've had Openlink bomb out
 if the SQLUID and SQLPWD are not set.
\layout Standard

Nothing that 4glc can pick up on easily as its calling ODBC functions which
 are core-dumping...
 (At least on my machine).
\layout Standard

if I unset SQLUID on mine :
\layout Standard


\family typewriter 
aubit 4glpc report2.4gl -o report2
\layout Standard


\family typewriter 
Error compiling report2.4gl
\layout Standard

(nothing in the .err file) last line of debug.out :
\newline 

\family typewriter 
sql.c 1251 status=0 sqlca.sqlcode=0
\layout Standard


\family typewriter 
Connecting to stores7 as None/None
\layout Standard

Then nothing!
\layout Section

All other errors:
\layout Standard

FIXME: describe .err files in case of 4glc compiler error, and in case of
 C
\layout Section

compiler errors
\layout Section

How to report bugs:
\layout Standard

FIXME: syntax errors when compiling (regression-test, regression-fails)
 , other bugs (use email sent to list)
\layout Chapter

4GL Language
\layout Section

Introduction
\layout Standard

4GL programming language was born in Informix Corp in 1986.
 Because of that, and not to conflict with with 4GL as general programming
 concept (BASIC is in principle also a Fourth Generation Language, as opposed
 to C, which is a Third Generation Language), we should refer to basic 4GL
 syntax as I-4GL.
 
\layout Standard

Today, even among Informix-distributed products, there is distinction between
 classic I4GL and D4GL (Informix name for 4Js 4GL compiler), that introduced
 number of language enhancements.
 Then Informix implemented some of these enhancements back into classic
 4GL, and added some of it's own (v 7.3), that 4Js in turn implemented in
 its 
\emph on 
Universal Compiler V3
\emph default 
 (this is the actual name for 4Js product that Informix distributes under
 the name 
\emph on 
D4GL - Dynamic 4GL
\emph default 
.)
\layout Standard

Confused? I am not surprised.
 So here is how we will refer to different implementations of LANGUAGE syntax:
\layout Itemize

I4GL - Informix non-GUI, a.k.a.
 "classic" products syntax, V 7.3
\layout Itemize

D4GL - 4Js extended syntax, including I4GL
\layout Itemize

A4GL - Aubit 4GL specific syntax, including I4GL
\layout Itemize

x4GL - all of the above as general name for all
\layout Standard

Luckily for us, Querix decided not to change the language, but instead do
 all GUI related configuration from separate configuration files.
\layout Standard

Aubit 4GL, as a package, and A4GL, as a language definition, is a superset
 of I4GL.
\layout Standard

Our first aim is to provide full 
\emph on 
unconditional
\emph default 
 compatibility with I4GL.
 Since this means that 90% of the syntax used in A4GL will be I4GL, and
 since this document is not intended to be an I4GL manual, we strongly suggest
 that you refer to existing Informix documentation and tutorials downloadable
 from their web site, and books about 4GL, like:
\layout Standard


\emph on 
Informix Unleashed
\emph default 
, (ISBN 0672306506) a complete book in HTML format about Informix products,
 by John McNally.
 You will find several complete chapters about 4GL language there, including
 chapters on Informix database servers.
 You will also learn there that "To develop with a 4GL, the developer does
 not have to be an expert programmer".
 
\layout Standard

(I have asked the author for permission to include his book in Aubit 4GL
 distribution, but received no answer)
\layout Standard

The rest of this page will serve as a quick and dirty crash course to give
 you some idea of what the I4GL looks like, as a language.
 
\layout Standard

For A4GL extensions.
 please refer to the appropriate sections of this manual.
\layout Section

Summary:
\layout Standard

* To learn I4GL, refer to Informix manuals for Informix-4GL version 7.3 (
 http://www.informix.com or direct links to 
\emph on 
Informix 4GL by example
\emph default 
,
\emph on 
Informix 4GL Concepts and Use
\emph default 
, 
\emph on 
Informix 4GL Reference Manual
\emph default 
 - please remember that exact locations can change, and if they do, use
 the search function on the Informix web site to find new locations of this
 documents), and third-party books.
\layout Standard

* To learn about A4GL extensions, read this manual
\layout Standard

* To get some idea about what I4GL looks like, and to get some idea about
 combined I4GL and A4GL functionality, continue reading this page
\layout Standard

* To get 4GL code examples, go to http://www.informix.com/idn and look for
 the Example application, or download one of GNU 4GL programs from http://www.fal
out.com
\layout Section

Short Intro to x4GL
\layout Itemize

4GL Programs
\layout Itemize

Structure of a program
\layout Itemize

DATABASE section
\layout Itemize

GLOBALS section
\layout Itemize

Functions
\layout Itemize

MAIN block
\layout Itemize

DEFINE section
\layout Itemize

4GL Commands 
\layout Subsection

4GL Programs
\layout Standard

A 4GL program consists of a series of modules and forms.
 Each 4GL module can contain functions and reports and each program must
 contain exactly one 'main' section and must end in a .4gl extension.
 C modules can also be included in programs.
\layout Subsubsection

Structure of a program
\layout Standard

database section
\layout Standard

globals section
\layout Standard

function/report/main block
\layout Standard

.
\layout Standard

.
\layout Standard

.
\layout Standard

.
\layout Standard

function/report/main block
\layout Subsubsection

DATABASE section 
\layout Standard

This section is optional and is of the format :
\layout Standard


\family typewriter 
DATABASE database-name
\layout Standard

The database name is actually the DATA SOURCE NAME (DSN) from the ODBC drivers.
\layout Subsubsection

GLOBALS section 
\layout Standard

This optional section allows you to define variables which are accessible
 to all modules.
 There is normally a single file (typically called 'globals.4gl') where variables
 are defined.
 All other modules which need these variables then include that file using
 the a global statement .eg.
\family typewriter 

\newline 
globals.4gl:
\layout Standard


\family typewriter 
GLOBALS
\newline 
DEFINE a INTEGER
\newline 
END GLOBALS
\layout Standard


\family typewriter 
module.4gl:
\layout Standard


\family typewriter 
GLOBALS "globals.4gl"
\layout Standard

Note: In Aubit 4GL the any 'globals' module (containing the GLOBALS / END
 GLOBALS) must be compiled first.
\layout Subsubsection

Functions 
\layout Standard

A function in 4GL is a sequence of commands which are executed when called
 from another block of code.
 A function can accepts parameters and can return values.
\layout Standard

A function is defined :
\newline 

\family typewriter 
FUNCTION function-name ( parameter-list )
\family default 

\newline 
define-section 
\newline 
commands
\newline 

\family typewriter 
END FUNCTION
\layout Standard

Values are returned using the RETURN keyword:
\newline 

\family typewriter 
RETURN value
\layout Subsubsection

MAIN block
\layout Standard

Each program must contain a main section - it is the starting point in any
 program.
\layout Standard


\family typewriter 
MAIN
\newline 
define-section
\newline 
commands
\newline 
END MAIN
\layout Subsubsection

DEFINE section 
\layout Standard

This optional section allows you to define variables which may be used subsequen
tly.
 In its simplest form:
\layout Standard


\family typewriter 
DEFINE variable_names datatype
\family default 

\newline 
or 
\newline 

\family typewriter 
DEFINE CONSTANT constant_name "Value"
\newline 
DEFINE CONSTANT constant_name Number-Value
\layout Standard

More than one variable can be defined as any type in the same statement
 by separating the names with a comma:
\newline 

\family typewriter 
DEFINE a,b,c INTEGER
\layout List
\labelwidthstring 00.00.0000

Available datatypes are :
\newline 
SMALLINT (2 byte integer)
\layout List
\labelwidthstring 00.00.0000

INTEGER (4 byte integer)
\layout List
\labelwidthstring 00.00.0000

CHAR (Single character 'string')
\layout List
\labelwidthstring 00.00.0000

CHAR(n) (n character string)
\layout List
\labelwidthstring 00.00.0000

MONEY
\layout List
\labelwidthstring 00.00.0000

DECIMAL (These are not fully implemented)
\layout List
\labelwidthstring 00.00.0000

FLOAT (8 byte floating point number - (C double))
\layout List
\labelwidthstring 00.00.0000

SMALLFLOAT (4 byte floating point number - (C float))
\layout List
\labelwidthstring 00.00.0000

DATE (date - number of days since 31/12/1899)
\layout List
\labelwidthstring 00.00.0000

DATETIME
\layout List
\labelwidthstring 00.00.0000

INTERVAL
\layout List
\labelwidthstring 00.00.0000

BYTE
\layout List
\labelwidthstring 00.00.0000

TEXT
\layout List
\labelwidthstring 00.00.0000

VARCHAR Unimplemented yet
\layout List
\labelwidthstring 00.00.0000

LIKE tablename.columnname
\layout List
\labelwidthstring 00.00.0000

RECORD LIKE tablename.* 
\newline 
- can only be used when the module has a DATABASE statement These copy thedataty
pes directly from the database either for a simple column, or to generate
 an entire record (see below)
\layout Standard

Special datatypes are :
\layout List
\labelwidthstring 00.00.0000

ARRAY[n]\SpecialChar ~
OF\SpecialChar ~
datatype defines an array
\layout List
\labelwidthstring 00.00.0000

RECORD\SpecialChar ~
..\SpecialChar ~
 END RECORD defines a record structure
\layout List
\labelwidthstring 00.00.0000

ASSOCIATE [CHAR](m)WITH ARRAY[n] of datatype ....
 defines an associative array (hash table).
\layout Subsubsection

Arrays Syntax:
\layout List
\labelwidthstring 00.00.0000

DEFINE\SpecialChar ~
vars\SpecialChar ~
ARRAY[n]\SpecialChar ~
datatype eg.
 
\newline 
DEFINE lv_arr ARRAY[200] OF INTEGER defines an array of 200 elements each
 being an integer.
 Elements of an array are indexed from 1 to the number of elements specified.
\newline 
IMPORTANT: 
\emph on 
No bounds checks are made,
\emph default 
 accessing elements which are outside those defined (ie <1 or > n) will
 result in an error (Usually a core dump).
 Eg 
\newline 
LET lv_arr[1]=1
\newline 
LET lv_arr[200]=200
\newline 
LET lv_arr[201]=201 # this will cause a program fault!
\layout Subsubsection

Records
\layout Standard

Records are structured groups of data, with the entries are separated by
 commas.
 Elements within a record are accessed via the record name '.' element name.
\layout Paragraph

Syntax
\layout LyX-Code

DEFINE recordname RECORD 
\newline 
 element datatype,
\newline 
 element datatype
\newline 
 ...
\newline 
END RECORD
\layout Standard

eg.
\layout LyX-Code

DEFINE lv_rec RECORD
\newline 
 elem1 CHAR(10),
\newline 
 elem2 INTEGER
\newline 
END RECORD
\layout Standard

defines a record with two elements.
 eg.
\layout LyX-Code

LET lv_rec.elem1="string1"
\layout LyX-Code

Record may also be nested and used in conjunction with arrays.
 The following are all therefore valid:
\newline 
DEFINE lv_record ARRAY[20] OF RECORD
\newline 
 elem1 CHAR(20),
\newline 
 elem2 INTEGER
\newline 
END RECORD
\layout LyX-Code

DEFINE lv_record RECORD
\newline 
 a ARRAY[200] of INTEGER,
\newline 
 b CHAR(20)
\newline 
END RECORD
\layout LyX-Code

DEFINE lv_record RECORD
\newline 
 subrecord1 RECORD
\newline 
  elem1 CHAR(10),
\newline 
  elem2 INTEGER
\newline 
 END RECORD,
\newline 
 subrecord2 RECORD
\newline 
  elem2 DATE
\newline 
 END RECORD
\newline 
END RECORD
\layout Subsection

Associative Arrays
\layout Standard

Associative arrays allow you to access data from an array using a string
 as a subscript rather than an integer.
 For example:
\layout LyX-Code

LET age<<"bob">>=40
\newline 
DISPLAY age<<"bob">>
\layout Standard

This can be especially useful when dealing with codes and code desciptions:
\layout LyX-Code

LET lv_desc<<"A">>="Active"
\newline 
LET lv_desc<<"I">>="Inactive"
\newline 
LET lv_desc<<"R">>="Running"
\newline 
LET lv_desc<<"D">>="Deleted"
\newline 
LET lv_state="A"
\newline 
.
\newline 
.
\newline 
DISPLAY lv_desc<<lv_state>>
\layout Standard

(This is for illustration, the data would normally be read from a database!)
\layout Standard

To define an associate array:
\newline 

\family typewriter 
DEFINE name ASSOCIATE [CHAR] (nc) WITH ARRAY [nx] OF datatype
\family default 

\newline 
Where nc is the number of characters to use for the index, and nx is the
 total number of elements that may be stored.
\layout Paragraph

Performance Note:
\layout Standard

Internally, associate arrays are stored using hash tables, for performance
 reasons always declare 'nx' larger than is actually required.
 A factor of two is optimum in most cases.
\layout Standard

Again the datatype used in this form of array may be a RECORD, ARRAY etc.
 Eg.
\layout Standard


\family typewriter 
DEFINE lv_asoc1 ASSOCIATE CHAR(10) WITH ARRAY[10] OF INTEGER
\newline 
DEFINE lv_asoc3 ASSOCIATE (10) WITH ARRAY[10] OF INTEGER
\newline 
DEFINE lv_asoc2 ASSOCIATE CHAR(10) WITH ARRAY[10] OF RECORD
\newline 
\SpecialChar ~
element1 CHAR(10),
\newline 
\SpecialChar ~
element2 CHAR(20)
\newline 
END RECORD
\layout Subsection

Constants
\layout LyX-Code

Constants are defined using:
\newline 
DEFINE CONSTANT name value eg.
\newline 
DEFINE CONSTANT max_num_vars 30
\newline 
DEFINE CONSTANT err_string "There is an error"
\newline 
IF num_vars>max_num_vars THEN
\newline 
  ERROR err_string
\newline 
END IF
\layout LyX-Code

It is also possible to use constants in any subsequent define sections:
\newline 
DEFINE CONSTANT num_elems 20
\newline 
DEFINE lv_arr ARRAY [num_elems] OF INTEGER
\newline 
IF num_vars<=num_elems THEN
\newline 
  LET lv_arr[num_vars]=1
\newline 
END IF
\layout Standard

You can think of DEFINE CONSTANT statements as being equivalent to C 
\family typewriter 
#define
\family default 
 statements (except that you cannot use them to define macros as you can
 with C).
\layout Subsection

Packages
\layout Standard

The current system allows programs to call shared libraries using the syntax:
\layout LyX-Code

call library::function(..) 
\layout Standard

(See 
\family typewriter 
tools/test/file.4gl
\family default 
 or 
\family typewriter 
lib/extra_libs/pop/pop_killer.4gl
\family default 
 for some example usage)
\layout Standard

Packages take this one step further in that the calls are coded like any
 other functions.
 They are detected at compile time by referencing a list of possible function
 name mappings specified by an 
\family typewriter 
import package
\family default 
 statement.
 Syntax :
\layout LyX-Code

IMPORT PACKAGE packagename
\layout Standard

The packagename should be the name of a file in the 
\family typewriter 
$AUBITDIR/etc/import 
\family default 
directory.
\layout Standard

A file called 
\family typewriter 
default
\family default 
 exists in this directory which is included for all compilations - this
 allows you to add calls to your own subroutines just as if they were builtin
 functions with no need to add them to the compile line as object or library
 modules..
\layout Standard

This file should contain a series of lines, each containing:
\layout LyX-Code

library functionname
\layout Standard

(In this way a 
\emph on 
package
\emph default 
 can contain functions from more than one library...)
\layout Standard

e.g.
\layout LyX-Code

A4GL_pcre pcre_match 
\newline 
A4GL_pcre pcre_text
\layout Standard

Whenever the compiler sees a call to
\family typewriter 
 pcre_match
\family default 
 it will call 
\family typewriter 
pcre_match
\family default 
 in the A4GL_pcre library - in this way it's equivalent to 
\family typewriter 
A4GL_pcre::pcre_match
\layout Standard

So a full .4gl may look like :
\layout Standard

import package a4gl_pcre 
\newline 
main 
\newline 
  if pcre_match("cat|dog","There was an old cat") then 
\newline 
     display "Matches to ",pcre_text(1) 
\newline 
  else 
\newline 
     display "No match" 
\newline 
  end if 
\newline 
end main
\newline 

\newline 

\newline 
Compile and run 
\layout LyX-Code

\layout LyX-Code

$ 4glpc pcre_test.4gl -o pcre_test 
\newline 
$ ./pcre_test 
\newline 
Matches to cat
\layout Standard

(Note - you don't need to link against the library - it's done at runtime!)
\layout Standard

(If you've got 
\family typewriter 
pcre
\family default 
 installed - you can compile up the pcre library by doing a 
\family typewriter 
make
\family default 
 in the 
\family typewriter 
lib/extra_libs/pcre
\family default 
 directory)
\layout Section

4GL Commands 
\layout Standard

(
\begin_inset Note
collapsed true

\layout Standard

Put these into a table
\end_inset 

syntax and documentation in Informix manuals)
\layout Standard


\family typewriter 
CALL 
\newline 
CASE
\newline 
CLEAR
\newline 
CLOSE
\newline 
CODE
\newline 
CONSTRUCT
\newline 
CONTINUE
\newline 
CREATE
\newline 
CURRENT WINDOW
\newline 
DECLARE
\newline 
DISPLAY
\newline 
DROPS
\newline 
ERROR
\newline 
EXECUTE
\newline 
EXIT PROGRAM
\newline 
EXT
\newline 
FINISH
\newline 
FOR
\newline 
FOREACH
\newline 
GOTO
\newline 
HIDE
\newline 
HIDE OPTION
\newline 
IF
\newline 
INIT
\newline 
INPUT
\newline 
LABEL
\newline 
LET
\newline 
LOAD
\newline 
LOCATE
\newline 
MENU
\newline 
MESSAGE
\newline 
MOVE
\newline 
NEXT FIELD
\newline 
NEXT OPTION
\newline 
OPEN
\newline 
OPENS
\newline 
OPTIONS
\newline 
OUTPUT
\newline 
PAUSE SCREEN
\newline 
PREPARE
\newline 
PROMPT
\newline 
REPORT
\newline 
RETURN
\newline 
RUN
\newline 
SET
\newline 
SET DATABASE
\newline 
SHOW
\newline 
SHOW OPTION
\newline 
SLEEP
\newline 
SQL
\newline 
SQLCODE
\newline 
START
\newline 
START RPC
\newline 
STOP RPC
\newline 
UNLOAD
\newline 
WHENEVER
\newline 
WHILE
\newline 
DEFER
\newline 
SYNTAX
\newline 
DEFER INTERRUPT
\family default 

\newline 
...etc...
\layout Chapter

4GL Help system
\layout Section

Help message source file
\layout Standard

Create your help files with a .msg extension using a text editor (e.g.
 vi)
\layout Standard

A sample file:
\layout LyX-Code

.1
\newline 
This is help message 1
\newline 
.2
\newline 
This is help message 2
\layout Section

Compiling help files
\layout Standard

The syntax for compiling a help file (say myhelp.msg) into a binary help
 file (say myhelp.iem) is:
\newline 

\family typewriter 
amkmessage myhelp.msg myhelp.iem
\family default 

\newline 
or
\newline 

\family typewriter 
amkmessage myhelp.msg > myhelp.iem
\family default 

\newline 

\layout Standard

Note that the syntax here is inconsistent with 
\family typewriter 
fcompile
\family default 
 and 
\family typewriter 
mcompile
\family default 
 in that you must supply the name (including suffix) of the target binary
 file.
 This is consistent with Informix's 
\family typewriter 
mkmessage
\family default 
 program which has the same syntax.
\layout Section

help in programs
\layout Subsection

Within 4GL 
\layout Standard


\family typewriter 
CALL show_help(3)
\layout Standard

will display message number 3 from the current helpfile on the screen help
 line.
\layout Subsection

At runtime
\layout Standard

The user presses the help key (default = CTRL-W) in any implemented command
 (Currently only menus have help support)
\layout Section

Decompiling
\layout Standard

The command unmkmessage can be used to decompile an Informix compiled help
 file (usually with a .iem suffix) as follows:
\layout Standard


\family typewriter 
unmkmessage myhelp.iem myhelp.msg
\layout Standard

or
\layout Standard


\family typewriter 
unmkmessage myhelp.iem > myhelp.msg
\layout Standard

If you omit the 2nd filename, the unmkmessage program will output to the
 standard output stream (by default , your screen).
\layout Standard

The unmkmessage program is useful when you lose or corrupt the source helpfile
 but still have the original binary.
\layout Section

Compatibility
\layout Standard

The helpfile compiled by 
\family typewriter 
amkmessage
\family default 
 is the same format as the IBM-Informix 
\family typewriter 
mkmessage
\family default 
 program and the helpfiles will be compatible both source and binary.
 
\layout Section

mkmess
\layout Standard

Note that amkmessage replaces the mkmess program used by earlier versions
 of Aubit 4GL.
 The 2 programs are incompatible.
 The older mkmess created binaries of a different format from the standard
 Informix .iem files.
\layout Chapter

SQL Conversion
\layout Standard

Aubit4GL allows you to connect to DBMS's (database management systems) from
 various vendors, as long the connection is via the SQL command language.
 Unfortunately, the syntax of the SQL language can differ considerably from
 one vendor to another, and often valid syntax for one DBMS fails when executed
 against some other DBMS.
 One way around this is to maintain different versions of your application,
 eg.
 one for use with Informix, another for running against Oracle, another
 for PostgreSQL, and so on.
 Another way is to replace each SQL command in your source code with a number
 of alternatives in a case statement, depending on the target database type.
 Either way, your code will be difficult to maintain and harder to read.
\layout Standard

Aubit4GL resolves this by providing a module that lets you write code using
 just one version or "dialect" of SQL, and have this converted into the
 correct form for whatever database you connect to at run-time.
\layout Standard

In order to do this, Aubit4GL needs to know the following: 
\layout Itemize

the source SQL dialect that your source code is written in
\layout Itemize

the target SQL dialect expected by the currently connected DBMS
\layout Itemize

rules on how to convert SQL commands between source and target forms.
\layout Section

Source SQL dialect 
\layout Standard

By default, the compiler assumes SQL is written using standard Informix
 syntax.
\layout Standard

This can be changed by setting the environment variable 
\family typewriter 
A4GL_SQLDIALECT
\family default 
, or by setting the value of 
\family typewriter 
SQLDIALECT
\family default 
 in the /etc/opt/aubit4gl/aubitrc file.
\layout Standard

You can also change it at run-time using the SET SQL DIALECT command eg.
\newline 

\family typewriter 
SET SQL DIALECT TO ORACLE
\layout Standard

This will cause all subsequent statements to be treated as if they were
 written using Oracle syntax.
\layout Standard

Note - the 4GL compiler is not guaranteed to handle commands using non-Informix
 syntax.
 If the compiler cannot understand a particular command, simply place it
 in a char variable (string), 
\family typewriter 
PREPARE
\family default 
 it, and 
\family typewriter 
EXECUTE
\family default 
 it.
\layout Section

Target SQL dialect
\layout Standard

The database connection driver will inform Aubit4GL at run-time which dialect
 of SQL it speaks, so you do not have to configure this explicitly.
\layout Section

Configuration files 
\layout Standard

The syntax of an SQL command is converted from its source dialect to the
 DBMS' native dialect, by applying a number of transformations one after
 another on the SQL text.
\layout Standard

For example, consider the steps taken to get the following Informix SQL
 statement to run correctly with PostgreSQL:
\layout LyX-Code

select last_name, first_name[1], (today-birthday)/365 age
\newline 
from client
\newline 
where last_name matches "M*"
\layout Enumerate

replace double quotes with single quotes
\layout Enumerate

replace
\family typewriter 
 matches
\family default 
 with the regular expression operator 
\family typewriter 
~
\layout Enumerate

use the function 
\family typewriter 
substr()
\family default 
 instead of subscripting with []
\layout Enumerate

replace the word today with 
\family typewriter 
date(now())
\layout Enumerate

insert the word "AS" before the column alias age
\layout Standard

The result is:
\layout LyX-Code

select last_name, substr(first_name,1,1), (date(now())-birthday)/365 AS
 age
\newline 
from client
\newline 
where last_name ~ '^M.*'
\layout Standard

Special configuration files are used to indicate what conversions are needed.
\layout Standard

They are located in the directory /opt/aubit4gl/etc/convertsql (this can
 be changed by setting the environment variable 
\family typewriter 
A4GL_SQLCNVPATH
\family default 
 to an alternative location).
\layout Standard

There is one file for each combination of source and target dialect, each
 file being named as source-target.cnv.
 For example, the rules for translating from Informix to PostgreSQL are
 in a file called INFORMIX-POSTGRESQL.cnv, in which the conversion rules
 for the above example are given as:
\layout LyX-Code

DOUBLE_TO_SINGLE_QUOTES
\newline 
MATCHES_TO_REGEX
\newline 
SUBSTRING_FUNCTION = substr
\newline 
REPLACE today = date(now())
\newline 
COLUMN_ALIAS_AS
\layout Section

Converting SQL scripts 
\layout Standard

Many 4GL programmers keep script files of SQL commands to be run through
 SQL command interpreters like isql, psql, etc., rather than via a 4GL program.
\layout Standard

A command line utility, 
\family typewriter 
convertsql
\family default 
 is available to convert these as well.
\layout Standard

You may have to compile this program from source.
 Go to 
\family typewriter 
/opt/aubit4g/tools/convertsql
\family default 
, and follow the instructions in 
\family typewriter 
README.txt
\family default 
.
\layout Standard

For example, to convert a file full of Informix SQL commands into SapDB
 compatible commands, you might execute:
\layout Standard


\family typewriter 
convertsql INFORMIX SAPDB < mystuff.sql > mystuff2.sql
\layout Section

Conversion file syntax
\layout Standard

The file contains a series of conversion directives, one to a line, with
 the following formats:
\layout Subsection

Simple directives
\layout Standard

Simple directives take no arguments:
\layout Itemize

DOUBLE_TO_SINGLE_QUOTES Change double quotes (") to single quotes (') around
 literal strings.
\layout Itemize

MATCHES_TO_LIKE Change Informix_style 'matches' clause to one using 'like',
 and change * and ? to % and _ respectively.
 eg: matches 'X?Z*' -> like 'X_Z%'
\layout Itemize

MATCHES_TO_REGEX Similar to 'matches-to-like' but uses the Postgres style
 regular expression syntax, eg: matches 'X?Z*' -> ~ '^X.Z.*'
\layout Itemize

TABLE_ALIAS_AS Insert the word "as" before table alias names in a 'from'
 clause eg: from ..., table1 t1, ...
 -> from ..., table1 as t1, ...
\layout Itemize

COLUMN_ALIAS_AS Insert the word "as" before column/expression alias names
 in a 'select' clause eg: select ..., sum(amount) amt, ...-> select ..., sum(amount)
 as amt, ...
\layout Itemize

ANSI_UPDATE_SYNTAX Convert Informix-style "update ...
 set (..,..) = (..,..) " to the ANSI standard format "update ...
 set ...=..., ...=...
 " eg.
 update mytable set (col1,col2,col3) = ("01", "X", 104) where ...->update mytable
 set col1="01", col2="X", col3=104 where ...
\layout Itemize

CONSTRAINT_NAME_AFTER Move the constraint name in a constraint command to
 after the constraint definition, eg: ...
 constraint c_name unique ->...
 unique constraint c_name
\layout Itemize

CONSTRAINT_NAME_BEFORE Move the constraint name in a constraint command
 to before the constraint definition, eg: ...
 unique constraint c_name -> ...
 constraint c_name unique
\layout Subsection

Complex Directives 
\layout Standard

The following directive takes an argument ( in the rules below, replace
 the word "string" with the appropriate values ):
\layout Itemize

SUBSTRING_FUNCTION = string Change Informix-style string subscripting to
 a function call, Replace 'string' with the name of the sql function.
 eg.
 where ...
 foo[3,5] = ....
 -> where ...
 substr(foo,3,3)
\layout Subsection

REPLACE directives
\layout Standard

Search and replace is not case-sensitive.
 For legibility, lower case is used in the rules for search/replace strings
 to distinguish them from the keywords (in upper case).
\layout Standard

You may leave the replacement string (after the = sign) blank.
 This will have the effect of removing the matched string from the converted
 output.
\layout Itemize

REPLACE before = after Replace any occurrence of the string 'before' with
 'after', eg.
 
\newline 
REPLACE rowid = oid
\newline 
REPLACE current year to second = sysdate
\newline 
REPLACE today = date(now())
\layout Itemize

REPLACE_EXPR before = after Replace only if the 'before' text is found in
 an expression or where an expression is allowed, such as in a where clause
 or a select clause.
 eg.
\newline 
REPLACE_EXPR sysdate = current year to second
\newline 
REPLACE_EXPR today = date(now())
\layout Itemize

REPLACE COMMAND before = after Replace, but only if the whole SQL statement
 matches the 'before' string eg.
\newline 
REPLACE_COMMAND set isolation to dirty read =
\layout Standard

The example above has the effect of completely erasing the command.
\layout Chapter

Aubit 4GL GUI
\layout Standard

An extension to A4GL is the ability to communicate using a Graphical User
 Interface.
\layout Section

Aubit 4GL GUI mode
\layout Standard

To compile a 4GL program with GTK and GUI support :
\newline 

\family typewriter 
aubit 4glpc -gtk filename.4gl -o filename
\layout Standard

(note: -gtk switch is now default for 4glpc)
\layout Standard

This will generate a CUI/GUI switchable version.
 To use the GUI you must set the A4GLGUI environment variable:
\layout Standard


\family typewriter 
AUBITGUI=gtk export AUBITGUI
\layout Standard

Options for AUBITGUI are: text, curses, gtk, gui (not case sensitive).
\layout Standard

You can then run it as normal (make sure you have the DISPLAY environment
 variable pointing to your X server).7.3 c
\layout Standard

Notes:
\layout Itemize

You must recompile any forms (these have changed!) The new forms will work
 for GUI and CUI modes whether you have compiled the 4GL with -gtk or not.
\layout Itemize

Make sure that there is no form_x.h in lib/libincl (the makefile should remove
 this anyway)
\layout Standard

Make sure that you're using the new libraries (ie if you've copied any to
 /usr/lib, /usr/local/lib etc.
 that these are updated).
\layout Subsection

Longer term :
\layout Standard

We'll need to add to assist.4gl to add in lots of useful functions - I've
 made a start - should be a few good examples to copy.
\layout Standard

Client/Server mode - I've started to split the display bits from the rest
 of the library (look at lib/gui.c).
 This is used to do the redirecting from CUI to GUI modes.
 It should be possible to add to this to extend GUIs to non-GTK or remote
 displays.
\layout Standard

VERY IMPORTANT : I've not tested lots of things and this is a very first
 draft.
\layout Standard

Lots of things are not implemented yet - eg.
 attributes (colors, upshifts, formats etc) on input/display statements.
 I will ***need*** help to do all of these.
\layout Standard

The way it works at the minute is really bad (uses #define to force a call
 to the GUI function instead of the CUI function.)
\layout Standard

Eventually - I'd like to do a libtui (text mode), and get the calls routed
 via a variable (ui_mode).
 In that way you would compile the code in the same way (ie no -gtk), but
 have a command line/environment variable used to specify the runtime mode
 (Text or Graphical).
\layout Standard

You might also want to set the environment variable 'NOCURSES' before running
 :
\newline 
NOCURSES=1 export NOCURSES
\newline 
./file
\layout Standard

This will enable some of the output to be printed (There is some debugging
 stuff, GTK error messages and the output of "DISPLAY", and printf (if you
 use the embedded C code)) without turning on curses.
 (This isn't 100% effective yet.)
\layout Standard

There are still a lot of things to work out (don't try CLEAR FORM/fieldname
 ...for example).
 
\layout Section

GUI Menus 
\layout Standard

There are two ways to use menus in GUI mode.
 The first is the traditional 4GL menu command in 4GL :
\layout LyX-Code

MENU ...
\layout LyX-Code

 COMMAND ...
\layout LyX-Code

 COMMAND ...
\layout LyX-Code

END MENU
\layout Standard

This should work as before - but does not look very GUI.
 There is no support for drop down menus for example.
\layout Standard

A GUI specific alternative is to use menu files.
\layout Standard

Menu files have a couple of benefits :
\layout Itemize

.They are the only way to get GUI looking drop down menus
\layout Itemize

You can distribute different files, eg.
 in different languages (Only avery small benefit!)
\layout Standard

Menu are loaded from this file using the 'SHOW MENU' 4GL command.
 eg.
 
\newline 

\family typewriter 
SHOW MENU my_menu USING my_menuhandler
\layout Standard

You should then have a 
\family typewriter 
MENUHANDLER
\family default 
 function to deal with clicks on menu items:
\layout Standard

_________________________________________________________________
\layout LyX-Code

MENUHANDLER my_menuhandler
\layout LyX-Code

DEFINE somevariables...
\layout LyX-Code

BEFORE SHOW MENU
\layout LyX-Code

ENABLE MENUITEM mn_1 #You can use MENUITEM or MENUITEMS here
\layout LyX-Code

ENABLE MENUITEMS mn_2,mn_3
\layout LyX-Code

DISABLE MENUITEM mn_1,mn_3
\layout LyX-Code

DISABLE MENUITEMS mn_1
\layout LyX-Code

ON mn_2
\layout LyX-Code

DISPLAY "Hello World"
\layout LyX-Code

ON mn_3
\layout LyX-Code

EXIT PROGRAM
\layout LyX-Code

END MENUHANDLER
\layout Standard

By default menus are loaded from a file called 
\family typewriter 
"menu.mnu"
\family default 
, you can specify an alternate filename by using a 
\family typewriter 
FROM
\family default 
 clause : eg.
 
\layout LyX-Code

SHOW MENU my_menu USING my_menuhandler FROM "myfile"
\layout Standard

The .mnu will be automatically appended.
\layout Subsection

Menu File Format
\layout Standard

Source menu files have the extension '.menu', which will be compiled to '.mnu'
 by the mcompile command.
\layout Standard

FIXME: add to "using compilers"
\layout Standard

$ mcompile filename
\layout Standard

If no extension is specified .menu is assumed.
\layout Standard

mcompile can also compile the menu file into C code which can be included
 in
\layout Standard

the application directly (this means you don't need to distrubute the .mnu
\layout Standard

file) using the -c option.
\layout LyX-Code

$ mcompile -c filename
\layout Standard

This will generated a .c which can be linked into the application.
\layout LyX-Code

$ mcompile -c mymenu
\layout Standard

will compile mymenu.menu into mymenu.c
\layout LyX-Code

$ mcompile mymenu
\layout Standard

will compile mymenu.menu into mymenu.mnu
\layout Standard

.menu_files
\layout Standard

A menu file contains one or more MENUs.
 Each menu has an associated ID :
\layout LyX-Code

MENU file
\newline 
....
\newline 
END MENU
\layout Standard

Within the menu you can place OPTIONs, these are specified as follows :
\layout LyX-Code

OPTION id "Caption"
\layout Standard

You can also specify an image for an option in addition to the caption :
\layout LyX-Code

OPTION id Image="filename" "Caption"
\layout Standard

Note : At present all images must be in .xpm format Although not fully implemente
d yet, you can also specify attributes for an option.
 Currently the only option allowed is 'RIGHT' [not implemented] which will
 right align the menu item (Often used for Help), although there may be
 others later...
\layout LyX-Code

OPTION id "Caption" ATTRIBUTES(RIGHT)
\layout Section

Simple GUI menu
\layout Standard

A Typical file menu may look like this:
\layout LyX-Code

MENU file
\layout LyX-Code

OPTION mn_new Image="New.xpm"
\layout LyX-Code

"New" OPTION mn_open Image="Open.xpm"
\layout LyX-Code

"Open"
\layout LyX-Code

OPTION mn_save "Save"
\layout LyX-Code

OPTION mn_saveas "Save As"
\layout LyX-Code

OPTION mn_exit "Exit"
\layout LyX-Code

END MENU
\layout Standard

The above example will probably not appear as you'd imagine, the menu is
 displayed across the screen, what you'd normally have is a File menu, with
 the options listed as a drop down menu.
\layout Standard

This is done using SUBMENUs.
 These have the same parameters as options : eg.
\layout LyX-Code

SUBMENU mn_file "_File" Image="file.xpm" ..
 ATTRIBUTE(RIGHT)
\layout Standard

Options to submenus are listed between the 
\family typewriter 
SUBMENU
\family default 
 and an 
\family typewriter 
END SUBMENU
\family default 
 
\layout LyX-Code

SUBMENU mn_zoom "Zoom"
\layout LyX-Code

OPTION mn_in "In"
\layout LyX-Code

OPTION mn_out
\layout LyX-Code

"In"
\layout LyX-Code

OPTION mn_fit "To Fit"
\layout LyX-Code

END SUBMENU
\layout Standard

Additionally, because these may be reused, you can specify the ID of the
 SUBMENU:
\layout LyX-Code

SUBMENU mn_file "_File" USE file
\layout Standard

In which case the compiler will substitute the options associated with a
 MENU with the specified ID.
 eg.
\layout LyX-Code

MENU file
\layout LyX-Code

OPTION mn_new "New"
\layout LyX-Code

OPTION mn_open "Open"
\layout LyX-Code

OPTION mn_save "Save"
\layout LyX-Code

OPTION mn_saveas "Save As"
\layout LyX-Code

OPTION mn_exit "Exit"
\layout LyX-Code

END MENU
\layout LyX-Code

MENU mymenu
\layout LyX-Code

SUBMENU mn_file "_File" USE file
\layout LyX-Code

END_MENU
\layout Standard

Is the same as :
\layout LyX-Code

MENU mymenu
\layout LyX-Code

 SUBMENU mn_file "_File"
\layout LyX-Code

  OPTION mn_new "New"
\layout LyX-Code

  OPTION mn_open"Open"
\layout LyX-Code

  OPTION mn_save "Save"
\layout LyX-Code

  OPTION mn_saveas "Save As"
\layout LyX-Code

  OPTION mn_exit "Exit"
\layout LyX-Code

 END SUBMENU
\layout LyX-Code

END_MENU
\layout Standard

You can also nest SUBMENUs
\layout LyX-Code

SUBMENU mn_edit "_Edit"
\layout LyX-Code

 OPTION mn_cut IMAGE="m1.xpm" "Cut"
\layout LyX-Code

 OPTION mn_copy Image="Copy.xpm" "Copy"
\layout LyX-Code

 OPTION mn_paste"Pastxxxxxxxxxxxxxxxxxxxxxxxxe"
\layout LyX-Code

 SUBMENU mn_zoom "Zoom"
\layout LyX-Code

  OPTION mn_in "In"
\layout LyX-Code

  OPTION mn_out "In"
\layout LyX-Code

  OPTION mn_fit "To Fit"
\layout LyX-Code

 END SUBMENU
\layout LyX-Code

END_SUBMENU_________________________________________|
\layout Standard

Again - these can be either direct (as in the above example) or SUBMENU
 ..
 USE.
\layout Standard

A complete example :
\layout LyX-Code

MENU file
\layout LyX-Code

OPTION mn_new "New"
\layout LyX-Code

OPTION mn_open "Open"
\layout LyX-Code

OPTION mn_save "Save"
\layout LyX-Code

OPTION mn_saveas "Save As"
\layout LyX-Code

OPTION mn_exit "Exit"
\layout LyX-Code

END MENU
\layout LyX-Code

MENU mymenu
\layout LyX-Code

 SUBMENU mn_file "_File" USE file
\layout LyX-Code

  SUBMENU mn_edit "_Edit"
\layout LyX-Code

   OPTION mn_cut IMAGE="m1.xpm" "Cut"
\layout LyX-Code

   OPTION mn_copy Image="Copy.xpm" "Copy"
\layout LyX-Code

   OPTION mn_paste "Pastxxxxxxxxxxxxxxxxxxxxxxxxe"
\layout LyX-Code

   SUBMENU mn_zoom "Zoom"
\layout LyX-Code

    OPTION mn_in "In"
\layout LyX-Code

    OPTION mn_out "Out"
\layout LyX-Code

    OPTION mn_fit "To Fit"
\layout LyX-Code

   END SUBMENU
\layout LyX-Code

  END SUBMENU
\layout LyX-Code

  SUBMENU mn_useful "Useful Stuff"
\layout LyX-Code

   OPTION mn_form "Open Window & Form"
\layout LyX-Code

   OPTION mn_sform "Open small Window & Form"
\layout LyX-Code

   OPTION mn_screen "Open Form on Screen"
\layout LyX-Code

   OPTION mn_lots "Open lots of windows"
\layout LyX-Code

   OPTION mn_loop "Loop windows"
\layout LyX-Code

   OPTION mn_closewin "Close windows"
\layout LyX-Code

  END SUBMENU
\layout LyX-Code

 OPTION mn_help "Help" ATTRIBUTES(RIGHT)
\layout LyX-Code

END_MENU
\layout LyX-Code

\layout Standard

In this example - your program could 'SHOW MENU' mymenu or file.
\layout Subsection

Handling_menu_options
\layout Standard

In code, options can be enabled or disabled using ENABLE MENUITEM id or
 DISABLE MENUITEM id
\layout Standard

Note :
\layout Standard

You can't use the 'SHOW OPTION "caption"' AND 'HIDE OPTION "caption"' !
 These are for the traditional menu command.
\layout Section

GUI form files 
\layout Standard

New version of fcompile with minor changes to the original which can eventually
 be used for the text mode as well.
 It generates a slightly different output format which is currently incompatible
 with the old fcompile.
\layout Standard

This includes extensions (which are present in the current fcompile in CVS)
 as well as a new one 'SCREEN TITLE'.
\layout Subsubsection

Extensions
\layout Standard


\family typewriter 
SCREEN TITLE
\layout Standard

fcompile can compile multiple screen sections into a single .per.
 Where more than one screen section is specified, the GTK GUI places each
 screen on a separate tab window (GtkNotebook).
 These will be labeled 'Screen n'.
 You can specify an alternate title with this extension : multi.per:
\layout LyX-Code

database formonly
\layout LyX-Code

screen title "Address" size 15 by 60
\layout LyX-Code

{
\layout LyX-Code

..
\layout LyX-Code

}
\layout LyX-Code

screen title "Contact" size 15 by 60
\layout LyX-Code

{..
\layout LyX-Code

}
\layout LyX-Code

screen title "Jobs" size 15 by 60
\layout LyX-Code

{..
\layout LyX-Code

}
\layout Subsection

WIDGET
\layout Standard


\family typewriter 
WIDGET
\family default 
 is a new parameter that specifies what should be place instead of an entry
 field (textbox).
 Currently this can contain "TEXT", "BUTTON", "CHECK" (checkbox), "LABEL"
 (text label - not editable), "PIXMAP" (picture - currently only xpm format
 handled), "COMBO" (combo box) , or "RADIO" (radio buttons).
\layout Standard

More will be added when I get the chance!!
\layout Standard

eg.
\layout LyX-Code

f001=formonly.fld1, WIDGET="CHECK";
\layout Subsection

CONFIG
\layout Standard

When using a WIDGET, there are some specific things that may need setting
 - the CONFIG parameter is used to specify these.
 For all widgets you can specify a WIDTH and a HEIGHT (integers - in character
 spacing) If no width is specified - the size of the field on the form is
 used.
 If no height is specified a single character height will be used.
\layout Standard

eg.
\layout LyX-Code

f001=formonly.fld1, WIDGET="BUTTON", CONFIG="WIDTH=5";
\layout Standard

Some widgets require special config parameters, eg PIXMAP requires a FILENAME:
\layout LyX-Code

f001=formonly.fld1, WIDGET="PIXMAP", CONFIG="FILENAME='aubit.xpm'";
\layout Standard

[ When config parameters require strings, place them in single quotes.
 ]
\layout Standard

Some widgets have optional parameters :
\layout LyX-Code

f001=formonly.fld1, WIDGET="BUTTON", CONFIG="LABEL='OK'";
\layout Standard

or
\layout LyX-Code

f001=formonly.fld1, WIDGET="BUTTON", CONFIG="IMAGE='okpic.xpm'";
\layout LyX-Code

\layout LyX-Code

WIDGET PIXMAP
\layout LyX-Code

CONFIG REQUIRED STR FILENAME filename (xpm format)
\layout LyX-Code

WIDGET BUTTON
\layout LyX-Code

CONFIG OPTIONAL STR LABEL label to use
\layout LyX-Code

CONFIG OPTIONAL STR IMAGE image to use (xpm format)
\layout LyX-Code

WIDGET RADIO
\layout LyX-Code

CONFIG REQUIRED INT NUM label to use
\layout LyX-Code

CONFIG REQUIRED STR Ln Label for button 'n'
\layout LyX-Code

CONFIG REQUIRED STR Vn Value for button 'n'
\layout LyX-Code

WIDGET ENTRY/TEXT/DEFAULT
\layout LyX-Code

CONFIG OPTIONAL INT MAXCHARS maximum field size
\layout LyX-Code

WIDGET LABEL
\layout LyX-Code

CONFIG REQUIRED STR CAPTION Caption for label
\layout LyX-Code

WIDGET CHECK
\layout LyX-Code

CONFIG OPTIONAL STR LABEL label for checkbox (may be clicked)
\layout LyX-Code

CONFIG OPTIONAL STR VALUE value for checkbox
\layout LyX-Code

WIDGET CHECK
\layout LyX-Code

CONFIG_NONE
\layout Section

gtk_form
\layout Standard

Once you've compiled your form using the new fcompile, you can use gtk_form
 to show how it would look.
 There are no command line options on gtk_form, although gtk_init takes
 parameters (but I don't know what most of them do!).
\layout Standard

There is also a GTKRC file which allows you to specify a scheme for example
 :
\layout LyX-Code

GTKRC=/usr/local/share/themes/Redmond95/gtk/gtkrc export GTKRC
\layout Standard

You can select different themes by setting GTKRC under KDE (under GNOME
 I think this is automatic)
\layout Standard

This program will not do anything useful once your form is displayed - but
 it should indicate when a field gains focus and when it is clicked or changed
 (depending on the widget type).
\layout Subsubsection

Examples_(in_test/gui/)
\layout List
\labelwidthstring 00.00.0000

multi.per - An example of a multi screen form
\layout List
\labelwidthstring 00.00.0000

radio.per - Radio buttons
\layout List
\labelwidthstring 00.00.0000

widget.per - Many widgets on a single screen
\layout Section

GUI issues 
\layout Standard

FIXME: unsorted comments on GUI development:
\layout Standard

Status:
\layout Standard

So far I have a basic DISPLAY AT, DISPLAY ..
 TO ...
 and DISPLAY BY NAME.
 (90%)
\layout Standard

Got HIDE WINDOW, SHOW WINDOW, MOVE WINDOW 100% complete
\layout Standard

CURRENT WINDOW IS ..
 100% complete (may need some attention later)
\layout Standard

ENABLE/DISABLE fields..
 100% complete
\layout Standard

Open Window 90% complete
\layout Standard

Open Form 90% complete
\layout Standard

Work on Menus and menuhandlers (90% complete)
\layout Standard

Started on Input statement (40% complete)
\layout Standard

Still have to deal with the modality issue, disabling, formhandlers, and
 the rest of the input & construct stuff..
\layout Standard

Currently there is no support for 'SET PAUSE MODE ...' within the GTK stuff..
\layout Standard

I'll_also_run_the_assumptions_by_you_:
\layout Itemize

Opening a window in the old fashioned way will open a 'frame' in GTK on
 the 'screen' window.
\layout Itemize

The menu command works pretty much the same as now (no multilevels, title
 to the left).
 Currently the only valid menu line is '1'
\layout Itemize

All fields on a form will be disabled by default when the form is loaded
 (I may change this for PIXMAPs as they are dimmed when disabled and can't
 be activated anyway).
\layout Itemize

Menu Handlers will load menus from a menu file, this allows for internationalisa
tion and also allows descriptions of multilevel menus to be loaded at runtime.
 This uses an 'mcompile' command to compile into a runable menu (Details
 to follow).
\layout Itemize

The only way to open a new X type window will be with the SHOW WINDOW xxx
 USING formhandler command.
 In this way - all current 4GL stuff should work and look the same as the
 text based one (with the additional widgets obviously)..
\layout Itemize

Comments in forms and menus are displayed as tooltips rather than having
 a line of their own
\layout Itemize

The DISPLAY AT is a bit dodgy - it works by putting a label at the specified
 position, if a label was started at that position it will be remove before
 the new one is created.
 if the text to display is "" then the label will be removed and no new
 label created.
 This may cause a problem with code like : 
\newline 
DISPLAY "Hello World" at 1,1
\newline 
DISPLAY "World!" at 1,7
\newline 
Which would display "Hello World!" in the TUI mode, in GUI mode - you'd
 have two labels, one on top of the other, how it appears would depend on
 the type of font used, but it could be : 
\newline 
Hello World!
\newline 
or
\newline 
HellWorld! 
\newline 
(if the font is larger than my spacing)
\newline 
or
\newline 
Hello WWorld! 
\newline 
(if the font is smaller)
\newline 
This will be a problem mainly with proportionaly spaced fonts.
 For courier and friends - we should be able to get the right spacings..
\layout Subsection

Colors issues in GUI 
\layout Standard

So far all colors and attributes (except border) are ignored.
 I need to investigate how to do this in GTK (any ideas ?)
\layout Subsection

Threads
\layout Standard

So far I havn't needed to have any extra threads, although there are a couple
 of functions which may be called from 4GL, they will be something like
 :
\layout LyX-Code

FUNCTION gui_run_till_idle()
\layout Standard

and
\layout LyX-Code

FUNCTION gui_run_till_terminate()
\layout Standard

the 'till_idle" function will allow GTK to catch up with itself during complex
 programming.
 (At the minute all operations which do something to GTK, opening a window,
 displaying some text etc, run this after completing.
 the "till_terminate" function will run gtk_main() which is a loop that
 will stop the 4GL program terminating and should be the last function called
 in MAIN..END
\layout Standard

MAIN if you use formhandlers or menuhanlders.
\layout Subsection

Progress
\layout Standard

I'll try to get something posted up by the middle of the week.
 In the meantime - if anyone fancies helping - if you can brush up/read
 up on GTK it would be helpful, there will be a lot of 4GL functions that
 we will need to write to handle the nicer things (for example - I already
 have a 4GL function to set the window title which appears in the title
 bar...) 
\layout Standard

We'll need more for adding and maintaining list boxes etc.
\layout Chapter

Reports 
\layout Section

PDF reports 
\layout Subsection

Before you start
\layout Standard

Aubit 4GL uses PDFLib to help generate the PDF output, you'll need a copy
 of this.
 NOTE : You must use a recent release of PDFLIB (available from http://www.pdflib.
com).
\layout Standard

You'll need to add '-DUSE_PDF_REPORTS' to the CFLAGS line at the top of
 lib/makefile.
 
\layout Standard

Regenerate the files in lib (touch lib/pdf_reports.c;make) to include PDF
 generating capabilities.
\layout Section

Introduction 
\layout Standard

PDF reports are very similar to normal 4GL reports, but with added functionality.
 PDF reports are usually started with the
\layout LyX-Code

START REPORT repname TO "somefile.pdf"
\layout Standard

This is because PDFs are read using Acrobat or some other pdf reader that
 requires a file.
\layout Standard

To define a report as being a PDF report, you must use 
\layout LyX-Code

PDFREPORT report_name(...)
\layout Standard

instead of
\layout LyX-Code

REPORT report_name(...)
\layout Section

Output Section 
\layout Standard

The output section of a 4GL PDF report is slightly different to a normal
 report.
 It can have any of the following 
\layout LyX-Code

LEFT MARGIN nval
\newline 
RIGHT MARGIN nval
\newline 
TOP MARGIN nval
\newline 
BOTTOM MARGIN nval
\newline 
PAGE LENGTH nval 
\newline 
PAGE WIDTH nval
\newline 
FONT NAME "font"
\newline 
FONT SIZE integer
\newline 
PAPER SIZE IS A4
\newline 
PAPER SIZE IS LETTER 
\newline 
PAPER SIZE IS LEGAL
\newline 
REPORT TO "filename"
\newline 
REPORT TO PIPE "progname"
\layout Standard

nval can be any of the following :
\layout LyX-Code

n POINTS - PDF points 1/72 of an inch
\newline 
n INCHES - Inches
\newline 
n MM - metric mm
\newline 
n
\layout Standard

eg.
\layout LyX-Code

LEFT MARGIN 0.25 INCHES
\newline 
RIGHT MARGIN 20 MM
\newline 
PAGE LENGTH 60
\newline 
COLUMN 10
\layout Standard

When the units expression is omitted, n defaults to characters or lines
 (whichever is appropriate).
\layout Subsection

Fonts
\layout Standard

The 4GL program will use the PDFLIB fonts.
 If the required fonts do not exist then the program will abort with a PDFLIB
 error.
 
\layout Standard

NOTE : Case is sensitive for these font names!
\layout Standard

Eg.
\layout LyX-Code

FONT NAME "Times-Roman"
\layout Standard

or
\layout LyX-Code

FONT NAME "Helvetica"
\layout Subsection

Report Structure
\layout Standard

The report structure will be identical to that of a normal 4GL report.
\layout Subsection

Extras
\layout Standard

In order to generate 'nice' reports - there are a couple of extra features
 available.
\layout Subsubsection

Positioning 
\layout Standard

You can use the normal column and skip positioning mechanisms.
 You can use the nval values for column 
\layout Standard

eg
\layout LyX-Code

print column 1.1 inches,"Hello World"
\layout Standard

but you have to use 'skip by' for nval movements :
\layout Standard

Eg.
\layout LyX-Code

skip by 2 inches
\layout Standard

Also you now have a 'skip to' which allows you to move to an absolute position
 within the current page (including backwards).
\layout Standard

Eg.
\layout LyX-Code

skip to 2 inches
\layout Subsubsection

Using pdf_function() 
\layout Standard

This allows you to control certain aspects of the PDF report, changing fonts
 etc.
 The first argument is the operation type, this will be :
\layout Standard

Argument Indirectly calls
\layout Standard

_____________________________________
\layout LyX-Code

set_font_name -> PDF_setfont
\newline 
set_font_size -> PDF_setfont
\newline 
set_parameter -> PDF_set_parameter set_value_->_PDF_set_value
\layout Standard

Check the PDFlib manual for these
\layout Standard

Eg.
\layout LyX-Code

call pdf_function("set_font_name","Times-Roman")
\newline 
call pdf_function("set_font_size",30)
\newline 
call_pdf_function("set_parameter","underline","true");
\layout Subsubsection

Images 
\layout Standard

It is also possible to include an image within the PDF report, this is done
 using the 'PRINT IMAGE' statement with a blob variable containing an image.
 The image must be a GIF,PNG, TIFF or JPEG and this type must be specified
 when displaying the image, this is done using the 'AS ...' keyword, ie "AS
 GIF", "ASTIFF", "AS PNG", "AS JPEG".
\layout Standard

Finally - the image can be scaled when it is displayed.
 This can be either a single value (ie scaling x & y by the same value)
 or two (specifying the scaling for x & y separately)
\layout LyX-Code

|print image some_blob_var as png
\newline 
print image some_blob_var as gif scaled by 0.5.7,0.8
\layout Subsection

Example program
\layout Standard

Please see pfd_example.4gl in test/
\layout Section

Printing generated reports 
\layout Standard

What's really nice is that with most Linux distributions include the ability
 to print PDF / PS files direct to the printer!
\layout Standard

From http://www.apsfilter.org/ :
\layout Quotation

"Apsfilter supports PS (Postscript) printer and non-PS capable printer by
 using Ghostscript as PS emulator.
 So if you have a non-expensive color DeskJet printer, Apsfilter and Ghostscript
 enhance your printers capabilities, that you'll get a Color Postscript
 Printer in return for free ! "
\layout Standard

This one is especially important for running Aubit on any kind of remote
 display:
\layout Standard

"Printing on locally connected, network printer, as well as on Unix-, Windows-an
d AppleTalk remote printer is supported.
 "
\layout Standard

From http://www.linuxprinting.org/howto/setup.html
\layout Quotation

"apsfilter is a filter designed for use on a wide variety of Unices.
 It supports essentially all Ghostscript drivers.
 It, too, works with various strains of LPD, including stock BSD and LPRng.
 At the moment, this is probably the best third-party system around for
 non-PostScript printers"
\layout Standard

Apsfilter V 6.0 Filetype Support lists PDF, and many other file types supported:
 http://www.apsfilter.org/filetypes.html
\layout Standard

Also see http://www.cups.org/ :
\layout Standard

"A UNIX printing system (with sample drivers for HP, EPSON, and OKIDATA
 printers) based on the Internet Printing Protocol.
 CUPS is the basis for ESP Print Pro and is being considered as the standard
 printing system for a number of commercial and free UNIX operating systems.
 CUPS is provided under GNU GPLand LGPL.
 "
\layout Chapter

Make
\layout Standard


\family typewriter 
make
\family default 
 is a command generator.
 It is used to automate the task of recompiling and relinking programs when
 you have altered a source file.
 Typically you create a file called Makefile or makefile (Makefile is preferred
 as it sorts higher in an ls listing of directory files) which contains
 information about which files depend on which others and lists the commands
 needed to create the object modules (.o files) and executable binaries.
\layout Standard

Once you have your Makefile correctly written, whenever you want to recompile
 a program after changing a file, simply type:
\layout LyX-Code

make
\layout Standard

and the minimum necessary compilation and linking will be done for you to
 produce the altered executable.
\layout Subsection

GNU make
\layout Standard

This chapter gives some advice and examples for writing Makefiles for use
 with Aubit4GL.
 For documentation, ignore the O'Reilly book (which does not cover GNU make)
 but go the 
\family typewriter 
www.gnu.org
\family default 
 website and read the online documentation there.
\layout Section

Makefiles
\layout Standard

The following advice assumes that you are using GNU make (which has several
 constructs not available in other older versions of make).
 
\layout Subsubsection

Include File
\layout Standard

Here is a sample set of definitions for an Aubit4GL Makefile:
\layout LyX-Code

# ---- Declare the following suffixes meaningful to make
\layout LyX-Code

.SUFFIXES: .afr .per
\layout LyX-Code

.SUFFIXES: .ao .4gl
\layout LyX-Code

.SUFFIXES: .iem .msg
\layout LyX-Code

\layout LyX-Code

# ---- Pattern rules for the above suffixes
\layout LyX-Code

\layout LyX-Code

%.afr : %.per   # equivalent to the old form .per.afr:
\layout LyX-Code

(TAB)  aubit fcompile $< 
\layout LyX-Code

\layout LyX-Code

%.ao : %.4gl
\layout LyX-Code

(TAB)  aubit 4glc -c $?
\layout LyX-Code

\layout LyX-Code

%.iem : %.msg
\layout LyX-Code

(TAB)  aubit amkmessage $< $@
\layout Standard

These definitions should be put into a separate file (say 
\family typewriter 
makedefs
\family default 
) in the parent directory.
 You can then include the makedefs file in the Makefile itself with the
 statement:
\layout LyX-Code

include ../makedefs
\layout Standard

The benefit of using include files in this way is that you avoid repetition
 of the included elements, and maintenance is reduced to a single file.
\layout Subsubsection

Make glossary:
\layout Description

$? = all the newer prerequisites (which need rocompiling)
\layout Description

$@ = the current target (left of the : in the prereq line)
\layout Description

$< = the first of the newer prerequisitess.
 This is suitable when the command can only compile 1 file at a time (like
 aubit fcompile).
\layout Description

$^ = all the prereqs (not just the newer ones).
 Use this when you need to relink all the object modules.
\layout Description

$* = the stem (matching % in prereq line).
\layout Description

%  = wildcard matches any sequence of zero+ chars.
 Note: the 2nd and subsequent % is the same sequence  that the 1st % matched.
\layout Standard

$?, $(?), and ${?} are all the same variable.
  If a variable has more than a 1 char identifier you must enclose the identifie
r in () or {}s
\layout Standard

A modifier D, or F, can be used with $?, $@, $<, or $^ to return just the
 D(irectory part) or the F(ile part) of the filename.
 
\layout Standard

e.g.
 if $? = 
\family typewriter 
../lib/options.4gl 
\family default 
then
\layout Standard


\family typewriter 
$(?D)
\family default 
 = 
\family typewriter 
../lib
\family default 
 and 
\family typewriter 
$(?F)
\family default 
= 
\family typewriter 
options.4gl
\layout Standard

Note that these D and F modifiers are defined in make's builtin rules as:
 
\layout LyX-Code

?D=$(patsubst %/,%,$(dir $?))
\layout LyX-Code

?F=$(not-dir $?)
\layout LyX-Code

etc
\layout Standard

The $(dir arg) and $(not-dir arg) macros are available for use with any
 variables whether user defined or builtin.
 Note that the $(?D) definition removes the trailing slash from the directory
 path (substiting %/ with %)
\layout Subsubsection

Makefile Example
\layout LyX-Code

#
\layout LyX-Code

GPATH = ../lib ../per
\layout LyX-Code

\layout LyX-Code

.PHONY: all
\layout LyX-Code

\layout LyX-Code

all: prog prog.iem prog.afr proga.afr prog.iem
\layout LyX-Code

\layout LyX-Code

srcfiles = prog0.4gl prog1.4gl prog2.4gl ../lib/options.4gl
\layout LyX-Code

objfiles = $(srcfiles:.4gl=.ao)
\layout LyX-Code

\layout LyX-Code

prog : $(objfiles)
\layout LyX-Code

(TAB) aubit 4glc -o $@ $^
\layout LyX-Code

\layout LyX-Code

# Note the subtle difference here $^ (all prereqs are needed)
\layout LyX-Code

#  $? would link only the newly compiled objects
\layout LyX-Code

\layout Standard

The example file above is for a program consisting of 4 modules: 
\layout Itemize

prog0.4gl (containing the global ...
 end global statements)
\layout Itemize

prog1.4gl (containing the main ...
 end main function and some general purpose functions)
\layout Itemize

prog2.4gl (containing table specificated generated functions for Query, Add,
 Update, Delete, etc
\layout Itemize

options.4gl for directing report output.
\layout Standard

This structure was common with Fourgen generated programs.
\layout Subsection

Pattern Rules
\layout Standard

Rules in Makefiles take the form:
\layout LyX-Code

target : prereq1 [[prereq2 ] ...
 ]
\layout LyX-Code

(TAB) command1
\layout LyX-Code

...
\layout Standard

Note that the invisible tab is a crucial part of the syntax of Make.
 These sometimes get corrupted into spaces in ftp transfers - so be careful!.
 A make rule specifies that the target files depend on the listed prerequisite
 files and supplies the command that make should execute whenever a prerequisite
 file is newer (that is modified more recently than) the target file(s).
\layout Subsection

Make variables
\layout Standard

In Makefiles like the above, we use variables 
\family typewriter 
srcfiles
\family default 
 and 
\family typewriter 
objfiles
\family default 
 to minimise the work of changing definitions.
 Note that the assignment to objfiles is done using a substitution expression
 (.ao replaces .4gl from the srcfiles list).
 If we add another library module to the srcfiles list (say 
\family typewriter 
../lib/names.4gl
\family default 
), no other change need be made to the Makefile.
 
\layout Standard

Traditionally we have used uppercase for variable names in Makefiles.
 The GNU people now recommend that you use lowercase for better readablity.
\layout Subsection

GPATH and VPATH
\layout Standard

Normally make will search only the current directory.
 If you want to force it to look elsewhere then you can set GPATH or VPATH
 to a list of search directories.
\layout Standard

Directories listed in GPATH will we searched and the targets compiled into
 the remote directory.
\layout Standard

Directories listed in VPATH will be searched but the targets compiled into
 the current directory.
\layout Standard

In the example Makefile, options.ao will be compiled into ../lib/options.ao
\layout Subsection

.PHONY
\layout Standard

Nearly all Makefiles have phoney targets: all, clean, install, and maybe
 others.
 GNU make allows you to declare these phoney targets (i.e.
 targets which are not real files to be built by commands).
 The benefit of doing this is the .PHONY declaration tells make to ignore
 an files called clean, install.
 etc.
 Omitting the .PHONY declaration might result in an accidentally created
 file called install, preventing make from executing the install commands.
\layout Subsection

Implicit rules
\layout Standard

Note in the example that there is no specific rule for the help file and
 forms.
 These will be built by make using the make definitions we put into the
 include file.
 The targets: prog.iem, prog.afr, and proga.afr will be compiled using the
 %.iem : %.hlp and %.afr : %.per pattern rules in ../makedef.
\layout Subsection

Syntax
\layout Description

comments the hash symbol # comments out the rest of the line (i.e 
\family typewriter 
make
\family default 
 ignores what follows the #).
\layout Description

quotes both single quotes ' and double quotes " are treated literally.
 Do not use them in Makefiles.
 In shell programs you use quotes to inhibit interpretation and the shell
 strips tem from its input.
 
\family typewriter 
make
\family default 
 does not do anything special to quotes.
 
\layout Description

longlines break a long line by putting a backslash 
\backslash 
 before the end of line.
 This will tell make to remove the backslash and the end of line, and interpret
 the result as a single line.
\layout Subsection

Debugging make
\layout Standard

A botched Makefile can destroy your sourcefiles.
 
\layout Standard

To help debug your Makefiles, use the -n and -p options.
\layout Description

-p will display all the rules (including the builtins) that make is using
\layout Description

-n will cause make not to actually execute the command but display them
 to the screen
\layout Standard

Type the command:
\layout LyX-Code

make -np prog
\layout Standard

will cause make to display all its definitions and rules, and to display
 all the commands it would run if you had typed the command: 
\family typewriter 
make prog
\layout Section

Amake
\layout Standard

Aubit4GL also provides a utility called 
\family typewriter 
amake
\family default 
 which was developed for use with the source of Maximise (an accounting
 application written in Informix 4GL).
 The amake utility automates the construction of makefiles which allow Maximise
 to be rebuilt using Aubit4GL.
\layout Standard


\family typewriter 
amake
\family default 
 generates an x4GL specific set of rules and tools for GNU 
\family typewriter 
make
\family default 
 
\layout Standard

With Aubit 4gl compiler, compiling small program can be trivial:
\layout LyX-Code

aubit 4glpc *.4gl -o myprog
\newline 
aubit 4glpc *.per
\newline 
aubit amkmessage myhelp.msg myhelp.iem
\layout Standard

Even with extra C code, it's still simple:
\layout LyX-Code

aubit 4glpc *.4gl myccode.c -o myprog -DAUBIT4GL
\layout Standard

But, when you want to keep your make files compatible with Informix and
 4Js compilers, have multiple program definitions in one directory, use
 pre-linked libraries, and be capable of compiling to P-code and C-code
 for each compiler, take care of installing and cleaning, it's not that
 simple any more.
\layout Section

amake
\layout Standard

When you need to create new make file to compile x4gl programs, you should
 use rules, headers and footer prototypes supplied with Aubit 4gl.
 Utility for running created make files, while not necessary, is also supplied,
 and can make your life a little easier.
\layout Standard

For existing Informix 4GL and 4Js BDL/D4GL makefiles, I created a conversion
 system that will first create completely new set of make files from existing
 makefile (one per program) and then let you use it, in more or less same
 way we did so far, but erase most if not all of existing shortcomings.
 Old makefiles are preserved, so you can mix and match, if you really want
 to, but you won't need to.
\layout Section

Converting old makefiles
\layout Subsection

prepmake
\layout Standard

run 
\family typewriter 
prepmake
\family default 
 in the directory containing old make file, 
\family typewriter 
makefile
\family default 
 or 
\family typewriter 
Makefile
\family default 
.
 
\layout Standard

This will create file "makefile.prep" containing instruction needed for dumping
 program definitions to individual make files (*.mk).
 Note: this functionality depends on the fact that your existing makefiles
 use command "fgllink" or other 4gl compiler commands somewhere in each
 defined program target, and list all source files in dependencies.
 If for any reason this is not true for some makefile you want to process,
 look at the script, it should be easy to substitute this with some other
 present command.
\layout Standard

Next, "prepmake" will first run "touch *.4gl" (to force all targets into
 thinking they need building) and then "make -f makefile.prep".
 This will create one make file for each program defined in makefile.prep,
 named as <program>.mk, using script "genmake".
 Each .mk files will contain definitions of include headers and footers,
 and names of source files needed to build that program, and nothing else.
 Like this:
\layout Subsection

example
\layout LyX-Code

include header.mki
\newline 
PROG = P4E
\newline 
GLOBALS.4gl = P4E.4gl
\newline 
FILES.4gl = 
\backslash 

\newline 
${GLOBALS.4gl} 
\backslash 

\newline 
bankwind.4gl 
\backslash 

\newline 
ckapwind.4gl 
\backslash 

\newline 
ckhdwind.4gl 
\backslash 

\newline 
secufunc.4gl 
\backslash 

\newline 
vendwind.4gl
\newline 
FILES.per = ${ALLFORMS.per}
\newline 
include_footer.mki
\layout Subsection

amakeallo
\layout Standard


\family typewriter 
amakeallo
\family default 
 can be ued to rebuild all the .o object files in a Makefile.
\layout Subsection

amakeallf
\layout Standard


\family typewriter 
amakeallf 
\family default 
can be used to recompile all the .per form files in a Makefile.
\layout Standard

Note: amake knows how to override 
\family typewriter 
header.mki
\family default 
, 
\family typewriter 
footer.mki
\family default 
, or both.
 You can also
\layout Standard

override anything coming from header, and later, in footer, anything at
 all.
\layout Subsection

2.
 amake
\layout Standard

Examples:
\layout Standard

'aubit amake' - build default targets of all .mk files in ./
\layout Standard

'aubit amake -k -all install' - install all programs, ignore errors
\layout Standard

'aubit amake P11 aubit -k' - build aubit target defined in P11.mk, ignore
 errors
\layout Standard

'aubit amake P11 aubit -defaultinclude' - build P11 target for Aubit compiler,
 use includes defined in P11
\layout Standard

'aubit amake P11 -header myhead.mk' - default P11 target, use myhead.mk for
 header
\layout Standard

see "amake --help" for full lost of flags and parameters.
\layout Section

Requests
\layout Standard

Tell me if it's useful for you, if you need help, explanations, changes...
 If you make generally useful changes, I would like if you send them back
 to me.
 Latest version of these files will always available through Aubit 4gl CVS
\layout Section

Notes
\layout Itemize

Most existing makefiles have no idea which file contains GLOBALSdefinitions;
 some compilers care, some don't.
 I assumed first source file listed in GLOBALS file, which can be wrong.
 If you step on this one, you'll need to find out manually which one is
 it actually.
 I guess it's more then possible to grep for "END GLOBALS" in "genmake"
 if we wanted to do that automatically.
\layout Itemize

Some existing makefiles often don't have any references to form files, and
 even if they do, they have no idea which forms belong to which program.
 By default, I defined that each program needs all forms in current module.
 It would be wise to gradually replace this with actual forms needed.
 I guess that it should be possible to grep that from "genmake", since there
 we know all 4gl source files.
 
\layout Itemize

You should consider this as technology demonstration.
 Some things are probably missing, or incorrect, in rules definitions and
 targets.
 But this is now so easy to fix, since it's all in one place that I did
 not worry too much.
 It compiled everything I tried.
 But I don't consider this finished code.
 It does what I needed, it may or may not do that same for you, but again,
 it's really easy to do anything in the way this is structured now.
 You should consult the "make" manual at http://www.gnu.org/manual/make-3.79.1/html_
mono/make.html if you want to play with existing code.
\layout Itemize

All "programs" that are nothing more then hard links, are ignored.
 This needs to be fixed in existing makefiles manually, unless someone can
 explain to me what's good about linking a program to a different name and
 then pretending it's something else.
 It won't work on Windows anyway, so if we want Windows compatibility, we
 cannot do it anyway.
\layout Itemize

some of functionality depends on recent version of GNU make.
 If you don't have it, you'll need to download it from http://www.gnu.org.
 My version was 3.77.
 Current version as of time of writing was 3.79
\layout Itemize

Most existing x4gl makefiles don't have any idea about help files.
 It should be possible to grep for this in "genmake".
\layout Itemize

It's really easy to add functionality to do local check out, since now you
 can compile anywhere, even without any source files in local directory
 (amake/make will find them if they exist) This is closely related to the
 way that serious development should be organized using version control...
\layout Itemize

Why one make file for one program? First, when more then one developer is
 working in same tree, it gives me the warm fussy feeling.
 Second, it makes target definitions cleaner, simpler, and easier to debug.
 Third, you can checkout your own make file to wherever you want, together
 with all sources needed for program.
 Or without them for that matter.
\layout Itemize

Object libraries (.aox in Aubit, .42x in 4js dialect).
 I guess it should be possible to make attempt in automating this in "genmake",
 if we really want it.
 Related to this is an issue of how different 4gl compilers "strip" unused
 functions from executables.
 D4GL don't really care, since linking produces only a map file.
 i4gl does care, and Querix and Aubit, being C code translators, can easily
 strip executables.
\layout Itemize

why is amake needed: actually, it's not, you can do "make -f 1.mk 2.mk params"
 or "make -f *.mk params" just fine, as long as you keep header and footer
 includes in each .mk file.
 It just makes things simpler, more flexible, and can replace headers on
 the fly.
\layout Section

Installation 
\layout Standard

(don't forget to convert back to UNIX file format if you are receiving this
 on Windows box; needless to say, scripts will need "chmod a+x")
\layout Standard

These two should go somewhere in the path, but will probably be used only
 once:
\layout Description

prepmake - sh script to prepare original make file, created"makefile.prep"
\layout Description

genmake - sh script called from prepared makefile to create individual make
 files
\layout Standard

Header will probably be most useful in your program directory, since it
 can contain module specific definitions, but one copy of general type should
 also probably be in /etc or /usr/incl:
\layout Description

header.mki - make file for including from each individual make file.
 It in turn includes a4gl.mk i4gl.mk q4gl.mk and d4gl.mk by default.
\layout Standard

The Following files are supposed to be completely abstracted, so in /etc
 or /usr/include they go:
\layout Description

footer.mki - make targets definitions included from each individual makefile.
\layout Description

a4gl.mk - rules for compiling using Aubit 4gl compiler
\layout Description

i4gl.mk - rules for compiling using classic Informix 4gl compiler
\layout Description

d4gl.mk - rules for compiling using 4Js (Informix D4GL) 4gl compiler
\layout Description

q4gl.mk - rules for compiling using Querix 4gl compiler
\layout Standard

And finally, this one should be in the path, probably in /bin:
\layout Description

amake - sh script used for executing make process, instead of the "make"command
\layout Section

Credits: 
\layout Standard

Thanks to Jonathan Leffler for Informix-4gl and 4Js rules, and general concept
 of how 4gl program should be processed by make.
 See www.informix.com/idn
\layout Section

#DEFINE
\layout Standard

Note about using #DEFINE-style constructs, like C.
 There's nothing built into 4GL, but many people use the Unix "M4" command
 successfully.
 You could also use "cpp".
\layout Standard

Stuart Kemp (stuart@cs.jcu.edu.au):
\layout Standard

To use the C preprocessor (cpp) in conjunction with GNU make you might use
 a suffix of ".cpp" on the files you edit, and then build a Makefile containing:
\layout LyX-Code

.SUFFIXES: .4gi .4go .4gl .cpp .frm .per .cpp.4gl:
\layout LyX-Code

@echo Make $@ from $< $(CPPDEFS)
\layout LyX-Code

@$(CPP) $(CPPDEFS) $< > $@
\layout LyX-Code

.per.frm:
\layout LyX-Code

@echo Make $@ from $<
\layout LyX-Code

@form4gl -s $<
\layout LyX-Code

.4gl.4go:
\layout LyX-Code

@fglpc $<
\layout LyX-Code

\layout Standard

Of course, the downside of this is that if you get an error-message when
 running your .4g[io] program, the line-number will be that in the .4gl file,
 not the .cpp file.
\layout Section

4GL Makefiles
\layout Standard

There are no standard rules for how to organize Makefiles for 4gl.
 This note attempts to repair this deficiency for both Unix and NT systems.
\layout Subsection

Makefiles for Classic 4GL on Unix
\layout Standard

Assuming that your version of MAKE understands the 'include' directive,
 a typical makefile will look rather like the file described earlier in
 thisdoccument.
 If your MAKE does not understand the 'include' directive, the simplest
 solution is to obtain a version of MAKE which does understand them.
\layout Standard

One such MAKE is GNU Make, which is widely available on the Internet.
 See The GNU Project and the Free Software Foundation (FSF) for more information.
\layout Standard

The rules file 'i4gl.mk' is located in some convenient directory.
 In the example, $HOME/etc is used, but a centralized location such as $AUBITDIR
/incl, $INFORMIXDIR/etc or $FGLDIR/etc is a reasonable choice.
 Note that either the curly brackets or parentheses are required around
 the name of the environment variable in the makefile.
\layout Standard

The macros list the components of the program, and the definitions of the
 lists avoid replicating names as much as possible, so that if a file is
 added, deleted or renamed, only one line in the makefile needs to be changed.
\layout Standard

Note too that the current versions of i4gl.mk and d4gl.mk automatically provide
 definitions for the majority of the derived files, so the makefile itself
 does not have to define macros such as FILES.o or FILES.4ec.
 It must, however, define FILES.4gl for the I4GL source files, FILES.per for
 the form source files, and FILES.msg for the help source files, since these
 macros are used to define the other macros.
\layout Standard

This makefile uses the 'standard' install script for Unix, and that means
 it can only install a single file at a time (an silly design decision,
 but one which was made so long ago that it cannot readily be changed).
 Consequently, we have to iterate over the list of form files.
 If there was more than one message file, we'd need to do the same for the
 message files.
\layout Standard

The hard work in this makefile is the install and clean process.
 The actual compilation rules are minimal, occupying just six non-blank
 lines.
 There are some standard targets which are desirable in most makefiles.
 These include all to build everything that is needed by default, install
 to put the software in a location where it can be used, and clean to remove
 the debris from the development process.
\layout Standard

As another pseudo-standard, if you are working with both Classic 4GL and
 Dynamic 4GL, or if you are using both p-code and c-code, it helps to standardiz
e on some extra names.
 The makefiles illustrated here use:
\layout Itemize

aubit Aubit 4gl c-code compilation
\layout Itemize

i4gl-ccode Classic 4GL c-code compilation (I4GL)
\layout Itemize

i4gl-pcode Classic 4GL p-code compilation (I4GL-RDS)
\layout Itemize

d4gl-ccode Dynamic 4GL c-code compilation
\layout Itemize

d4gl-pcode Dynamic 4GL p-code compilation
\layout Itemize

i4gl Classic 4GL (both p-code and c-code)
\layout Itemize

d4gl Dynamic 4GL (both p-code and c-code)
\layout Itemize

querix Querix 4gl c-code compilation
\layout Standard

These makefiles can also builds the custom I4GL p-code runner that is needed
 to run the program.
\layout Section

D4GL Makefiles on Unix
\layout Standard

The rules for compiling D4GL are similar to the rules for compiling I4GL,
 but they use a different set of suffixes.
 
\layout Standard

The first target in the makefile is 'default', and is what will be built
 if you simply type "make -f d4glonly.make".
 It is set up to build just the D4GL p-code program; to build the c-code
 program too, you have to specify "all" or "d4gl-ccode" on the command line.
\layout Standard

This makefile builds a custom runner for D4GL because the code uses some
 C code.
 When you need a D4GL custom runner, you have to link with it too, so you
 have to build the custom runner before you try linking the program, and
 the dependencies ensure this happens automatically.
\layout Standard

The rest of the makefile follows the pattern in the I4GL version, with the
 changes appropriate to handling D4GL instead of I4GL.
\layout Subsection

I4GL Makefiles on Unix
\layout Standard

The actual rules for compiling Informix Classic 4GL are defined in the file
 i4gl.mk .
 There are a number of key things to note about them.
\layout Itemize

The rules file does not reset the complete MAKE suffix list.
 Some versions of the file did, but this leads to problems when you try
 to add support for Dynamic 4GL as well; which file should be included first,
 and why, and so on.
 The down-side of being so accommodating is that if there is an intermediate
 ".c" file left over by a failed I4GL compilation, then that file will be
 compiled in preference to the ".4gl".
 To fix this, you have to nullify the suffix list and then reinstate the
 suffixes you want in the correct order (which means preferring the .4gl
 file to the .c file, and .ec files to .cfiles).
 However, it is difficult to write two separate files, i4gl.mk and d4gl.mk,
 which can be included in either order, and which don't repeat each others
 suffixes, if you also zero the suffix list in both files.
\newline 
I guess you could solve this if you defined I4GL.SUFFIXES and D4GL.SUFFIXES
 as macros, and had the line which re-instates the suffix rules specify
 both macros, even if one of them was actually empty (as it would be if
 you had not already processed the other rules file).
 A change for next month.
\layout Itemize

The rules file does not define any targets, so that you can include it at
 the top of the makefile without altering the default target written in
 the makefile.
\layout Itemize

The macro names are very consistent (arguably too consistent and not sufficientl
y mnemonic).
\layout Subsection

NMAKE
\layout Standard

If you have Microsoft Visual Studio or Microsoft Visual C++ on your NT machine,
 you will have the NMAKE program available to you.
 You can use Makefiles patterned on the one shown below (from the D4GLDEMO
 program).
 Note that both the rules and the makefiles are much simpler on NT than
 on Unix because Classic 4GL is not available on NT, and neither is the
 Dynamic 4GL c-code compiler.
\layout Standard

Some of the significant differences between MAKE on Unix and NMAKE on NT
 are:
\layout Itemize

NMAKE does not accept ${MACRO}, but only $(MACRO).
\layout Itemize

NMAKE does not accept a dot in macro names.
\layout Itemize

NMAKE does not recognize 'null suffix' rules (for converting x.c into x,
 for example; it would only handle x.c to x.exe).
\layout Itemize

Since there is no D4GL c-code compiler on NT, those rules in d4gl.mk are
 irrelevant.
\layout Itemize

Since there is no I4GL c-code or p-code compiler on NT, the rules in i4gl.mk
 are irrelevant.
\layout Itemize

There is no fglmkrun on NT.
\layout Itemize

You have to be very careful about what you do with 'cd' commands.
 Typically,you have to do:
\newline 
cd with && $(MAKE) && cd ..
 POSIX.1 requires MAKE to accept both ${MACRO} and ${FILE.o}, unlike NMAKE.
\layout Itemize

Since Unix versions of MAKE do accept the notations accepted by NMAKE, it
 would be possible, and possibly even sensible, to resign oneself to using
 the notation accepted by NMAKE in both the Unix and NT versions of the
 Classic 4GL and Dynamic 4GL makefiles and make rules.
 However, that also feels a bit like giving in to the school-yard bully,
 and that isn't really acceptable.
\layout Standard

Prepared by: mailto:jleffler@informix.com
\layout Standard

Last Updated: 1999-10-08
\layout Standard

Edited by AF
\layout Section

Bug in ESQL/C rules:
\layout Standard

Compiling ESQL/C code did not work because of macro name mismatches.
\layout Standard

Specifically, there's a line that defines ESQL = ${ESQL_EC_ENV} ${ESQL_EC_CMD}
 ${ESQL_EC_FLAGS} but the corresponding macros for compiling ESQL/C code
 use ${ESQL_EC} rather than ${ESQL}.
 I concluded that I meant to define ESQL_EC, not ESQL.
\layout Standard

For Aubit 4gl team,
\layout Standard

Andrej Falout
\layout Chapter

Revisions
\layout Section

2004-5-26
\layout Itemize

Created Makefile for this document in its various forms.
\layout Itemize

Added sections on Aubit Makefiles to beginning of Chapter 10.
\layout Section

2004-5-19
\layout Standard

Replace all references to a4glrc with aubitrc.
\layout Section

2004-4-27
\layout Itemize

Chapter 2: further information about PostgreSQL and in particular the gborg.postg
resql.org project
\layout Itemize

Chapter 5: include Mike's documentation on IMPORT PACKAGE packagename
\layout Section

2004-2-22
\layout Itemize

Some tidying of chapters 1-3
\layout Itemize

LyX preamble now sets up PDF properties: pdfinfo, pdfcatalog.
 You can navigate with Table of contents (bookmarks) on the left under Acroread
 now.
\layout Itemize

HTML version now shows section numbering.
\layout Section

Problems
\layout Itemize

Tables bug in latex2html is now fixed (thanks to Ross Moore of MacQuarie
 University)
\layout Itemize

Stylesheets still not right (latex2html configuration problem?)
\the_end
