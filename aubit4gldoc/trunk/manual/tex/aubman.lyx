#LyX 1.5.5 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{a4wide}



%%\usepackage{lmodern}
%\usepackage{ae,aecompl}
\usepackage{hyperref}
%\usepackage[T1]{fontenc}
\usepackage{ifpdf}
\ifpdf
 \usepackage{lmodern}
 \pdfinfo{ /Title (Aubit4GL) 
 /Subject(User Manual)
 /Author( Mike Aubury, Andrej Falout, edited John O'Gorman)
}
 \pdfcatalog{/PageMode(/UseOutlines)}
\fi
\usepackage{multicol}
\usepackage{framed}
\newenvironment{a4gl}{\color{red}\begin{leftbar}}%
{\end{leftbar}\color{black}}
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 10
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 5
\tocdepth 5
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Aubit4GL Manual
\end_layout

\begin_layout Author
Mike Aubury, Andrej Falout
\newline
edited by John O'Gorman
\end_layout

\begin_layout Date
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Features
\end_layout

\begin_layout Section
4GL
\end_layout

\begin_layout Standard
Informix 4GL was co-designed by Roger Sippl (founder of Informix ) and Chris
 Maloney.
 They combined the elements of Perform (the screen package designed by Betty
 Chang), Ace (the report writer written by Bill Hedge), and the SQL engine
 written by Roy Harrington into a Pascal-like language which Informix released
 in 1986 - the same year that the first ANSI standard for SQL was promulgated.
\end_layout

\begin_layout Standard
Informix 4GL complied with the SQL86 standard.
 I4GL was phenominally successful in the marketplace.
 More applications were written in I4GL in the 1990s than in any other language.
\end_layout

\begin_layout Section
Aubit 4GL
\end_layout

\begin_layout Standard
Aubit 4GL is a free opensource work-alike for Informix 4GL.
 The project was started by Mike Aubury of Aubit Computing Ltd, who continues
 to contribute to it.
 A number of other notable contributors include Andrej Falout, John O'Gorman,
 Sergio Ferreira, Walter Haslbeck.
\end_layout

\begin_layout Standard
Where Informix 4GL was locked into working only with Informix's own database
 engines: SE and IDS, Aubit 4GL can work with any SQL compliant engine.
 Currently supported engines are Informix SE and IDS, PostgreSQL, SAPDB,
 SQLite and using ODBC (unixODBC or iODBC on Linux/Unix) any other engine
 for which ODBC interfaces exist.
\end_layout

\begin_layout Section
Aubit4GL Benefits 
\end_layout

\begin_layout Subsection
GNU,\InsetSpace ~
GPL,\InsetSpace ~
OpenSource
\end_layout

\begin_layout Standard
Aubit4GL is free and opensource.
 It will cost you nothing, but there are much more important implications
 that this, in our view.
 Its future does not depend on anyone but you.
 To find out more about implications of this feature, please see 
\begin_inset LatexCommand htmlurl
target "http://www.opensource.org"

\end_inset

 and 
\begin_inset LatexCommand htmlurl
target "http://www.gnu.org"

\end_inset

.
\end_layout

\begin_layout Subsection
Commercially Supported
\end_layout

\begin_layout Standard
Commercial support is available from Aubit Computing Ltd if you want it.
 Aubit Computing Ltd is Mike Aubury's company.
\end_layout

\begin_layout Standard
This will guarantee you can use Aubit4GL in business-critical situations
 with confidence, and bring together the best of both worlds.
 To learn more, visit 
\begin_inset LatexCommand htmlurl
target "http://www.aubit.com"

\end_inset

.
\end_layout

\begin_layout Subsection
Productive
\end_layout

\begin_layout Standard
Based on a robust, mature, stable, efficient, and productive language, x4GL
 is dedicated to writing business-related, database oriented applications,
 and this is what it does, in our opinion, best in the world.
 
\end_layout

\begin_layout Standard
It is easy to learn, implement, and maintain.
 And most of all, it is at least 3 times more productive in all aspect of
 the software lifecycle than third generation languages like C, and at least
 twice as productive as the best component development environments.
 
\end_layout

\begin_layout Subsection
Fast
\end_layout

\begin_layout Standard
It's FAST! Full n tier deployment, native C code generation compiled by
 optimized C compilers bring together the advantages of a high-level, human-like
 development language, and low-level machine-code runtime execution performance.
 Not to mention that you can interpolate C code directly into 4GL code!
\end_layout

\begin_layout Subsection
Compatible
\end_layout

\begin_layout Standard
Aubit4GL is compatible with a number of commercial products giving you the
 freedom to mix and match features and environments based on any particular
 situation.
 You will never again be locked into one compiler, one company, or one database.
 You can develop with commercial products, deploy with Aubit 4GL, and save
 on runtime licensing, at the same time gaining the speed of a C compiled
 runtime.
 Or you can use 4GL Wizard functionality and templates in development, and
 deploy using a commercial runtime that supports client side functionality
 that is not present in Aubit 4GL at the moment.
\end_layout

\begin_layout Subsection
Engine Independent
\end_layout

\begin_layout Standard
Database, OS, platform, and user interface independent ODBC means that choosing
 a database engine is no longer an issue.
 
\end_layout

\begin_layout Standard
You can develop and deploy wherever a GCC compiler is available with a single
 recompile.
 And because of full n-tier support, you can use CUI, GUI and Web interfaces
 from the same code, and the same compiler program, at the same time, just
 by setting environment variables.
 Informix 4GL already has a big developer base, and a large existing application
s base.
 
\end_layout

\begin_layout Standard
This is not a new language, just a new implementation of a mature and successful
 language.
 So you will not need to look hard to find developers for your projects.
 And since 4GL is English-like in syntax, programmers with experience in
 any language will be productive in just a few days.
 On top of that, you will not need to look far to find commercial, tried
 and tested applications in any field of business oriented database applications.
 
\end_layout

\begin_layout Section
Aubit4GL Extensions
\end_layout

\begin_layout Standard
A4GL fully supports the features and syntax of Informix 4GL, but we have
 extended the language with many enhancements to increase the productivity
 of the 4GL developer.
 These enhancements are fully described in the Aubit4GL Extensions chapter
 of this manual.
\end_layout

\begin_layout Chapter
Installation - Quick Start
\end_layout

\begin_layout Section
A Quick Start ?
\end_layout

\begin_layout Standard
If you are ready to just jump right in, the following sections highlight
 the most common configurations.
\end_layout

\begin_layout Subsection
Downloading and installing
\end_layout

\begin_layout Standard
Installation should be possible on most Linux distributions, and with some
 tweaking on most Unix and Windows machines too.
\end_layout

\begin_layout Standard
There are several possible sources for download 
\end_layout

\begin_layout Itemize
MARS Binary releases (
\family typewriter
http://www.aubit.com/aubit4gl/
\family default
) 
\end_layout

\begin_layout Itemize
MARS Source releases (
\family typewriter
http://www.aubit.com/aubit4gl/src
\family default
)
\end_layout

\begin_layout Itemize
CVS (see 
\family typewriter
http://sourceforge.net/cvs/?group_id=32409
\family default
 ) 
\end_layout

\begin_layout Subsection
Installing Source/CVS
\end_layout

\begin_layout Standard
Basically - Follow the normal 
\end_layout

\begin_layout Standard

\family typewriter
./configure && make
\end_layout

\begin_layout Standard
Note : You may need to specify 
\family typewriter
--prefix=/home/aubit4gl
\family default
 or something similar..
 
\end_layout

\begin_layout Standard
You should not need to do a 'make install' as you can run Aubit4GL in-place,
 just set
\end_layout

\begin_layout Standard
export AUBITDIR=/path/to/aubit4glsrc
\end_layout

\begin_layout Standard
export PATH=$PATH:$AUBITDIR/bin
\end_layout

\begin_layout Standard
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$AUBITDIR/lib
\end_layout

\begin_layout Subsection
Binary 
\end_layout

\begin_layout Standard
Just 
\family typewriter
tar xvzf
\family default
 the tarball (you can optionally make install), and set AUBITDIR, PATH and
 LD_LIBARY_PATH accordingly
\end_layout

\begin_layout Standard
export AUBITDIR=/path/to/aubit4glbin
\end_layout

\begin_layout Standard
export PATH=$PATH:$AUBITDIR/bin
\end_layout

\begin_layout Standard
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$AUBITDIR/lib
\end_layout

\begin_layout Section
Next steps 
\end_layout

\begin_layout Standard
You can skip this if you read the rest of this document - otherwise please
 read on - it will save a lot of confusion later! 
\end_layout

\begin_layout Standard
Take a moment to note the libraries created in the plugins directory (normally
 $AUBITDIR/plugins-
\emph on
version
\emph default
).
 
\end_layout

\begin_layout Standard
E.g.
 (This is my list - yours will be different!) : 
\end_layout

\begin_layout Itemize

\family typewriter
libA4GL_file.so libA4GL_HTML.so libA4GL_string.so 
\end_layout

\begin_layout Itemize

\family typewriter
libDATA_menu_list.so libDATA_module.so libDATA_report.so libDATA_struct_form.so
 
\end_layout

\begin_layout Itemize

\family typewriter
libESQL_INFORMIX.so libESQL_POSTGRES.so 
\end_layout

\begin_layout Itemize

\family typewriter
libEXDTYPE_mpz.so
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
libEXREPORT_NOPDF.so libEXREPORT_PDF.so
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
libFORM_GENERIC.so libFORM_NOFORM.so libFORM_XDR.so 
\end_layout

\begin_layout Itemize

\family typewriter
libHELP_std.so
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
libLEX_C.so libLEX_CS.so libLEX_EC.so libLEX_PERL.so 
\end_layout

\begin_layout Itemize

\family typewriter
libLOGREP_CSV.so
\end_layout

\begin_layout Itemize

\family typewriter
libLOGREP_TXT.so 
\end_layout

\begin_layout Itemize

\family typewriter
libLOGREP_PROC_CSV.so libLOGREP_PROC_TXT.so 
\end_layout

\begin_layout Itemize

\family typewriter
libMENU_NOMENU.so 
\end_layout

\begin_layout Itemize

\family typewriter
libMSG_NATIVE.so 
\end_layout

\begin_layout Itemize

\family typewriter
libPACKER_MEMPACKED.so libPACKER_PACKED.so libPACKER_PERL.so libPACKER_XDR.so
 libPACKER_XML.so 
\end_layout

\begin_layout Itemize

\family typewriter
libRPC_NORPC.so libRPC_XDR.so 
\end_layout

\begin_layout Itemize

\family typewriter
libSQL_esql.so libSQL_esql_s.so libSQL_FILESCHEMA.so libSQL_ifxodbc.so libSQL_nosql.s
o libSQL_sqlite.so libSQL_sqliteS.so libSQL_unixodbc.so 
\end_layout

\begin_layout Itemize

\family typewriter
libUI_CONSOLE.so libUI_HL_TUIN.so libUI_HL_TUI.so libUI_TUI.so libUI_TUI_s.so
 
\end_layout

\begin_layout Itemize

\family typewriter
libXDRPACKER_menu_list.so libXDRPACKER_module.so libXDRPACKER_report.so libXDRPACKE
R_struct_form.so
\family default
 
\end_layout

\begin_layout Standard
The correct selection of these libraries is pretty critical to the operation
 of Aubit4GL, because everything is so highly configurable.
\end_layout

\begin_layout Standard
You'll notice that most of them have a 
\family typewriter
libXXX_YYY.so
\family default
 format so for example : 
\end_layout

\begin_layout Standard
l
\family typewriter
ibSQL_esql.so
\family default
 XXX=SQL YYY=esql 
\end_layout

\begin_layout Standard

\family typewriter
libUI_HL_TUI.so
\family default
 XXX=UI YYY=HL_TUI 
\end_layout

\begin_layout Standard
The XXX represents the module type, the YYY the module name.
 Although Aubit4GL is distributed in a form which will be mostly Informix4GL
 compatible - you will almost certainly need to adjust some of these settings.
\end_layout

\begin_layout Subsection
Module types 
\end_layout

\begin_layout Subsubsection
A4GL 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libA4GL_file.so libA4GL_HTML.so libA4GL_string.so
\family default
 
\end_layout

\begin_layout Standard
These are miscellaneous extra libraries, see section on Aubit4GL extension
 libraries
\end_layout

\begin_layout Subsubsection
DATA 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libDATA_menu_list.so libDATA_module.so libDATA_report.so libDATA_struct_form.so
 
\end_layout

\begin_layout Standard
These are internal libraries for reading data files.
\end_layout

\begin_layout Subsubsection
ESQL 
\end_layout

\begin_layout Standard
eg : libESQL_INFORMIX.so libESQL_POSTGRES.so 
\end_layout

\begin_layout Standard
These are helper libraries used when 
\family typewriter
A4GL_LEXTYPE=EC
\family default
.
 The library used is taken from the 
\family typewriter
A4GL_LEXDIALECT
\family default
 variable.
 This library is used to copy between native types and aubit types (eg for
 decimals, dates etc) 
\end_layout

\begin_layout Standard
Not used when 
\family typewriter
A4GL_LEXTYPE=C
\family default
 
\end_layout

\begin_layout Subsubsection
EXDTYPE 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libEXDTYPE_mpz.so
\family default
 
\end_layout

\begin_layout Standard
Example extended datatype library (implements the GNU mpz datatype).
\end_layout

\begin_layout Subsubsection
EXREPORT 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libEXREPORT_NOPDF.so libEXREPORT_PDF.so 
\end_layout

\begin_layout Standard
Extended report handling.
 
\family typewriter
libEXREPORT_PDF.so
\family default
 relies on having pdflib installed.
 It will not be generated otherwise.
\end_layout

\begin_layout Subsubsection
FORM 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libFORM_GENERIC.so libFORM_NOFORM.so libFORM_XDR.so
\family default
 
\end_layout

\begin_layout Standard
This is used to read, write, and process a form file.
 The library is specified by the 
\family typewriter
A4GL_FORMTYPE
\family default
 variable.
 e.g.: 
\family typewriter
A4GL_FORMTYPE=GENERIC 
\end_layout

\begin_layout Standard
If you have 
\family typewriter
libFORM_XDR.so
\family default
 - that is probably the best one to use, so 
\end_layout

\begin_layout Standard

\family typewriter
$ export A4GL_FORMTYPE=XDR
\family default
 
\end_layout

\begin_layout Standard
If you don't have 
\family typewriter
libFORM_XDR.so
\family default
, you'll need to use the GENERIC packers 
\end_layout

\begin_layout Standard

\family typewriter
$ export A4GL_FORMTYPE=GENERIC
\family default
 
\end_layout

\begin_layout Standard
You will then also need to specify the GENERIC packer by setting 
\family typewriter
A4GL_PACKER
\family default
 (see PACKER)...
 
\end_layout

\begin_layout Subsubsection
HELP 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libHELP_std.so
\family default
 
\end_layout

\begin_layout Standard
Always set to std - can be ignored 
\end_layout

\begin_layout Subsubsection
LEX 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libLEX_C.so libLEX_CS.so libLEX_EC.so libLEX_PERL.so
\family default
 
\end_layout

\begin_layout Standard
Specifies the output format - currently only C and EC are supported.
 
\end_layout

\begin_layout Standard
For C generation, calls are made to internal SQL functions within the library
 specified by 
\family typewriter
A4GL_SQLTYPE
\family default
 (see SQL) 
\end_layout

\begin_layout Standard
For EC generation, a .ec file is generated which should be compiled used
 native database tools (like esql for informix and ecpg for postgres).
 If you can use EC generation - use it, performance will be better...
 
\end_layout

\begin_layout Subsubsection
LOGREP 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libLOGREP_CSV.so libLOGREP_PROC_CSV.so libLOGREPPROC_TXT.so libLOGREP_TXT.so
\family default
 
\end_layout

\begin_layout Standard
Logical report handling - ignore for now.
 
\end_layout

\begin_layout Subsubsection
MENU 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libMENU_NOMENU.so 
\end_layout

\begin_layout Standard
GUI Menu handling - obsoleted (probably).
 
\end_layout

\begin_layout Subsubsection
MSG 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libMSG_NATIVE.so 
\end_layout

\begin_layout Standard
Ignore..
 
\end_layout

\begin_layout Subsubsection
PACKER 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libPACKER_MEMPACKED.so libPACKER_PACKED.so libPACKER_PERL.so libPACKER_XDR.so
 libPACKER_XML.so
\family default
 
\end_layout

\begin_layout Standard
This specifies the packer to use for reading and writing data files.
 The library is specified via the 
\family typewriter
A4GL_PACKER
\family default
 variable.
 Do not use MEMPACKER and PERL unless you know what you are doing..
 PACKED, XML and XDR are all reasonable packers.
 The packer library is only used when FORMTYPE etc is set to GENERIC.
\end_layout

\begin_layout Subsubsection
RPC 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libRPC_NORPC.so libRPC_XDR.so
\family default
 
\end_layout

\begin_layout Standard
Specifies which RPC protocol to use - advanced stuff - still experimental.
\end_layout

\begin_layout Subsubsection
SQL 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libSQL_esql.so libSQL_esql_s.so libSQL_FILESCHEMA.so libSQL_ifxodbc.so libSQL_nosql.s
o libSQL_sqlite.so libSQL_sqliteS.so libSQL_unixodbc.so 
\end_layout

\begin_layout Standard
This is probably the most important setting, specified through SQLTYPE -
 this determines how Aubit is going to talk to the database.
 There are two distinct times that this is done: 
\end_layout

\begin_layout Itemize
At compile time 
\end_layout

\begin_layout Itemize
At runtime 
\end_layout

\begin_layout Paragraph
EC generation 
\end_layout

\begin_layout Subparagraph
COMPILE TIME 
\end_layout

\begin_layout Standard
the library controls detecting datatypes for LIKE and RECORD LIKE etc.
 
\end_layout

\begin_layout Subparagraph
RUN TIME 
\end_layout

\begin_layout Standard
The runtime usage is limited to handling LOAD and UNLOAD statements.
 For postgreSQL, setting 
\family typewriter
A4GL_ESQL_UNLOAD=Y
\family default
 will call the ecpg builtin load and unload statements so this library doesn't
 need to be used at all...
 
\end_layout

\begin_layout Standard
Special notes : 
\family typewriter
A4GL_SQLTYPE=esql
\family default
 The Informix ESQL/C 'connector', both runtime and compile time.
 This requires Informix ESQL/C to be installed & configured.
 
\end_layout

\begin_layout Paragraph
For C generation 
\end_layout

\begin_layout Subparagraph
COMPILE TIME 
\end_layout

\begin_layout Standard
the library controls detecting datatypes for LIKE and RECORD LIKE etc, 
\end_layout

\begin_layout Subparagraph
RUN TIME 
\end_layout

\begin_layout Standard
This handles all I/O with the database.
 
\end_layout

\begin_layout Subparagraph
ODBC
\end_layout

\begin_layout Standard
unixodbc/ifxodbc - These require that ODBC has been correctly installed
 and configured.
 You 
\series bold
must
\series default
 specify a username and password to connect to most databases.
 This can done using SQLPWD and SQLUID: 
\end_layout

\begin_layout Standard

\family typewriter
$ export SQLUID=maubu 
\end_layout

\begin_layout Standard

\family typewriter
$ export SQLPWD=mypasswd 
\end_layout

\begin_layout Standard
You can also specify the username and password in the ACL file ($HOME/.aubit4gl.ac
l), the format of this file is :
\end_layout

\begin_layout Standard

\family typewriter
Dbname:username:password
\end_layout

\begin_layout Standard
The password should be entered in plain text, this will then be encrypted
 the next time Aubit4gl reads the file.
\end_layout

\begin_layout Subsubsection
UI
\end_layout

\begin_layout Standard

\family typewriter
libUI_CONSOLE.so libUI_HL_TUIN.so libUI_HL_TUI.so libUI_TUI.so libUI_TUI_s.so
 
\end_layout

\begin_layout Standard
This specifies how data will be displayed to the user.
 This handles all the UI controls (prompt,display, input etc) 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
CONSOLE - is a simple I/O module which does not use any control codes.
 Just printfs and fgets etc..
 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
TUI - THIS IS THE ONE YOU SHOULD BE USING
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
HL_TUI - The next version of TUI, abstracted to help make other HL_..
 modules 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
HL_TUIN - Ignore 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
HL_GTK - VERY experimental GTK version - don't expect this to work...
 
\end_layout

\begin_layout Subsubsection
XDRPACKER 
\end_layout

\begin_layout Standard
eg : 
\family typewriter
libXDRPACKER_menu_list.so libXDRPACKER_module.so libXDRPACKER_report.so libXDRPACKE
R_struct_form.so
\family default
 
\end_layout

\begin_layout Standard
This is a helper module when 
\family typewriter
FORMTYPE
\family default
 etc are set to XDR.
 These contain the actual XDR routines.
 
\end_layout

\begin_layout Subsection
Standard settings
\end_layout

\begin_layout Standard
If you've got to here - check that you have set :
\end_layout

\begin_layout Standard

\family typewriter
A4GL_UI=TUI
\family default
 
\end_layout

\begin_layout Standard

\family typewriter
A4GL_SQLTYPE=esql
\family default
 (and you have libSQL_esql.so) if you want to connect to an Informix database
 or
\end_layout

\begin_layout Standard

\family typewriter
A4GL_SQLTYPE=unixodbc
\family default
 - ensure that you have SQLUID and SQLPWD set...
 or 
\end_layout

\begin_layout Standard

\family typewriter
A4GL_SQLTYPE=ifxodbc
\family default
 - ensure that you have SQLUID and SQLPWD set...
 or
\end_layout

\begin_layout Standard

\family typewriter
A4GL_SQLTYPE=pg
\family default
 (if you have libSQL_pg.so) if you want to connect to a postgres Database
\end_layout

\begin_layout Standard

\family typewriter
A4GL_LEXTYPE=EC
\family default
 for Esql/c generation (you must have Informix esql or Postgres ecpg installed)
 
\end_layout

\begin_layout Standard

\family typewriter
A4GL_LEXDIALECT=INFORMIX
\family default
 or 
\end_layout

\begin_layout Standard

\family typewriter
A4GL_LEXDIALECT=POSTGRES
\family default
 
\end_layout

\begin_layout Standard

\family typewriter
A4GL_FORMTYPE=XDR
\family default
 (if you have it) or 
\end_layout

\begin_layout Standard

\family typewriter
A4GL_FORMTYPE=GENERIC
\family default
 if you dont and also set 
\family typewriter
A4GL_PACKER=PACKED 
\end_layout

\begin_layout Subsubsection
Finally...
\end_layout

\begin_layout Standard
Set up the the Unix environment so the whole thing will actually run!
\end_layout

\begin_layout Standard

\family typewriter
export AUBITDIR=/directory/where/this/all/is 
\end_layout

\begin_layout Standard

\family typewriter
export PATH=$PATH:$AUBITDIR/bin
\family default
 
\end_layout

\begin_layout Standard

\family typewriter
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$AUBITDIR/lib 
\end_layout

\begin_layout Section
Troubleshooting
\end_layout

\begin_layout Subsection
For Informix 
\end_layout

\begin_layout Paragraph
Get the client SDK 
\end_layout

\begin_layout Standard
Configure the SDK (normally the $INFORMIX/etc/sqlhosts etc) 
\end_layout

\begin_layout Paragraph
Check the SDK 
\end_layout

\begin_layout Standard
Try a simple esql/c program like : 
\end_layout

\begin_layout LyX-Code
main() { 
\end_layout

\begin_layout LyX-Code
  $whenever error stop; 
\end_layout

\begin_layout LyX-Code
  $database somedb; 
\end_layout

\begin_layout LyX-Code
} 
\end_layout

\begin_layout Standard

\family typewriter
$ esql somefile.ec -o somefile $ ./somefile
\family default
 
\end_layout

\begin_layout Standard
Compile and run - it if doesn't this is an Informix setup problem - check
 out why...
 
\end_layout

\begin_layout Standard
Most likely : 
\family typewriter
.rhosts/hosts.equiv
\family default
 is not set up properly, user doesn't exist on the remote machine, 
\family typewriter
/etc/services
\family default
 isn't set up, 
\family typewriter
/etc/hosts
\family default
 isn't set up, or a remote server isn't allowing tcp connections only shared
 memory ones.
 
\end_layout

\begin_layout Paragraph
Set Up Aubit 
\end_layout

\begin_layout Standard

\family typewriter
export AUBITDIR=/aubits/path
\family default
 
\end_layout

\begin_layout Standard

\family typewriter
export A4GL_SQLTYPE=esql
\family default
 ** check that you have a 
\family typewriter
$AUBITDIR/lib/libSQL_esql.so
\family default
 ** 
\end_layout

\begin_layout Standard

\family typewriter
export A4GL_LEXTYPE=EC 
\end_layout

\begin_layout Paragraph
Try to compile a simple 4gl 
\end_layout

\begin_layout LyX-Code
database somedb 
\end_layout

\begin_layout LyX-Code
main 
\end_layout

\begin_layout LyX-Code
  display "Hello World" 
\end_layout

\begin_layout LyX-Code
end main 
\end_layout

\begin_layout Standard

\family typewriter
4glpc simple.4gl -o simple.4ae
\end_layout

\begin_layout Paragraph
Try to run it
\end_layout

\begin_layout Standard
Try to run that 
\family typewriter
simple.4ae 
\end_layout

\begin_layout Subsection
For PostgreSQL
\end_layout

\begin_layout Paragraph
Install postgreSQL
\end_layout

\begin_layout Standard
If possible - use PostgreSQL with the Informix compatibility patches : (See
 
\family typewriter
http://gborg.postgresql.org/project/pginformix/projdisplay.php
\family default
) 
\end_layout

\begin_layout Standard
Make sure you have the ecpg module.
 
\end_layout

\begin_layout Paragraph
Configure postgreSQL and create database if required 
\end_layout

\begin_layout Paragraph
Check you're ecpg setup 
\end_layout

\begin_layout LyX-Code
main() { 
\end_layout

\begin_layout LyX-Code
  exec sql database somedb; 
\end_layout

\begin_layout LyX-Code
  printf("Status=%d
\backslash
n",sqlca.sqlcode); 
\end_layout

\begin_layout LyX-Code
} 
\end_layout

\begin_layout Standard
Remember to replace 
\family typewriter
somedb
\family default
 with the database you created!
\end_layout

\begin_layout Standard

\family typewriter
$ ecpg myprog.ec
\family default
 
\end_layout

\begin_layout Standard

\family typewriter
$ gcc myprog.c -o myprog -I/usr/local/pgsql/include -L/usr/local/pgsql/lib
 -lecpg 
\end_layout

\begin_layout Standard
(You'll need to adjust /usr/local/pgsql/include etc to your environment)
 
\end_layout

\begin_layout Standard
If Status=0 then you're fine - if not - its an ecpg/postgres problem...
 
\end_layout

\begin_layout Paragraph
Set Up Aubit 
\end_layout

\begin_layout Standard

\family typewriter
export AUBITDIR=/aubits/path 
\end_layout

\begin_layout Standard

\family typewriter
export A4GL_SQLTYPE=pg 
\end_layout

\begin_layout Standard
** check that you have a $AUBITDIR/lib/libSQL_pg.so ** 
\end_layout

\begin_layout Standard
if not - go to $AUBITDIR/lib/libsql/postgresql and do a make ** if that
 doesn't make it - find out why...
 
\end_layout

\begin_layout Standard

\family typewriter
export A4GL_LEXTYPE=EC 
\end_layout

\begin_layout Standard

\family typewriter
export A4GL_LEXDIALECT=POSTGRES 
\end_layout

\begin_layout Paragraph
Try a 4gl program
\end_layout

\begin_layout Standard

\family typewriter
simple.4ae:
\end_layout

\begin_layout Standard

\family typewriter
database somedb 
\end_layout

\begin_layout Standard

\family typewriter
main 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
display "Hello World" 
\end_layout

\begin_layout Standard

\family typewriter
end main 
\end_layout

\begin_layout Standard

\family typewriter
$ 4glpc simple.4gl -o simple.4ae 
\end_layout

\begin_layout Standard

\family typewriter
$ ./simple.4ae
\end_layout

\begin_layout Chapter
Installation - Full
\end_layout

\begin_layout Section
Platforms
\end_layout

\begin_layout Standard
You can install Aubit on recent versions of Linux (e.g Redhat 7 or later,
 SuSE 8 or later), other Unix systems, or Microsoft Windows 95, NT, 2000
 or later with or without Cygwin.
\end_layout

\begin_layout Subsection
Source or Binary
\end_layout

\begin_layout Standard
You can install A4GL from source or binary.
 Binary is easier if we have created the binary on the same system that
 you have.
 Otherwise you need to get the source and compile it.
 
\end_layout

\begin_layout Section
Get Source
\end_layout

\begin_layout Standard
Create and select a directory like 
\family typewriter
/opt/aubit
\family default
 or 
\family typewriter
/usr/local/aubit
\family default
 for installing the source.
 Call this 
\family typewriter
SRCDIR e.g.
\newline
export SRCDIR=/opt/aubit
\end_layout

\begin_layout Standard
The Aubit4GL development site is 
\family typewriter
aubit4gl.sourceforge.net
\family default
.
\end_layout

\begin_layout Standard
You have 3 ways to get the source:
\end_layout

\begin_layout Itemize
From a source tar ball (e.g.
 aubit4glsrc-n.nn-r.tgz)
\end_layout

\begin_layout Itemize
From a source RPM
\end_layout

\begin_layout Itemize
From CVS.
 
\end_layout

\begin_layout Subsection
Tarball
\end_layout

\begin_layout Standard
If you are getting the source from a gzipped tar ball, point a browser at
 the project home page.
 Follow the links to the download page and download the file to $SRCDIR
 then:
\end_layout

\begin_layout LyX-Code

\newline
tar xvfz aubit4glsrc0.47-32.tgz
\end_layout

\begin_layout Standard
The above assumes that you downloaded the tar file into the AUBITDIR directory.
 If you have put it somewhere else supply the full path to the tar file
 e.g.
\end_layout

\begin_layout LyX-Code
tar xvfz /home/informix/aubit4glsrc0.47-32.tgz
\end_layout

\begin_layout Standard
On systems where the z option does not work, run gzip and pipe its output
 into the tar command e.g.:
\end_layout

\begin_layout LyX-Code
gzip -cd aubit4glsrc0.47-32.tgz | tar xvf -
\end_layout

\begin_layout Standard
You can examine the contents of a gzipped tarball by using the command:
\end_layout

\begin_layout LyX-Code
tar tvfz aubit4glsrc0.47-32.tgz
\end_layout

\begin_layout Subsection
SRPM
\end_layout

\begin_layout Standard
As for the tar ball, point the browser at the project home page.
 Follow the links to the download page and down load the file to $SRCDIR
 then:
\end_layout

\begin_layout LyX-Code
rpm -Uvh aubit4glsrc0.47-32.rpm
\end_layout

\begin_layout Standard
The U option is really intended for update but it works equally well for
 a new install and saves you the bother of learning a separate install syntax.
 The v option (verbose) will tell you what rpm is doing.
 The h option will display conforting hash marks on screen for blocks of
 characters loaded.
 
\end_layout

\begin_layout Standard
You can examine the contents of an rpm file before intalling it, the command
 is:
\end_layout

\begin_layout LyX-Code
rpm -qpl aubit4glsrc0.47-32.rpm
\end_layout

\begin_layout Subsection
CVS
\end_layout

\begin_layout Standard
You can get the bleeding edge current version of Aubit4GL from the CVS (Concurre
nt Versions System).
 To do this:
\end_layout

\begin_layout Enumerate
cd $SRCDIR
\end_layout

\begin_layout Enumerate
Set an environment variable CVSROOT as follows:
\newline

\family typewriter
export CVSROOT=:pserver:anonymous@aubit4gl.cvs.sourceforge.net:/cvsroot/aubit4gl
\end_layout

\begin_layout Enumerate
Login to the aubit cvs pserver
\newline

\family typewriter
cvs login
\family default

\newline
When it prompts for a password, just hit RETURN.
\end_layout

\begin_layout Enumerate
Checkout the module you want: aubit4glsrc or aubit4gldoc
\newline

\family typewriter
cvs -z3 co aubit4glsrc
\end_layout

\begin_layout Standard
Be warned that from time to time the cvs version may be broken.
 Development is ongoing and you cannot make an omelet without breaking eggs.
\end_layout

\begin_layout Standard
Note: Put the CVSROOT value in a file called (say) AUBITCVSROOT.
 Then whenever you wish to checkout or update from cvs, you can set CVSROOT
 using the command
\newline

\family typewriter
$export CVSROOT=$(cat AUBITCVSROOT)
\end_layout

\begin_layout Standard
The above works for ksh and bash.
 If your shell does not accept the $( ...
 ) syntax, then use backticks instead:
\newline

\family typewriter
$CVSROOT=`cat AUBITCVSROOT` export CVSROOT
\end_layout

\begin_layout Subsubsection
CVS for Developers
\end_layout

\begin_layout Standard
If you have been registered with sourceforge as an Aubit4GL developer then
 the procedure is a little different from above
\end_layout

\begin_layout Itemize
You need a login ID and a password
\end_layout

\begin_layout Itemize

\family typewriter
export CVS_RSH=ssh
\end_layout

\begin_layout Itemize
You must use the :ext: protocol rather than the :pserver: protocol.
 So, set an environment variable (say CVSDEV) to this rather long URL:
\newline

\family typewriter
:ext:ogormanj@aubit4gl.cvs.sourceforge.net:/cvsroot/aubit4gl
\end_layout

\begin_layout Itemize

\family typewriter
cvs -z3 -d$CVSDEV co -P aubit4glsrc
\family default

\newline
This will prompt you for your password on the sourceforge CVS site.
 Replace the ogormanj above with your registered id, of course.
\end_layout

\begin_layout Section
Prerequisites 
\end_layout

\begin_layout Subsection
C Compiler
\end_layout

\begin_layout Standard
The source for Aubit4GL is in the C programming language with some Unix
 shell scripts.
 So if you need to install from source, you will need a full GNU GCC or
 equivalent compiler and GNU make.
 (These tools come with nearly all distributions of Linux.)
\end_layout

\begin_layout Subsection
Options
\end_layout

\begin_layout Standard
The following software and/or libraries can be exploited by Aubit 4GL.
 They will be discovered and linked by the autoconfig 
\family typewriter
configure
\family default
 script when you install A4GL:
\end_layout

\begin_layout Itemize
ODBC manager libraries for database connection: unixODBC, iODBC (or Windows
 ODBC)
\end_layout

\begin_layout Itemize
Native database connections for Informix, PostgreSQL, SAPDB, or SQLite
\end_layout

\begin_layout Itemize
PDF library for fancy reports
\end_layout

\begin_layout Itemize
Curses Library (for screen DISPLAY, MENU, etc statements)
\end_layout

\begin_layout Itemize
GTK+ Library (for GUI frontend)
\end_layout

\begin_layout Itemize
Jabber IM library (for instant messaging)
\end_layout

\begin_layout Itemize
SUN RPC package (for n-tier applications using Remote Procedure Calls)
\end_layout

\begin_layout Itemize
RPC-XML libraries (for communicating with XML format files)
\end_layout

\begin_layout Itemize
Perl interpreter
\end_layout

\begin_layout Itemize
SWIG libraries (for Perl output instead of C 
\end_layout

\begin_layout Standard
Run the configure script to see which of these you have (or don't have).
 If configure reports something missing when you know you have it, you may
 have installed it in as unexpected location.
 Rerun configure
\newline

\family typewriter
./configure --help
\end_layout

\begin_layout Standard
To see how to point autoconfig to where you have installed the library.
 For example, if you installed pdflib in 
\family typewriter
/usr/john/pdflib
\family default
 then you can run configure with the command:
\newline
.
\family typewriter
/configure --with-pdflib=/usr/john/pdflib
\end_layout

\begin_layout Standard
On Linux systems the command 
\family typewriter
rpm -qa
\family default
 will give you a (huge) list of all software installed using rpm (RedHat
 Package Manager).
 To find any rpms related to, say, PDF run the the following:
\newline

\family typewriter
rpm -qa | grep -i pdf
\end_layout

\begin_layout Standard
On Linux systems you can find non rpm installed software with the locate
 command:e.g.
\newline

\family typewriter
locate pdf
\end_layout

\begin_layout Subsection
Architecture
\end_layout

\begin_layout Standard
Aubit4GL uses an abstraction layer for many of its functions.
 This means that the way Aubit4GL works can be controlled very tightly by
 the setting of various variables.
 These variables specify which library functions will be called from the
 compiler and/or 4GL program and hence affect the following areas:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true" endhead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Variable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Library
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_LEXTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set generation language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libLEX_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_LEXDIALECT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set language dialect (used for ESQL/C generation)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libESQL_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_PDFTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the enhanced report handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libEXREPORT_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_HELPTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the help handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libFORM_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_MENUTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the extended menu handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libMENU_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_MSGTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the message handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libMSG_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_PACKER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
'packer' to use saving forms/reports etc (eg.
 XML)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libPACKER_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_RPCTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the Remote Procedure Call handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libRPC_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_SQLTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the SQL handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libSQL_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_SQLDIALECT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the SQL dialect to use
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libSQLPARSE_???
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL_UI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
output module to use to display the program
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libUI_???
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Database
\end_layout

\begin_layout Standard
For most people, the most important component of the Informix 4GL language
 is its embedded SQL.
 (At whim, you can put SQL code into any x4GL program).
 For this feature to work, you must have a database engine which both the
 A4GL compiler and your 4GL program can connect to.
 Classical Informix 4GL has a builtin native connection to Informix engines
 (SE, or IDS 7, or IDS 9).
 
\end_layout

\begin_layout Subsubsection
Engines
\end_layout

\begin_layout Standard
Informix, Ingres, PostgreSQL, and Sybase engines have their origins in Unix
 at Berkeley in the 1970s.
 They share some features which are counter to the ANSI SQL standards which
 were later defined in 1986.
 
\end_layout

\begin_layout Itemize
Lower Case.
 By default, they downshift all words before parsing (unless the words are
 protected by quotes).
 This is natural for Unix users but is the inverse of the ANSI standard
 which upshifts all unquoted words.
 The standard was dominated by mainframe system vendors (IBM DB2, Oracle,
 SAP, etc).
\end_layout

\begin_layout Itemize
Database concept.
 Each instance of an Informix or PostgreSQL engine can have many databases.
 In contrast, IBM, Oracle, SAP, etc have only one database per engine instance.
 The Informix concept of separate databases is implemented on these other
 systems each as a SCHEMA.
\end_layout

\begin_layout Itemize
Outer Joins.
 These were originally a controversial concept and not defined in the 1986
 SQL standard.
 The 1992 SQL standard added a JOIN clause to SQL SELECT statements to implement
 outer joins.
 Prior to that each database vendor had its own extension to the standard
 to implement outer joins.
\end_layout

\begin_layout Itemize
Temporary tables.
 The SQL standard did not provide for capturing the rows from a SELECT statement
 into a tempory table.
 Informix and Postgres both allow this but with differing syntax.
\end_layout

\begin_layout Itemize
SERIAL datatype.
 Not part of the SQL standard but an Informix extension.
 PostgreSQL has a SERIAL type but it is used differently.
 With Informix, you supply a zero as the SERIAL value, and the engine replaces
 the zero with the next serial number.
 With PostgreSQL, you don't supply a value and the engine supplies the next
 serial number as a default.
 If you supply a zero, it is accepted!
\end_layout

\begin_layout Itemize
Functions.
 Informix has a number of functions TODAY, CURRENT, USER, MDY(m,d,y), EXTEND,
 etc which are not in the SQL standard or have different names (e,g NOW(),
 CURRENT_DATE, etc).
\end_layout

\begin_layout Itemize
MATCHES clause.
 Informix, in addition to the SQL standard LIKE clause, allows you to SELECT
 rows which match patterns using the Unix shell wildcard symbols ([]*?).
 PostgreSQL has a ~ operator which matches RE (regular expression) patterns
 in the manner of perl.
\end_layout

\begin_layout Itemize
Mandatory FROM clause.
 In Informix, the SELECT statement must have a FROM clause.
 PostgreSQL (and others like Sybase) does not require a FROM clause.
\end_layout

\begin_layout Itemize
MONEY datatype.
 A variant on DECIMAL which is suitable for financial systems.
\end_layout

\begin_layout Standard
A4GL allows you to connect to different database engines.
 This leads to difficulties when you are coding into your 4GL programs any
 of the above Informix idioms which are not part of the SQL standard.
 To use Aubit4GL with non Informix engines, you need to confine yourself
 to just the ANSI standard, or rely on Aubit4GL's translation mechanism
 to convert to Informix, or get a special version of the engine which supports
 the Informix variations.
 Nearly all major applications written in 4GL exploit the Informix SERIAL
 behaviour and the 4GL code usually relies on getting the serial value for
 the 
\family typewriter
sqlca.sqlerrd
\family default
 record.
 For this you need an Informix compatible engine.
\end_layout

\begin_layout Standard
Aubit4GL can connect directly to
\end_layout

\begin_layout Itemize
Informix SE, IDS 7, or IDS 9 or later.
 Best of breed commercial engines with full SQL92 compliance.
 You must purchase a licence from IBM-Informix in order to use it.
 Has a multi-threaded architecture which gives it a performance advantage
 over all of its rivals.
 Now that it is owned by IBM, it will gradually be absorbed into IBM's own
 DB2 range of products and will gradually disappear.
\end_layout

\begin_layout Itemize
PostgreSQL a free opensource engine now with full SQL92 compliance.
 Fully free and opensource.
 Shares its origins with Ingres at UCB (University of California Berkeley).
 Unlike Informix IDS, it is not based on a threaded architecture and each
 frontend connection results in a separate backed process being spawned
 to service it.
 You can get postgresql from :
\newline

\family typewriter
www.postgresql.org.

\family default
 
\family typewriter

\newline

\family default
At the time of writing, the current version is 7.4.2.
 Each Linux distribution has its own RPMs which you get from the distribution
 site (try a Google search).
 There is a special version of PostgreSQL patched to imitate the Informix
 behaviour mentioned above: The site for this project is: 
\newline

\family typewriter
gborg.postgresql.org/pginformix/download/download.php
\family default

\newline
and you can get the source tarballs there.
 Get the RPMs from 
\newline

\family typewriter
informix.postgresintl.com.
\family default

\newline
These RPMs are known to install OK on SuSE 9.0 and you may be lucky on similar
 systems of equivalent vintage.
 The RPMS are patched from version 7.4.
 If you are installing the RPMs on a system with PostgreSQL RPMs already
 installed, you may need to add the 
\family typewriter
--oldpackage
\family default
 argument to the rpm -Uvh command if the installled version is 7.4.1 or 7.4.2.
 It is hoped that future versions of PostgreSQL will fold these Informix
 patches into the regular distribution.
 The latest patched postgres version is also available from 
\begin_inset LatexCommand url
name "Aubit website"
target "http://www.aubit.com"

\end_inset


\end_layout

\begin_layout Itemize
SAPDB a recently free and opensource engine up to version 7.4 with threaded
 architecture.
 The engine is SAP's tried and true commercial product and is solid and
 very fast.
 Unfortunately, MySQL have acquired the rights to develop the next version
 of SAPDB (to be renamed MAXDB) and the interfaces will no longer be free
 (GPL but not LGPL licensed).
 Best avoided unless a project based on the LGPL base is spawned.
\end_layout

\begin_layout Itemize
SQLite a free and opensource embeddable engine with nearly full SQL92 compliance.
 A small engine (only 25K lines of C source code) which we actually deliver
 statically linked into our binary distributions of Aubit4GL.
 It supports most of the SQL92 standard but is typeless (everything is either
 a char type or numeric and the distinction is not enforced).
 Get it from 
\family typewriter
www.sqlite.org
\end_layout

\begin_layout Itemize
Any other database engine with an ODBC interface including PREPARE and SCROLL
 CURSOR statements.
\end_layout

\begin_layout Subsubsection
No SQL
\end_layout

\begin_layout Standard
It is possible to use 4GL without using any embedded SQL.
 The 4GL language can be used as a general purpose programming tool.
 A dummy set of SQL functions is invoked with the A4GL_SQLTYPE=nosql option.
\end_layout

\begin_layout Standard
More usually of course, you will want to use SQL within your 4GL programs.
 You can use ODBC or one of several possible native connections to a RDBMS
 (Relational Database Management System).
 You tell the Aubit4GL compiler (or programs compiled by it) where to send
 its SQL statements by setting an environment variable: A4GL_SQLTYPE.
 
\end_layout

\begin_layout Subsubsection
ODBC
\end_layout

\begin_layout Standard
ODBC (Open Database Connectivity) is an X/Open and ANSI standard CLI (Call
 Level Interface) for communicating with database backends through a common
 library called a Driver Manager which in turn uses another library (called
 a driver) appropriate to the backend desired.
 All ODBC libraries implement common functions (an API or Application Programmin
g Interface) with the details of the functions tailored to the particular
 backend,
\end_layout

\begin_layout Standard
ODBC comes in two broad categories:
\end_layout

\begin_layout Enumerate
Driver Managers (e.g.
 unixODBC, iODBC, Windows ODBC) which act as a go-between and can plug in
 vendors' drivers
\end_layout

\begin_layout Enumerate
Direct (e.g.
 Informix, PostgreSQL, SAPDB, SQLite) which link directly to the vendors'
 drivers
\end_layout

\begin_layout Standard
Aubit4GL can handle embedded SQL with a library of ODBC (Open Database Connectiv
ity) functions intended for passing to an implementation of ODBC.
 You need to install the ODBC application as well as the database vendor's
 odbc library files.
 (These latter may or may not come with the ODBC application).
\end_layout

\begin_layout Standard
On Unix/Linux platforms the ODBC options supported are
\end_layout

\begin_layout Itemize
unixodbc a free opensource ODBC manager with a supplied SQL frontend (good
 for testing the database).
 See 
\family typewriter
www.unixodbc.org
\end_layout

\begin_layout Itemize
iodbc an ODBC manager from OpenLink, commercial but free to use.
 See 
\family typewriter
www.iodbc.org
\end_layout

\begin_layout Itemize
ifxodbc direct ODBC to Informix engines (using libraries from Informix CSDK
 )
\end_layout

\begin_layout Itemize
pgodbc direct ODBC to PostgreSQL engines (free opensource)
\end_layout

\begin_layout Itemize
sapodbc direct ODBC with SAPDB (a free opensource Database Engine up till
 version 7.3)
\end_layout

\begin_layout Subsubsection
ODBC config files
\end_layout

\begin_layout Standard
ODBC configuration is held in files: 
\family typewriter
/etc/odbcinst.ini
\family default
 (driver info) and 
\family typewriter
/etc/odbc.ini
\family default
 (datasources).
 Each user may have his own configuration in 
\family typewriter
~/.odbc.ini
\family default
 (where ~ means the user's home directory).
 Applications often supply nice GUI applications to simplify editing these
 files.
 Unfortunately implementation of ODBC is so inconsistent between database
 suppliers, that these GUIs are useless.
 Use vi and edit the files by hand.
 Then observe the notes for each vendor and copy or link the files appropriately.
\end_layout

\begin_layout Paragraph
Sample odbcinst.ini
\end_layout

\begin_layout Standard
The file odbcinst.ini holds a list of ODBC drivers.
 An example:
\end_layout

\begin_layout LyX-Code
[Informix]
\newline
Driver=/opt/informix/lib/cli/libifcli.so
\newline
Setup=/opt/informix/lib/cli/lib
ifcli.so
\newline
APILevel=1
\newline
ConnectFunctions=YYY
\newline
DriverODBCVer=03.00
\newline
FileUsage=0
\newline
SQLLevel=1
\end_layout

\begin_layout LyX-Code
smProcessPerConnect=Y
\end_layout

\begin_layout LyX-Code
 
\newline
[PostgreSQL]
\newline
Driver=/usr/lib/libodbcpsql.so
\newline
Setup=/usr/lbi/libodbcpsqlS.so
\newline
FileUsage
=1
\newline
Threading=2
\end_layout

\begin_layout LyX-Code
 
\newline
[SAPDB]
\newline
Driver=/opt/sapdb/interfaces/odbc/lib/libsqlod.so
\newline
Setup=/usr/lib/libsapdbS.
so
\newline
FileUsage=1
\newline
CPTimeout=
\newline
CPReuse=
\end_layout

\begin_layout Standard
The Informix drivers will not tolerate whitespace (blanks or tabs) in the
 above file.
\end_layout

\begin_layout Subsubsection
ODBC Datasources
\end_layout

\begin_layout Standard
Access to ODBC databases is configured in odbc.ini files which contain all
 the information required by the vendor's drivers to allow a connection.
 For example:
\end_layout

\begin_layout LyX-Code
[infstores]
\newline
Description=Informixstores demo database
\newline
Driver=/opt/informix/lib/libi
fcli.so
\newline
Database=stores7
\newline
LogonID=fred
\newline
pwd=zxcv132
\newline
ServerName=elvis
\newline
CLIENT_LOCALE=en_us.
8859-1
\newline
TRANSLATIONDLL=/opt/informix/lib/esql/igo4a304.so
\newline
[pgstores]
\newline
Description=Post
gres stores demo database
\newline
Driver=PostgreSQL
\newline
Trace=Yes
\newline
Tracefile=sql.log
\newline
Database=pgst
ores
\newline
Servername=localhost
\newline
UserName=
\newline
Password=
\newline
Port=5432
\newline
Protocol=6.4
\newline
ReadOnly=No
\newline
RowVers
ioning=No
\newline
ShowSystemTables=No
\newline
ShowOidColumn=No
\newline
FakeOidIndex=No
\newline
ConSettings=
\newline
[SAPstore
s]
\newline
Description=SAP stores demo database
\newline
Driver=SAPDB
\newline
ServerNode=elvis
\newline
ServerDB=store
s
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
In principle, the Server property should be the name from the odbcinst.ini
 list of drivers, but the Informix driver needs the full path to the driver
 library file.
\end_layout

\begin_layout Standard
The Informix driver will not find the /etc/odbc.ini file unless you point
 to it with the environment variable: ODBCINI
\end_layout

\begin_layout LyX-Code
export ODBCINI=/etc/odbc.ini
\end_layout

\begin_layout Standard
Note that the different vendors use different keywords for naming the same
 things, and they have different sets of properties.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Informix ODBC Drivers
\end_layout

\begin_layout Standard
Informix give a choice of 4 ODBC drivers.
 They are installed in $INFORMIXDIR/lib/cli (usually /opt/informix/lib/cli
 on Linux systems).
 There appear to be 7 files but 3 of them are links to other files.
 Informix does not use separate files for setup; each library file contains
 both driver and driver setup functions.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="5">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Static
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dynamic
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Threaded
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
libthcli.a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
libthcli.so
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or 
\family typewriter
oclit09b.so
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Unthreaded
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
libcli.a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or 
\family typewriter
libifcli.a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
libifcli.so
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or 
\family typewriter
iclis09b.so
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph
Informix Driver Manager
\end_layout

\begin_layout Standard
Informix supplies a driver manager replacement (DMR) file with 2 links:
\newline

\family typewriter
libifdmr.so
\family default

\newline

\family typewriter
idmrs09a.so
\end_layout

\begin_layout Subsubsection
PostgreSQL Drivers
\end_layout

\begin_layout Standard
PostgreSQL ODBC drivers are installed by default in /usr/lib
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Static
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dynamic
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
driver
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libodbcpsql.a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libodbcpsqlso
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
driver setup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libodbcpsqlS.a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
libodbcpsqlS.so
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Note that there is a separate file Postgres driver setup.
\end_layout

\begin_layout Subsubsection
SAPDB Drivers
\end_layout

\begin_layout Standard
SAPDB drivers are installed by default in 
\family typewriter
/opt/sapdb/interfaces/odbc/lib/
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Static
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dynamic
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Driver
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
libsqlod.a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
libsqlod.so
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For SAPDB, use driver setup file from unixODBC: 
\family typewriter
/usr/lib/libsapdbS.so
\end_layout

\begin_layout Standard
SAPDB will not find its odbc.ini file unless it is in 
\family typewriter
/usr/spool/sql/ini
\family default
 (which it will have created at install time).
 You must either copy or link 
\family typewriter
/etc/odbc.ini
\family default
 to that directory:
\end_layout

\begin_layout LyX-Code
cd /usr/spool/sql/ini
\newline
ln -s /etc/odbc.ini .
\end_layout

\begin_layout Standard
On Linux systems 
\family typewriter
/usr/spool
\family default
 with be a symbolic link to 
\family typewriter
/var/spool
\end_layout

\begin_layout Subsubsection
ODBC Warning
\end_layout

\begin_layout Standard
There are different versions of ODBC (2.5, 3.0, 3.5) - each with its own peculiarit
ies.
 There are also big differences between what is 
\emph on
required
\emph default
 and what is 
\emph on
optional
\emph default
 - not all drivers implement the full ODBC functionality.
\end_layout

\begin_layout Subsubsection
Native
\end_layout

\begin_layout Standard
Aubit 4GL can process DATABASE statements directly if it has a native interface
 to the database engine.
 To achieve this, we need the database vendor's ESQL/C compiler (Embedded
 SQL in C) available when we compile the A4GL compilers.
 
\end_layout

\begin_layout Standard
Embedded SQL/C is an ANSI SQL standard for allowing you to embed SQL statements
 into C source files.
 The SQL statements are enclosed within 
\family typewriter
EXEC SQL ...
 END SQL
\family default
 tags.
 Traditionally the ESQL/C file has a 
\family typewriter
.ec
\family default
 suffix.
 A vendor supplied pre-compiler then replaces the SQL statements with appropriat
e calls to functions in the vendor's libraries.
 The result of the compile is a C code 
\family typewriter
.c
\family default
 file which can be compiled and linked to make executables, modules, or
 
\family typewriter
.so
\family default
 or 
\family typewriter
.a
\family default
 library files.
\end_layout

\begin_layout Standard
At install time, the Aubit 4GL configure program looks for vendors ESQLC
 files and builds an interface to each of the vendor databases detected.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Backend
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ESQL compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Suffix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Informix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
/opt/informix/bin/esql
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
.ec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PostgreSQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
/usr/bin/ecpg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
.pgc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SAPDB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
/opt/sapdb/interfaces/precompiler/bin/cpc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
.
\family typewriter
cpc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
SQLite??? Help here please!
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A4GL Native Connections 
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SQLTYPE 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RDBMS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Comment
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
esql
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Informix 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
esqlc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
esqlPG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PostgreSQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ecpg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
pg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PostgreSQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ecpg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
esqlSAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SAPDB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
cpc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
esqlQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Querix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
esqlQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
sqlite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SQLite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
???
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
sqliteS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SQLite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
???
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Setup? Static link to 4glc?
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The environment variable A4GL_SQLTYPE determines which connection is used
 when program (or 4glc compiler) is run.
\end_layout

\begin_layout Subsection
Curses
\end_layout

\begin_layout Standard
If you want A4GL to use 4GL's character screen control statements (e.g.
 MENU, DISPLAY, DISPLAY\InsetSpace ~
ARRAY, etc), you will need the curses library: NCURSES
 v 1.78 or later.
\end_layout

\begin_layout Subsection
PDFLib
\end_layout

\begin_layout Standard
An extension to the 4GL language allows A4GL to exploit a PDF (Portable
 Data Format) library to produce fancy reports.
 This is an optional feature and if unavailable when you build the A4GL
 compiler, a library of do-nothing dummy PDF functions will be built-in
 to the compiler.
\end_layout

\begin_layout Standard
To get the PDFLib library go to the site: 
\family typewriter
www.pdflib.org
\end_layout

\begin_layout Subsection
GTK
\end_layout

\begin_layout Standard
A4GL has the ability to:
\end_layout

\begin_layout Itemize
display normal screen statements using Graphical Display widgets.
\end_layout

\begin_layout Itemize
support a set of extensions to the language to interface with Graphical
 objects such as Checkboxes, Pulldowns, Buttons, etc.
\end_layout

\begin_layout Standard
To exploit the graphical capabilities of A4GL, you need the GNOME GTK (Graphical
 Tool Kit) development library available at installation and run time.
\end_layout

\begin_layout Subsection
Install Source 
\end_layout

\begin_layout Standard
Having downloaded the source, whether from a tarball or via cvs
\end_layout

\begin_layout Itemize
cd $SRCDIR/aubit4gl
\end_layout

\begin_layout Itemize
Read the file README or README.txt
\end_layout

\begin_layout Itemize
Run the configure command:
\newline

\family typewriter
./configure
\end_layout

\begin_deeper
\begin_layout Itemize
This will search for all the prerequisites and options and build Makefiles
 appropriately
\end_layout

\begin_layout Itemize
configure has a lot of options.
 Try: 
\family typewriter
./configure --help
\end_layout

\begin_layout Itemize
The configure script will report all the prerequisites and options it finds
 and report any missing elements.
 If there are prerequisites missing or in non-standard locations, you can
 deal with this and run configure again.
\end_layout

\end_deeper
\begin_layout Itemize
If configure seems OK then run the make command:
\newline

\family typewriter
make
\newline

\end_layout

\begin_layout Itemize
There are other arguments to make which may be useful to you, especially
 if things go wrong and you have to alter your setup (e.g.
 by installing some missing optional software):
\newline

\family typewriter
make cleanall
\newline
make log
\family default

\newline
The cleanall target will undo the effects of a previous make.
\newline
The log target
 will save all the output from make into a file 
\family typewriter
make.log
\family default
 which you can email to the aubit email lists when you want help with an
 install problem.
\end_layout

\begin_layout Itemize
You will know the make succeeded if you see a message like the following
\newline

\family typewriter
A4GL compiled successfully
\end_layout

\begin_layout Itemize
If make runs with no untoward error messages then you can install.
 You need root permissions to do this:
\newline

\family typewriter
su
\newline
make install
\newline

\end_layout

\begin_layout Standard
The install program will install the compiler in /opt/aubit4gl.
 It will create 2 links in /usr/local/bin:
\newline

\family typewriter
/usr/local/bin/aubit
\family default
 and 
\family typewriter
/usr/local/bin/aubit-config.
\end_layout

\begin_layout Standard
You may now remove the contents of $SRCDIR - they have served their purpose.
\end_layout

\begin_layout Subsection
/usr/local/bin/aubit
\end_layout

\begin_layout Standard
This program reads the Aubit configuration files and sets its environment
 variables so that the commands you submit to it will run correctly.
 e.g.
\end_layout

\begin_layout LyX-Code
aubit 4glc hello.4gl -o hello
\end_layout

\begin_layout Standard
will compile the module hello.4gl and create an executable hello.
 The 
\family typewriter
aubit
\family default
 program obviates the need to have 
\family typewriter
4gl
\family default
c and its friends in your PATH.
 
\end_layout

\begin_layout Standard
Note: If you put 
\family typewriter
/opt/aubit4gl/bin
\family default
 in your PATH, and set up your environment vars to match the contents of
 
\family typewriter
aubit4glrc
\family default
, then you could dispense with the aubit command and simply type:
\end_layout

\begin_layout LyX-Code
4glc hello.4gl -o hello
\end_layout

\begin_layout Subsection
/usr/local/bin/aubit-config
\end_layout

\begin_layout Standard

\family typewriter
/usr/local/bin/aubit
\family default
 uses 
\family typewriter
/usr/local/bin/aubit-config
\family default
 to find the Aubit configuration file settings and sets its own environment
 variables to match.
 You can use it to inspect 1 or all of these settings.
 The values set are held the file:
\family typewriter
/etc/opt/aubit4gl/aubitrc
\family default
 which is created by the make install command.
 
\end_layout

\begin_layout Standard
Run the command 
\family typewriter
aubit-config -a
\family default
 to see what has been configured.
\end_layout

\begin_layout Standard
Run the command 
\family typewriter
aubit-config A4GL_SQLTYPE
\family default
 to get the value of that variable.
\end_layout

\begin_layout Itemize
configure your .a4glrc defaults; they are used in the compiling of the compiler,
 and later when the 4glpc script is invoked.
\end_layout

\begin_deeper
\begin_layout Itemize
Especially be careful to point ODBC_LIB_DIR to the location of your ODBC
 shared library: For Openlink it should be 
\family typewriter
libiodbc.so
\family default
 file in openlink_inst_dir/lib.
 
\end_layout

\begin_layout Itemize
The a4glrc file in $AUBITDIR is read first.
 If you have one in $HOME, it will override the one in $AUBITDIR
\end_layout

\end_deeper
\begin_layout Itemize
If your make process exited with message "Aubit 4GL compiler is now compiled",
 go to section "Testing the installation".
 
\end_layout

\begin_layout Standard
Please be aware that to perform database related operations, you will need
 in addition to a database engine installed, and a database created:
\end_layout

\begin_layout Itemize
an ODBC manager and ODBC driver installed
\end_layout

\begin_layout Itemize
odbc.ini file appropriate for your database, database engine and ODBC manager.
 
\newline
You can use odbc.ini.example file in "test" directory as example.
 This will unfortunately not eliminate the need to read the documentation
 for these products.
 
\end_layout

\begin_layout Section
Install Binaries
\end_layout

\begin_layout Standard
We will in future distribute binaries as RPM (RedHat Package Manager) files.
 The command to install an RPM file is:
\newline

\family typewriter
rpm -Uvh aubit4glbin-0.47-32.rpm
\end_layout

\begin_layout Itemize
Prerequisites are same as for Installation: 
\end_layout

\begin_layout Itemize
Please note: the binary only distribution is not available at the moment.
 Please contact the development team if you can assist in making RPM distributio
n
\end_layout

\begin_layout Itemize
copy the a4glrc.sample to $HOME/.a4glrc 
\end_layout

\begin_layout Itemize
When your compiler is installed, read "Testing the installation of compiler"
 
\end_layout

\begin_layout Itemize
Please see Aubit 4GL download page for available binary builds.
 I Plan to provide both tar.gz and RPM, and make this scriptable using main
 makefile, and stuff it in corn, so I can provide nightly builds...
\end_layout

\begin_layout Subsection
Testing the compiler 
\end_layout

\begin_layout Itemize
cd to $AUBITDIR/test directory:
\newline

\family typewriter
cd $AUBITDIR/test
\end_layout

\begin_layout Itemize
compile the hello.4gl program:
\newline

\family typewriter
aubit 4glc hello.4gl -o hello
\end_layout

\begin_layout Itemize
Test the form compiler: 
\newline

\family typewriter
aubit fcompile form
\end_layout

\begin_layout Itemize
Run the hello program: 
\newline

\family typewriter
./hello
\family default
 
\newline
and you should see a little program with with three options in the menu
 on the top: 
\newline

\family typewriter
Hello test: window prompt form config exit
\family default

\newline
If you do, congratulations, you have just compiled your first 4GL program
 using Aubit 4GL!
\end_layout

\begin_layout Standard
There are a few more test files there.
 Most important is 
\family typewriter
hello_db.4g
\family default
l, that is connecting to the database.
 For it to compile and run, you will need to have a database, and ODBC DSN
 configured.
 
\end_layout

\begin_layout Chapter
Compiling 4GL programs & Forms 
\end_layout

\begin_layout Section
A4GL compilers
\end_layout

\begin_layout Standard
A4GL provides the following compilers:
\end_layout

\begin_layout Itemize

\family typewriter
4glc
\family default
 which translates x4GL code into C
\end_layout

\begin_layout Itemize

\family typewriter
4glpc
\family default
 which is a wrapper to call 4glc and gcc (or esql/c) 
\end_layout

\begin_layout Itemize

\family typewriter
fcompile
\family default
 which creates a binary form file from source
\end_layout

\begin_layout Itemize

\family typewriter
mcompile
\family default
 which creates a binary menu file from source 
\emph on
(now depreciated)
\end_layout

\begin_layout Itemize

\family typewriter
amkmessage
\family default
 which creates a binary help file from source
\end_layout

\begin_layout Standard
On Linux/Unix systems these programs are usually invoked as arguments to
 the 'aubit' script, e.g.
\end_layout

\begin_layout Standard

\family typewriter
aubit 4glpc myprog.4gl -o myprog
\end_layout

\begin_layout Standard
The aubit program sets the environment from Aubit4GL configuration files
 and ensures that LD_LIBRARY_PATH includes the appropriate A4GL libraries.
 You can omit it and use 4glc/4glpc etc directly if you setup LD_LIBRARY_PATH
 & PATH correctly, as well as any settings specific to your installation.
\end_layout

\begin_layout Standard
This file if first read from Aubit 4GL installation directory, as specified
 by $AUBITDIR, and then, if it exists, from users home directory, as specified
 by $HOME, effectively overriding settings from $AUBITDIR/.a4glrc that exist
 in both places.
 It also accepts a number of command line switches, and environment variables.
\end_layout

\begin_layout Section
4glpc
\end_layout

\begin_layout Standard
The 4glpc compiler is really just a wrapper around the 4glc, gcc, and esql/c
 compilers.
 The idea is that the type of each file passed on the command line is determined
, as well as the output object type, and the relevant compilers are called
 in stages to generate that output.
 For example :
\end_layout

\begin_layout Standard
4glpc myprog.4gl -o myprog.4ae
\end_layout

\begin_layout Standard
Assuming we are compiling using A4GL_LEXTYPE=EC, then we know that we must
 :
\end_layout

\begin_layout Itemize
compile myprog.4gl -> myprog.ec using 4glc
\end_layout

\begin_layout Itemize
compile myprog.ec -> myprog.c using the esql compiler
\end_layout

\begin_layout Itemize
compile myprog.c -> myprog.o using 'gcc' or some other C compiler
\end_layout

\begin_layout Itemize
link myprog.o -> myprog.4ae
\end_layout

\begin_layout Standard
For A4GL_LEXTYPE=C, we can just remove the myprog.ec -> myprog.c and generate
 myprog.c directly from the 4gl.
\end_layout

\begin_layout Subsection
Usage
\end_layout

\begin_layout Standard
Basic Aubit 4GL compiler usage
\end_layout

\begin_layout Standard

\family typewriter
4glpc [options] -oOutFile.ext file.ext [file.ext...] 
\end_layout

\begin_layout Standard
Extensions (.ext): 
\end_layout

\begin_layout Standard
In files list, all .4gl files will be compiled to c or .ec etc as applicable
 , other files passed to linker.
 
\end_layout

\begin_layout Standard
The extension specified on the file passed to the '-o' flag will normally
 decide type of linking: 
\end_layout

\begin_layout Standard
ao=object
\end_layout

\begin_layout Standard
aox=static library
\end_layout

\begin_layout Standard
aso=shared lib
\end_layout

\begin_layout Standard
4ae=executable.
 
\end_layout

\begin_layout Standard
Options 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="28" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Meaning
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-L 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Passed directly to the C compiler (specifies where libraries will be found)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-o
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the output file
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compile only - no linking
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-e
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Just generate the .c file
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-I 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Passed directly to the C compiler (specifies where include files can be
 found)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-G or --globals
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size normal
\noun off
\color none
 
\family roman
\series medium
\shape up
\emph off
\bar no
Generate the globals map file 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-S
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
or
\size normal
\noun off
 
\family roman
\series medium
\shape up
\emph off
\bar no
--silent
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size normal
\noun off
\color none
 
\family roman
\series medium
\shape up
\emph off
\bar no
no output other then errors 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-V
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
or
\size normal
\noun off
 
\family roman
\series medium
\shape up
\emph off
\bar no
--verbose
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Verbose output
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
 (-V1..
 -V5 for increasing levels of verbosity)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-N name
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Prefix all functions with name (default 'aclfgl_')
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size normal
\noun off
\color none
 
\family roman
\series medium
\shape up
\emph off
\bar no
--namespace name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Same as -N option
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-n or --noprefix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
remove any prefix from function names (= -N ' ')
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-v
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
or
\size normal
\noun off
 
\family roman
\series medium
\shape up
\emph off
\bar no
--version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Show compiler version and exit
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-f or --version_full
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Show full compiler version and details
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-h
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
 or 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
-?
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
or
\size normal
\noun off
 
\family roman
\series medium
\shape up
\emph off
\bar no
--help
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Show this help and exit
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-t
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
TYPE
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
or
\size normal
\noun off
 
\family roman
\series medium
\shape up
\emph off
\bar no
--lextype
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
 TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
output language, TYPE=C(default)
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
, EC, or 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
PERL
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-td TYPE or --lexdialect TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify the output language dialect for ESQL/C generation (INFORMIX or POSTGRES)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-k
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
or
\size normal
\noun off
 
\family roman
\series medium
\shape up
\emph off
\bar no
--keep 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
keep intermediate files (defa
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
u
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
lt)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-K
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
or 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
--clean 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
clean intermediate files when done
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-s
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
[
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
01
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
]
\size normal
\noun off
 
\size default
\noun default
or
\size normal
\noun off
 
\family roman
\series medium
\shape up
\emph off
\bar no
--stack_trace
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\noun default
[
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
01
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Include the stack trace in file: 0-Don't generate 1-Generate(Default)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
use-
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
shared/
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
--use-
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
static 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
compile with shared libraries
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
-echo 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Don't really compile (ignored for now)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-d dbname 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Specify an alternative database name to use for compilation 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--database dbname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
same as -d option (note ignores that specified in the .4gl
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-4 or --system4gl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Used internally - Ignores any clashes with builtin library names
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--map
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Generate an unload file with some 4GL code metrics
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--as-dll
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Generate a shared library as the output type
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--make-compile
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compare file times and only recompile where required (very simplistic)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Examples: 
\end_layout

\begin_layout Standard

\family typewriter
$ 4glpc sourcefile.4gl -o executablename.4ge 
\end_layout

\begin_layout Standard

\family typewriter
$ 4glpc sourcefile.4gl -c -o objectname.o 
\end_layout

\begin_layout Standard

\family typewriter
$ 4glpc -shared file.4gl -o file.4ge 
\end_layout

\begin_layout Standard

\family typewriter
$ 4glpc -static -echo file.4gl -o file.4ge 
\end_layout

\begin_layout Standard

\family typewriter
$ 4glpc -debug file.4gl -o file.debug 4glpc -map -echo file.4gl 
\end_layout

\begin_layout Standard
As a matter of interest - the 4glpc compiler itself is written in Aubit4GL.
 
\end_layout

\begin_layout Standard
The 4glpc compiler will use a number of configuration files ($AUBITDIR/tools/4gl
pc/settings) to control what commands will be used and what options will
 be passed to them.
 These will normally be setup correctly, but if you wish to change them
 (for example if you are porting to a new database backed, or a new platform),
 then you may need to know the order in which they are read.
\end_layout

\begin_layout Standard
This will depend on the A4GL_LEXTYPE, A4GL_LEXDIALECT, TARGET_OS, TARGET.
\end_layout

\begin_layout Standard
For an example, assume A4GL_LEXTYPE is set to EC, A4GL_LEXDIALECT=POSTGRES,
 TARGET_OS=linux (this is set by the ./configure script at compile time),
 and TARGET=i686-pc-linux-gnu (this is also set by the ./configure)
\end_layout

\begin_layout Standard
Files will be read as :
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
tools/4glpc/settings/EC 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
tools/4glpc/settings/EC_POSTGRES 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
tools/4glpc/settings/linux 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
tools/4glpc/settings/linux__EC 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
tools/4glpc/settings/i686-pc-linux-gnu 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
tools/4glpc/settings/i686-pc-linux-gnu__EC 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
tools/4glpc/settings/i686-pc-linux-gnu__EC_POSTGRES 
\end_layout

\begin_layout Standard
Settings in any later configuration file will overwrite those in any previous
 file.
 This gives the maximum configurability possible.
\end_layout

\begin_layout Section
4glc 
\end_layout

\begin_layout Standard
Aubit 4GL source compiler 4glc is generally invoked using the 4glpc wrapper.
 It can be involked directly :
\end_layout

\begin_layout Standard

\family typewriter
aubit 4glc <filename>.4gl 
\end_layout

\begin_layout Standard
For historic reasons, the 4glc compiler can also compile most modules to
 an executable.
 In order to do this the 4glc compiler uses the normal C compiler and passes
 unknown options on to it e.g.: 
\family typewriter

\newline
aubit 4glc file.4gl -c -o file.o
\end_layout

\begin_layout Standard

\family typewriter
aubit 4glc -shared file.4gl -o file.4ge
\end_layout

\begin_layout Standard

\family typewriter
aubit 4glc -static -echo file.4gl -o file.4ge
\end_layout

\begin_layout Standard

\family typewriter
aubit 4glc -debug file.4gl -o file.debug
\end_layout

\begin_layout Standard

\family typewriter
aubit 4glc -map -echo file.4gl
\end_layout

\begin_layout Standard
compiles to an object file rather than a linked executable
\end_layout

\begin_layout Standard
It is now best practice, unless there is a very good reason otherwise, to
 not call 4glc directly as all, and to invoke it via the 4glpc compiler
 instead.
\end_layout

\begin_layout Section
Compiling forms 
\end_layout

\begin_layout Standard

\family typewriter
$ aubit fcompile file.per
\end_layout

\begin_layout Standard
fcompile compiles form compatible with both GUI and CUI run-time modes.
 
\end_layout

\begin_layout Section
Compiling help files
\end_layout

\begin_layout Standard
Compile these using amkmessage 
\end_layout

\begin_layout Standard

\family typewriter
$ amkmessage helpfilename (without .msg extension)
\end_layout

\begin_layout Standard
This will generate the compiled help message file with a .hlp extension.
 Please note that many Informix-4GL programs assume that compiled help file
 will have extension ".iem".
 You can just rename created .hlp file to .iem if needed.
\end_layout

\begin_layout Standard
For format and syntax of help files, please see example file in test/ directory.
 It is fully compatible with Informix standard definition.
\end_layout

\begin_layout Section
Compiling menu files 
\end_layout

\begin_layout Standard
Menu files are currently not used, so you can safely ignore them (for now...)
\end_layout

\begin_layout Chapter
Configuration
\end_layout

\begin_layout Section
Introduction to configuration
\end_layout

\begin_layout Standard
Classical Informix 4GL does the following:
\end_layout

\begin_layout Enumerate
Processes Informix SQL statements embedded in 4GL code.
\end_layout

\begin_layout Enumerate
Outputs a program in the C language.
\end_layout

\begin_layout Enumerate
Connects to an Informix Database Engine (IDS or SE)
\end_layout

\begin_layout Enumerate
Interfaces with the user using 
\family typewriter
curses
\family default
 on a terminal (or xterm emulator)
\end_layout

\begin_layout Standard
Aubit 4GL does all of this but is much more versatile.
\end_layout

\begin_layout Enumerate
It can process other dialects of SQL: (PostgreSQL, Oracle, SAPDB, ODBC)
\end_layout

\begin_layout Enumerate
It can output (by design at least) in Perl.
 One day it may produce Java.
\end_layout

\begin_layout Enumerate
It can connect to other database engines:(PostgreSQL, Oracle, SAPDB, SQLite,
 ODBC)
\end_layout

\begin_layout Enumerate
It can interface using Graphics (via GTK Gnome Tool Kit) or even a no curses
 console.
 In addition, a special graphical menu structure is available.
\end_layout

\begin_layout Enumerate
It can optionally output reports in PDF format (using A4GL enhancements
 to the 4GL language.
\end_layout

\begin_layout Enumerate
It can use RPC (Remote Procedure Calls) for n-tier applications
\end_layout

\begin_layout Standard
By the magic of Dynamically Linked Libraries (called shared objects in Unix/Linu
x), most of the these options can be chosen at runtime.
 Different libraries implement the same set of required functions for each
 option.
\end_layout

\begin_layout Standard
The programmer or the user can choose from these myriad options by editing
 by setting environment variables before invoking the compiler (or the compiled
 program).
\end_layout

\begin_layout Standard
Usually however, you setup the default options in 
\family typewriter
aubitrc
\family default
 files then on Unix/Linux systems you invoke the 
\family typewriter
aubit
\family default
 program to run the programs you want to call.
 The aubit program sets environment variables from the aubitrc files and
 also ensures the library files are available.
\end_layout

\begin_layout Subsection
configurator
\end_layout

\begin_layout Standard
Aubit 4GL supplies a 4GL program configurator which shows you all the switches
 and their permitted values.
 You run it with the command:
\end_layout

\begin_layout LyX-Code
aubit configurator
\end_layout

\begin_layout Standard
Note on Microsoft systems there is no 
\family typewriter
aubit
\family default
 script.
 configurator will be in your PATH, so just type 
\family typewriter
configurator
\end_layout

\begin_layout Standard
A full list of all configuration options can be found in Appendix A.
\end_layout

\begin_layout Subsection
Essential Configuration flags
\end_layout

\begin_layout Subsubsection
A4GL_SQLTYPE
\end_layout

\begin_layout Standard
This switch chooses where to send SQL embedded in the 4GL code.
 Default is nosql.
 (which means use dummy do-nothing functions for SQL code).
\end_layout

\begin_layout Standard
Other options available may include :
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features>
<column alignment="right" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Database Backend
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
esql
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Informix esql/c native 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
nosql
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SQL statements are effectively ignored
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
pgodbc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
postgreSQL odbc
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
sapodbc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SAPDB odbc
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
iodbc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Openlink ODBC
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
unixodbc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
unixodbc (free opensource)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ifxodbc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Informix CLI (now called ODBC)
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
odbc32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Only on Windows systems
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The list of available options will depend on what was detected at compile
 time - check the $AUBITDIR/lib directory.
\end_layout

\begin_layout Subsubsection
A4GL_UI
\end_layout

\begin_layout Standard
This switch determines which frontend you are using.
 Options are CONSOLE, TUI, GTK.
\end_layout

\begin_layout Section
aubitrc files
\end_layout

\begin_layout Standard
The aubit program sets A4GL_...
 environment variable then executes the arguments on the command line.
 It reads configuration options in the following files in order:
\end_layout

\begin_layout Enumerate

\family typewriter
/etc/opt/aubit4gl/aubitrc
\end_layout

\begin_layout Enumerate

\family typewriter
$AUBITDIR/etc/aubitrc (AUBITDIR=/opt/aubit4gl by default)
\end_layout

\begin_layout Enumerate

\family typewriter
~/.aubit4gl/aubitrc
\end_layout

\begin_layout Enumerate

\family typewriter
./.aubitrc
\end_layout

\begin_layout Enumerate
Environment variables
\end_layout

\begin_layout Standard
As each of these files is read, it overwrites the values of previous files.
 The environment variables have final precedence.
\end_layout

\begin_layout Standard
To set up your A4GL system, you edit these files with text editor (e.g.
 vi)
\end_layout

\begin_layout Standard
For system wide configuration, edit /etc/opt/aubit4gl/aubitrc whereas for
 personal idiosyncrasies edit your home directory's .aubitrc file.
\end_layout

\begin_layout Chapter
4GL Language
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The 4GL programming language was born in Informix Corp in 1986.
 Because of that, and not to conflict with with 4GL as general programming
 concept (BASIC is in principle also a Fourth Generation Language, as opposed
 to C, which is a Third Generation Language), we should refer to basic 4GL
 syntax as I4GL.
 
\end_layout

\begin_layout Standard
Today, even among Informix-distributed products, there is distinction between
 classic I4GL and D4GL (Informix name for 4J's 4GL compiler), which introduced
 a number of language enhancements.
 Then Informix implemented some of these enhancements back into classic
 4GL, and added some of it's own (v 7.3), which 4J in turn implemented in
 its 
\emph on
Universal Compiler V3
\emph default
 (this is the actual name for 4Js product that Informix distributes under
 the name 
\emph on
D4GL - Dynamic 4GL
\emph default
.)
\end_layout

\begin_layout Standard
We refer to the syntax of different implementations as:
\end_layout

\begin_layout Itemize
I4GL - Informix non-GUI, a.k.a.
 "classic" products syntax, V 7.3
\end_layout

\begin_layout Itemize
D4GL - 4Js extended syntax, including I4GL
\end_layout

\begin_layout Itemize
A4GL - Aubit 4GL specific syntax, including I4GL
\end_layout

\begin_layout Itemize
x4GL - all of the above as general name for all
\end_layout

\begin_layout Standard
Luckily for us, Querix decided not to change the language, but instead do
 all GUI related configuration from separate configuration files.
\end_layout

\begin_layout Standard
Aubit 4GL, as a package, and A4GL, as a language definition, is a superset
 of I4GL.
\end_layout

\begin_layout Standard
Our first aim is to provide full 
\emph on
unconditional
\emph default
 compatibility with I4GL.
 Since this means that 90% of the syntax used in A4GL will be I4GL, and
 since this document is not intended to be an I4GL manual, we strongly suggest
 that you refer to existing Informix documentation and tutorials downloadable
 from their web site, and books about 4GL, like:
\end_layout

\begin_layout Standard

\emph on
Informix Unleashed
\emph default
, (ISBN 0672306506) a complete book in HTML format about Informix products,
 by John McNally.
 You will find several complete chapters about 4GL language there, including
 chapters on Informix database servers.
 You will also learn there that "To develop with a 4GL, the developer does
 not have to be an expert programmer".
 
\end_layout

\begin_layout Standard
(I have asked the author for permission to include his book in Aubit 4GL
 distribution, but received no answer)
\end_layout

\begin_layout Standard
The rest of this page will serve as a quick and dirty crash course to give
 you some idea of what the I4GL looks like, as a language.
 
\end_layout

\begin_layout Standard
For A4GL extensions.
 please refer to the appropriate sections of this manual.
\end_layout

\begin_layout Section
Summary:
\end_layout

\begin_layout Standard
* To learn I4GL, refer to Informix manuals for Informix-4GL version 7.3 (
 http://www.informix.com or direct links to 
\emph on
Informix 4GL by example
\emph default
,
\emph on
Informix 4GL Concepts and Use
\emph default
, 
\emph on
Informix 4GL Reference Manual
\emph default
 - please remember that exact locations can change, and if they do, use
 the search function on the Informix web site to find new locations of this
 documents), and third-party books.
\end_layout

\begin_layout Standard
* To learn about A4GL extensions, read this manual
\end_layout

\begin_layout Standard
* To get some idea about what I4GL looks like, and to get some idea about
 combined I4GL and A4GL functionality, continue reading this page
\end_layout

\begin_layout Standard
* To get 4GL code examples, go to http://www.informix.com/idn and look for
 the Example application, or download one of GNU 4GL programs from http://www.fal
out.com
\end_layout

\begin_layout Section
Short Intro to x4GL
\end_layout

\begin_layout Itemize
4GL Programs
\end_layout

\begin_layout Itemize
Structure of a program
\end_layout

\begin_layout Itemize
DATABASE section
\end_layout

\begin_layout Itemize
GLOBALS section
\end_layout

\begin_layout Itemize
Functions
\end_layout

\begin_layout Itemize
MAIN block
\end_layout

\begin_layout Itemize
DEFINE section
\end_layout

\begin_layout Itemize
4GL Commands 
\end_layout

\begin_layout Subsection
4GL Programs
\end_layout

\begin_layout Standard
A 4GL program consists of a series of modules and forms.
 Each 4GL module can contain functions and reports and each program must
 contain exactly one 'main' section and must end in a .4gl extension.
 C modules can also be included in programs.
\end_layout

\begin_layout Subsubsection
Structure of a program
\end_layout

\begin_layout Standard
database section
\end_layout

\begin_layout Standard
globals section
\end_layout

\begin_layout Standard
function/report/main block
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
function/report/main block
\end_layout

\begin_layout Subsubsection
DATABASE section 
\end_layout

\begin_layout Standard
This section is optional and is of the format :
\end_layout

\begin_layout Standard

\family typewriter
DATABASE database-name
\end_layout

\begin_layout Standard
The database name is actually the DATA SOURCE NAME (DSN) from the ODBC drivers.
\end_layout

\begin_layout Subsubsection
GLOBALS section 
\end_layout

\begin_layout Standard
This optional section allows you to define variables which are accessible
 to all modules.
 There is normally a single file (typically called 'globals.4gl') where variables
 are defined.
 All other modules which need these variables then include that file using
 the 
\family typewriter
GLOBALS
\family default
 statement .eg.
\family typewriter

\newline
globals.4gl:
\end_layout

\begin_layout Standard

\family typewriter
GLOBALS
\newline
DEFINE a INTEGER
\newline
END GLOBALS
\end_layout

\begin_layout Standard

\family typewriter
module.4gl:
\end_layout

\begin_layout Standard

\family typewriter
GLOBALS "globals.4gl"
\end_layout

\begin_layout Standard
Note: In Aubit 4GL the 'globals' module (containing the GLOBALS / END GLOBALS)
 must be compiled first.
\end_layout

\begin_layout Subsubsection
Functions 
\end_layout

\begin_layout Standard
A function in 4GL is a sequence of commands which are executed when called
 from another block of code.
 A function can accept parameters and can return values.
\end_layout

\begin_layout Standard
A function is defined :
\newline

\family typewriter
FUNCTION function-name ( parameter-list )
\family default

\newline
define-section 
\newline
commands
\newline

\family typewriter
END FUNCTION
\end_layout

\begin_layout Standard
Values are returned using the RETURN keyword:
\newline

\family typewriter
RETURN value
\end_layout

\begin_layout Subsubsection
MAIN block
\end_layout

\begin_layout Standard
Each program must contain a main section - it is the starting point in any
 program.
\end_layout

\begin_layout Standard

\family typewriter
MAIN
\newline
define-section
\newline
commands
\newline
END MAIN
\end_layout

\begin_layout Subsubsection
DEFINE section 
\end_layout

\begin_layout Standard
This optional section allows you to define variables which may be used subsequen
tly.
 In its simplest form:
\end_layout

\begin_layout Standard

\family typewriter
DEFINE variable_names datatype
\family default

\newline
or 
\newline

\family typewriter
DEFINE CONSTANT constant_name "Value"
\newline
DEFINE CONSTANT constant_name Number-Value
\end_layout

\begin_layout Standard
More than one variable can be defined as any type in the same statement
 by separating the names with a comma:
\newline

\family typewriter
DEFINE a,b,c INTEGER
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
Available datatypes are :
\newline
SMALLINT (2 byte integer)
\newline
INTEGER (4 byte integer)
\newline
CHAR
 (Single character 'string')
\newline
CHAR(n) (n character string)
\newline
MONEY
\newline
DECIMAL (These
 are not fully implemented)
\newline
FLOAT (8 byte floating point number - (C double))
\newline
SMAL
LFLOAT (4 byte floating point number - (C float))
\newline
DATE (date - number of
 days since 31/12/1899)
\newline
DATETIME
\newline
INTERVAL
\newline
BYTE
\newline
TEXT
\newline
VARCHAR Unimplemented yet
\newline
LIKE
 tablename.columnname
\newline
RECORD LIKE tablename.* 
\newline
- can only be used when the module
 has a DATABASE statement.
 These copy the datatypes directly from the database either for a simple
 column, or to generate an entire record (see below)
\end_layout

\begin_layout Standard
Special datatypes are :
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ARRAY[n]\InsetSpace ~
OF\InsetSpace ~
datatype defines an array
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
RECORD\InsetSpace ~
..\InsetSpace ~
 END RECORD defines a record structure
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ASSOCIATE [CHAR](m) WITH ARRAY[n] of datatype ....
 defines an associative array (hash table).
\end_layout

\begin_layout Subsubsection
Arrays Syntax:
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DEFINE\InsetSpace ~
vars\InsetSpace ~
ARRAY[n]\InsetSpace ~
datatype eg.
 
\newline
DEFINE lv_arr ARRAY[200] OF INTEGER defines an array of 200 elements each
 being an integer.
 Elements of an array are indexed from 1 to the number of elements specified.
\newline
IMPO
RTANT: 
\emph on
No bounds checks are made.

\emph default
 Accessing elements which are outside those defined (i.e.
 <1 or > n) will result in an error (Usually a core dump).
 Eg 
\newline
LET lv_arr[1]=1
\newline
LET lv_arr[200]=200
\newline
LET lv_arr[201]=201 # this will cause
 a program fault!
\end_layout

\begin_layout Subsubsection
Records
\end_layout

\begin_layout Standard
Records are structured groups of data, with the entries separated by commas.
 Elements within a record are accessed via the syntax: record name '.' element
 name.
\end_layout

\begin_layout Paragraph
Syntax
\end_layout

\begin_layout LyX-Code
DEFINE recordname RECORD 
\newline
 element datatype,
\newline
 element datatype
\newline
 ...
\newline
END RECORD
\end_layout

\begin_layout Standard
eg.
\end_layout

\begin_layout LyX-Code
DEFINE lv_rec RECORD
\newline
 elem1 CHAR(10),
\newline
 elem2 INTEGER
\newline
END RECORD
\end_layout

\begin_layout Standard
defines a record with two elements.
 eg.
\end_layout

\begin_layout LyX-Code
LET lv_rec.elem1="string1"
\end_layout

\begin_layout LyX-Code
Record may also be nested and used in conjunction with arrays.
 The following are all therefore valid:
\newline
DEFINE lv_record ARRAY[20] OF RECORD
\newline

 elem1 CHAR(20),
\newline
 elem2 INTEGER
\newline
END RECORD
\end_layout

\begin_layout LyX-Code
DEFINE lv_record RECORD
\newline
 a ARRAY[200] of INTEGER,
\newline
 b CHAR(20)
\newline
END RECORD
\end_layout

\begin_layout LyX-Code
DEFINE lv_record RECORD
\newline
 subrecord1 RECORD
\newline
  elem1 CHAR(10),
\newline
  elem2 INTEGER
\newline

 END RECORD,
\newline
 subrecord2 RECORD
\newline
  elem2 DATE
\newline
 END RECORD
\newline
END RECORD
\end_layout

\begin_layout Subsection
Associative Arrays
\end_layout

\begin_layout Standard
Associative arrays allow you to access data from an array using a string
 as a subscript rather than an integer.
 For example:
\end_layout

\begin_layout LyX-Code
LET age<<"bob">>=40
\newline
DISPLAY age<<"bob">>
\end_layout

\begin_layout Standard
This can be especially useful when dealing with codes and code desciptions:
\end_layout

\begin_layout LyX-Code
LET lv_desc<<"A">>="Active"
\newline
LET lv_desc<<"I">>="Inactive"
\newline
LET lv_desc<<"R">>="Runn
ing"
\newline
LET lv_desc<<"D">>="Deleted"
\newline
LET lv_state="A"
\newline
.
\newline
.
\newline
DISPLAY lv_desc<<lv_state>>
\end_layout

\begin_layout Standard
(This is for illustration, the data would normally be read from a database!)
\end_layout

\begin_layout Standard
To define an associate array:
\newline

\family typewriter
DEFINE name ASSOCIATE [CHAR] (nc) WITH ARRAY [nx] OF datatype
\family default

\newline
Where nc is the number of characters to use for the index, and nx is the
 total number of elements that may be stored.
\end_layout

\begin_layout Paragraph
Performance Note
\end_layout

\begin_layout Standard
Internally, associate arrays are stored using hash tables, for performance
 reasons always declare 'nx' much larger than is actually required.
 A factor of two is optimum in most cases.
\end_layout

\begin_layout Standard
Again the datatype used in this form of array may be a RECORD, ARRAY etc.
 Eg.
\end_layout

\begin_layout Standard

\family typewriter
DEFINE lv_asoc1 ASSOCIATE CHAR(10) WITH ARRAY[10] OF INTEGER
\newline
DEFINE lv_asoc3
 ASSOCIATE (10) WITH ARRAY[10] OF INTEGER
\newline
DEFINE lv_asoc2 ASSOCIATE CHAR(10)
 WITH ARRAY[10] OF RECORD
\newline
\InsetSpace ~
element1 CHAR(10),
\newline
\InsetSpace ~
element2 CHAR(20)
\newline
END RECORD
\end_layout

\begin_layout Subsection
Constants
\end_layout

\begin_layout LyX-Code
Constants are defined using:
\newline
DEFINE CONSTANT name value eg.
\newline
DEFINE CONSTANT
 max_num_vars 30
\newline
DEFINE CONSTANT err_string "There is an error"
\newline
IF num_vars>max_nu
m_vars THEN
\newline
  ERROR err_string
\newline
END IF
\end_layout

\begin_layout LyX-Code
It is also possible to use constants in any subsequent define sections:
\newline
DEFINE
 CONSTANT num_elems 20
\newline
DEFINE lv_arr ARRAY [num_elems] OF INTEGER
\newline
IF num_vars<=num
_elems THEN
\newline
  LET lv_arr[num_vars]=1
\newline
END IF
\end_layout

\begin_layout Standard
You can think of DEFINE CONSTANT statements as being equivalent to C 
\family typewriter
#define
\family default
 statements (except that you cannot use them to define macros as you can
 with C).
\end_layout

\begin_layout Subsection
Packages
\end_layout

\begin_layout Standard
The current system allows programs to call shared libraries using the syntax:
\end_layout

\begin_layout LyX-Code
call library::function(..) 
\end_layout

\begin_layout Standard
(See 
\family typewriter
tools/test/file.4gl
\family default
 or 
\family typewriter
lib/extra_libs/pop/pop_killer.4gl
\family default
 for some example usage)
\end_layout

\begin_layout Standard
Packages take this one step further in that the calls are coded like any
 other functions.
 They are detected at compile time by referencing a list of possible function
 name mappings specified by an 
\family typewriter
import package
\family default
 statement.
 Syntax :
\end_layout

\begin_layout LyX-Code
IMPORT PACKAGE packagename
\end_layout

\begin_layout LyX-Code
or
\end_layout

\begin_layout LyX-Code
USE packagename
\end_layout

\begin_layout Standard
The packagename should be the name of a file in the 
\family typewriter
$AUBITDIR/etc/import
\family default
 directory.
\end_layout

\begin_layout Standard
A file called 
\family typewriter
default
\family default
 exists in this directory which is included for all compilations - this
 allows you to add calls to your own subroutines just as if they were builtin
 functions with no need to add them to the compile line as object or library
 modules..
\end_layout

\begin_layout Standard
This file should contain a series of lines, each containing:
\end_layout

\begin_layout LyX-Code
library functionname
\end_layout

\begin_layout Standard
(In this way a 
\emph on
package
\emph default
 can contain functions from more than one library...)
\end_layout

\begin_layout Standard
e.g.
\end_layout

\begin_layout LyX-Code
A4GL_pcre pcre_match 
\newline
A4GL_pcre pcre_text
\end_layout

\begin_layout Standard
Whenever the compiler sees a call to 
\family typewriter
pcre_match
\family default
 it will call 
\family typewriter
pcre_match
\family default
 in the A4GL_pcre library - in this way it's equivalent to 
\family typewriter
A4GL_pcre::pcre_match
\end_layout

\begin_layout Standard
So a full .4gl may look like :
\end_layout

\begin_layout Standard
import package a4gl_pcre 
\newline
main 
\newline
  if pcre_match("cat|dog","There was an old
 cat") then 
\newline
     display "Matches to ",pcre_text(1) 
\newline
  else 
\newline
     display
 "No match" 
\newline
  end if 
\newline
end main
\newline

\newline

\newline
Compile and run 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
$ 4glpc pcre_test.4gl -o pcre_test 
\newline
$ ./pcre_test 
\newline
Matches to cat
\end_layout

\begin_layout Standard
(Note - you don't need to link against the library - it's done at runtime!)
\end_layout

\begin_layout Standard
(If you've got 
\family typewriter
pcre
\family default
 installed - you can compile up the pcre library by doing a 
\family typewriter
make
\family default
 in the 
\family typewriter
lib/extra_libs/pcre
\family default
 directory)
\end_layout

\begin_layout Section
4GL Quick Reference 
\end_layout

\begin_layout Standard
The following subsections are from the Aubit4GL Quick Referece which is
 a separately available document.
 It can be printed in Landscape orientation on A4 paper 2-up to produce
 an A5 bookley.
\end_layout

\begin_layout Section
Aubit4GL Quick Reference
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
setlength{
\backslash
marginparsep}{2em}
\end_layout

\end_inset


\hfill

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
scriptsize{Version 0.6: 11 Oct 2006}
\end_layout

\end_inset


\hfill

\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data Types
\end_layout

\begin_layout LyX-Code
ARRAY[m,n,...] OF type
\newline
BYTE
\newline
CHAR(n)
\newline
CHARACTER(n)
\newline
DATE
\newline
DATETIME(f TO l)
\newline
DEC
\newline
DEC(precision)
\newline
D
EC(precision,scale)
\newline
DECIMAL
\newline
DECIMAL(precision)
\newline
DECIMAL(precision,scale)
\newline
DOUBLE
 PRECISION
\newline
DOUBLE PRECISION(precision)
\newline
INT
\newline
INTEGER
\newline
INTERVAL(f TO l)
\newline
LIKE table.column
\newline
M
ONEY
\newline
MONEY(precision)
\newline
MONEY(precision,scale)
\newline
NUMERIC
\newline
NUMERIC(m)
\newline
NUMERIC(m,n)
\newline
REAL
\newline
RECOR
D LIKE table.*
\newline
RECORD name type ,...
 END RECORD
\newline
SERIAL
\newline
SERIAL(n)
\newline
SMALLFLOAT
\newline
SMALLINT
\newline
TEXT
\newline
VARCHAR
\newline
VARCHAR(max)
\newline
VARCHAR(max,m
in)
\end_layout

\begin_layout Standard
Precision = No of significant digits (default 16)
\newline
Scale=No or digits after
 the decimal pt (default 2), can be -ve.
\end_layout

\begin_layout Standard
max = number of chars (upper limit 254 for Informix IDS)
\newline
min = minimum number
 of chars.
\end_layout

\begin_layout Standard
Current Engines also support large integers: int8 and serial8.
\end_layout

\begin_layout Subsection
Constants
\end_layout

\begin_layout LyX-Code
TRUE=1
\newline
FALSE=0 
\newline
NOTFOUND=100
\end_layout

\begin_layout Subsection
Global Variables
\end_layout

\begin_layout Description
Flags: INT_FLAG
\hfill
 QUIT_FLAG
\hfill

\end_layout

\begin_layout Description
Vars: STATUS 
\hfill
SQLCA.SQLCODE
\hfill

\end_layout

\begin_layout Description
SQLCA\InsetSpace ~
Record: \InsetSpace ~

\newline
SQLCA RECORD
\newline
SQLCODE INTEGER,
\newline
SQLERRM CHAR(71),
\newline
SQLERRP CHAR(8),
\newline
SQLERR
D ARRAY[6] OF INTEGER,
\newline
SQLAWARN CHAR(8)
\newline
END RECORD
\end_layout

\begin_layout Description
SQLCA.SQLERRD\InsetSpace ~
Array: \InsetSpace ~

\newline
SQLERRD[1]:estimated row count
\newline
SQLERRD[2]:serial value
 returned
\newline
SQLERRD[3]:no of rows processed
\newline
SQLERRD[4]:estimated CPU cost
\newline
SQLERRD[5]:
error offset
\newline
SQLERRD[6]:last rowid processed
\end_layout

\begin_layout Standard
Warning: Not all of the above work for all backends.
 For PostgreSQL they may need a patched version of the engine.
\end_layout

\begin_layout Subsection
Syntax Conventions
\end_layout

\begin_layout Standard
The remainder of this chapter uses the following conventions to indicate
 the syntax of 4GL language constructs
\end_layout

\begin_layout Itemize
KEYWORDS are in UPPERCASE.
 You enter them literally but in upper or lower case
\end_layout

\begin_layout Itemize
Lower case indicates terms for which you must enter your own identifiers
 or expressions
\end_layout

\begin_layout Itemize
"string" indicates a quoted string.
 Informix allows either single or double quotes but non-Informix engines
 may enforce one or the other.
\end_layout

\begin_layout Itemize
string (without quotes) indicates an unquoted string used for example, in
 naming cursors, prepared statements, forms, windows, etc.
\end_layout

\begin_layout Itemize
m and n are used to denote a numeric value
\end_layout

\begin_layout Itemize
"c" denotes any quoted character
\end_layout

\begin_layout Itemize
[] and {} delimit options.
 {} indicates a mandatory option.
 [] a non-mandatory toption.
 Within the [] or {} elements are separated by the pipe symbol |.
 e.g.
 {a|b|c} means you must choose a or b or c.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

Expressions in red are Aubit 4GL extensions and will not compile on Informix,
 4J, or other 4GL compilers.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\color green
Expressions in green work with Informix SE only.
\end_layout

\begin_layout Itemize

\family typewriter
\color blue
Expressions in blue work with Informix IDS only.
\end_layout

\begin_layout Itemize
relop means a relational operator (see below)
\end_layout

\begin_layout Itemize
expr means an expression
\end_layout

\begin_layout Itemize
charexpr means a character expression (e.g.
 
\family typewriter
filename || ".4gl
\family default
")
\end_layout

\begin_layout Subsection
Operators
\end_layout

\begin_layout Description
Numeric: \InsetSpace ~

\hfill
+
\hfill
-
\hfill
 *
\hfill
 /
\hfill
 **
\hfill
 mod
\hfill

\end_layout

\begin_layout Description
String: \InsetSpace ~

\hfill
,
\hfill
 [m,n]
\hfill
 ||
\hfill
USING "string" 
\hfill
CLIPPED
\hfill

\end_layout

\begin_layout Description
Relational: \InsetSpace ~

\hfill
=
\hfill
<>
\hfill
 !=
\hfill
 >=
\hfill
 <
\hfill
<=
\hfill

\end_layout

\begin_layout Description
Boolean: expr relop expr
\newline
charexp LIKE charexpr
\newline
charexpr LIKE charexpr ESCAPE
 "c"
\newline
charexp NOT LIKE charexp
\newline
charexp NOT LIKE charexp ESCAPE "c"
\newline
charexpr
 MATCHES charexpr 
\newline
charexpr NOT MATCHES charexpr ESCAPE "c"
\newline
charexpr MATCHES
 charexpr 
\newline
charexpr NOT MATCHES charexpr ESCAPE "c"
\newline
expr IS NULL
\newline
expr IS NOT
 NULL
\newline
boolexpr AND boolexpr]
\newline
boolexpr OR boolexpr
\newline
NOT boolexpr
\end_layout

\begin_layout Subsection
Aubit 4GL Expressions
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
[NOT] IN ( {expr,...
\newline
   |selectstatement} )
\newline
[NOT] EXISTS ( selectstatement )
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Attribute Constants
\end_layout

\begin_layout Standard
An attlist is a set of the following elements:
\end_layout

\begin_layout Standard
BLACK, WHITE, RED, GREEN, BLUE, 
\newline
MAGENTA, CYAN, YELLOW,
\newline
REVERSE,DIM, BOLD,
 BLINK, INVISIBLE,
\newline
BORDER, UNDERLINE
\end_layout

\begin_layout Subsection
Key Constants
\end_layout

\begin_layout Standard
A keylist is a set of the following elements:
\end_layout

\begin_layout LyX-Code
F1 to F64
\newline
CONTROL-c (but c not in (A,D,H,I,
\newline
  K,L,M,R,X)
\newline
ACCEPT, DELETE, DOWN,
 ESC, ESCAPE,
\newline
HELP, INSERT, INTERRUPT, LEFT,
\newline
RIGHT, NEXT, NEXTPAGE, PREVIOUS,
\newline
PREVP
AGE, RETURN, TAB, UP
\end_layout

\begin_layout Subsection
Table Privileges
\end_layout

\begin_layout LyX-Code
ALTER, INDEX, DELETE, INSERT,
\newline
SELECT[(colname ,...)]
\newline
UPDATE[(colname ,...)
\end_layout

\begin_layout Subsection
Comments
\end_layout

\begin_layout Standard
Characters on a line after the following are ignored by 4GL compilers:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="12col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="70col%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ANSI SQL Standard for commenting out rest of line
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Unix convention for commenting out rest of line
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Curly braces are used to comment out lines of code (not nestable):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="12col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="70col%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
{ ...
 }
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compiler ignores everything between the braces 
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
{! ...
 !}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Aubit 4GL compiles the enclosed code.
 Informix 4GL ignores it.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
4GL Statement Syntax
\end_layout

\begin_layout LyX-Code
ALLOCATE ARRAY name, size
\newline
ALTER INDEX 
\emph on
indexname
\emph default
 TO [NOT] CLUSTER
\newline
ALTER TABLE 
\emph on
tablename
\emph default

\newline
  {ADD (newcolname newcoltype
\newline
     [BEFORE old-colname][,...])
\newline
   |DROP (oldcolname[,...
])
\newline
   |MODIFY (oldcolname newcoltype [NOT NULL]
\newline
     [,...])
\newline
  }[,...]
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

AT TERMINATION CALL 
\emph on
function
\emph default
([args])
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
BEGIN WORK
\newline
  statement ...
\newline
  {COMMIT WORK | ROLLBACK WORK}
\newline
CALL 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textcolor{red}{
\end_layout

\end_inset


\emph on
[packet
\emph default
{
\emph on
::|.}]
\emph default

\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

function([args])
\newline
  [RETURNING arglist]
\newline
CASE [(
\emph on
expr
\emph default
)]
\newline
  WHEN {
\emph on
expr
\emph default
 | 
\emph on
booleanexpr
\emph default
}
\newline
    statement
\newline
    ...
\newline
    [EXIT CASE]
\newline
  ...
\newline
  [OTHERWISE]
\newline
    ...
\newline
    [EXIT CASE]
\newline
    ...
\newline

  END CASE 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

CHECK MENUITEM name
\newline
CHECK MENUITEMEM2 name 
\newline
CLEAR STATUSBOX name
\newline
CLASS name
 [EXTENDS class]
\newline
  definestatements ...
\newline
  {FUNCTION func([arglist])
\newline
    statements
\newline

    [...]
\end_layout

\begin_layout LyX-Code
   END FUNCTION}
\newline
   ...
\newline
  END CLASS
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
CLEAR {SCREEN |WINDOW 
\emph on
windowname
\emph default

\newline
   |WINDOW SCREEN
\newline
   |FORM 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

[TO DEFAULTS]
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
   |
\emph on
fieldlist
\emph default
}
\newline
CLOSE 
\emph on
cursor
\emph default

\newline
CLOSE DATABASE
\newline
CLOSE FORM
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

CLOSE SESSION name
\newline
CLOSE STATUSBOX name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
CLOSE WINDOW 
\emph on
name
\emph default

\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

CODE
\newline
  Cstatement;
\newline
  ...
\newline
  ENDCODE
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
COMMIT WORK
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

CONNECT TO name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CONSTRUCT {BY NAME charvar ON collist
\newline
  |charvar on collist FROM { fields
 
\newline
     | screenrecord[[n]].*}  [,...]}
\newline
  [[ {BEFORE|AFTER} CONSTRUCT statements]
\newline

   [,...] 
\newline
   [ {BEFORE|AFTER} FIELD field statements]
\newline
   [,...] 
\newline
   {ON KEY (keylist)
\newline

      statement
\newline
      ...
\newline
      [{EXIT|CONTINUE} CONSTRUCT]
\newline
   ...]
\newline
END CONSTRUCT]
\end_layout

\begin_layout LyX-Code
CONTINUE CONSTRUCT
\newline
CONTINUE DISPLAY
\newline
CONTINUE FOR
\newline
CONTINUE FOREACH
\newline
CONTINUE INPUT
\newline
CONT
INUE MENU
\newline
CONTINUE PROMPT
\newline
CONTINUE WHILE
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

CONVERT REPORT TO "filename" AS 
\newline
  {"SAVE"|"PDF"|"CSV"|"TXT"}
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textcolor{green}{CREATE AUDIT FOR tabname in "pathname"}
\end_layout

\end_inset


\newline
CREATE [UNIQUE|DISTINCT][CLUSTER] INDEX
\newline
 indname ON tabname( colname [ASC|DESC]
\newline

       [,...])
\newline
CREATE DATABASE {name| charvar}
\newline
   [WITH LOG [IN path]]
\newline
CREATE
 SCHEMA AUTHORIZATION
\newline
CREATE PRIVATE SYNONYM
\newline
CREATE PUBLIC SYNONYM
\newline
CREATE SYNONYM
 name FOR tabname
\newline
CREATE TABLE
\newline
CREATE [TEMP] TABLE name
\newline
   (colname coltype
 [NOT NULL][,...])
\newline
CREATE DISTINCT CLUSTER INDEX
\newline
CREATE VIEW
\newline
CURRENT WINDOW IS
 
\emph on
name
\emph default

\newline
CURRENT WINDOW SCREEN
\newline
CURRENT WINDOW IS SCREEN
\newline
DATABASE 
\emph on
name
\emph default
 [EXCLUSIVE]
\newline
DEALLOCATE ARRAY name
\newline
DECLARE name [SCROLL] CURSOR FOR
\newline
  {select_state
ment
\newline
    [FOR UPDATE OF collist
\newline
  |insert_statement
\newline
  |statementid}
\newline
DEFER INTERRUPT
\newline
D
EFER QUIT
\newline
DEFINE varlist datatype [,...] 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

DEFINE CONSTANT id {"string"|number} 
\newline
DEFINE linkid LINKED TO tabname PRIMARY
 KEY (colname)
\newline
DEFINE name ASSOCIATE [CHAR](n) 
\newline
   with ARRAY[m] OF datatype
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
DELETE FROM tabname
\newline
   [WHERE {condition|CURRENT OF cursor}]
\newline
DELETE USING
 linkid
\newline
DISABLE FORM name
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

DISABLE MENUITEM name
\newline
DISABLE MENUITEMS
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
DISPLAY {BY NAME varlist
\newline
  | varlist TO {fieldlist|screenrec[[n]].*}
\newline
     
  [,...]
\newline
     | AT screenrow,screencol]}
\newline
   [ ON KEY (keylist)
\newline
      statement
\newline

      ...
\newline
      [EXIT DISPLAY]
\newline
   ...
\newline
   END DISPLAY]
\newline
DISPLAY ARRAY id TO screenarray.*
\newline

   [ ATTRIBUTE( attlist )]
\newline
   {ON KEY (keylist)
\newline
      statement
\newline
      ...
\newline
    
  [EXIT DISPLAY]
\newline
   ...
\newline
   END DISPLAY| [END DISPLAY]}
\newline

\newline
DISPLAY FORM name [ATTRIBUTE(
 attlist)]
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
textcolor{green}{DROP AUDIT FOR tabname}
\end_layout

\end_inset


\newline
DROP DATABASE {name | charvar}
\newline
DROP INDEX name
\newline
DROP SYNONYM name
\newline
DROP TABLE
 name
\newline
DROP TRIGGER name
\newline
DROP VIEW name
\newline
ENABLE FORM form
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

ENABLE MENUITEM name
\newline
ENABLE MENUITEMS
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
ERROR displaylist [ATTRIBUTE (attlist)]
\newline
EXECUTE [IMMEDIATE] statementid
\newline
EXIT
 CASE
\newline
EXIT CONSTRUCT
\newline
EXIT DISPLAY
\newline
EXIT FOR
\newline
EXIT FOREACH
\newline
EXIT INPUT
\newline
EXIT MENU
\newline
EXIT
 PROGRAM [expr]
\newline
EXIT PROMPT
\newline
EXIT WHILE
\newline
FETCH [NEXT
\newline
      |PREVIOUS|PRIOR|FIRST|LAST
\newline

        |CURRENT|RELATIVE n
\newline
        |ABSOLUTE n]
\newline
     cursorname [INTO varlist]
\newline
FIN
ISH REPORT name
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

FINISH REPORT name
\newline
    CONVERTING TO {{"filename"|EMAIL|}
\newline
      [AS {"SAVE"|"PDF"|
"CSV"|"TXT"|MANY}
\newline
      [USING "filename" AS LAYOUT]}
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
FLUSH cursor
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

FONT SIZE n
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
FOR var = expr TO expr [STEP expr]
\newline
   {statement|CONTINUE FOR|EXIT FOR}...
\newline
 
  END FOR
\newline
FOREACH cursor [INTO varlist]
\newline
   [statement|CONTINUE FOREACH|EXIT
 FOREACH]...
\newline
   END FOREACH
\newline
FREE {statementid|cursor|blobvar}
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

FREE REPORT name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
FUNCTION function([arglist])
\newline
   [ definestatement ]...
\newline
   statement ...
\newline
   END FUNCTION
\newline
GO
 TO 
\emph on
label
\emph default

\newline
GOTO 
\emph on
label
\emph default

\newline
GRANT {tabpriv ON tabname
\newline
   | CONNECT|RESOURCE|DBA }
\newline
   TO {PUBLIC|userlist}
\end_layout

\begin_layout LyX-Code
HIDE OPTION name
\newline
HIDE WINDOW name
\newline
IF boolexpr THEN
\newline
  statement
\newline
  ...
\newline
  [ELSE
\newline
   
 statement
\newline
    ...
\newline
  END IF]
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

IF boolexpr THEN
\newline
  statement
\newline
  ...
\newline
  [ELIF|ELSIF
\newline
    statement
\newline
    ...]
\newline
   ...
\newline
  [ELSE
\newline
 
   statement
\newline
    ...]
\newline
  END IF]
\newline
IMPORT PACKAGE name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
INITIALIZE varlist
\newline
  {LIKE collist| TO NULL}
\newline
INPUT ARRAY array [WITHOUT DEFAULTS]
\newline

  FROM screenarray.* [HELP n]
\newline
  [{BEFORE {ROW|INSERT|DELETE|FIELD list}
\newline
  
  [,...]
\newline
    |AFTER {ROW|INSERT|DELETE|FIELD list
\newline
       INPUT}[,...]
\newline
     |ON KEY
 (keylist)}
\newline
     statement
\newline
     ...
\newline
     [NEXT FIELD field]
\newline
     ...
\newline
     [EXIT INPUT]
\newline

     ...
\newline
   ...
 
\newline
   END INPUT
\newline
INSERT INTO tabname[(collist)]
\newline
  {VALUES(vallist)| selectstatemet}
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

INSERT USING linkid
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
LABEL 
\emph on
name
\emph default
:
\newline
MESSAGE displaylist [ATTRIBUTE (attlist)]
\newline
LABEL label-name :
\newline
LET id = expr
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

LET hasharray<<"code">> = "string"
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
LOAD FROM filename INSERT in tabname [(collist)]
\newline
LOCATE varlist in {MEMORY|FILE
 [filename]}
\newline
LOCK TABLE name IN {SHARE|EXCLUSIVE} MODE
\newline
MENU "name"
\newline
   COMMAND
 {KEY (keylist)
\newline
       | [KEY (keylist)] "option"
\newline
            [HELP n]}
\newline
  
    statement 
\newline
      ...
\newline
      [CONTINUE MENU]
\newline
      ...
\newline
      [EXIT MENU]
\newline
      ...
\newline
 
     [NEXT OPTION "option"]
\newline
      ...
\newline
    ...
\newline
    [ON KEY (keylist)
\newline
      statement
\newline

      ...
\newline
      CONTINUE MENU]
\newline
      ...
\newline
      [EXIT MENU]
\newline
      ...
\newline
      [NEXT OPTION
 "option"]
\newline
      ...]
\newline
    END MENU
\newline
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

MENU name
\newline
   {OPTION opt [IMAGE="path/name.xpm"] "Label"
\newline
   |SUBMENU subname
 "[_]Label" 
\newline
     {USE menu
\newline
     |{statement,...
\newline
      END SUBMENU}}
\newline
   | statement
\newline

    ,...}
\newline
   END MENU
\newline
MENUHANDLER name
\newline
   [ definestatement [,...]]
\newline
   [ statement
\newline

     |{{DIS|EN}ABLE MENUITEM[S] item [,...]}
\newline
     | ON item
\newline
         statement
\newline

         [...]]
\newline
   END MENUHANDLER
\newline
MESSAGEBOX message
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline

\color blue
SET BUFFERED LOG
\color none

\newline
SET CONSTRAINTS ALL IMMEDIATE
\newline
SET LOG
\newline

\color green
START DATABASE identifier WITH LOG IN "..."
\color none

\newline
  [MODE ANSI]
\newline
START REPORT name
\newline
   [TO {file|PIPE program|PRINTER
\newline
|
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

CONVERTIBLE
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset

}]
\newline
MOVE WINDOW
\newline
NEED n LINES
\newline
NEXT FIELD "fieldname"
\newline
NEXT FORM NEXT OPTION "optname"
\newline
OP
EN 
\emph on
cursor
\emph default
 [USING varlist]
\newline
OPEN FORM name FROM "filename"
\newline
OPEN SESSION id TO DATABASE
 db
\newline
   [USING user [PASSWORD pwd]]
\newline
OPEN STATUSBOX name
\newline
OPEN WINDOW name AT
 row, col
\newline
   WITH {r ROWS, c COLUMNS
\newline
         | FORM "file"}
\newline
   [ATTRIBUTE(attlist)
]
\newline
OPTIONS {MESSAGE LINE line
\newline
   |PROMPT LINE line
\newline
   |COMMENT LINE line
\newline
   |ERROR
 LINE line
\newline
   |FORM LINE line
\newline
   |INPUT {[NO] WRAP}
\newline
   |INSERT KEY key
\newline
   |DELETE
 KEY key
\newline
   |NEXT KEY key
\newline
   |PREVIOUS KEY key
\newline
   |ACCEPT KEY key
\newline
   |HELP FILE
 "file"
\newline
   |HELP KEY key
\newline
   |INPUT ATTRIBUTE(attlist)
\newline
   |DISPLAY ATTRIBUTE
 (attlist)}
\newline
   [,...]
\newline
OUTPUT TO REPORT name(exprlist)
\newline
PAUSE "charexpr"
\newline
PREPARE
 id from "charexpr"
\newline
PRINT exprlist
\newline
PRINT FILE "filename"
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

PRINT IMAGE "name"
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
PROMPT displaylist FOR [CHAR] var
\newline
  [HELP n]
\newline
  [ON KEY (keylist)
\newline
    statement
\newline

    ...
\newline
  ...
\newline
  END PROMPT]
\newline
PUT cursor FROM varlist
\newline
RECOVER TABLE name
\newline
RENAME DATABASE
 name TO newname
\newline
RENAME COLUMN table.oldcol TO newcol
\newline
RENAME TABLE oldname
 TO newname
\newline
RESIZE ARRAY name, size
\newline
EXIT REPORT
\newline
RETURN  exprlist
\newline
REVOKE { tabpriv
 ON tabname 
\newline
   | CONNECT | RESOURCE | DBA}
\newline
   FROM {PUBLIC | userlist
\newline
ROLLBACK
 WORK
\newline
ROLLFORWARD DATABASE name
\newline
RUN command [RETURNING n
\newline
   |WITHOUT WAITING]
\newline
SCROLL
 {fieldlist| screenrec.*}[,...]
\newline
   {UP|DOWN}[BY n]
\newline
SELECT sellist [INTO varlist]
 FROM collist
\newline
   [joinclause] [fromclause] 
\newline
   [groupclause [havingclause]]
\newline

   [orderclause]
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

SELECT USING linkid
\newline
SET PAUSE MODE OFF
\newline
SET PAUSE MODE ON
\newline
SET CURSOR
\newline
SET SESSION
 TO name
\newline
SHOW MENU menu USING handler
\newline
   [FROM "file"]
\newline
SHOW OPTION "optname"
\newline
SHOW
 WINDOW name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
SKIP n LINE[S]
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

SKIP BY nval
\newline
SKIP TO nval
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
SKIP TO TOP OF PAGE
\newline
SLEEP n
\newline
SQL sqlstatement [,...] END SQL
\newline
SET EXPLAIN OFF
\newline
SET
 EXPLAIN ON
\newline
SET ISOLATION TO COMMITTED READ
\newline
SET ISOLATION TO CURSOR STABILITY
\newline
SET
 ISOLATION TO DIRTY READ
\newline
SET ISOLATION TO REPEATABLE READ
\newline
SET LOCK MODE TO
 NOT WAIT
\newline
SET LOCK MODE TO WAIT
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

SET SQL DIALECT TO "{INFORMIX|ORACLE|...}"
\newline
START EXTERNAL FUNCTION
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
START REPORT name
\newline
   [TO {"filename"|PIPE program|PRINTER}]
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

STOP ALL EXTERNAL
\newline
TERMINATE REPORT
\newline
UNCHECK MENUITEM name
\newline
UNCHECK MENUITEMS
 name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
UNLOAD TO filename selectstatement
\newline
UNLOCK TABLE name
\newline
UPDATE tabname SET
\newline
  
 {colname = expr [,...]
\newline
   |{(collist}|table.*|*}=
\newline
      {(exprlist)| record.*}}
\newline

   [WHERE {condition|CURRENT of cursor}
\newline
UPDATE STATISTICS
\newline
UPDATE STATISTICS
 FOR TABLE name
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

UPDATE USING linkid
\newline
USE 
\emph on
packagename
\emph default

\newline
USE SESSION 
\emph on
name
\emph default

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline
VALIDATE var LIKE collist
\newline
WHILE boolean
\newline
   [statement| EXIT WHILE | CONTINUE
 WHILE]...
\newline
   END WHILE
\end_layout

\begin_layout Subsection
Report Syntax
\end_layout

\begin_layout LyX-Code
REPORT repname( arglist)
\newline
  definestatement ...
\end_layout

\begin_layout LyX-Code
[OUTPUT
\newline
  [REPORT TO 
\newline
    {file|PIPE program|PRINTER}]
\newline
  [LEFT MARGIN n]
\newline
  [RIGHT
 MARGIN n]
\newline
  [TOP MARGIN n]
\newline
  [BOTTOM MARGIN n]
\newline
  [PAGE LENGTH n]
\end_layout

\begin_layout LyX-Code
[ORDER [EXTERNAL] BY sortlist]
\newline
FORMAT
\newline
  { EVERY ROW 
\newline
   | {[FIRST] PAGE HEADER
\newline

      |PAGE TRAILER
\newline
      |ON EVERY ROW
\newline
      |ON LAST ROW
\newline
      |{BEFORE|AFTER}
 GROUP OF argvar}
\newline
        statement
\newline
        ...
\newline
        [...]}
\newline
END REPORT
\end_layout

\begin_layout Subsection
Report Statement Syntax
\end_layout

\begin_layout LyX-Code
NEED n LINES
\newline
PAUSE "string"
\newline
PRINT [[exprlist][;]| FILE "filename"]
\newline
SKIP {expr
 LINE[S]| TO TOP OF PAGE}
\end_layout

\begin_layout Subsection
Report Expressions
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
COLUMN expr
\newline
[GROUP]{COUNT(*)|PERCENT(*)
\newline
  |{SUM|AVG|MIN|MAX}(expr)}
\newline
   [WHERE
 expr]}
\newline
DATE
\newline
LINENO
\newline
PAGENO
\newline
TIME
\newline
WORDWRAP
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
PDF Report Syntax
\end_layout

\begin_layout Standard
PDF reports are an Aubit 4GL extension.
 
\end_layout

\begin_layout Itemize
nval means an numeric expr followed by 1 of the following units:
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

POINTS, INCHES, MM, or nothing (which means char spaces).
 Example: 2.54 mm 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

PDFREPORT name(arglist)
\newline
  definestatement ...
\newline
[OUTPUT
\newline
  <pdfreport output section>
\end_layout

\begin_layout LyX-Code
[ORDER [EXTERNAL] BY sortlist]
\newline
FORMAT
\newline
  { EVERY ROW 
\newline
   | {[FIRST] PAGE HEADER
\newline

      |PAGE TRAILER
\newline
      |ON EVERY ROW
\newline
      |ON LAST ROW
\newline
      |{BEFORE|AFTER}
 GROUP OF argvar}
\newline
        statement| pdfstatement
\newline
        ...
\newline
        [...]}
\newline
END PDFREPORT
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
pdfreport output section
\end_layout

\begin_layout Standard
<embed ebnf--pdf_op_output_section.eps>
\end_layout

\begin_layout Subsection
PDF Report Expressions
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

COLUMN nval
\newline
reportexpression
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\newline

\end_layout

\begin_layout Subsection
PDF Statements
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

PRINT IMAGE blobvar AS 
\newline
   "{GIF|PNG|TIFF|JPEG}"
\newline
   [SCALED by x.n, y.n}
\newline
SKIP
 {BY|TO} nval
\end_layout

\begin_layout LyX-Code
SET COLOR TO r,g,b
\end_layout

\begin_layout LyX-Code
SET STROKE COLOR TO r,g,b
\end_layout

\begin_layout LyX-Code
SET FILL COLOR TO r,g,b
\end_layout

\begin_layout LyX-Code
STROKE
\end_layout

\begin_layout LyX-Code
FILL STROKE
\end_layout

\begin_layout LyX-Code
FILL
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
MOVE TO [TOP] y, x
\end_layout

\begin_layout LyX-Code
LINE TO [TOP] y, x
\end_layout

\begin_layout LyX-Code
BOOKMARK <expr> [ RETURING nodeID ]
\end_layout

\begin_layout LyX-Code
BOOKMARK nodeID, <expr> [ RETURING nodeID ]
\end_layout

\begin_layout LyX-Code
SET BARCODE TYPE TO [ 
\begin_inset Quotes eld
\end_inset

25
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

39
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

QR
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
PRINT BARCODE [ WITHOUT TEXT] [ AT y, x] WIDTH <width-expr> HEIGHT <height-expr>
\end_layout

\begin_layout LyX-Code
SET FONT NAME <expr>
\end_layout

\begin_layout LyX-Code
SET FONT SIZE <expr>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CALL PDF_FUNCTION(arglist)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
PDF_FUNCTION arglists
\end_layout

\begin_layout Standard
There are many libpdf functions.
 For a full list look at the PDFlib documentation.
 Here are some useful examples:
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset

"set_font_name", "{Times-Roman|Helvetica| ..}"
\newline
"set_font_size", n
\newline
"set_parameter",
 "{underline|...}", "{true|false|...}"
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: Font names are case sensitive.
\end_layout

\begin_layout Section
Builtin Functions
\end_layout

\begin_layout Standard
Informix 4GL has a set of 40 or more functions built in to the language.
 Aubit4GL implements all of these.
\end_layout

\begin_layout Standard
Aubit4gl also implements a few functions to make the compiler compatible
 with programs written for D4GL.
\end_layout

\begin_layout Standard
Finally Aubit4GL has added some builtins of its own to allow you to exploit
 Aubit4GL's special features such as GUI interfaces, different database
 engines, etc.
\end_layout

\begin_layout Subsection
Standard 4GL Builtin Functions
\end_layout

\begin_layout Standard
The following functions in 4GL work in Aubit4GL:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="50col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="40col%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Comment
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
arg_val(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns a string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
arr_count()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns smallint
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
arr_curr()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns smallint
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
downshift(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns string with chars downshifted to lowercase
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
err_get(n) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns a string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
err_print(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
displays a string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
err_quit(n) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
displays a string then exits
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
errorlog(s) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
logs message s to logfile
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
fgl_drawbox(h, w, y, x [,clr])
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
fgl_getenv(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
fgl_keyval(s) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns integer code
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
fgl_lastkey() 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns integer code
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
length(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns smallint
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
num_args() 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns smallint
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
scr_line()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns smallint
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
set_count(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
showhelp(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
displays help message n
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
sqlexit(n) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns 0, after closing connection to database
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
startlog(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
upshift(s) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns string with chars upshifted to uppercase
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Standard 4GL Operators
\end_layout

\begin_layout Standard
The following functions are described by Informix 4GL as builtin operators.
 They work in Aubit4GL:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="50col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="40col%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Comment
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ascii(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns a char,
\end_layout

\begin_layout Standard
e.g.
 ascii(64) returns 'A'
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
date(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns a date 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns a string 
\newline
e.g.
 Wed Aug 15 2006
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
day(d)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns 1..31
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
extend(d or dt, format)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns a date or datetime
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
field_touched(rec.field) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns TRUE or FALSE
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
get_fldbuf(rec.field) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns string contents of field
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
hex(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns string e.g.
 0x0000001c
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
infield(rec.field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns TRUE or FALSE
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
mdy(m,d,y)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns date from args month, day, year
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
month(d or dt)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns 1:12
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ord(c) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns smallint
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
today
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns date
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
year(date) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns smallint
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
D4GL Builtin Functions
\end_layout

\begin_layout Standard
The following are do-nothing functions which allow 4J's D4GL programs to
 compile:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="50col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="40col%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Comment
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
ddeconnect()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
ddeexecute()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
ddefinish()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
ddefinishall()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
ddegeterror()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
ddepeek()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
ddepoke()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Aubit Builtin Functions
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="30" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="50col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="40col%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return Values
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\color red
_variable(name)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
pointer to object (e.g.
 cursor, form, window, etc)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
abs( n )
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
absolute value of n
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
a4gl_get_info("o","id","p")
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
See below
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
a4gl_get_page()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
a4gl_get_ui_mode()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0|1 (0=TUI, 1=GTK)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
a4gl_run_gui()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
a4gl_set_page()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
a4gl_show_help(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
dbms_dialect()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"INFORMIX"|"POSTGRES"|...
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_buffertouched(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TRUE|FALSE
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_dialog_get_buffer()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_dialog_getfieldname()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_dialog_setbuffer(value)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_dialog_setcurrline(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_dialog_setkeylabel("key","label")
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_getkey_wait(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_setkeylabel("key","label")
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_prtscr()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_scr_size(srec)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_set_arr_line(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_keysetlabel("key","label")
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_set_scrline(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_strtosend(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
fgl_winmessage(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
load_datatype(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
set_window_title(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
sqrt(n)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns square root of n
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
winexec(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
winexecwait(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
a4gl_get_info()
\end_layout

\begin_layout Description
Synopsis: 
\family typewriter
\color red
a4gl_get_info( "object", "id", "property")
\family default
\color none

\newline
where "object" in ("Form"|"Window"|"Connection"|"Statement")
\newline
and "id" is
 the quoted variable name of instance of the object
\newline
and property is an element
 of the set of properties of the object as follows:
\end_layout

\begin_layout Standard
In the properties below, replace the % with a value 1 ..
 maxelement.
\end_layout

\begin_layout Subsubsection
Connection
\end_layout

\begin_layout Description
Synopsis: 
\family typewriter
\color red
a4gl_get_info("Connection", "", "Database")
\end_layout

\begin_layout Standard
Database in the only property available.
 The id argument is ignored.
\end_layout

\begin_layout Subsubsection
Form
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="50col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="40col%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Form Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return Value
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Database
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Delimiters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ScreenRecordCount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ScreenRecordName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
AttributeCount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CurrentField
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Height
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Field%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
long?
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ScreenName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TableName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
AliasName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldType%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldSize
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldBytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldDets
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
long
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Screens
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
long
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Statement
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="50col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="40col%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Atatement Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return Value
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
NoColumns
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
NoRows
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scale%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Nullable%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Length%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Window
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="50col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="40col%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Window Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return Value
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Height
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
BeginX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
BeginY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Border
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Metrics
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int,int,int,int (x, y, h, w)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Form Syntax
\end_layout

\begin_layout LyX-Code
DATABASE
\newline
   {database|FORMONLY}[WITHOUT NUKK INPUT]
\newline
SCREEN
\newline
{
\newline
   text[tag   
 ]
\newline
   ...
\newline
}
\newline
[TABLES name [,...]]
\newline
ATTRIBUTES
\newline
  tag=tagdescr
\newline
  ...
\newline
[INSTRUCTIONS
\newline
   [DELIMITERS
 "fl"
\newline
   [SCREEN RECORD name[[n]]
\end_layout

\begin_layout LyX-Code
     ({tablename.*
\newline
       | tabname.colname THRU tabname.colname
\newline
       | tabname.coln
ame}[,...])]]
\end_layout

\begin_layout Standard
In the SCREEN statement, the {} and [] are literal and do not indicate optional
 syntax.
\end_layout

\begin_layout Subsection
Tag Description
\end_layout

\begin_layout LyX-Code
tag=[table.]column[, attrlist];
\newline
tag=FORMONLY.field 
\newline
   [TYPE [type|LIKE table.col]]
\newline

     [NOT NULL][, attrlist];
\end_layout

\begin_layout Standard
A tag's attrlist is a set of values:
\end_layout

\begin_layout LyX-Code
AUTONEXT, COLOR=color [WHERE boolean],
\end_layout

\begin_layout LyX-Code
COMMENTS="string", DEFAULT="value", 
\end_layout

\begin_layout LyX-Code
DISPLAY LIKE "table.col", DOWNSHIFT,
\end_layout

\begin_layout LyX-Code
FORMAT="string", INCLUDE=( list ), 
\end_layout

\begin_layout LyX-Code
NOENTRY, PICTURE="string", PROGRAM="name", 
\end_layout

\begin_layout LyX-Code
REQUIRED, REVERSE, UPSHIFT, VERIFY, 
\end_layout

\begin_layout LyX-Code
VALIDATE LIKE table.col, WORDWRAP [COMPRESS]
\end_layout

\begin_layout Subsection
Aubit 4GL GUI Attributes
\end_layout

\begin_layout Standard
The following Widgets can be used in an Aubit4GL GUI form (runnable only
 under GUI or HL_GTK)
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
tag=FORMONLY.field, 
\newline
   WIDGET={BUTTON|CHECK|COMBO|ENTRY
\newline
            |DEFAULTS|LABE
L|PIXMAP|RADIO
\newline
            |TEXT} [CONFIG="guiattr='value' [;...]"]
\end_layout

\begin_layout Standard
Each widget may or must be given a set of GUI attributes:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="15col%">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="75col%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
BUTTON
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
[CONFIG="LABEL='label'"| "IMAGE='file.xpm'"]
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CHECK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
[CONFIG="LABEL='label'" ; "VALUE='value'"]
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
COMBO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
{CONFIG="LIST=item1,item2[,...]}
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ENTRY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
[CONFIG="MAXCHARS=n"]
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEFAULT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
[CONFIG="MAXCHARS=n"]
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
LABEL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
{CONFIG="CAPTION='string'"}
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PIXMAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
{CONFIG="IMAGE='file.xpm'"}
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RADIO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
{CONFIG="NUM=n; L1="label1";V1="value2" ; 
\newline
L2="label2"; V2=value2;
\newline
...
\newline
Ln="labeln";
 Vn=valuen}
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TEXT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
[CONFIG="MAXCHARS=n"]
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
[CONFIG="WIDTH=xchars;HEIGHT=ylines"]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{a4gl}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Aubit4GL Builtins
\end_layout

\begin_layout Subsection
a4gl_get_info()
\end_layout

\begin_layout Standard
This function is an Aubit4GL extension.
 It is used to obtain properties from opened forms, windows, cursors (not
 implemented yet), or from prepared statements, or from the current connection.
\end_layout

\begin_layout Subsubsection
Synopsis
\end_layout

\begin_layout LyX-Code
let h = a4gl_get_info("Window","mywin","Height")
\end_layout

\begin_layout LyX-Code
let dbname = a4gl_get_info("Form","myform","Database")
\end_layout

\begin_layout LyX-Code
let ncols = a4gl_get_info("Statement", "pquery", "NoColumns")
\end_layout

\begin_layout Subsubsection
Input Parameters
\end_layout

\begin_layout Standard
The function always takes 3 parameters:
\end_layout

\begin_layout Enumerate
Object type: a char value: 1 of 
\end_layout

\begin_deeper
\begin_layout Enumerate
"Form"
\end_layout

\begin_layout Enumerate
"Window"
\end_layout

\begin_layout Enumerate
"Connection"
\end_layout

\begin_layout Enumerate
"Statement"
\end_layout

\begin_layout Enumerate
"Cursor" (Not yet implemented)
\end_layout

\end_deeper
\begin_layout Enumerate
Object pointer: the quoted variable id of the object (window, form, or whatever).
 In the case of parameter 1 being "Connection", this parameter is needed
 but ignored.
\end_layout

\begin_layout Enumerate
Property Name: e.g.
 "Database" or "Height".
 The list of acceptable properties depends on the object type of parameter
 1.
\end_layout

\begin_layout Subsubsection
Return value(s)
\end_layout

\begin_layout Standard
The return value is usually a single value (char, integer, or long) but
 4 integers are returned if you invoke the call:
\end_layout

\begin_layout LyX-Code
call a4gl_get_info("Window", "mywin", "Metrics")
\newline
    returning x, y, h, w
\end_layout

\begin_layout Standard
An example calling sequence:
\end_layout

\begin_layout LyX-Code
define l_retval char(64)
\newline
open window mywin at 2,3 with form "myform"
\end_layout

\begin_layout LyX-Code
let l_retval = a4gl_get_info("Window","mywin","Height")
\end_layout

\begin_layout Standard
In the above example, we are asking Aubit4GL to tell us the value of the
 Height property of the window mywin.
 
\end_layout

\begin_layout Standard
It is OK to assign the return value to a char variable (as in our example)
 because then 4GL will humour you by coercing numeric return values to type
 char.
\end_layout

\begin_layout Subsubsection
Properties
\end_layout

\begin_layout Standard
Replace a trailing % with an index in the range 1 ..
 n where n is the number of columns or records or fields or whichever is
 appropriate.
\end_layout

\begin_layout Subsubsection
Form Properties
\end_layout

\begin_layout Standard
Use 1 of the Form Properties below when calling:
\end_layout

\begin_layout LyX-Code
open myform from "myform"
\end_layout

\begin_layout LyX-Code
call a4gl_get_info("Form", "myform", ? ) returning ...
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
? will be one of:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Form Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Comment
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Database
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
may be "formonly"
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Delimiters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
usually "[]"
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ScreenRecordCount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ScreenRecordName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
% is 1 of 1 ..
 ScreenRecordCount
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldCount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
% is 1 of 1 ..
 FieldCount
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
AttributeCount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CurrentField
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Height
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Field%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
long?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ScreenName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TableName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
AliasName%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldType%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldSize%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldBytes%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FieldDets%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Screens
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Statement Properties
\end_layout

\begin_layout Standard
Use 1 of the following Statement Properties when calling:
\end_layout

\begin_layout LyX-Code
let l_query = "select * from customer"
\end_layout

\begin_layout LyX-Code
prepare pquery from l_query
\end_layout

\begin_layout LyX-Code
call a4gl_get_inf("Statement", "pquery", ? ) returning ...
\end_layout

\begin_layout Standard
? will be 1 of:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Statement Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Comment
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
NoColumns
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
NoRows
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Type%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scale%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Nullable%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0 = false, 1 = true
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Length%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Window Properties
\end_layout

\begin_layout Standard
Use 1 of the following Windo Properties when calling
\end_layout

\begin_layout LyX-Code
open window mywin at 2,3 with form "myform"
\end_layout

\begin_layout LyX-Code
call a4gl_get_info("Window", "mywin", ? ) returning ...
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return Type(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Comment
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Height
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
BeginX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
BeginY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Border
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0=no, 1=yes
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Metrics
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int,int,int,int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
h,w,x,y
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Connection Properties
\end_layout

\begin_layout Standard
The only property you can ask for is "Database
\begin_inset Quotes erd
\end_inset

.
 Parameter 2 is needed but ignored when you make the call:
\end_layout

\begin_layout LyX-Code
let l_dbname = a4gl_get_info("Connection","","Database")
\end_layout

\begin_layout Standard
Aubit4GL will return the Database name of the current connection (if you
 have executed a 4GL database statement or a connect statement).
\end_layout

\begin_layout Standard
Note: There is a bug in versions of Aubit4GL versions up to 0.50.16 which
 prevents the above call from working.
 This is fixed in later versions.
\end_layout

\begin_layout Subsubsection
Cursor Properties
\end_layout

\begin_layout Standard
The implementation of the "Cursor" set of calls to a4gl_get_info() is not
 yet done.
\end_layout

\begin_layout Subsection
Comments
\end_layout

\begin_layout Itemize
The Type and Property parameters are case insensitive.
 e.g.
 "form" works as well as "Form", "database" is equivalent to "Database"
 etc.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
The following snipped is a working example of how the Properties with the
 trailing %s work.
 It depends on your having the traditional Informix stores database accessible:
\end_layout

\begin_layout LyX-Code
database stores
\end_layout

\begin_layout LyX-Code
main
\end_layout

\begin_layout LyX-Code
        define l_sql char(64)
\end_layout

\begin_layout LyX-Code
        define i, n int
\end_layout

\begin_layout LyX-Code
        define l_namecol char(6)
\end_layout

\begin_layout LyX-Code
        define la_name array[30] of char(64)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
        let l_sql = "select * from customer"
\end_layout

\begin_layout LyX-Code
        prepare p_sql from l_sql
\end_layout

\begin_layout LyX-Code
        let n = a4gl_get_info("Statement","p_sql","NoColumns")
\end_layout

\begin_layout LyX-Code
        for i = 1 to n
\end_layout

\begin_layout LyX-Code
                let l_namecol = "Name", i using "<<"
\end_layout

\begin_layout LyX-Code
                let l_namecol = l_namecol clipped
\end_layout

\begin_layout LyX-Code
                let la_name[i] = a4gl_get_info("Statement", "p_sql", l_namecol
 )
\end_layout

\begin_layout LyX-Code
                display i, ":", la_name[i]
\end_layout

\begin_layout LyX-Code
        end for
\end_layout

\begin_layout LyX-Code
end main
\end_layout

\begin_layout Standard
When you compile and run this, the output should be:
\end_layout

\begin_layout LyX-Code
 1:customer_num
\newline
 2:fname
\newline
 3:lname
\newline
 4:company
\newline
 5:address1
\newline
 6:address2
\newline
 7:city
\newline
 8:state
\newline

 9:zipcode
\newline
10:phone
\end_layout

\begin_layout Standard
Note that we supplied the "Name%" as parameter 3 by constructing the values:
 "Name1", "Name2", ..., "Name10" within the FOR loop.
 
\end_layout

\begin_layout Standard
You can see that code like the above could be used in a Dynamic SQL application
 to discover the columns and their properties returned by an SQL query entered
 by the user at runtime.
 You can use these properties to label and format appropriately the rows
 returned by the cursor statement.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Chapter
Help system
\end_layout

\begin_layout Section
Help message source file
\end_layout

\begin_layout Standard
Create your help files with a .msg extension using a text editor (e.g.
 vi)
\end_layout

\begin_layout Standard
A sample file:
\end_layout

\begin_layout LyX-Code
.1
\newline
This is help message 1
\newline
.2
\newline
This is help message 2
\end_layout

\begin_layout Section
Compiling help files
\end_layout

\begin_layout Standard
The syntax for compiling a help file (say myhelp.msg) into a binary help
 file (say myhelp.iem) is:
\newline

\family typewriter
amkmessage myhelp.msg myhelp.iem
\family default

\newline
or
\newline

\family typewriter
amkmessage myhelp.msg > myhelp.iem
\family default

\newline

\end_layout

\begin_layout Standard
Note that the syntax here is inconsistent with 
\family typewriter
fcompile
\family default
 and 
\family typewriter
mcompile
\family default
 in that you must supply the name (including suffix) of the target binary
 file.
 This is consistent with Informix's 
\family typewriter
mkmessage
\family default
 program which has the same syntax.
\end_layout

\begin_layout Section
help in programs
\end_layout

\begin_layout Subsection
Within 4GL 
\end_layout

\begin_layout Standard

\family typewriter
CALL showhelp(3)
\end_layout

\begin_layout Standard
will display message number 3 from the current helpfile on the screen help
 line.
\end_layout

\begin_layout Subsection
At runtime
\end_layout

\begin_layout Standard
The user presses the help key (default = CTRL-W) in any implemented command
 (Currently only menus have help support)
\end_layout

\begin_layout Section
Decompiling
\end_layout

\begin_layout Standard
The command unmkmessage can be used to decompile an Informix compiled help
 file (usually with a .iem suffix) as follows:
\end_layout

\begin_layout Standard

\family typewriter
unmkmessage myhelp.iem myhelp.msg
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard

\family typewriter
unmkmessage myhelp.iem > myhelp.msg
\end_layout

\begin_layout Standard
If you omit the 2nd filename, the unmkmessage program will output to the
 standard output stream (by default , your screen).
\end_layout

\begin_layout Standard
The unmkmessage program is useful when you lose or corrupt the source helpfile
 but still have the original binary.
\end_layout

\begin_layout Section
Compatibility
\end_layout

\begin_layout Standard
The helpfile compiled by 
\family typewriter
amkmessage
\family default
 is the same format as the IBM-Informix 
\family typewriter
mkmessage
\family default
 program and the helpfiles will be compatible both source and binary.
 
\end_layout

\begin_layout Section
mkmess
\end_layout

\begin_layout Standard
Note that amkmessage replaces the mkmess program used by earlier versions
 of Aubit 4GL.
 The 2 programs are incompatible.
 The older mkmess created binaries of a different format from the standard
 Informix .iem files.
\end_layout

\begin_layout Chapter
SQL Conversion
\end_layout

\begin_layout Standard
Aubit4GL allows you to connect to DBMSes (database management systems) from
 various vendors, as long the connection is via the SQL command language.
 Unfortunately, the syntax of the SQL language can differ considerably from
 one vendor to another, and often valid syntax for one DBMS fails when executed
 against some other DBMS.
 One way around this is to maintain different versions of your application,
 eg.
 one for use with Informix, another for running against Oracle, another
 for PostgreSQL, and so on.
 Another way is to replace each SQL command in your source code with a number
 of alternatives in a case statement, depending on the target database type.
 Either way, your code will be difficult to maintain and harder to read.
\end_layout

\begin_layout Standard
Aubit4GL resolves this by providing a module that lets you write code using
 just one version or "dialect" of SQL, and have this converted into the
 correct form for whatever database you connect to at run-time.
\end_layout

\begin_layout Standard
In order to do this, Aubit4GL needs to know the following: 
\end_layout

\begin_layout Itemize
the source SQL dialect that your source code is written in
\end_layout

\begin_layout Itemize
the target SQL dialect expected by the currently connected DBMS
\end_layout

\begin_layout Itemize
rules on how to convert SQL commands between source and target forms.
\end_layout

\begin_layout Section
Source SQL dialect 
\end_layout

\begin_layout Standard
By default, the compiler assumes SQL is written using standard Informix
 syntax.
\end_layout

\begin_layout Standard
This can be changed by setting the environment variable 
\family typewriter
A4GL_SQLDIALECT
\family default
, or by setting the value of 
\family typewriter
SQLDIALECT
\family default
 in the /etc/opt/aubit4gl/aubitrc file.
\end_layout

\begin_layout Standard
You can also change it at run-time using the SET SQL DIALECT command eg.
\newline

\family typewriter
SET SQL DIALECT TO ORACLE
\end_layout

\begin_layout Standard
This will cause all subsequent statements to be treated as if they were
 written using Oracle syntax.
\end_layout

\begin_layout Standard
Note - the 4GL compiler is not guaranteed to handle commands using non-Informix
 syntax.
 If the compiler cannot understand a particular command, simply place it
 in a char variable (string), 
\family typewriter
PREPARE
\family default
 it, and 
\family typewriter
EXECUTE
\family default
 it.
\end_layout

\begin_layout Section
Target SQL dialect
\end_layout

\begin_layout Standard
The database connection driver will inform Aubit4GL at run-time which dialect
 of SQL it speaks, so you do not have to configure this explicitly.
\end_layout

\begin_layout Section
Configuration files 
\end_layout

\begin_layout Standard
The syntax of an SQL command is converted from its source dialect to the
 DBMS' native dialect, by applying a number of transformations one after
 another on the SQL text.
\end_layout

\begin_layout Standard
For example, consider the steps taken to get the following Informix SQL
 statement to run correctly with PostgreSQL:
\end_layout

\begin_layout LyX-Code
select last_name, first_name[1], (today-birthday)/365 age
\newline
from client
\newline
where
 last_name matches "M*"
\end_layout

\begin_layout Enumerate
replace double quotes with single quotes
\end_layout

\begin_layout Enumerate
replace 
\family typewriter
matches
\family default
 with the regular expression operator 
\family typewriter
~
\end_layout

\begin_layout Enumerate
use the function 
\family typewriter
substr()
\family default
 instead of subscripting with []
\end_layout

\begin_layout Enumerate
replace the word today with 
\family typewriter
date(now())
\end_layout

\begin_layout Enumerate
insert the word "AS" before the column alias age
\end_layout

\begin_layout Standard
The result is:
\end_layout

\begin_layout LyX-Code
select last_name, substr(first_name,1,1), (date(now())-birthday)/365 AS
 age
\newline
from client
\newline
where last_name ~ '^M.*'
\end_layout

\begin_layout Standard
Special configuration files are used to indicate what conversions are needed.
\end_layout

\begin_layout Standard
They are located in the directory /opt/aubit4gl/etc/convertsql (this can
 be changed by setting the environment variable 
\family typewriter
A4GL_SQLCNVPATH
\family default
 to an alternative location).
\end_layout

\begin_layout Standard
There is one file for each combination of source and target dialect, each
 file being named as source-target.cnv.
 For example, the rules for translating from Informix to PostgreSQL are
 in a file called INFORMIX-POSTGRESQL.cnv, in which the conversion rules
 for the above example are given as:
\end_layout

\begin_layout LyX-Code
DOUBLE_TO_SINGLE_QUOTES
\newline
MATCHES_TO_REGEX
\newline
SUBSTRING_FUNCTION = substr
\newline
REPLACE
 today = date(now())
\newline
COLUMN_ALIAS_AS
\end_layout

\begin_layout Section
Converting SQL scripts 
\end_layout

\begin_layout Standard
Many 4GL programmers keep script files of SQL commands to be run through
 SQL command interpreters like isql, psql, etc., rather than via a 4GL program.
\end_layout

\begin_layout Standard
A command line utility, 
\family typewriter
convertsql
\family default
 is available to convert these as well.
\end_layout

\begin_layout Standard
You may have to compile this program from source.
 Go to 
\family typewriter
/opt/aubit4g/tools/convertsql
\family default
, and follow the instructions in 
\family typewriter
README.txt
\family default
.
\end_layout

\begin_layout Standard
For example, to convert a file full of Informix SQL commands into SapDB
 compatible commands, you might execute:
\end_layout

\begin_layout Standard

\family typewriter
convertsql INFORMIX SAPDB < mystuff.sql > mystuff2.sql
\end_layout

\begin_layout Section
Conversion file syntax
\end_layout

\begin_layout Standard
The file contains a series of conversion directives, one to a line, with
 the following formats:
\end_layout

\begin_layout Subsection
Simple directives
\end_layout

\begin_layout Standard
Simple directives take no arguments:
\end_layout

\begin_layout Itemize
DOUBLE_TO_SINGLE_QUOTES Change double quotes (") to single quotes (') around
 literal strings.
\end_layout

\begin_layout Itemize
MATCHES_TO_LIKE Change Informix_style 'matches' clause to one using 'like',
 and change * and ? to % and _ respectively.
 eg: matches 'X?Z*' -> like 'X_Z%'
\end_layout

\begin_layout Itemize
MATCHES_TO_REGEX Similar to 'matches-to-like' but uses the Postgres style
 regular expression syntax, eg: matches 'X?Z*' -> ~ '^X.Z.*'
\end_layout

\begin_layout Itemize
TABLE_ALIAS_AS Insert the word "as" before table alias names in a 'from'
 clause eg: from ..., table1 t1, ...
 -> from ..., table1 as t1, ...
\end_layout

\begin_layout Itemize
COLUMN_ALIAS_AS Insert the word "as" before column/expression alias names
 in a 'select' clause eg: select ..., sum(amount) amt, ...-> select ..., sum(amount)
 as amt, ...
\end_layout

\begin_layout Itemize
ANSI_UPDATE_SYNTAX Convert Informix-style "update ...
 set (..,..) = (..,..) " to the ANSI standard format "update ...
 set ...=..., ...=...
 " eg.
 update mytable set (col1,col2,col3) = ("01", "X", 104) where ...->update mytable
 set col1="01", col2="X", col3=104 where ...
\end_layout

\begin_layout Itemize
CONSTRAINT_NAME_AFTER Move the constraint name in a constraint command to
 after the constraint definition, eg: ...
 constraint c_name unique ->...
 unique constraint c_name
\end_layout

\begin_layout Itemize
CONSTRAINT_NAME_BEFORE Move the constraint name in a constraint command
 to before the constraint definition, eg: ...
 unique constraint c_name -> ...
 constraint c_name unique
\end_layout

\begin_layout Subsection
Complex Directives 
\end_layout

\begin_layout Standard
The following directive takes an argument ( in the rules below, replace
 the word "string" with the appropriate values ):
\end_layout

\begin_layout Itemize
SUBSTRING_FUNCTION = string Change Informix-style string subscripting to
 a function call, Replace 'string' with the name of the sql function.
 eg.
 where ...
 foo[3,5] = ....
 -> where ...
 substr(foo,3,3)
\end_layout

\begin_layout Subsection
REPLACE directives
\end_layout

\begin_layout Standard
Search and replace is not case-sensitive.
 For legibility, lower case is used in the rules for search/replace strings
 to distinguish them from the keywords (in upper case).
\end_layout

\begin_layout Standard
You may leave the replacement string (after the = sign) blank.
 This will have the effect of removing the matched string from the converted
 output.
\end_layout

\begin_layout Itemize
REPLACE before = after Replace any occurrence of the string 'before' with
 'after', eg.
 
\newline
REPLACE rowid = oid
\newline
REPLACE current year to second = sysdate
\newline
REPLACE today
 = date(now())
\end_layout

\begin_layout Itemize
REPLACE_EXPR before = after Replace only if the 'before' text is found in
 an expression or where an expression is allowed, such as in a where clause
 or a select clause.
 eg.
\newline
REPLACE_EXPR sysdate = current year to second
\newline
REPLACE_EXPR today = date(now())
\end_layout

\begin_layout Itemize
REPLACE COMMAND before = after Replace, but only if the whole SQL statement
 matches the 'before' string eg.
\newline
REPLACE_COMMAND set isolation to dirty read
 =
\end_layout

\begin_layout Standard
The example above has the effect of completely erasing the command.
\end_layout

\begin_layout Standard
Full list of available settings :
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ADD_CASCADE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ADD_SESSION_TO_TEMP_TABLE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ANSI_UPDATE_SYNTAX 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
CHAR_TO_DATETIME 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
CHAR_TO_INTERVAL 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
COLUMN_ALIAS_AS 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
CONSTRAINT_NAME_AFTER 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
CONSTRAINT_NAME_BEFORE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DATETIME_EXTEND_FUNCTION 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DOUBLE_TO_SINGLE_QUOTES 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DTYPE_ALIAS 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ESQL_AFTER_DELETE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ESQL_AFTER_INSERT 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ESQL_AFTER_UPDATE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ESQL_UNLOAD 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
ESQL_UNLOAD_FULL_PATH 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
FAKE_IMMEDIATE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
FULL_INSERT 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
IGNORE_CLOSE_ERROR 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
IGNORE_DTYPE_VARCHAR_MIN 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
IGNORE_OWNER 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
INSERT_ALIAS 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
INTERVAL_EXTEND_FUNCTION 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
LIMIT_LINE MATCHES_TO_GLOB 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
MATCHES_TO_LIKE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
MATCHES_TO_REGEX 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
MONEY_AS_DECIMAL 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
MONEY_AS_MONEY 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NO_DECLARE_INTO 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NO_FETCH_WITHOUT_INTO 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NO_ORDBY_INTO_TEMP 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NO_OWNER_QUOTE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NO_PUT 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NO_SELECT_WITHOUT_INTO 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NO_SERIAL_START_VALUE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
OMIT_INDEX_CLUSTER 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
OMIT_INDEX_ORDER 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
OMIT_NO_LOG 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
QUOTE_OWNER 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
RENAME_COLUMN_AS_ALTER_TABLE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
RENAME_TABLE_AS_ALTER_TABLE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
REPLACE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
REPLACE_COMMAND 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
REPLACE_EXPR 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
REPLACE_SQLCONST 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
REPLACE_SQLFUNC 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SELECT_INTO_TEMP_AS_CREATE_TEMP_AS 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SELECT_INTO_TEMP_AS_DECLARE_GLOBAL 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SIMPLE_GRANT_SELECT 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SIMPLE_GRANT_UPDATE 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SQL_CURRENT_FUNCTION 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
STRIP_ORDER_BY_INTO_TEMP 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SUBSTRING_FUNCTION 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SWAP_SQLCA62 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
TABLE_ALIAS_AS 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
TEMP_AS_DECLARE_GLOBAL TEMP_AS_TEMPORARY 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
USE_BINDING_FOR_PUT 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
USE_DATABASE_STMT 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
USE_INDICATOR 
\end_layout

\begin_layout Chapter
Make
\end_layout

\begin_layout Standard

\family typewriter
make
\family default
 is a command generator.
 It is used to automate the task of recompiling and relinking programs when
 you have altered a source file.
 Typically you create a file called Makefile or makefile (Makefile is preferred
 as it sorts higher in an ls listing of directory files) which contains
 information about which files depend on which others and lists the commands
 needed to create the object modules (.o files) and executable binaries.
\end_layout

\begin_layout Standard
Once you have your Makefile correctly written, whenever you want to recompile
 a program after changing a file, simply type:
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
and the minimum necessary compilation and linking will be done for you to
 produce the altered executable.
\end_layout

\begin_layout Subsection
GNU make
\end_layout

\begin_layout Standard
This chapter gives some advice and examples for writing Makefiles for use
 with Aubit4GL.
 For documentation, ignore the O'Reilly book (which does not cover GNU make)
 but go to the 
\family typewriter
www.gnu.org
\family default
 website and read the online documentation there.
\end_layout

\begin_layout Section
Makefiles
\end_layout

\begin_layout Standard
The following advice assumes that you are using GNU make (which has several
 constructs not available in other older versions of make).
 
\end_layout

\begin_layout Subsubsection
Include File
\end_layout

\begin_layout Standard
Here is a sample set of definitions for an Aubit4GL Makefile:
\end_layout

\begin_layout LyX-Code
# ---- Declare the following suffixes meaningful to make
\end_layout

\begin_layout LyX-Code
.SUFFIXES: .afr .per
\end_layout

\begin_layout LyX-Code
.SUFFIXES: .ao .4gl
\end_layout

\begin_layout LyX-Code
.SUFFIXES: .iem .msg
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# ---- Pattern rules for the above suffixes
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
%.afr : %.per   # equivalent to the old make form .per.afr:
\end_layout

\begin_layout LyX-Code
(TAB)  aubit fcompile $< 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
%.ao : %.4gl
\end_layout

\begin_layout LyX-Code
(TAB)  aubit 4glc -c $?
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
%.iem : %.msg
\end_layout

\begin_layout LyX-Code
(TAB)  aubit amkmessage $< $@
\end_layout

\begin_layout Standard
These definitions should be put into a separate file (say 
\family typewriter
makedefs
\family default
) in the parent directory.
 You can then include the makedefs file in the Makefile itself with the
 statement:
\end_layout

\begin_layout LyX-Code
include ../makedefs
\end_layout

\begin_layout Standard
The benefit of using include files in this way is that you avoid repetition
 of the included elements, and maintenance is reduced to a single file.
\end_layout

\begin_layout Subsubsection
Make glossary:
\end_layout

\begin_layout Description
$? = all the newer prerequisites (which need recompiling)
\end_layout

\begin_layout Description
$@ = the current target (left of the : in the prereq line)
\end_layout

\begin_layout Description
$< = the first of the newer prerequisitess.
 This is suitable when the command can only compile 1 file at a time (like
 aubit fcompile).
\end_layout

\begin_layout Description
$^ = all the prereqs (not just the newer ones).
 Use this when you need to relink all the object modules.
\end_layout

\begin_layout Description
$* = the stem (matching % in prereq line).
\end_layout

\begin_layout Description
%  = wildcard matches any sequence of zero+ chars.
 Note: the 2nd and subsequent % is the same sequence  that the 1st % matched.
\end_layout

\begin_layout Standard
$?, $(?), and ${?} are all the same variable.
  If a variable has more than a 1 char identifier you must enclose the identifie
r in () or {}s
\end_layout

\begin_layout Standard
A modifier D, or F, can be used with $?, $@, $<, or $^ to return just the
 D(irectory part) or the F(ile part) of the filename.
 
\end_layout

\begin_layout Standard
e.g.
 if $? = 
\family typewriter
../lib/options.4gl
\family default
 then
\end_layout

\begin_layout Standard

\family typewriter
$(?D)
\family default
 = 
\family typewriter
../lib
\family default
 and 
\family typewriter
$(?F)
\family default
= 
\family typewriter
options.4gl
\end_layout

\begin_layout Standard
Note that these D and F modifiers are defined in make's built-in rules as:
 
\end_layout

\begin_layout LyX-Code
?D=$(patsubst %/,%,$(dir $?))
\end_layout

\begin_layout LyX-Code
?F=$(not-dir $?)
\end_layout

\begin_layout LyX-Code
etc
\end_layout

\begin_layout Standard
The $(dir arg) and $(not-dir arg) macros are available for use with any
 variables whether user defined or builtin.
 Note that the $(?D) definition removes the trailing slash from the directory
 path (substituting %/ with %)
\end_layout

\begin_layout Subsubsection
Makefile Example
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
GPATH = ../lib ../per
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
.PHONY: all
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
all: prog prog.iem prog.afr proga.afr prog.iem
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
srcfiles = prog0.4gl prog1.4gl prog2.4gl ../lib/options.4gl
\end_layout

\begin_layout LyX-Code
objfiles = $(srcfiles:.4gl=.ao)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
prog : $(objfiles)
\end_layout

\begin_layout LyX-Code
(TAB) aubit 4glc -o $@ $^
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# Note the subtle difference here $^ (all prereqs are needed)
\end_layout

\begin_layout LyX-Code
#  $? would link only the newly compiled objects
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
The example file above is for a program consisting of 4 modules: 
\end_layout

\begin_layout Itemize
prog0.4gl (containing the global ...
 end global statements)
\end_layout

\begin_layout Itemize
prog1.4gl (containing the main ...
 end main function and some general purpose functions)
\end_layout

\begin_layout Itemize
prog2.4gl (containing table specificated generated functions for Query, Add,
 Update, Delete, etc
\end_layout

\begin_layout Itemize
options.4gl for directing report output.
\end_layout

\begin_layout Standard
This structure was common with Fourgen generated programs.
\end_layout

\begin_layout Subsection
Pattern Rules
\end_layout

\begin_layout Standard
Rules in Makefiles take the form:
\end_layout

\begin_layout LyX-Code
target : prereq1 [[prereq2 ] ...
 ]
\end_layout

\begin_layout LyX-Code
(TAB) command1
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout Standard
Note that the invisible tab is a crucial part of the syntax of Make.
 These sometimes get corrupted into spaces in ftp transfers - so be careful!.
 A make rule specifies that the target files depend on the listed prerequisite
 files and supplies the command that make should execute whenever a prerequisite
 file is newer (that is modified more recently than) the target file(s).
\end_layout

\begin_layout Subsection
Make variables
\end_layout

\begin_layout Standard
In Makefiles like the above, we use variables 
\family typewriter
srcfiles
\family default
 and 
\family typewriter
objfiles
\family default
 to minimise the work of changing definitions.
 Note that the assignment to objfiles is done using a substitution expression
 (.ao replaces .4gl from the srcfiles list).
 If we add another library module to the srcfiles list (say 
\family typewriter
../lib/names.4gl
\family default
), no other change need be made to the Makefile.
 
\end_layout

\begin_layout Standard
Traditionally we have used uppercase for variable names in Makefiles.
 The GNU people now recommend that you use lowercase for better readablity.
\end_layout

\begin_layout Subsection
GPATH and VPATH
\end_layout

\begin_layout Standard
Normally make will search only the current directory.
 If you want to force it to look elsewhere then you can set GPATH or VPATH
 to a list of search directories.
\end_layout

\begin_layout Standard
Directories listed in GPATH will we searched and the targets compiled into
 the remote directory.
\end_layout

\begin_layout Standard
Directories listed in VPATH will be searched but the targets compiled into
 the current directory.
\end_layout

\begin_layout Standard
In the example Makefile, options.ao will be compiled into ../lib/options.ao
\end_layout

\begin_layout Subsection
.PHONY
\end_layout

\begin_layout Standard
Nearly all Makefiles have phoney targets: all, clean, install, and maybe
 others.
 GNU make allows you to declare these phoney targets (i.e.
 targets which are not real files to be built by commands).
 The benefit of doing this is the .PHONY declaration tells make to ignore
 any files called clean, install.
 etc.
 Omitting the .PHONY declaration might result in an accidentally created
 file called install, preventing make from executing the install commands.
\end_layout

\begin_layout Subsection
Implicit rules
\end_layout

\begin_layout Standard
Note in the example that there is no specific rule for the help file and
 forms.
 These will be built by make using the make definitions we put into the
 include file.
 The targets: prog.iem, prog.afr, and proga.afr will be compiled using the
 %.iem : %.hlp and %.afr : %.per pattern rules in ../makedef.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout Description
comments the hash symbol # comments out the rest of the line (i.e 
\family typewriter
make
\family default
 ignores what follows the #).
\end_layout

\begin_layout Description
quotes both single quotes ' and double quotes " are treated literally.
 Do not use them in Makefiles.
 In shell programs you use quotes to inhibit interpretation and the shell
 strips them from its input.
 
\family typewriter
make
\family default
 does not do anything special to quotes.
 
\end_layout

\begin_layout Description
longlines break a long line by putting a backslash 
\backslash
 before the end of line.
 This will tell make to remove the backslash and the end of line, and interpret
 the result as a single line.
\end_layout

\begin_layout Subsection
Debugging make
\end_layout

\begin_layout Standard
A botched Makefile can destroy your sourcefiles.
 
\end_layout

\begin_layout Standard
To help debug your Makefiles, use the -n and -p options.
\end_layout

\begin_layout Description
-p will display all the rules (including the builtins) that make is using
\end_layout

\begin_layout Description
-n will cause make not to actually execute the command but display them
 to the screen
\end_layout

\begin_layout Standard
Type the command:
\end_layout

\begin_layout LyX-Code
make -np prog
\end_layout

\begin_layout Standard
will cause make to display all its definitions and rules, and to display
 all the commands it would run if you had typed the command: 
\family typewriter
make progAmake
\end_layout

\begin_layout Standard
amake is an x4GL specific set of rules and tools for GNU "make" 
\end_layout

\begin_layout Chapter
amake
\end_layout

\begin_layout Subsection
Introduction 
\end_layout

\begin_layout Standard
With Aubit 4gl compiler, compiling small program can be trivial:
\end_layout

\begin_layout LyX-Code
aubit 4glpc *.4gl -o myprog
\newline
aubit 4glpc *.per
\newline
aubit amkmessage myhelp.msg myhelp.iem
\end_layout

\begin_layout Standard
Even with extra C code, it's still simple:
\end_layout

\begin_layout LyX-Code
aubit 4glpc *.4gl myccode.c -o myprog -DAUBIT4GL
\end_layout

\begin_layout Standard
But, when you want to keep your make files compatible with Informix and
 4Js compilers, have multiple program definitions in one directory, use
 pre-linked libraries, and be capable of compiling to P-code and C-code
 for each compiler, take care of installing and cleaning, it's not that
 simple any more.
\end_layout

\begin_layout Subsection
Summary 
\end_layout

\begin_layout Standard
When you need to create new make file to compile x4gl programs, you should
 use rules, headers and footer prototypes supplied with Aubit 4GL.
 Utility for running created make files, while not necessary, is also supplied,
 and can make your life a little easier.
\end_layout

\begin_layout Standard
For existing Informix 4gl and 4Js BDL/D4GL makefiles, I created a conversion
 system that will first create completely new set of make files from existing
 makefile (one per program) and then let you use it, in more or less same
 way we did so far, but erase most if not all of existing shortcomings.
 Old makefiles are preserved, so you can mix and match, if you really want
 to, but you won't need to.
\end_layout

\begin_layout Subsection
Converting old makefiles
\end_layout

\begin_layout Subsubsection
prepmake
\end_layout

\begin_layout Standard
run "prepmake" in the directory containing old make file, "makefile".
 
\end_layout

\begin_layout Standard
This will create file "makefile.prep" containing instruction needed for dumping
 program definitions to individual make files (*.mk).
 Note: this functionality depends on the fact that your existing makefiles
 use command "fgllink" or other 4gl compiler commands somewhere in each
 defined program target, and list all source files in dependencies.
 If for any reason this is not true for some makefile you want to process,
 look at the script, it should be easy to substitute this with some other
 present command.
\end_layout

\begin_layout Standard
Next, "prepmake" will first run "touch *.4gl" (to force all targets into
 thinking they need building) and then "make -f makefile.prep".
 This will create one make file for each program defined in makefile.prep,
 named as <program>.mk, using script "genmake".
 Each .mk files will contain definitions of include headers and footers,
 and names of source files needed to build that program, and nothing else.
 Like this:
\end_layout

\begin_layout Subsubsection
example
\end_layout

\begin_layout LyX-Code
include header.mki
\newline
PROG = P4E
\newline
GLOBALS.4gl = P4E.4gl
\newline
FILES.4gl = 
\backslash

\newline
${GLOBALS.4gl} 
\backslash

\newline
bankwind.4gl 
\backslash

\newline
ckapwind.4gl 
\backslash

\newline
ckhdwind.4gl 
\backslash

\newline
secufunc.4gl 
\backslash

\newline
vendwind.4gl
\newline
FILES.per = ${ALLFORMS.per}
\newline
include_footer.mki
\end_layout

\begin_layout Subsubsection
amakeallo
\end_layout

\begin_layout Standard

\family typewriter
amakeallo
\family default
 can be ued to rebuild all the .o object files in a Makefile.
\end_layout

\begin_layout Subsubsection
amakeallf
\end_layout

\begin_layout Standard

\family typewriter
amakeallf
\family default
 can be used to recompile all the .per form files in a Makefile.
\end_layout

\begin_layout Standard
Note: amake knows how to override 
\family typewriter
header.mki
\family default
, 
\family typewriter
footer.mki
\family default
, or both.
 You can also
\end_layout

\begin_layout Standard
override anything coming from header, and later, in footer, anything at
 all.
\end_layout

\begin_layout Subsection
2.
 amake
\end_layout

\begin_layout Standard
Examples:
\end_layout

\begin_layout Standard

\family typewriter
aubit amake
\family default
 # build default targets of all .mk files in ./
\end_layout

\begin_layout Standard

\family typewriter
aubit amake -k -all install
\family default
 # install all programs, ignore errors
\end_layout

\begin_layout Standard

\family typewriter
aubit amake P11 aubit -k
\family default
 # build aubit target defined in P11.mk, ignore errors
\end_layout

\begin_layout Standard

\family typewriter
aubit amake P11 aubit -defaultinclude#
\family default
 build P11 target for Aubit compiler, use includes defined in P11
\end_layout

\begin_layout Standard

\family typewriter
aubit amake P11 -header myhead.mk
\family default
 # default P11 target, use myhead.mk for header
\end_layout

\begin_layout Standard

\family typewriter
aubit amake --help
\family default
 for full lost of flags and parameters.
\end_layout

\begin_layout Subsection
Requests
\end_layout

\begin_layout Standard
Tell me if it's useful for you, if you need help, explanations, changes...
 If you make generally useful changes, I would like if you send them back
 to me.
 Latest version of these files will always available through Aubit 4gl CVS
\end_layout

\begin_layout Subsection
Notes
\end_layout

\begin_layout Itemize
Most existing makefiles have no idea which file contains GLOBALS definitions;
 some compilers care, some don't.
 I assumed first source file listed in GLOBALS file, which can be wrong.
 If you step on this one, you'll need to find out manually which one is
 it actually.
 I guess it's more then possible to grep for "END GLOBALS" in "genmake"
 if we wanted to do that automatically.
\end_layout

\begin_layout Itemize
Some existing makefiles often don't have any references to form files, and
 even if they do, they have no idea which forms belong to which program.
 By default, I defined that each program needs all forms in current module.
 It would be wise to gradually replace this with actual forms needed.
 I guess that it should be possible to grep that from "genmake", since there
 we know all 4gl source files.
 
\end_layout

\begin_layout Itemize
You should consider this as technology demonstration.
 Some things are probably missing, or incorrect, in rules definitions and
 targets.
 But this is now so easy to fix, since it's all in one place that I did
 not worry too much.
 It compiled everything I tried.
 But I don't consider this finished code.
 It does what I needed, it may or may not do that same for you, but again,
 it's really easy to do anything in the way this is structured now.
 You should consult the "make" manual at http://www.gnu.org/manual/make-3.79.1/html_
mono/make.html if you want to play with existing code.
\end_layout

\begin_layout Itemize
All "programs" that are nothing more then hard links, are ignored.
 This needs to be fixed in existing makefiles manually, unless someone can
 explain to me what's good about linking a program to a different name and
 then pretending it's something else.
 It won't work on Windows anyway, so if we want Windows compatibility, we
 cannot do it anyway.
\end_layout

\begin_layout Itemize
some of functionality depends on recent version of GNU make.
 If you don't have it, you'll need to download it from http://www.gnu.org.
 My version was 3.77.
 Current version as of time of writing was 3.79
\end_layout

\begin_layout Itemize
Most existing x4gl makefiles don't have any idea about help files.
 It should be possible to grep for this in "genmake".
\end_layout

\begin_layout Itemize
It's really easy to add functionality to do local check out, since now you
 can compile anywhere, even without any source files in local directory
 (amake/make will find them if they exist) This is closely related to the
 way that serious development should be organized using version control...
\end_layout

\begin_layout Itemize
Why one make file for one program? First, when more then one developer is
 working in same tree, it gives me the warm fussy feeling.
 Second, it makes target definitions cleaner, simpler, and easier to debug.
 Third, you can checkout your own make file to wherever you want, together
 with all sources needed for program.
 Or without them for that matter.
\end_layout

\begin_layout Itemize
Object libraries (.aox in Aubit, .42x in 4js dialect).
 I guess it should be possible to make attempt in automating this in "genmake",
 if we really want it.
 Related to this is an issue of how different 4gl compilers "strip" unused
 functions from executables.
 D4GL don't really care, since linking produces only a map file.
 i4gl does care, and Querix and Aubit, being C code translators, can easily
 strip executables.
\end_layout

\begin_layout Itemize
why is amake needed: actually, it's not, you can do "make -f 1.mk 2.mk params"
 or "make -f *.mk params" just fine, as long as you keep header and footer
 includes in each .mk file.
 It just makes things simpler, more flexible, and can replace headers on
 the fly.
\end_layout

\begin_layout Subsection
Installation 
\end_layout

\begin_layout Standard
(don't forget to convert back to UNIX file format if you are receiving this
 on Windows box; needless to say, scripts will need "chmod a+x")
\end_layout

\begin_layout Standard
These two should go somewhere in the path, but will probably be used only
 once:
\end_layout

\begin_layout Description
prepmake - sh script to prepare original make file, created"makefile.prep"
\end_layout

\begin_layout Description
genmake - sh script called from prepared makefile to create individual make
 files
\end_layout

\begin_layout Standard
Header will probably be most useful in your program directory, since it
 can contain module specific definitions, but one copy of general type should
 also probably be in /etc or /usr/incl:
\end_layout

\begin_layout Description
header.mki - make file for including from each individual make file.
 It in turn includes a4gl.mk i4gl.mk q4gl.mk and d4gl.mk by default.
\end_layout

\begin_layout Standard
The Following files are supposed to be completely abstracted, so in /etc
 or /usr/include they go:
\end_layout

\begin_layout Description
footer.mki - make targets definitions included from each individual makefile.
\end_layout

\begin_layout Description
a4gl.mk - rules for compiling using Aubit 4gl compiler
\end_layout

\begin_layout Description
i4gl.mk - rules for compiling using classic Informix 4gl compiler
\end_layout

\begin_layout Description
d4gl.mk - rules for compiling using 4Js (Informix D4GL) 4gl compiler
\end_layout

\begin_layout Description
q4gl.mk - rules for compiling using Querix 4gl compiler
\end_layout

\begin_layout Standard
And finally, this one should be in the path, probably in /bin:
\end_layout

\begin_layout Description
amake - sh script used for executing make process, instead of the "make"command
\end_layout

\begin_layout Subsection
Credits: 
\end_layout

\begin_layout Standard
Thanks to Jonathan Leffler for Informix-4gl and 4Js rules, and general concept
 of how 4gl program should be processed by make.
 See www.informix.com/idn
\end_layout

\begin_layout Subsection
#DEFINE
\end_layout

\begin_layout Standard
Note about using #DEFINE-style constructs, like C.
 There's nothing built into 4GL, but many people use the Unix "M4" command
 successfully.
 You could also use "cpp".
\end_layout

\begin_layout Standard
Stuart Kemp (stuart@cs.jcu.edu.au):
\end_layout

\begin_layout Standard
To use the C preprocessor (cpp) in conjunction with GNU make you might use
 a suffix of ".cpp" on the files you edit, and then build a Makefile containing:
\end_layout

\begin_layout LyX-Code
.SUFFIXES: .4gi .4go .4gl .cpp .frm .per .cpp.4gl:
\end_layout

\begin_layout LyX-Code
@echo Make $@ from $< $(CPPDEFS)
\end_layout

\begin_layout LyX-Code
@$(CPP) $(CPPDEFS) $< > $@
\end_layout

\begin_layout LyX-Code
.per.frm:
\end_layout

\begin_layout LyX-Code
@echo Make $@ from $<
\end_layout

\begin_layout LyX-Code
@form4gl -s $<
\end_layout

\begin_layout LyX-Code
.4gl.4go:
\end_layout

\begin_layout LyX-Code
@fglpc $<
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Of course, the downside of this is that if you get an error-message when
 running your .4g[io] program, the line-number will be that in the .4gl file,
 not the .cpp file.
\end_layout

\begin_layout Subsection
4GL Makefiles
\end_layout

\begin_layout Standard
There are no standard rules for how to organize Makefiles for 4gl.
 This note attempts to repair this deficiency for both Unix and NT systems.
\end_layout

\begin_layout Subsubsection
Makefiles for Classic 4GL on Unix
\end_layout

\begin_layout Standard
Assuming that your version of MAKE understands the 'include' directive,
 a typical makefile will look rather like the file described earlier in
 thisdoccument.
 If your MAKE does not understand the 'include' directive, the simplest
 solution is to obtain a version of MAKE which does understand them.
\end_layout

\begin_layout Standard
One such MAKE is GNU Make, which is widely available on the Internet.
 See The GNU Project and the Free Software Foundation (FSF) for more information.
\end_layout

\begin_layout Standard
The rules file 'i4gl.mk' is located in some convenient directory.
 In the example, $HOME/etc is used, but a centralized location such as $AUBITDIR
/incl, $INFORMIXDIR/etc or $FGLDIR/etc is a reasonable choice.
 Note that either the curly brackets or parentheses are required around
 the name of the environment variable in the makefile.
\end_layout

\begin_layout Standard
The macros list the components of the program, and the definitions of the
 lists avoid replicating names as much as possible, so that if a file is
 added, deleted or renamed, only one line in the makefile needs to be changed.
\end_layout

\begin_layout Standard
Note too that the current versions of i4gl.mk and d4gl.mk automatically provide
 definitions for the majority of the derived files, so the makefile itself
 does not have to define macros such as FILES.o or FILES.4ec.
 It must, however, define FILES.4gl for the I4GL source files, FILES.per for
 the form source files, and FILES.msg for the help source files, since these
 macros are used to define the other macros.
\end_layout

\begin_layout Standard
This makefile uses the 'standard' install script for Unix, and that means
 it can only install a single file at a time (an silly design decision,
 but one which was made so long ago that it cannot readily be changed).
 Consequently, we have to iterate over the list of form files.
 If there was more than one message file, we'd need to do the same for the
 message files.
\end_layout

\begin_layout Standard
The hard work in this makefile is the install and clean process.
 The actual compilation rules are minimal, occupying just six non-blank
 lines.
 There are some standard targets which are desirable in most makefiles.
 These include all to build everything that is needed by default, install
 to put the software in a location where it can be used, and clean to remove
 the debris from the development process.
\end_layout

\begin_layout Standard
As another pseudo-standard, if you are working with both Classic 4GL and
 Dynamic 4GL, or if you are using both p-code and c-code, it helps to standardiz
e on some extra names.
 The makefiles illustrated here use:
\end_layout

\begin_layout Itemize
aubit Aubit 4gl c-code compilation
\end_layout

\begin_layout Itemize
i4gl-ccode Classic 4GL c-code compilation (I4GL)
\end_layout

\begin_layout Itemize
i4gl-pcode Classic 4GL p-code compilation (I4GL-RDS)
\end_layout

\begin_layout Itemize
d4gl-ccode Dynamic 4GL c-code compilation
\end_layout

\begin_layout Itemize
d4gl-pcode Dynamic 4GL p-code compilation
\end_layout

\begin_layout Itemize
i4gl Classic 4GL (both p-code and c-code)
\end_layout

\begin_layout Itemize
d4gl Dynamic 4GL (both p-code and c-code)
\end_layout

\begin_layout Itemize
querix Querix 4gl c-code compilation
\end_layout

\begin_layout Standard
These makefiles can also builds the custom I4GL p-code runner that is needed
 to run the program.
\end_layout

\begin_layout Subsection
D4GL Makefiles on Unix
\end_layout

\begin_layout Standard
The rules for compiling D4GL are similar to the rules for compiling I4GL,
 but they use a different set of suffixes.
 
\end_layout

\begin_layout Standard
The first target in the makefile is 'default', and is what will be built
 if you simply type "make -f d4glonly.make".
 It is set up to build just the D4GL p-code program; to build the c-code
 program too, you have to specify "all" or "d4gl-ccode" on the command line.
\end_layout

\begin_layout Standard
This makefile builds a custom runner for D4GL because the code uses some
 C code.
 When you need a D4GL custom runner, you have to link with it too, so you
 have to build the custom runner before you try linking the program, and
 the dependencies ensure this happens automatically.
\end_layout

\begin_layout Standard
The rest of the makefile follows the pattern in the I4GL version, with the
 changes appropriate to handling D4GL instead of I4GL.
\end_layout

\begin_layout Subsubsection
I4GL Makefiles on Unix
\end_layout

\begin_layout Standard
The actual rules for compiling Informix Classic 4GL are defined in the file
 i4gl.mk .
 There are a number of key things to note about them.
\end_layout

\begin_layout Itemize
The rules file does not reset the complete MAKE suffix list.
 Some versions of the file did, but this leads to problems when you try
 to add support for Dynamic 4GL as well; which file should be included first,
 and why, and so on.
 The down-side of being so accommodating is that if there is an intermediate
 ".c" file left over by a failed I4GL compilation, then that file will be
 compiled in preference to the ".4gl".
 To fix this, you have to nullify the suffix list and then reinstate the
 suffixes you want in the correct order (which means preferring the .4gl
 file to the .c file, and .ec files to .cfiles).
 However, it is difficult to write two separate files, i4gl.mk and d4gl.mk,
 which can be included in either order, and which don't repeat each others
 suffixes, if you also zero the suffix list in both files.
\newline
I guess you could
 solve this if you defined I4GL.SUFFIXES and D4GL.SUFFIXES as macros, and
 had the line which re-instates the suffix rules specify both macros, even
 if one of them was actually empty (as it would be if you had not already
 processed the other rules file).
 A change for next month.
\end_layout

\begin_layout Itemize
The rules file does not define any targets, so that you can include it at
 the top of the makefile without altering the default target written in
 the makefile.
\end_layout

\begin_layout Itemize
The macro names are very consistent (arguably too consistent and not sufficientl
y mnemonic).
\end_layout

\begin_layout Subsubsection
NMAKE
\end_layout

\begin_layout Standard
If you have Microsoft Visual Studio or Microsoft Visual C++ on your NT machine,
 you will have the NMAKE program available to you.
 You can use Makefiles patterned on the one shown below (from the D4GLDEMO
 program).
 Note that both the rules and the makefiles are much simpler on NT than
 on Unix because Classic 4GL is not available on NT, and neither is the
 Dynamic 4GL c-code compiler.
\end_layout

\begin_layout Standard
Some of the significant differences between MAKE on Unix and NMAKE on NT
 are:
\end_layout

\begin_layout Itemize
NMAKE does not accept ${MACRO}, but only $(MACRO).
\end_layout

\begin_layout Itemize
NMAKE does not accept a dot in macro names.
\end_layout

\begin_layout Itemize
NMAKE does not recognize 'null suffix' rules (for converting x.c into x,
 for example; it would only handle x.c to x.exe).
\end_layout

\begin_layout Itemize
Since there is no D4GL c-code compiler on NT, those rules in d4gl.mk are
 irrelevant.
\end_layout

\begin_layout Itemize
Since there is no I4GL c-code or p-code compiler on NT, the rules in i4gl.mk
 are irrelevant.
\end_layout

\begin_layout Itemize
There is no fglmkrun on NT.
\end_layout

\begin_layout Itemize
You have to be very careful about what you do with 'cd' commands.
 Typically,you have to do:
\newline
cd with && $(MAKE) && cd ..
 POSIX.1 requires MAKE to accept both ${MACRO} and ${FILE.o}, unlike NMAKE.
\end_layout

\begin_layout Itemize
Since Unix versions of MAKE do accept the notations accepted by NMAKE, it
 would be possible, and possibly even sensible, to resign oneself to using
 the notation accepted by NMAKE in both the Unix and NT versions of the
 Classic 4GL and Dynamic 4GL makefiles and make rules.
 However, that also feels a bit like giving in to the school-yard bully,
 and that isn't really acceptable.
\end_layout

\begin_layout Standard
Prepared by: mailto:jleffler@informix.com
\end_layout

\begin_layout Standard
Last Updated: 1999-10-08
\end_layout

\begin_layout Standard
Edited by AF
\end_layout

\begin_layout Subsection
Bug in ESQL/C rules:
\end_layout

\begin_layout Standard
Compiling ESQL/C code did not work because of macro name mismatches.
\end_layout

\begin_layout Standard
Specifically, there's a line that defines ESQL = ${ESQL_EC_ENV} ${ESQL_EC_CMD}
 ${ESQL_EC_FLAGS} but the corresponding macros for compiling ESQL/C code
 use ${ESQL_EC} rather than ${ESQL}.
 I concluded that I meant to define ESQL_EC, not ESQL.
\end_layout

\begin_layout Standard
For Aubit 4gl team,
\end_layout

\begin_layout Standard
Andrej Falout
\end_layout

\begin_layout Chapter
A4GL Utilities
\end_layout

\begin_layout Section
adbschema 
\end_layout

\begin_layout Standard
Generate a schema file representing tables and or procedures within a database.
 It can also produce sql scripts (or 4GL programs) for loading and unloading
 data to/from a database.
 This is useful when migrating from one RDBMS to another.
\end_layout

\begin_layout Standard
Usage :
\end_layout

\begin_layout Standard

\family typewriter
adbschema [-noperms] [-fileschema] [-t tabname] [-s user] [-p user] [-r
 rolename] [-f procname] -d dbname [-ss] [filename] 
\end_layout

\begin_layout Standard

\family typewriter
-noperms
\family default
 Do not include any GRANT/REVOKE 
\end_layout

\begin_layout Standard

\family typewriter
-fileschema
\family default
 Generate a schema suitable for the FILESCHEMA SQL Module 
\end_layout

\begin_layout Standard

\family typewriter
-U
\family default
 Generate unload statements
\end_layout

\begin_layout Standard

\family typewriter
-U4GL
\family default
 Generate a 4GL program with unload statements
\end_layout

\begin_layout Standard

\family typewriter
-L
\family default
 Generate load statements
\end_layout

\begin_layout Standard

\family typewriter
-L4GL
\family default
 Generate a 4GL program with load statements
\end_layout

\begin_layout Standard
A typical example may be (assuming the database being migrated was called
 
\family typewriter
customers
\family default
):
\end_layout

\begin_layout LyX-Code
$ adbschema -q -noperms -d customers > customers.sql
\end_layout

\begin_layout LyX-Code
$ convertsql INFORMIX POSTGRES < customers.sql > newdb.sql
\end_layout

\begin_layout LyX-Code
$ adbschema -q -U4GL -d customers > unloadit.4gl
\end_layout

\begin_layout LyX-Code
$ 4glpc unloadit.4gl -o unloadit
\end_layout

\begin_layout LyX-Code
$ ./unloadit
\end_layout

\begin_layout LyX-Code
$ adbschema -q -L4GL -d customers > loadit.4gl
\end_layout

\begin_layout Standard
(create database in new RDBMS and run the newdb.sql file to create the tables)
\end_layout

\begin_layout LyX-Code
$ 4glpc loadit.4gl -o loadit
\end_layout

\begin_layout LyX-Code
$ ./loadit
\end_layout

\begin_layout Section
afinderr
\end_layout

\begin_layout Standard
Usage:
\end_layout

\begin_layout Standard

\family typewriter
$ afinderr errornumber
\end_layout

\begin_layout Standard
This will trawl through all of the message files in the 
\family typewriter
$AUBITDIR/etc
\family default
 directory looking for any help messages associated with that help number.
 This is useful because the same error numbers could come from muliple places
 (eg.
 either Informix or Postgres) and hence may well have a different meaning.
\end_layout

\begin_layout Section
asql 
\end_layout

\begin_layout Standard
This is an workalike for Informix's 
\family typewriter
dbaccess
\family default
 program.
 Several versions are required depending on the target database :
\end_layout

\begin_layout Enumerate

\family typewriter
asql_g.4ae
\family default
 - Generic interface (For ODBC usage)
\end_layout

\begin_layout Enumerate

\family typewriter
asql_i.4ae
\family default
 - Compiled using native Informix ESQL/C 
\end_layout

\begin_layout Enumerate

\family typewriter
asql_p.4ae
\family default
 - Compiled using native Postgres ecpg
\end_layout

\begin_layout Standard
When the program starts - you'll be presented with a menu :
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename asql_1.eps
	width 80line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename asql_query1.eps
	width 80line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename asql_query2.eps
	width 80line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
The only major difference should be the Utilities menu - this provides access
 to some features which are present in the Informix 
\family typewriter
isql
\family default
 tool which are not available in the 
\family typewriter
dbaccess
\family default
 tool.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename asql_util.eps
	width 80line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Subsection
runforms 
\end_layout

\begin_layout Standard
This is a simple replacement for the sperform Informix utility which allows
 you to add, update and remove data from a table (or tables) via a simple
 form interface.
 
\family typewriter
runforms
\family default
 is used as the 'Run Form' option in the 
\family typewriter
asql
\family default
 application.
\end_layout

\begin_layout Section
aupscol 
\end_layout

\begin_layout Standard
'aupscol' is a workalike for the Informix-4GL 
\family typewriter
upscol
\family default
 utility.
 Using this you can specify default attributes and validation for use when
 forms are compiled.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename aupscol.eps
	width 80line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Section
P-Code
\end_layout

\begin_layout Standard
Aubit4GL includes an experimental PCode compiler.
 This will eventually allow you to compile your code into a portable bytecode.
 For now, only single module 4GL programs can be compiled as there is no
 facility to link 4GL modules.
 One interesting feature of the Aubit P-Code compiler is that it emulates
 the role of a very simplified C compiler.
 In this way it is still possible to use embedded C code within your 4GL
 program and have this work within the runtime environment (exceptions and
 limitations apply to the C code which can be embedded!)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Generic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4GL Specific
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
c2pcode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
c2pcode_fgl 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compiles a .c file
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
checker 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
checker_fgl 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dumps the contents of a compiled .c file
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
runner 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
runner_fgl 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Runs the resulting file
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
configurator 
\end_layout

\begin_layout Standard
The configurator allows you to view the various settings available within
 the Aubit4GL suite of programs.
 A brief summary is available in Appendix A.
\end_layout

\begin_layout Section
convertsql 
\end_layout

\begin_layout Standard

\family typewriter
convertsql
\family default
 is a program which uses the SQL conversion rules used internally by the
 Aubit4GL compiler to convert the SQL of one RDBMS dialect to another.
 This is useful for converting existing SQL scripts to run on a different
 server, for example, those generated by the 
\family typewriter
adbschema
\family default
 program.
 The program always reads from the standard input, and writes to the standard
 output.
\end_layout

\begin_layout Standard
Usage: 
\end_layout

\begin_layout LyX-Code
convertsql source-sql-dialect target-sql-dialect filename
\end_layout

\begin_layout Standard
Note : Currently only 'Informix' is supported as a source dialect.
\end_layout

\begin_layout Section
default_frm 
\end_layout

\begin_layout Standard

\family typewriter
default_frm
\family default
 will generate a default form for a table(s) specified on the command line.
\end_layout

\begin_layout Standard
Usage 
\end_layout

\begin_layout LyX-Code
default_frm -d dbname -t tabname [-t tabname ..] [-o outputfile]
\end_layout

\begin_layout Standard
If no output file is specified, then the output will be written to the standard
 output (ie normally the terminal)
\end_layout

\begin_layout Standard
Eg.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename default_frm.eps
	width 80line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Section
fshow 
\end_layout

\begin_layout Standard
This is a very simple 4GL application which opens and displays the form
 specified on the command line.
 This is very useful for checking how a form will actually look from within
 a 4GL program (especially when using the GUI output).
\end_layout

\begin_layout Standard
Usage :
\end_layout

\begin_layout Standard
$ fshow formname
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename fshow.eps
	width 80line%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Section
loadmap 
\end_layout

\begin_layout Standard
This is a small 4GL application which can take the mapfiles generated by
 '4glpc --map' and load that information into a database.
 The sourcecode for this (tools/loadmap/loadmap.4gl) is meant to be a pro-forma
 for your own loadmap program.
\end_layout

\begin_layout Section
mcompile 
\end_layout

\begin_layout Standard
This is the menuhandler menu compiler.
 Menus created by this are nothing to do with standard 4GL menus, but are
 similar to those found in GUI applications.
 Support for these menus is temporarily suspended.
\end_layout

\begin_layout Section
mkpackage 
\end_layout

\begin_layout Standard
This program is for internal use.
 You can safely ignore it.
\end_layout

\begin_layout Section
prepmake 
\end_layout

\begin_layout Standard
A utillity script to convert makefiles to 
\family typewriter
amake
\family default
 format
\end_layout

\begin_layout Section
decompilers
\end_layout

\begin_layout Standard
Aubit4GL allows you to decompile most of the file formats which are compiled'(eg
 forms).
 The decompilers available are :
\end_layout

\begin_layout Standard

\family typewriter
unmkmessage
\family default
 - message/help files
\end_layout

\begin_layout Standard

\family typewriter
mdecompile
\family default
 - menu files
\end_layout

\begin_layout Standard

\family typewriter
fdecompile
\family default
 - form files
\end_layout

\begin_layout Section
Internally used applications
\end_layout

\begin_layout Subsection
xgen 
\end_layout

\begin_layout Standard

\family typewriter
xgen
\family default
 is used interally as a replacement for the SUN RPC 
\family typewriter
rpcgen
\family default
 program.
 This takes a '.x' description of data structures and generated the C code
 required to read and write those structures to disk.
 Internally, Aubit4GL makes use of .x files for describing forms, menus,
 and compiled P-Code.
 
\end_layout

\begin_layout Standard
The code generated by xgen is used by the generic packers to write the data
 in packed, memory packed, and gzip'd formats.
\end_layout

\begin_layout Chapter
Aubit4GL Extension libraries
\end_layout

\begin_layout Section
channel
\end_layout

\begin_layout Standard
This library allows simple read/write access to files in a manner similar
 to that provided by some other 4GL vendors.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
None
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Subsubsection
open_file 
\end_layout

\begin_layout LyX-Code
open_file(handle,filename,flag)
\end_layout

\begin_layout Standard
opens a file and associates 'handle' as a name for that file.
 flag is
\end_layout

\begin_layout Standard
'u' - use standard input/output
\end_layout

\begin_layout Standard
'r' - readonly 
\end_layout

\begin_layout Standard
'w' - writeonly
\end_layout

\begin_layout Standard
'a' - append
\end_layout

\begin_layout Subsubsection
open_pipe
\end_layout

\begin_layout LyX-Code
open_pipe(handle,cmd,flag)
\end_layout

\begin_layout Standard
runs a command and allows reading/writing to that command via a pipe.
 flag is
\end_layout

\begin_layout Standard
'u' - input and output (*not implemented)
\end_layout

\begin_layout Standard
'w' - write only
\end_layout

\begin_layout Standard
'r' - read only
\end_layout

\begin_layout Standard
'a' - write only (*append is identical to 'write only' in this context)
\end_layout

\begin_layout Subsubsection
set_delimiter
\end_layout

\begin_layout LyX-Code
set_delimiter(handle,delimiter)
\end_layout

\begin_layout Standard
This sets the default field separator for a file
\end_layout

\begin_layout Subsubsection
close
\end_layout

\begin_layout LyX-Code
close(handle)
\end_layout

\begin_layout Standard
This closes the handle and associated file
\end_layout

\begin_layout Subsubsection
fgl_read*
\end_layout

\begin_layout LyX-Code
fgl_read(handle,nvars)
\end_layout

\begin_layout Standard
This reads from a file and returns each field as a separate return value.
 The number of values returned will therefore depend in the number of fields
 on each line of the file.
 This function is not part of the current implementation.
 As has been superceded by the 'read' function.
\end_layout

\begin_layout Subsubsection
read
\end_layout

\begin_layout LyX-Code
read(handle,variable)
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
read(handle,[variable list])
\end_layout

\begin_layout Standard
This reads the fields from the file (separated by the delimiter) and put
 that data into the variables passed to the read function.
\end_layout

\begin_layout Standard
eg.
 
\family typewriter
read("file",[var1,var2,var3])
\end_layout

\begin_layout Subsubsection
write
\end_layout

\begin_layout LyX-Code
write(handle,variable)
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
write(handle,[variable list])
\end_layout

\begin_layout Standard
eg.
 
\family typewriter
write("file",[var1,var2,var3])
\end_layout

\begin_layout Standard
This writes the data passed in to the specified file.
\end_layout

\begin_layout Section
file
\end_layout

\begin_layout Standard
This is a library exposing various STDIO functions from the standard C library.
 Handles are all standard 4GL INTEGER's.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
None
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Subsubsection
popen
\end_layout

\begin_layout Standard
Open a pipe for reading/write
\end_layout

\begin_layout LyX-Code
popen(p_command,mode) 
\end_layout

\begin_layout Subsubsection
fopen
\end_layout

\begin_layout Standard
Open a file for reading or writing
\end_layout

\begin_layout LyX-Code
fopen(filename,mode) 
\end_layout

\begin_layout Subsubsection
ftell
\end_layout

\begin_layout Standard
indicate the current position in a file
\end_layout

\begin_layout LyX-Code
ftell(handle) 
\end_layout

\begin_layout Subsubsection
ferror
\end_layout

\begin_layout Standard
Tests if there is an error on a file handle
\end_layout

\begin_layout LyX-Code
ferror(handle) 
\end_layout

\begin_layout Subsubsection
fseek
\end_layout

\begin_layout Standard
move the current position in a file
\end_layout

\begin_layout LyX-Code
fseek(handle,n) 
\end_layout

\begin_layout Subsubsection
fseek_from_end
\end_layout

\begin_layout Standard
move the current position in a file, counting backwards from the end of
 the file
\end_layout

\begin_layout LyX-Code
fseek_from_end(handle,n) 
\end_layout

\begin_layout Subsubsection
fsize
\end_layout

\begin_layout Standard
get the size of a file
\end_layout

\begin_layout LyX-Code
fsize(handle) 
\end_layout

\begin_layout Subsubsection
fgets
\end_layout

\begin_layout Standard
read a string line from a file
\end_layout

\begin_layout LyX-Code
fgets(handle) 
\end_layout

\begin_layout Subsubsection
feof
\end_layout

\begin_layout Standard
test if the position of the end of the file
\end_layout

\begin_layout LyX-Code
feof(handle) 
\end_layout

\begin_layout Subsubsection
fclose
\end_layout

\begin_layout Standard
close the file associated with the handle
\end_layout

\begin_layout LyX-Code
fclose(handle) 
\end_layout

\begin_layout Subsubsection
rewind
\end_layout

\begin_layout Standard
move the position back to the start of the file
\end_layout

\begin_layout LyX-Code
rewind(handle)
\end_layout

\begin_layout Section
memcached
\end_layout

\begin_layout Standard
This library allows access to memcached servers.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
None.
 A specialized version of 
\family typewriter
libmemcache
\family default
 (originally by Sean Chittenden) is included in the directory.
 Please see 
\family typewriter
memcache.c
\family default
 and 
\family typewriter
memcache.h
\family default
 for details
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Subsubsection
mc_new
\end_layout

\begin_layout LyX-Code
mc_new() 
\end_layout

\begin_layout Subsubsection
mc_server_add
\end_layout

\begin_layout LyX-Code
mc_server_add(lv_mc,lv_host,lv_port) 
\end_layout

\begin_layout LyX-Code
mc_server_add4(lv_mc,lv_host) 
\end_layout

\begin_layout Subsubsection
mc_add
\end_layout

\begin_layout LyX-Code
mc_add(lv_mc, lv_key, lv_val, lv_bytes) 
\end_layout

\begin_layout LyX-Code
mc_add_str(lv_mc, lv_key, lv_val) 
\end_layout

\begin_layout Subsubsection
mc_replace
\end_layout

\begin_layout LyX-Code
mc_replace(lv_mc, lv_key, lv_val, lv_bytes) 
\end_layout

\begin_layout LyX-Code
mc_replace_str(lv_mc, lv_key, lv_val) 
\end_layout

\begin_layout Subsubsection
mv_req_new
\end_layout

\begin_layout LyX-Code
mc_req_new() 
\end_layout

\begin_layout Subsubsection
mv_req_add
\end_layout

\begin_layout LyX-Code
mc_req_add(lv_req, lv_key) 
\end_layout

\begin_layout Subsubsection
mv_get
\end_layout

\begin_layout LyX-Code
mc_get(lv_mc, lv_req) 
\end_layout

\begin_layout Subsubsection
mc_aget
\end_layout

\begin_layout LyX-Code
mc_aget_str(lv_mc,lv_key) 
\end_layout

\begin_layout LyX-Code
mc_aget_rec(lv_mc,lv_key,lv_optr,lv_size) 
\end_layout

\begin_layout Subsubsection
mv_set
\end_layout

\begin_layout LyX-Code
mc_set(lv_mc, lv_key, lv_val, lv_bytes) 
\end_layout

\begin_layout LyX-Code
mc_set_str(lv_mc, lv_key, lv_val) 
\end_layout

\begin_layout Subsubsection
mv_res_free
\end_layout

\begin_layout LyX-Code
mc_res_free_on_delete(lv_res, lv_yesno) 
\end_layout

\begin_layout LyX-Code
mc_res_free(lv_req, lv_res) 
\end_layout

\begin_layout Subsubsection
mv_stats
\end_layout

\begin_layout LyX-Code
mc_stats(lv_mc) 
\end_layout

\begin_layout Subsubsection
mv_delete
\end_layout

\begin_layout LyX-Code
mc_delete(lv_mc, lv_key) 
\end_layout

\begin_layout Subsubsection
mc_incr
\end_layout

\begin_layout LyX-Code
mc_incr(lv_mc, lv_key, lv_ival) 
\end_layout

\begin_layout Subsubsection
mc_decr 
\end_layout

\begin_layout LyX-Code
mc_decr(lv_mc, lv_key, lv_ival) mc_free(lv_mc) 
\end_layout

\begin_layout Section
pcre
\end_layout

\begin_layout Standard
This allows you to use perl style regular expressions within your 4GL program.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
pcre - Perl Compatible Regular Expressions http://www.pcre.org/ 
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Subsubsection
pcre_text
\end_layout

\begin_layout Standard
Returns the matched portion of the string (up to 30 'portions' are stored)
\end_layout

\begin_layout LyX-Code
pcre_text(i)
\end_layout

\begin_layout Subsubsection
pcre_match
\end_layout

\begin_layout Standard
Indicate if the string 's' matches the regular expression 'p'
\end_layout

\begin_layout LyX-Code
pcre_match(p,s)
\end_layout

\begin_layout Standard
Eg.
\end_layout

\begin_layout LyX-Code
import package a4gl_pcre main 
\end_layout

\begin_layout LyX-Code
if pcre_match("cat|dog","There was an old cat") then 
\end_layout

\begin_layout LyX-Code
  display "Matches to ",pcre_text(1) 
\end_layout

\begin_layout LyX-Code
else 
\end_layout

\begin_layout LyX-Code
  display "No match" 
\end_layout

\begin_layout LyX-Code
end if 
\end_layout

\begin_layout LyX-Code
end main 
\end_layout

\begin_layout Section
pop
\end_layout

\begin_layout Standard
This module allows you to download and delete email from a pop3 server.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
libspopc - 
\family typewriter
http://brouits.free.fr/libspopc/index.html
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Subsubsection
popget
\end_layout

\begin_layout Standard
Get a portion of the header from a message, the 'From', To, subject,CC,
 date or size.
\end_layout

\begin_layout LyX-Code
popget(lv_msg,which_info)
\end_layout

\begin_layout Subsubsection
poperr
\end_layout

\begin_layout Standard
Returns the last error message from the POP3 server
\end_layout

\begin_layout LyX-Code
poperr()
\end_layout

\begin_layout Subsubsection
popbegin
\end_layout

\begin_layout LyX-Code
popbegin(p_server,p_user,p_password)
\end_layout

\begin_layout Standard
begins a session, connecting to the server with the specified username and
 password
\end_layout

\begin_layout Subsubsection
popnum
\end_layout

\begin_layout LyX-Code
popnum()
\end_layout

\begin_layout Subsubsection
popbytes
\end_layout

\begin_layout LyX-Code
popbytes()
\end_layout

\begin_layout Subsubsection
popmsgsize
\end_layout

\begin_layout LyX-Code
popmsgsize(lv_msg)
\end_layout

\begin_layout Subsubsection
popmsguid
\end_layout

\begin_layout LyX-Code
popmsguid(lv_msg)
\end_layout

\begin_layout Subsubsection
popgetmsg
\end_layout

\begin_layout LyX-Code
popgetmsg(lv_msg)
\end_layout

\begin_layout Subsubsection
popgethead
\end_layout

\begin_layout LyX-Code
popgethead(lv_msg)
\end_layout

\begin_layout Subsubsection
popcancel
\end_layout

\begin_layout LyX-Code
popcancel()
\end_layout

\begin_layout Subsubsection
popend
\end_layout

\begin_layout LyX-Code
popend()
\end_layout

\begin_layout Subsubsection
popdelmsg
\end_layout

\begin_layout LyX-Code
popdelmsg(lv_msg)
\end_layout

\begin_layout Section
smtp
\end_layout

\begin_layout Standard
This allows you to send email from your 4GL program.
 This module is also required if you wish to use 'REPORT TO EMAIL' from
 within your 4GL application.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
A patched libsmtp - http://libsmtp.berlios.de.
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Subsubsection
set_errmsg
\end_layout

\begin_layout Standard
Displays the specified message and exits the program
\end_layout

\begin_layout LyX-Code
set_errmsg(lv_msg) 
\end_layout

\begin_layout Subsubsection
clear_err
\end_layout

\begin_layout Standard
Clears down any active smtp error message/error number
\end_layout

\begin_layout LyX-Code
clear_err() 
\end_layout

\begin_layout Subsubsection
set_server
\end_layout

\begin_layout Standard
Sets the name of the smtp server to use.
\end_layout

\begin_layout LyX-Code
set_server(lv_server) 
\end_layout

\begin_layout Subsubsection
get_server
\end_layout

\begin_layout Standard
Gets the name of the smtp server to use.
 If no server has been specified via the set_server function, then the SMTP_SERV
ER environment variable will be used instead.
 If no SMTP_SERVER is specified, 'mail' is used.
\end_layout

\begin_layout LyX-Code
get_server() 
\end_layout

\begin_layout Subsubsection
get_errmsg
\end_layout

\begin_layout Standard
Returns the last generated error message.
\end_layout

\begin_layout LyX-Code
get_errmsg() 
\end_layout

\begin_layout Subsubsection
start_message
\end_layout

\begin_layout Standard
Start a new message session.
\end_layout

\begin_layout LyX-Code
start_message(lv_sender,lv_subject) 
\end_layout

\begin_layout Subsubsection
add_recipient
\end_layout

\begin_layout Standard
Add a recipient to a message session.
\end_layout

\begin_layout LyX-Code
add_recipient(lv_message,lv_to) 
\end_layout

\begin_layout Subsubsection
mime_type_new
\end_layout

\begin_layout Standard
Add a mime section to a message
\end_layout

\begin_layout LyX-Code
mime_type_new(lv_message,lv_part,lv_mimetype) 
\end_layout

\begin_layout LyX-Code
mime_type_new_with_description(lv_message,lv_part,lv_mimetype,lv_description)
\end_layout

\begin_layout Standard
Normally - if you are using a mime email, you would add two initial sections
 a mixed part and a text part.
 You then add any files to the mixed part.
 Eg:
\end_layout

\begin_layout LyX-Code
let lv_mixedpart = fgl_smtp::mime_type_new(lv_message,0,"multipart/mixed")
\end_layout

\begin_layout LyX-Code
let lv_textpart =     fgl_smtp::mime_type_new(lv_message,lv_mixedpart,"text/plai
n")
\end_layout

\begin_layout LyX-Code
if lv_rep_filename matches "*.pdf" or lv_hint="PDF" then 
\end_layout

\begin_layout LyX-Code
let   lv_pdfpart=fgl_smtp::mime_type_new_with_description(lv_message,lv_mixedpar
t,"application/pdf",lv_rep_filename) 
\end_layout

\begin_layout LyX-Code
else 
\end_layout

\begin_layout LyX-Code
  let lv_reppart=fgl_smtp::mime_type_new_with_description(lv_message,lv_mixedpar
t,"text/html",lv_rep_filename) 
\end_layout

\begin_layout LyX-Code
end if 
\end_layout

\begin_layout Subsubsection
connect
\end_layout

\begin_layout Standard
Connect to an smtp server with a given message to send, if no server is
 specified (ie its null or blank) then the server from 
\family typewriter
get_server
\family default
 will be used.
\end_layout

\begin_layout LyX-Code
connect(lv_message,lv_server,lv_port,lv_flags,lv_ismime) 
\end_layout

\begin_layout Subsubsection
disconnet
\end_layout

\begin_layout Standard
Closes the connection to the server and indicates that the email is complete
 and ready for transmision.
\end_layout

\begin_layout LyX-Code
disconnect(lv_message) 
\end_layout

\begin_layout Subsubsection
send_to
\end_layout

\begin_layout Standard
Add additional recipients to an email message.
 the 'send_to' is identical to the 'add_recipient' function.
\end_layout

\begin_layout LyX-Code
send_to(lv_message,lv_to) 
\end_layout

\begin_layout LyX-Code
send_to_cc(lv_message,lv_to) 
\end_layout

\begin_layout LyX-Code
send_to_bcc(lv_message,lv_to) 
\end_layout

\begin_layout Subsubsection
part_send_file
\end_layout

\begin_layout Standard
This is called to actually send the mime encoding of the file.
 the order in which these are used must match the order of the mime_type_new
 sections created previously.
\end_layout

\begin_layout LyX-Code
part_send_file_html_listing(lv_message,lv_file,lv_last) 
\end_layout

\begin_layout LyX-Code
part_send_file(lv_message,lv_file,lv_last) 
\end_layout

\begin_layout Subsubsection
send_report
\end_layout

\begin_layout Standard
This is used by the 4GL library to send a report output (via the REPORT
 TO EMAIL) to the report recipients.
\end_layout

\begin_layout LyX-Code
send_report(lv_hint,lv_rep_filename,lv_email_addr)
\end_layout

\begin_layout Section
string
\end_layout

\begin_layout Standard
This module includes numerous string handling functions which may be useful
 from within a 4GL program.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
None
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Subsubsection
split
\end_layout

\begin_layout Standard
Split a string into space separated fields
\end_layout

\begin_layout LyX-Code
split(string,number_of_fields)
\end_layout

\begin_layout Subsubsection
strstr
\end_layout

\begin_layout Standard
find the first location of a string within a string
\end_layout

\begin_layout LyX-Code
strstr(haystack,needle)
\end_layout

\begin_layout Subsubsection
strchr
\end_layout

\begin_layout Standard
find the first location of a character within a string
\end_layout

\begin_layout LyX-Code
strchr(haystack,needle)
\end_layout

\begin_layout Section
sxml
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout LyX-Code
sxml - http://freshmeat.net/projects/sxml/
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Section
dynamic
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
None
\end_layout

\begin_layout Subsection
Function list
\end_layout

\begin_layout Standard
This is a currently just list of all the Informix/4Js's Dynamic 4GL functions
 yet to be implemented...
\end_layout

\begin_layout Chapter
Aubit4GL Extensions
\end_layout

\begin_layout Standard
Aubit4GL fully implements the syntax of classic Informix 4GL v7.3.
 But further to that it has enhanced the language with many extra features.
\end_layout

\begin_layout Section
Fake Comments {! ...
 !}
\end_layout

\begin_layout Standard
You can include A4GL extensions in your program code and still compile the
 source with Informix 4GL compilers by enclosing A4GL specific statements
 within the delimiters 
\family typewriter
{!
\family default
 and 
\family typewriter
!}
\family default
.
 Aubit4GL will ignore the {! and !} delimiters and compile the code enclosed.
 Informix 4GL compiles will see the {! and !} as no different syntactically
 from { and } and will therefore treat enclosed code as a comment (and therefore
 not try to compile it).
 This allows you to write functions like the following:
\end_layout

\begin_layout LyX-Code
function isaubit()
\end_layout

\begin_layout LyX-Code
   {! return true !}
\end_layout

\begin_layout LyX-Code
   return false
\end_layout

\begin_layout LyX-Code
end function
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Associative Arrays 
\end_layout

\begin_layout Standard
This productivity enhancement will make complex Array manipulations easy
 and fast, and at the same time make your code easier to maintain and understand
 
\end_layout

\begin_layout Section
Paused Screen Handling 
\end_layout

\begin_layout Standard
This enhances usability over the slower connection lines, no matter which
 front-end implementation you deploy by selectively stopping updates to
 the screen.
 Using 
\end_layout

\begin_layout Standard
SET PAUSE MODE ON
\end_layout

\begin_layout Standard
all screen updates are stopped, until a
\end_layout

\begin_layout Standard
SET PAUSE MODE OFF 
\end_layout

\begin_layout Standard
is issued.
 This means that you can completely redraw the screen and then issue it
 to the user as a single screen rewrite, reducing cursor flicker as well
 as giving a much faster update.
\end_layout

\begin_layout Section
ODBC Data access
\end_layout

\begin_layout Standard
ODBC compliance is a crucial feature for unprecedented connectivity and
 freedom of database options in the 4GL world.
 
\end_layout

\begin_layout Section
Multiple Concurrent Connections 
\end_layout

\begin_layout Standard
Based on the ODBC access concept, this feature will enable you to not only
 easily open several databases at the same time, and keep them open, but
 also to open several databases from several vendors from different servers,
 bringing together all database resources in corporate environments.
\end_layout

\begin_layout Section
Application Constants 
\end_layout

\begin_layout Standard
These are a small but effective contribution to creating error free programs
 that are easier to maintain and debug.
 
\end_layout

\begin_layout Section
Map Files 
\end_layout

\begin_layout Standard
These will for the first time enable you to have full overview of what your
 code is doing, how, and where.
 Indispensable for debugging and understanding unfamiliar code, and the
 behaviour of the compiler.
 
\end_layout

\begin_layout Section
Variable IDs 
\end_layout

\begin_layout Standard
No more hard-coded ID names! You can specify and reference all 4GL objects
 in the runtime! No more copy-and-paste code just to change ID names, resulting
 in higher productivity and code that is compact and easier to maintain.
 
\end_layout

\begin_layout Section
Passing IDs 
\end_layout

\begin_layout Standard
Passing IDs to functions is one of the implications of Variable IDs.
 It will allow you to name objects passed to functions, even in another
 module.
 
\end_layout

\begin_layout Section
Embedded C code.
 
\end_layout

\begin_layout Standard
No more messing around with external C code, and no more complex make and
 link process.
 Just embed your C code inside your 4GL code, between the keywords CODE
 ...
 ENDCODE.
 
\end_layout

\begin_layout Section
MOVE/SHOW/HIDE WINDOW 
\end_layout

\begin_layout Standard
Enhanced windows manipulation resulting in more usable and flexible user
 interfaces.
 
\end_layout

\begin_layout Section
WHENEVER SUCCESS/SQLSUCCESS 
\end_layout

\begin_layout Standard
Will give you new options for conditional code execution, instead of always
 depending on error conditions.
 
\end_layout

\begin_layout Section
Multilevel Menus 
\end_layout

\begin_layout Standard
User interface enhancement that will make the coding and using applications
 faster and easier.
 
\end_layout

\begin_layout Section
Extended DISPLAY ARRAY 
\end_layout

\begin_layout Standard
Control providing many of features of INPUT ARRAY, and dynamically setting
 current and display lines of array.
 This will eliminate the need to use INPUT ARRAY logic where input is not
 needed, making the result safer and the code cleaner and easier to maintain.
 
\end_layout

\begin_layout Section
Extended USING 
\end_layout

\begin_layout Standard
Syntax provides more options for commonly used date formatting in reports
 and on the display, without the need to write additional code to handle
 this formatting, making especially report writing more productive.
 
\end_layout

\begin_layout Section
Local functions 
\end_layout

\begin_layout Standard
Defining a function to be local to the module opens possibilities fore some
 interesting and productive program structuring, and can also contribute
 to more easily maintainable and problem-free code.
 
\end_layout

\begin_layout Section
get_info function
\end_layout

\begin_layout Standard
The get_info function will enable you to get almost all of the information
 about the state of the running program at runtime.
 It will allow you to write more flexible code than ever before, and achieve
 tasks that were simply not possible with other x4GL compilers.
 
\end_layout

\begin_layout Section
Dynamic Screen Fields 
\end_layout

\begin_layout Standard
These allow input fields to accept more data than will fit in the visible
 screen field size, making for more usable and flexible user interfaces.
 
\end_layout

\begin_layout Section
Remote Function Calls 
\end_layout

\begin_layout Standard
Will make x4GL applications for the first time enter the n-tier world.
 Running programs on the same or different machines, or even platforms,
 call each other to execute functions and return results.
 This can not only enhance typical 3-tier role separation, but also facilitate
 multi-processing on the level of the application, application partitioning
 on protocol level and enable weird things like accessing UNIX database
 from Windows PC that have no ODBC drivers for a specific platform....
 
\end_layout

\begin_layout Section
SELECT/DELETE/UPDATE USING 
\end_layout

\begin_layout Standard
By linking a record with a table and it's primary key, this extremely productive
 enhancement will automate and simplify multi-table data manipulation, the
 way it was always supposed to be, gaining productivity and maintainability
 in the ways you did not experience before.
 
\end_layout

\begin_layout Section
ON ANY KEY
\end_layout

\begin_layout Standard
extremely useful with array manipulation, it will simplify user interaction
 logic in many places.
 
\end_layout

\begin_layout Section
Compile Time Environment 
\end_layout

\begin_layout Standard
This can override many library settings at compile time and will enable
 you to control compiler behaviour in ways not imaginable with other x4GL
 compilers
\end_layout

\begin_layout Section
SET SESSION Option/SET CURSOR option 
\end_layout

\begin_layout Standard
Thanks to the ODBC connectivity, it is possible to assign and change all
 attributes of database connection and defined database cursor at runtime,
 resulting in adjustable connection attributes at the same time exploring
 all the power of target ODBC driver and database from simple A4GL statements.
 
\end_layout

\begin_layout Section
Application Partitioning 
\end_layout

\begin_layout Standard
Thanks to user interface layer on one side, and ODBC layer on the other,
 and combined with RPC calling functionality, it is now possible to fully
 utilize all the resources of the enterprise environment, end-to-end, and
 deploy a4GL programs from one single computer, to hundreds of connected
 computers running different or same layers.
 
\end_layout

\begin_layout Section
Y2K Runtime Translation 
\end_layout

\begin_layout Standard
Two digit year support is implemented using run-time environment variable
 setting, enabling you to dynamically decide interpretation of year while
 preserving the code that was not written using 4 digit year functionality.
 Aubit 4GL is, of course, fully Y2K compliant.
 
\end_layout

\begin_layout Section
Globbing 
\end_layout

\begin_layout Standard
You can freely mix and use all IDs as module specific or global, allowing
 you do make distinction when naming ID's at runtime, thanks to 'Variable
 ID's' and the ability to pass ID's to functions as parameters.
 This functionality alone can save significant time in the coding process,
 and allow you to isolate ID related problems easily.
 
\end_layout

\begin_layout Section
A4GL Wizard 
\end_layout

\begin_layout Subsection
Program Templates 
\end_layout

\begin_layout Standard
These will allow the generation of full 4GL code for typical table oriented
 screens, just by specifying and compiling the template with a few simple
 definitions, much in the way that users used to use the Informix ISQL tool,
 but with full code generation and unprecedented flexibility, even to the
 point of direct inclusion in other 4GL programs.
 
\end_layout

\begin_layout Section
PDF Reports
\end_layout

\begin_layout Standard
Built using PDFlib, allows you to produce reports in PDF format with fancy
 fonts.
\end_layout

\begin_layout Section
GUI 
\end_layout

\begin_layout Standard
Built using GTK+, this can allow normal 4GL programs to substitute a GUI
 version of the normal ASCII form based screens.
 Alternatively, you can exploit Aubit extensions to the classic language
 to create GTK widgets (e.g.
 cascading menus, pulldown lists, checkboxes, dialogues, etc.)
\end_layout

\begin_layout Section
Packages 
\end_layout

\begin_layout Standard
This is a feature borrowed from languages like Java, perl, and Python.
 It allows you to call functions from external libraries using normal CALL
 function() syntax.
\end_layout

\begin_layout Section
IDE 
\end_layout

\begin_layout Subsection
Independent Development Environment 
\end_layout

\begin_layout Standard
Written completely in 4GL, this application facilitates rapid development
 of any x4GL language application, while thanks to available source code
 remaining fully customizable using tools and language familiar to any 4GL
 language developer.
 FIXME: add JL's instructions to "Development Environment" page Please see
 appropriate sections of "A4GL enhancements to standard x4GL language for
 details of all features and syntax.
 
\end_layout

\begin_layout Section
Logical Reports 
\end_layout

\begin_layout Standard
These allow existing reports to be output as CSV, PDF or text files.
 These can be printed, saved to a file, etc - just like a normal 4GL report,
 and can also be automatically emailed to a recipient.
\end_layout

\begin_layout Chapter
Tricks, tips etc.
\end_layout

\begin_layout Section
SQLServer ODBC
\end_layout

\begin_layout Standard
The following hint was contributed by Bernard Moreton (
\family typewriter
itman@ntauk.org.uk
\family default
)
\end_layout

\begin_layout Subsection
Database connection
\end_layout

\begin_layout Standard
Making a good ODBC connection proved a major problem, especially on a Debian
 box, but eventually all came good when we installed unixODBC 2.2.11 and freeTDS
 0.6.3.
 Both of these we had to get from Debian testing; earlier versions in any
 combination were unsatisfactory.
\end_layout

\begin_layout Subsection
General results
\end_layout

\begin_layout Standard
A test program showed that everything then worked, without any need for
 special environmental variables - scroll cursor, fetch next, fetch previous,
 foreach, select count(*)/fieldvalue into ...
 The scroll cursor in particular was a surp rise, since the freeTDS documentatio
n says that scroll cursors are not in the game plan.
 
\end_layout

\begin_layout Subsection
Database object names 
\end_layout

\begin_layout Standard
Further down the road, with more complicated expressions, more problems
 arose.
 Mixed case in the SQLServer database object names forced us to PREPARE
 SQL statements, since the treatment of quotation marks by the SQL conversion
 routines was not yet suffici ently reliable to declare cursors directly.
 The database in question did not contain spaces in the object names, so
 treatment of these remains untested.
 If they occur, SQL conversion may not be satisfactory, and native SQLServer
 syntax may have to be used.
\end_layout

\begin_layout Subsection
Problems with JOIN
\end_layout

\begin_layout Standard
In statements involving a JOIN condition, it was found necessary to fully
 qualify every field name (tablename.fieldname), in every instance.
 Without this, error messages were erratic; and were equally erratic, but
 quite different, if the same statements were submitted either via unixODBC's
 isql or via OpenOffice.org Base.
 The use of aliases was also abandoned in order to minimise parsing problems.
 This results in hideously verbose statements; but they work.
 
\end_layout

\begin_layout Subsection
SQL Conversion
\end_layout

\begin_layout Standard
The INFORMIX-SQLSERVER.cnv was found to be fully satisfactory, (outer joins
 not yet tested), so standard INFORMIX syntax works as expected.
 Native SQLServer syntax is also ok, with or without conversion being active.
 
\end_layout

\begin_layout Chapter
Internationalisation 
\end_layout

\begin_layout Section
Auto-translation
\end_layout

\begin_layout Chapter
ACE reports
\end_layout

\begin_layout Standard
aace aace_4gl aace_perl 
\end_layout

\begin_layout Standard
generate_aace 
\end_layout

\begin_layout Standard
adecompile 
\end_layout

\begin_layout Chapter
Aubit 4GL GUI 
\end_layout

\begin_layout Section
Plexus AD32 mode
\end_layout

\begin_layout Standard
An extension to A4GL is the ability to communicate using a Graphical User
 Interface.
 This is meant as a workalike for Plexus AD32.
 This is not meant for migrating normal 4GL applications to a GUI interface.
\end_layout

\begin_layout Section
Aubit 4GL GUI mode
\end_layout

\begin_layout Standard
To compile a 4GL program with GTK and GUI support :
\newline

\family typewriter
aubit 4glpc -gtk filename.4gl -o filename
\end_layout

\begin_layout Standard
(note: -gtk switch is now default for 4glpc)
\end_layout

\begin_layout Standard
This will generate a CUI/GUI switchable version.
 To use the GUI you must set the AUBITGUI environment variable:
\end_layout

\begin_layout Standard

\family typewriter
AUBITGUI=gtk export AUBITGUI
\end_layout

\begin_layout Standard
Options for AUBITGUI are: text, curses, gtk, gui (not case sensitive).
\end_layout

\begin_layout Standard
You can then run it as normal (make sure you have the DISPLAY environment
 variable pointing to your X server).7.3 c
\end_layout

\begin_layout Standard
Notes:
\end_layout

\begin_layout Itemize
You must recompile any forms (these have changed!) The new forms will work
 for GUI and CUI modes whether you have compiled the 4GL with -gtk or not.
\end_layout

\begin_layout Itemize
Make sure that there is no form_x.h in lib/libincl (the makefile should remove
 this anyway)
\end_layout

\begin_layout Standard
Make sure that you're using the new libraries (ie if you've copied any to
 /usr/lib, /usr/local/lib etc.
 that these are updated).
\end_layout

\begin_layout Subsection
Longer term
\end_layout

\begin_layout Standard
We'll need to add to assist.4gl to add in lots of useful functions - I've
 made a start - should be a few good examples to copy.
\end_layout

\begin_layout Standard
Client/Server mode - I've started to split the display bits from the rest
 of the library (look at lib/gui.c).
 This is used to do the redirecting from CUI to GUI modes.
 It should be possible to add to this to extend GUIs to non-GTK or remote
 displays.
\end_layout

\begin_layout Standard
VERY IMPORTANT : I've not tested lots of things and this is a very first
 draft.
\end_layout

\begin_layout Standard
Lots of things are not implemented yet - eg.
 attributes (colors, upshifts, formats etc) on input/display statements.
 I will ***need*** help to do all of these.
\end_layout

\begin_layout Standard
The way it works at the minute is really bad (uses #define to force a call
 to the GUI function instead of the CUI function.)
\end_layout

\begin_layout Standard
Eventually - I'd like to do a libtui (text mode), and get the calls routed
 via a variable (ui_mode).
 In that way you would compile the code in the same way (ie no -gtk), but
 have a command line/environment variable used to specify the runtime mode
 (Text or Graphical).
\end_layout

\begin_layout Standard
You might also want to set the environment variable 'NOCURSES' before running
 :
\newline
NOCURSES=1 export NOCURSES
\newline
./file
\end_layout

\begin_layout Standard
This will enable some of the output to be printed (There is some debugging
 stuff, GTK error messages and the output of "DISPLAY", and printf (if you
 use the embedded C code)) without turning on curses.
 (This isn't 100% effective yet.)
\end_layout

\begin_layout Standard
There are still a lot of things to work out (don't try CLEAR FORM/fieldname
 ...for example).
 
\end_layout

\begin_layout Section
GUI Menus 
\end_layout

\begin_layout Standard
There are two ways to use menus in GUI mode.
 The first is the traditional 4GL menu command in 4GL :
\end_layout

\begin_layout LyX-Code
MENU ...
\end_layout

\begin_layout LyX-Code
 COMMAND ...
\end_layout

\begin_layout LyX-Code
 COMMAND ...
\end_layout

\begin_layout LyX-Code
END MENU
\end_layout

\begin_layout Standard
This should work as before - but does not look very GUI.
 There is no support for drop down menus for example.
\end_layout

\begin_layout Standard
A GUI specific alternative is to use menu files.
\end_layout

\begin_layout Standard
Menu files have a couple of benefits :
\end_layout

\begin_layout Itemize
.They are the only way to get GUI looking drop down menus
\end_layout

\begin_layout Itemize
You can distribute different files, eg.
 in different languages (Only a very small benefit!)
\end_layout

\begin_layout Standard
Menu are loaded from this file using the 'SHOW MENU' 4GL command.
 eg.
 
\newline

\family typewriter
SHOW MENU my_menu USING my_menuhandler
\end_layout

\begin_layout Standard
You should then have a 
\family typewriter
MENUHANDLER
\family default
 function to deal with clicks on menu items:
\end_layout

\begin_layout Standard
_________________________________________________________________
\end_layout

\begin_layout LyX-Code
MENUHANDLER my_menuhandler
\end_layout

\begin_layout LyX-Code
DEFINE somevariables...
\end_layout

\begin_layout LyX-Code
BEFORE SHOW MENU
\end_layout

\begin_layout LyX-Code
ENABLE MENUITEM mn_1 #You can use MENUITEM or MENUITEMS here
\end_layout

\begin_layout LyX-Code
ENABLE MENUITEMS mn_2,mn_3
\end_layout

\begin_layout LyX-Code
DISABLE MENUITEM mn_1,mn_3
\end_layout

\begin_layout LyX-Code
DISABLE MENUITEMS mn_1
\end_layout

\begin_layout LyX-Code
ON mn_2
\end_layout

\begin_layout LyX-Code
DISPLAY "Hello World"
\end_layout

\begin_layout LyX-Code
ON mn_3
\end_layout

\begin_layout LyX-Code
EXIT PROGRAM
\end_layout

\begin_layout LyX-Code
END MENUHANDLER
\end_layout

\begin_layout Standard
By default menus are loaded from a file called 
\family typewriter
"menu.mnu"
\family default
, you can specify an alternate filename by using a 
\family typewriter
FROM
\family default
 clause : eg.
 
\end_layout

\begin_layout LyX-Code
SHOW MENU my_menu USING my_menuhandler FROM "myfile"
\end_layout

\begin_layout Standard
The .mnu will be automatically appended.
\end_layout

\begin_layout Subsection
Menu File Format
\end_layout

\begin_layout Standard
Source menu files have the extension '.menu', which will be compiled to '.mnu'
 by the mcompile command.
\end_layout

\begin_layout Standard
FIXME: add to "using compilers"
\end_layout

\begin_layout Standard
$ mcompile filename
\end_layout

\begin_layout Standard
If no extension is specified .menu is assumed.
\end_layout

\begin_layout Standard
mcompile can also compile the menu file into C code which can be included
 in
\end_layout

\begin_layout Standard
the application directly (this means you don't need to distrubute the .mnu
\end_layout

\begin_layout Standard
file) using the -c option.
\end_layout

\begin_layout LyX-Code
$ mcompile -c filename
\end_layout

\begin_layout Standard
This will generated a .c which can be linked into the application.
\end_layout

\begin_layout LyX-Code
$ mcompile -c mymenu
\end_layout

\begin_layout Standard
will compile mymenu.menu into mymenu.c
\end_layout

\begin_layout LyX-Code
$ mcompile mymenu
\end_layout

\begin_layout Standard
will compile mymenu.menu into mymenu.mnu
\end_layout

\begin_layout Standard
.menu_files
\end_layout

\begin_layout Standard
A menu file contains one or more MENUs.
 Each menu has an associated ID :
\end_layout

\begin_layout LyX-Code
MENU file
\newline
....
\newline
END MENU
\end_layout

\begin_layout Standard
Within the menu you can place OPTIONs, these are specified as follows :
\end_layout

\begin_layout LyX-Code
OPTION id "Caption"
\end_layout

\begin_layout Standard
You can also specify an image for an option in addition to the caption :
\end_layout

\begin_layout LyX-Code
OPTION id Image="filename" "Caption"
\end_layout

\begin_layout Standard
Note : At present all images must be in .xpm format Although not fully implemente
d yet, you can also specify attributes for an option.
 Currently the only option allowed is 'RIGHT' [not implemented] which will
 right align the menu item (Often used for Help), although there may be
 others later...
\end_layout

\begin_layout LyX-Code
OPTION id "Caption" ATTRIBUTES(RIGHT)
\end_layout

\begin_layout Section
Simple GUI menu
\end_layout

\begin_layout Standard
A Typical file menu may look like this:
\end_layout

\begin_layout LyX-Code
MENU file
\end_layout

\begin_layout LyX-Code
OPTION mn_new Image="New.xpm" "New" 
\end_layout

\begin_layout LyX-Code
OPTION mn_open Image="Open.xpm" "Open"
\end_layout

\begin_layout LyX-Code
OPTION mn_save "Save"
\end_layout

\begin_layout LyX-Code
OPTION mn_saveas "Save As"
\end_layout

\begin_layout LyX-Code
OPTION mn_exit "Exit"
\end_layout

\begin_layout LyX-Code
END MENU
\end_layout

\begin_layout Standard
The above example will probably not appear as you'd imagine, the menu is
 displayed across the screen, what you'd normally have is a File menu, with
 the options listed as a drop down menu.
\end_layout

\begin_layout Standard
This is done using SUBMENUs.
 These have the same parameters as options : eg.
\end_layout

\begin_layout LyX-Code
SUBMENU mn_file "_File" Image="file.xpm" ..
 ATTRIBUTE(RIGHT)
\end_layout

\begin_layout Standard
Options to submenus are listed between the 
\family typewriter
SUBMENU
\family default
 and an 
\family typewriter
END SUBMENU
\family default
 :
\end_layout

\begin_layout LyX-Code
SUBMENU mn_zoom "Zoom"
\end_layout

\begin_layout LyX-Code
OPTION mn_in "In"
\end_layout

\begin_layout LyX-Code
OPTION mn_out "Out"
\end_layout

\begin_layout LyX-Code
OPTION mn_fit "To Fit"
\end_layout

\begin_layout LyX-Code
END SUBMENU
\end_layout

\begin_layout Standard
Additionally, because these may be reused, you can specify the ID of the
 SUBMENU:
\end_layout

\begin_layout LyX-Code
SUBMENU mn_file "_File" USE file
\end_layout

\begin_layout Standard
In which case the compiler will substitute the options associated with a
 MENU with the specified ID.
 eg.
\end_layout

\begin_layout LyX-Code
MENU file
\end_layout

\begin_layout LyX-Code
OPTION mn_new "New"
\end_layout

\begin_layout LyX-Code
OPTION mn_open "Open"
\end_layout

\begin_layout LyX-Code
OPTION mn_save "Save"
\end_layout

\begin_layout LyX-Code
OPTION mn_saveas "Save As"
\end_layout

\begin_layout LyX-Code
OPTION mn_exit "Exit"
\end_layout

\begin_layout LyX-Code
END MENU
\end_layout

\begin_layout LyX-Code
MENU mymenu
\end_layout

\begin_layout LyX-Code
SUBMENU mn_file "_File" USE file
\end_layout

\begin_layout LyX-Code
END_MENU
\end_layout

\begin_layout Standard
Is the same as :
\end_layout

\begin_layout LyX-Code
MENU mymenu
\end_layout

\begin_layout LyX-Code
 SUBMENU mn_file "_File"
\end_layout

\begin_layout LyX-Code
  OPTION mn_new "New"
\end_layout

\begin_layout LyX-Code
  OPTION mn_open"Open"
\end_layout

\begin_layout LyX-Code
  OPTION mn_save "Save"
\end_layout

\begin_layout LyX-Code
  OPTION mn_saveas "Save As"
\end_layout

\begin_layout LyX-Code
  OPTION mn_exit "Exit"
\end_layout

\begin_layout LyX-Code
 END SUBMENU
\end_layout

\begin_layout LyX-Code
END_MENU
\end_layout

\begin_layout Standard
You can also nest SUBMENUs
\end_layout

\begin_layout LyX-Code
SUBMENU mn_edit "_Edit"
\end_layout

\begin_layout LyX-Code
 OPTION mn_cut IMAGE="m1.xpm" "Cut"
\end_layout

\begin_layout LyX-Code
 OPTION mn_copy Image="Copy.xpm" "Copy"
\end_layout

\begin_layout LyX-Code
 OPTION mn_paste"Pastxxxxxxxxxxxxxxxxxxxxxxxxe"
\end_layout

\begin_layout LyX-Code
 SUBMENU mn_zoom "Zoom"
\end_layout

\begin_layout LyX-Code
  OPTION mn_in "In"
\end_layout

\begin_layout LyX-Code
  OPTION mn_out "In"
\end_layout

\begin_layout LyX-Code
  OPTION mn_fit "To Fit"
\end_layout

\begin_layout LyX-Code
 END SUBMENU
\end_layout

\begin_layout LyX-Code
END_SUBMENU_________________________________________|
\end_layout

\begin_layout Standard
Again - these can be either direct (as in the above example) or SUBMENU
 ..
 USE.
\end_layout

\begin_layout Standard
A complete example :
\end_layout

\begin_layout LyX-Code
MENU file
\end_layout

\begin_layout LyX-Code
OPTION mn_new "New"
\end_layout

\begin_layout LyX-Code
OPTION mn_open "Open"
\end_layout

\begin_layout LyX-Code
OPTION mn_save "Save"
\end_layout

\begin_layout LyX-Code
OPTION mn_saveas "Save As"
\end_layout

\begin_layout LyX-Code
OPTION mn_exit "Exit"
\end_layout

\begin_layout LyX-Code
END MENU
\end_layout

\begin_layout LyX-Code
MENU mymenu
\end_layout

\begin_layout LyX-Code
 SUBMENU mn_file "_File" USE file
\end_layout

\begin_layout LyX-Code
  SUBMENU mn_edit "_Edit"
\end_layout

\begin_layout LyX-Code
   OPTION mn_cut IMAGE="m1.xpm" "Cut"
\end_layout

\begin_layout LyX-Code
   OPTION mn_copy Image="Copy.xpm" "Copy"
\end_layout

\begin_layout LyX-Code
   OPTION mn_paste "Pastxxxxxxxxxxxxxxxxxxxxxxxxe"
\end_layout

\begin_layout LyX-Code
   SUBMENU mn_zoom "Zoom"
\end_layout

\begin_layout LyX-Code
    OPTION mn_in "In"
\end_layout

\begin_layout LyX-Code
    OPTION mn_out "Out"
\end_layout

\begin_layout LyX-Code
    OPTION mn_fit "To Fit"
\end_layout

\begin_layout LyX-Code
   END SUBMENU
\end_layout

\begin_layout LyX-Code
  END SUBMENU
\end_layout

\begin_layout LyX-Code
  SUBMENU mn_useful "Useful Stuff"
\end_layout

\begin_layout LyX-Code
   OPTION mn_form "Open Window & Form"
\end_layout

\begin_layout LyX-Code
   OPTION mn_sform "Open small Window & Form"
\end_layout

\begin_layout LyX-Code
   OPTION mn_screen "Open Form on Screen"
\end_layout

\begin_layout LyX-Code
   OPTION mn_lots "Open lots of windows"
\end_layout

\begin_layout LyX-Code
   OPTION mn_loop "Loop windows"
\end_layout

\begin_layout LyX-Code
   OPTION mn_closewin "Close windows"
\end_layout

\begin_layout LyX-Code
  END SUBMENU
\end_layout

\begin_layout LyX-Code
 OPTION mn_help "Help" ATTRIBUTES(RIGHT)
\end_layout

\begin_layout LyX-Code
END_MENU
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
In this example - your program could 'SHOW MENU' mymenu or file.
\end_layout

\begin_layout Subsection
Handling_menu_options
\end_layout

\begin_layout Standard
In code, options can be enabled or disabled using ENABLE MENUITEM id or
 DISABLE MENUITEM id
\end_layout

\begin_layout Standard
Note :
\end_layout

\begin_layout Standard
You can't use the 'SHOW OPTION "caption"' AND 'HIDE OPTION "caption"' !
 These are for the traditional menu command.
\end_layout

\begin_layout Section
GUI form files 
\end_layout

\begin_layout Standard
New version of fcompile with minor changes to the original which can eventually
 be used for the text mode as well.
 It generates a slightly different output format which is currently incompatible
 with the old fcompile.
\end_layout

\begin_layout Standard
This includes extensions (which are present in the current fcompile in CVS)
 as well as a new one 'SCREEN TITLE'.
\end_layout

\begin_layout Subsubsection
Extensions
\end_layout

\begin_layout Standard

\family typewriter
SCREEN TITLE
\end_layout

\begin_layout Standard
fcompile can compile multiple screen sections into a single .per.
 Where more than one screen section is specified, the GTK GUI places each
 screen on a separate tab window (GtkNotebook).
 These will be labeled 'Screen n'.
 You can specify an alternate title with this extension : multi.per:
\end_layout

\begin_layout LyX-Code
database formonly
\end_layout

\begin_layout LyX-Code
screen title "Address" size 15 by 60
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
..
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
screen title "Contact" size 15 by 60
\end_layout

\begin_layout LyX-Code
{..
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
screen title "Jobs" size 15 by 60
\end_layout

\begin_layout LyX-Code
{..
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
WIDGET
\end_layout

\begin_layout Standard

\family typewriter
WIDGET
\family default
 is a new parameter that specifies what should be place instead of an entry
 field (textbox).
 Currently this can contain "TEXT", "BUTTON", "CHECK" (checkbox), "LABEL"
 (text label - not editable), "PIXMAP" (picture - currently only xpm format
 handled), "COMBO" (combo box) , or "RADIO" (radio buttons).
\end_layout

\begin_layout Standard
More will be added when I get the chance!!
\end_layout

\begin_layout Standard
eg.
\end_layout

\begin_layout LyX-Code
f001=formonly.fld1, WIDGET="CHECK";
\end_layout

\begin_layout Subsection
CONFIG
\end_layout

\begin_layout Standard
When using a WIDGET, there are some specific things that may need setting
 - the CONFIG parameter is used to specify these.
 For all widgets you can specify a WIDTH and a HEIGHT (integers - in character
 spacing) If no width is specified - the size of the field on the form is
 used.
 If no height is specified a single character height will be used.
\end_layout

\begin_layout Standard
eg.
\end_layout

\begin_layout LyX-Code
f001=formonly.fld1, WIDGET="BUTTON", CONFIG="WIDTH=5";
\end_layout

\begin_layout Standard
Some widgets require special config parameters, eg PIXMAP requires a FILENAME:
\end_layout

\begin_layout LyX-Code
f001=formonly.fld1, WIDGET="PIXMAP", CONFIG="FILENAME='aubit.xpm'";
\end_layout

\begin_layout Standard
[ When config parameters require strings, place them in single quotes.
 ]
\end_layout

\begin_layout Standard
Some widgets have optional parameters :
\end_layout

\begin_layout LyX-Code
f001=formonly.fld1, WIDGET="BUTTON", CONFIG="LABEL='OK'";
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
f001=formonly.fld1, WIDGET="BUTTON", CONFIG="IMAGE='okpic.xpm'";
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
WIDGET PIXMAP
\end_layout

\begin_layout LyX-Code
CONFIG REQUIRED STR FILENAME filename (xpm format)
\end_layout

\begin_layout LyX-Code
WIDGET BUTTON
\end_layout

\begin_layout LyX-Code
CONFIG OPTIONAL STR LABEL label to use
\end_layout

\begin_layout LyX-Code
CONFIG OPTIONAL STR IMAGE image to use (xpm format)
\end_layout

\begin_layout LyX-Code
WIDGET RADIO
\end_layout

\begin_layout LyX-Code
CONFIG REQUIRED INT NUM label to use
\end_layout

\begin_layout LyX-Code
CONFIG REQUIRED STR Ln Label for button 'n'
\end_layout

\begin_layout LyX-Code
CONFIG REQUIRED STR Vn Value for button 'n'
\end_layout

\begin_layout LyX-Code
WIDGET ENTRY/TEXT/DEFAULT
\end_layout

\begin_layout LyX-Code
CONFIG OPTIONAL INT MAXCHARS maximum field size
\end_layout

\begin_layout LyX-Code
WIDGET LABEL
\end_layout

\begin_layout LyX-Code
CONFIG REQUIRED STR CAPTION Caption for label
\end_layout

\begin_layout LyX-Code
WIDGET CHECK
\end_layout

\begin_layout LyX-Code
CONFIG OPTIONAL STR LABEL label for checkbox (may be clicked)
\end_layout

\begin_layout LyX-Code
CONFIG OPTIONAL STR VALUE value for checkbox
\end_layout

\begin_layout LyX-Code
WIDGET CHECK
\end_layout

\begin_layout LyX-Code
CONFIG_NONE
\end_layout

\begin_layout Section
gtk_form
\end_layout

\begin_layout Standard
Once you've compiled your form using the new fcompile, you can use gtk_form
 to show how it would look.
 There are no command line options on gtk_form, although gtk_init takes
 parameters (but I don't know what most of them do!).
\end_layout

\begin_layout Standard
There is also a GTKRC file which allows you to specify a scheme for example
 :
\end_layout

\begin_layout LyX-Code
GTKRC=/usr/local/share/themes/Redmond95/gtk/gtkrc export GTKRC
\end_layout

\begin_layout Standard
You can select different themes by setting GTKRC under KDE (under GNOME
 I think this is automatic)
\end_layout

\begin_layout Standard
This program will not do anything useful once your form is displayed - but
 it should indicate when a field gains focus and when it is clicked or changed
 (depending on the widget type).
\end_layout

\begin_layout Subsubsection
Examples_(in_test/gui/)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
multi.per - An example of a multi screen form
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
radio.per - Radio buttons
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
widget.per - Many widgets on a single screen
\end_layout

\begin_layout Section
GUI issues 
\end_layout

\begin_layout Standard
FIXME: unsorted comments on GUI development:
\end_layout

\begin_layout Standard
Status:
\end_layout

\begin_layout Standard
So far I have a basic DISPLAY AT, DISPLAY ..
 TO ...
 and DISPLAY BY NAME.
 (90%)
\end_layout

\begin_layout Standard
Got HIDE WINDOW, SHOW WINDOW, MOVE WINDOW 100% complete
\end_layout

\begin_layout Standard
CURRENT WINDOW IS ..
 100% complete (may need some attention later)
\end_layout

\begin_layout Standard
ENABLE/DISABLE fields..
 100% complete
\end_layout

\begin_layout Standard
Open Window 90% complete
\end_layout

\begin_layout Standard
Open Form 90% complete
\end_layout

\begin_layout Standard
Work on Menus and menuhandlers (90% complete)
\end_layout

\begin_layout Standard
Started on Input statement (40% complete)
\end_layout

\begin_layout Standard
Still have to deal with the modality issue, disabling, formhandlers, and
 the rest of the input & construct stuff..
\end_layout

\begin_layout Standard
Currently there is no support for 'SET PAUSE MODE ...' within the GTK stuff..
\end_layout

\begin_layout Standard
I'll_also_run_the_assumptions_by_you_:
\end_layout

\begin_layout Itemize
Opening a window in the old fashioned way will open a 'frame' in GTK on
 the 'screen' window.
\end_layout

\begin_layout Itemize
The menu command works pretty much the same as now (no multilevels, title
 to the left).
 Currently the only valid menu line is '1'
\end_layout

\begin_layout Itemize
All fields on a form will be disabled by default when the form is loaded
 (I may change this for PIXMAPs as they are dimmed when disabled and can't
 be activated anyway).
\end_layout

\begin_layout Itemize
Menu Handlers will load menus from a menu file, this allows for internationalisa
tion and also allows descriptions of multilevel menus to be loaded at runtime.
 This uses an 'mcompile' command to compile into a runable menu (Details
 to follow).
\end_layout

\begin_layout Itemize
The only way to open a new X type window will be with the SHOW WINDOW xxx
 USING formhandler command.
 In this way - all current 4GL stuff should work and look the same as the
 text based one (with the additional widgets obviously)..
\end_layout

\begin_layout Itemize
Comments in forms and menus are displayed as tooltips rather than having
 a line of their own
\end_layout

\begin_layout Itemize
The DISPLAY AT is a bit dodgy - it works by putting a label at the specified
 position, if a label was started at that position it will be remove before
 the new one is created.
 if the text to display is "" then the label will be removed and no new
 label created.
 This may cause a problem with code like : 
\newline
DISPLAY "Hello World" at 1,1
\newline
DISPLAY
 "World!" at 1,7
\newline
Which would display "Hello World!" in the TUI mode, in GUI
 mode - you'd have two labels, one on top of the other, how it appears would
 depend on the type of font used, but it could be : 
\newline
Hello World!
\newline
or
\newline
HellWorld!
 
\newline
(if the font is larger than my spacing)
\newline
or
\newline
Hello WWorld! 
\newline
(if the font is
 smaller)
\newline
This will be a problem mainly with proportionaly spaced fonts.
 For courier and friends - we should be able to get the right spacings..
\end_layout

\begin_layout Subsection
Colours in GUI 
\end_layout

\begin_layout Standard
So far all colors and attributes (except border) are ignored.
 I need to investigate how to do this in GTK (any ideas ?)
\end_layout

\begin_layout Subsection
Threads
\end_layout

\begin_layout Standard
So far I havn't needed to have any extra threads, although there are a couple
 of functions which may be called from 4GL, they will be something like
 :
\end_layout

\begin_layout LyX-Code
FUNCTION gui_run_till_idle()
\end_layout

\begin_layout Standard
and
\end_layout

\begin_layout LyX-Code
FUNCTION gui_run_till_terminate()
\end_layout

\begin_layout Standard
the 'till_idle" function will allow GTK to catch up with itself during complex
 programming.
 (At the minute all operations which do something to GTK, opening a window,
 displaying some text etc, run this after completing.
 the "till_terminate" function will run gtk_main() which is a loop that
 will stop the 4GL program terminating and should be the last function called
 in MAIN..END
\end_layout

\begin_layout Standard
MAIN if you use formhandlers or menuhanlders.
\end_layout

\begin_layout Subsection
Progress
\end_layout

\begin_layout Standard
I'll try to get something posted up by the middle of the week.
 In the meantime - if anyone fancies helping - if you can brush up/read
 up on GTK it would be helpful, there will be a lot of 4GL functions that
 we will need to write to handle the nicer things (for example - I already
 have a 4GL function to set the window title which appears in the title
 bar...) 
\end_layout

\begin_layout Standard
We'll need more for adding and maintaining list boxes etc.
\end_layout

\begin_layout Chapter
Extended Reports 
\end_layout

\begin_layout Section
PDF reports 
\end_layout

\begin_layout Subsection
Before you start
\end_layout

\begin_layout Standard
Aubit 4GL uses PDFLib to help generate the PDF output, you'll need a copy
 of this.
 NOTE : You must use a recent release of PDFLIB (available from http://www.pdflib.
com).
\end_layout

\begin_layout Standard
You'll need to add '-DUSE_PDF_REPORTS' to the CFLAGS line at the top of
 lib/makefile.
 
\end_layout

\begin_layout Standard
Regenerate the files in lib (touch lib/pdf_reports.c;make) to include PDF
 generating capabilities.
\end_layout

\begin_layout Section
Introduction 
\end_layout

\begin_layout Standard
PDF reports are very similar to normal 4GL reports, but with added functionality.
 PDF reports are usually started with the
\end_layout

\begin_layout LyX-Code
START REPORT repname TO "somefile.pdf"
\end_layout

\begin_layout Standard
This is because PDFs are read using Acrobat or some other pdf reader that
 requires a file.
\end_layout

\begin_layout Standard
To define a report as being a PDF report, you must use 
\end_layout

\begin_layout LyX-Code
PDFREPORT report_name(...)
\end_layout

\begin_layout Standard
instead of
\end_layout

\begin_layout LyX-Code
REPORT report_name(...)
\end_layout

\begin_layout Section
Output Section 
\end_layout

\begin_layout Standard
The output section of a 4GL PDF report is slightly different to a normal
 report.
 It can have any of the following 
\end_layout

\begin_layout LyX-Code
LEFT MARGIN nval
\newline
RIGHT MARGIN nval
\newline
TOP MARGIN nval
\newline
BOTTOM MARGIN nval
\newline
PAGE LENGTH
 nval 
\newline
PAGE WIDTH nval
\newline
FONT NAME "font"
\newline
FONT SIZE integer
\newline
PAPER SIZE IS A4
\newline
PAPER
 SIZE IS LETTER 
\newline
PAPER SIZE IS LEGAL
\newline
REPORT TO "filename"
\newline
REPORT TO PIPE "progname"
\end_layout

\begin_layout Standard
nval can be any of the following :
\end_layout

\begin_layout LyX-Code
n POINTS - PDF points 1/72 of an inch
\newline
n INCHES - Inches
\newline
n MM - metric mm
\newline
n
\end_layout

\begin_layout Standard
eg.
\end_layout

\begin_layout LyX-Code
LEFT MARGIN 0.25 INCHES
\newline
RIGHT MARGIN 20 MM
\newline
PAGE LENGTH 60
\newline
COLUMN 10
\end_layout

\begin_layout Standard
When the units expression is omitted, n defaults to characters or lines
 (whichever is appropriate).
\end_layout

\begin_layout Subsection
Fonts
\end_layout

\begin_layout Standard
The 4GL program will use the PDFLIB fonts.
 If the required fonts do not exist then the program will abort with a PDFLIB
 error.
 
\end_layout

\begin_layout Standard
NOTE : Case is sensitive for these font names!
\end_layout

\begin_layout Standard
Eg.
\end_layout

\begin_layout LyX-Code
FONT NAME "Times-Roman"
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
FONT NAME "Helvetica"
\end_layout

\begin_layout Subsection
Report Structure
\end_layout

\begin_layout Standard
The report structure will be identical to that of a normal 4GL report.
\end_layout

\begin_layout Subsection
Extras
\end_layout

\begin_layout Standard
In order to generate 'nice' reports - there are a couple of extra features
 available.
\end_layout

\begin_layout Subsubsection
Positioning 
\end_layout

\begin_layout Standard
You can use the normal column and skip positioning mechanisms.
 You can use the nval values for column 
\end_layout

\begin_layout Standard
eg
\end_layout

\begin_layout LyX-Code
print column 1.1 inches,"Hello World"
\end_layout

\begin_layout Standard
but you have to use 'skip by' for nval movements :
\end_layout

\begin_layout Standard
Eg.
\end_layout

\begin_layout LyX-Code
skip by 2 inches
\end_layout

\begin_layout Standard
Also you now have a 'skip to' which allows you to move to an absolute position
 within the current page (including backwards).
\end_layout

\begin_layout Standard
Eg.
\end_layout

\begin_layout LyX-Code
skip to 2 inches
\end_layout

\begin_layout Subsubsection
Using pdf_function() 
\end_layout

\begin_layout Standard
This allows you to control certain aspects of the PDF report, changing fonts
 etc.
 The first argument is the operation type, this will be :
\end_layout

\begin_layout Standard
Argument Indirectly calls
\end_layout

\begin_layout Standard
_____________________________________
\end_layout

\begin_layout LyX-Code
set_font_name -> PDF_setfont
\newline
set_font_size -> PDF_setfont
\newline
set_parameter ->
 PDF_set_parameter set_value_->_PDF_set_value
\end_layout

\begin_layout Standard
Check the PDFlib manual for these
\end_layout

\begin_layout Standard
Eg.
\end_layout

\begin_layout LyX-Code
call pdf_function("set_font_name","Times-Roman")
\newline
call pdf_function("set_font_size
",30)
\newline
call_pdf_function("set_parameter","underline","true");
\end_layout

\begin_layout Subsubsection
Images 
\end_layout

\begin_layout Standard
It is also possible to include an image within the PDF report, this is done
 using the 'PRINT IMAGE' statement with a blob variable containing an image.
 The image must be a GIF,PNG, TIFF or JPEG and this type must be specified
 when displaying the image, this is done using the 'AS ...' keyword, ie "AS
 GIF", "ASTIFF", "AS PNG", "AS JPEG".
\end_layout

\begin_layout Standard
Finally - the image can be scaled when it is displayed.
 This can be either a single value (ie scaling x & y by the same value)
 or two (specifying the scaling for x & y separately)
\end_layout

\begin_layout LyX-Code
|print image some_blob_var as png
\newline
print image some_blob_var as gif scaled
 by 0.5.7,0.8
\end_layout

\begin_layout Subsection
Example program
\end_layout

\begin_layout Standard
Please see pfd_example.4gl in test/
\end_layout

\begin_layout Section
Printing generated reports 
\end_layout

\begin_layout Standard
What's really nice is that with most Linux distributions include the ability
 to print PDF / PS files direct to the printer!
\end_layout

\begin_layout Standard
From http://www.apsfilter.org/ :
\end_layout

\begin_layout Quotation
"Apsfilter supports PS (Postscript) printer and non-PS capable printer by
 using Ghostscript as PS emulator.
 So if you have a non-expensive color DeskJet printer, Apsfilter and Ghostscript
 enhance your printers capabilities, that you'll get a Color Postscript
 Printer in return for free ! "
\end_layout

\begin_layout Standard
This one is especially important for running Aubit on any kind of remote
 display:
\end_layout

\begin_layout Standard
"Printing on locally connected, network printer, as well as on Unix-, Windows-an
d AppleTalk remote printer is supported.
 "
\end_layout

\begin_layout Standard
From http://www.linuxprinting.org/howto/setup.html
\end_layout

\begin_layout Quotation
"apsfilter is a filter designed for use on a wide variety of Unices.
 It supports essentially all Ghostscript drivers.
 It, too, works with various strains of LPD, including stock BSD and LPRng.
 At the moment, this is probably the best third-party system around for
 non-PostScript printers"
\end_layout

\begin_layout Standard
Apsfilter V 6.0 Filetype Support lists PDF, and many other file types supported:
 http://www.apsfilter.org/filetypes.html
\end_layout

\begin_layout Standard
Also see http://www.cups.org/ :
\end_layout

\begin_layout Standard
"A UNIX printing system (with sample drivers for HP, EPSON, and OKIDATA
 printers) based on the Internet Printing Protocol.
 CUPS is the basis for ESP Print Pro and is being considered as the standard
 printing system for a number of commercial and free UNIX operating systems.
 CUPS is provided under GNU GPLand LGPL.
 "
\end_layout

\begin_layout Chapter
Logical Reports
\end_layout

\begin_layout Standard
Logical reports take the print statements in an unmodified REPORT and log
 whats printed and the section in which its printed to a meta data file.
 
\end_layout

\begin_layout Section
Invoking a logical report
\end_layout

\begin_layout Standard
The report 'function' is unchanged - but the calling procedure is enhanced
 to include : 
\end_layout

\begin_layout Standard

\family typewriter
START REPORT report-name TO CONVERTIBLE 
\end_layout

\begin_layout Standard
as well as the familiar TO PIPE/TO FILE etc.
\end_layout

\begin_layout Standard
This creates the meta data file (in /tmp) which can be processed later.
 
\end_layout

\begin_layout Subsection
'Finishing' the report
\end_layout

\begin_layout Standard
The processing is done via the "FINISH REPORT" statement, "CONVERT REPORT"
 statement or via an external program "process_report".
 
\end_layout

\begin_layout Standard
The enhanced FINISH REPORT now accepts the following syntax : 
\end_layout

\begin_layout Standard

\family typewriter
FINISH REPORT report-name CONVERTING TO "filename" AS "type" [ USING "layout"
 ] 
\end_layout

\begin_layout Standard
(You can also CONVERTING TO PRINTER, TO PIPE)
\end_layout

\begin_layout Standard

\family typewriter
FINISH REPORT report-name CONVERTING TO EMAIL AS "type" [ USING "layout"
 ] 
\end_layout

\begin_layout Standard

\family typewriter
FINISH REPORT report-name CONVERTING TO MANY 
\end_layout

\begin_layout Subsection
Converting to "filename" 
\end_layout

\begin_layout Standard
"type" can be any one of the conversions available on the system.
 
\end_layout

\begin_layout Standard
These are in $AUBITDIR/lib called libLOGREPPROC_*.[so/dll] 
\end_layout

\begin_layout Standard
On an average system you may have : 
\end_layout

\begin_layout Standard
libLOGREPPROC_CSV.so libLOGREPPROC_PDF.so libLOGREPPROC_TXT.so 
\end_layout

\begin_layout Standard
This means you can process types of "CSV", "TXT" or "PDF" A special name
 of "SAVE" can also be used which copied the data verbatim from the meta
 data file into the filename specified.
 This file can then be used with the layout editor and/or the process_report
 program.
 
\end_layout

\begin_layout Standard
If USING "layout" is omitted a default layout will be used.
 
\end_layout

\begin_layout Subsection
Default layouts 
\end_layout

\begin_layout Standard
For PDF and TXT it is safe to setup a default layout.
 
\end_layout

\begin_layout Standard
These can be put in the $AUBITDIR/etc directory and have a 
\family typewriter
.lrf
\family default
 extension.
 The filename is made up of combinations of program/module/report name and
 the width of the page (<=80 = narrow <=132 = normal >132 = wide).
 The search order is complex - but basically it depends on : 
\end_layout

\begin_layout Enumerate
program_module_report_type.lrf
\end_layout

\begin_layout Enumerate
program_report_type.lrf
\end_layout

\begin_layout Enumerate
program_module_type.lrf
\end_layout

\begin_layout Enumerate
module_report_type.lrf
\end_layout

\begin_layout Enumerate
report_type.lrf
\end_layout

\begin_layout Enumerate
module_type.lrf
\end_layout

\begin_layout Enumerate
program_type.lrf 
\end_layout

\begin_layout Standard
If none of these is found - then it looks for :
\end_layout

\begin_layout Enumerate
default_type_narrow.lrf 
\end_layout

\begin_layout Enumerate
default_type_normal.lrf 
\end_layout

\begin_layout Enumerate
default_type_wide.lrf 
\end_layout

\begin_layout Standard
dependingon the width 
\end_layout

\begin_layout Standard
Finally - it will use 
\end_layout

\begin_layout Enumerate
default_type.lrf 
\end_layout

\begin_layout Standard
(Where type is PDF, TXT or CSV for example) 
\end_layout

\begin_layout Standard
To create one of these defaults - use layout_engine (for PDF and TXT, you
 can edit using any meta data file as an input) 
\end_layout

\begin_layout Subsection
Converting to many 
\end_layout

\begin_layout Standard
This allows multiple conversions.
 The meta data file is not automatically deleted so it is possible to use
 the same meta data to generate a text file, CSV output and PDF if required.
 
\end_layout

\begin_layout Standard
To do this you need to use the CONVERT statement 
\end_layout

\begin_layout Standard
CONVERT REPORT rep-name TO "filename" AS "type" USING "layout" 
\end_layout

\begin_layout Standard
again - USING "layout" is omitted, one will be generated automatically..
 
\end_layout

\begin_layout Standard
Once you've done all your conversions, free report will delete the meta
 data.
 
\end_layout

\begin_layout Standard
Examples : 
\end_layout

\begin_layout Standard

\family typewriter
start report r1 to convertible
\end_layout

\begin_layout Standard

\family typewriter
output to report r1 (1,2)
\end_layout

\begin_layout Standard

\family typewriter
finish report r1 converting to "myfile1.pdf" AS "PDF" using "layout1" 
\end_layout

\begin_layout Standard

\family typewriter
start report r1 to convertible
\end_layout

\begin_layout Standard

\family typewriter
output to report r1 (1,2)
\end_layout

\begin_layout Standard

\family typewriter
finish report r1 converting to "myfile2.pdf" AS "PDF" # uses default layout
 
\end_layout

\begin_layout Standard

\family typewriter
start report r1 to convertible
\end_layout

\begin_layout Standard

\family typewriter
output to report r1 (1,2)
\end_layout

\begin_layout Standard

\family typewriter
finish report r1 converting to many
\end_layout

\begin_layout Standard

\family typewriter
convert report r1 to "orig.output" AS "SAVE"
\end_layout

\begin_layout Standard

\family typewriter
convert report r1 to "myfile3.pdf" AS "PDF"
\end_layout

\begin_layout Standard

\family typewriter
convert report r1 to "myfile4.txt" AS "TXT"
\end_layout

\begin_layout Standard

\family typewriter
free report r1 
\end_layout

\begin_layout Section
Saved Meta Data 
\end_layout

\begin_layout Standard
There are 3 things you can use with the meta data 
\end_layout

\begin_layout Subsection
The Report Viewer
\end_layout

\begin_layout Standard
This is a GTK2.0 application which displays the contents of the report in
 a tab'd window (one tab per page) - you can't print or anything, but its
 useful to see whats been put out in the meta data file and is used as the
 basis of the next app..
 
\end_layout

\begin_layout Standard
By default - it will only show you the first 10 and last 10 pages (if your
 report is only 5 pages long - you'll still only see 5 pages!) - this is
 basically to limit the impact of a very large report in terms of creating
 GTK widgets! 
\end_layout

\begin_layout Standard
You can change this by changing the MAX_PAGE and MIN_PAGE in report_viewer/repor
t_viewer.
 
\end_layout

\begin_layout Standard
Invoke using : 
\end_layout

\begin_layout Standard

\family typewriter
$ report_viewer filename 
\end_layout

\begin_layout Standard
Where filename is the meta data file (ie the START REPORT TO "filename")
 
\end_layout

\begin_layout Standard
You will probably note that you can click on sections of the report and
 they change colour.
 These define the printed elements.
 When you click on an 'element' everything that the report considers to
 be printed in the same place in your 4GL (not based on lines/columns etc)
 is highlighted..
 
\end_layout

\begin_layout Standard
Also - there is a series of '>' going down the left hand side - these indicate
 the block in which those elements are printed.
 Again clicking on one of these highlights all lines printed within that
 block (i have not done anything about have a print ...
 ; in an after then have a print in an on every row etc) 
\end_layout

\begin_layout Standard
There is some debugging stuff which is printed to stdout (ie from the window
 you ran the application from) which will eventually be removed...
 
\end_layout

\begin_layout Subsection
The layout editor 
\end_layout

\begin_layout Standard
This is another GTK2 application which embeds the report viewer and allows
 you to edit a logical report output.
 
\end_layout

\begin_layout Standard
ATM - there are only two coded report output types : 
\end_layout

\begin_layout Standard
CSV and TXT 
\end_layout

\begin_layout Standard
Although all of the code has been abstracted into shared libraries : 
\end_layout

\begin_layout Standard
libLOGREP_???.so 
\end_layout

\begin_layout Standard
You can't edit the TXT layout at all - so you get a 'no configurable options'
 for that.
 
\end_layout

\begin_layout Standard
For CSV mode - the libLOGREP creates a series of tables - one for each block
 which has seen something printed in the output...
 (Eg before group/after group/ page header/on every row) 
\end_layout

\begin_layout Standard
You can then drag&drop information from the report viewer into these tables
 to generate the report layout.
 Double clicking a cell removes the contents of that cell..
 
\end_layout

\begin_layout Standard
At the minute you are limited to 10 cells across - this will be changed
 to use a spin button like the number of lines...
 
\end_layout

\begin_layout Standard
You can use the 'Default' menu option to create you a default layout which
 you can then play with.
 
\end_layout

\begin_layout Standard
Unfortunately - the layout is indicated by using the block and entry ID
 for the printed output - so you'll see things like "0/1", "1/4" in the
 layout editor - if you want to see what they represent, a single click
 will highlight that section on the report viewer...
 
\end_layout

\begin_layout Standard
You can load a layout using the menu option..
 When you're happy - save the file using the menu options...
 
\end_layout

\begin_layout Standard
Invocation : 
\end_layout

\begin_layout Standard

\family typewriter
$ layout_engine type filename
\family default
 
\end_layout

\begin_layout Standard
Where type is TXT or CSV (more to be added later!) and filename is the original
 4GL report output (just like for the report_viewer) 
\end_layout

\begin_layout Standard
eg 
\end_layout

\begin_layout Standard

\family typewriter
$ layout_engine CSV /tmp/r1.out
\family default
 
\end_layout

\begin_layout Standard
You can't change the report you're editing or the type from within the layout
 engine - you'll need to start it again.
 
\end_layout

\begin_layout Standard
All load/saves within the layout editor refer to the layout file - not the
 meta data report file!!! 
\end_layout

\begin_layout Standard
An extension .lrf ( Logical Report Format) is used when it thinks its required...
 
\end_layout

\begin_layout Subsection
The report processor 
\end_layout

\begin_layout Standard
This a text mode application which takes a report meta data file and a report
 type and renders the report to the required output type with an optional
 layout file...
 
\end_layout

\begin_layout Standard
This is abstracted behind a shared library just like the report layout but
 its called libLOGREPPROC_?.so 
\end_layout

\begin_layout Standard
If no layout file is supplied then a default one is generated before the
 report is processed...
 
\end_layout

\begin_layout Standard
Invocation 
\end_layout

\begin_layout Standard

\family typewriter
$ process_report type filename or $ process_report type filename layoutfile
 
\end_layout

\begin_layout Standard
The output is currently stored in a temporary file (the name of which is
 displayed when the process completes) 
\end_layout

\begin_layout Subsection
Tips for CSV layouts 
\end_layout

\begin_layout Standard
Copy to the same block type - the only exception might be for BEFORE GROUP
 OF to duplicate these details in an on every row..
 
\end_layout

\begin_layout Section
Helper programs
\end_layout

\begin_layout Standard
process_report 
\end_layout

\begin_layout Standard
report_viewer 
\end_layout

\begin_layout Standard
layout_engine 
\end_layout

\begin_layout Chapter
Debugging 
\end_layout

\begin_layout Standard
Aubit4GL is a 'live' project.
 It is in pretty constant development, both adding new features and fixing
 any issues as they come along.
 It is important to understand that while considerable effort has been made
 to remove any bugs in the Aubit4GL, as with all code - some will remain.
 It is therefore essential that these bugs are reported back in the most
 efficient manner so that that can be fixed promptly.
\end_layout

\begin_layout Section
Debugging 4glc
\end_layout

\begin_layout Subsection
Coredumps
\end_layout

\begin_layout Standard
To find the reason for core dumps, create debuggable files!
\end_layout

\begin_layout Standard
If 4glc (or fcompile etc) is core dumping - then recompile them to have
 debugging information included, to do this:
\end_layout

\begin_layout Standard
set the CFLAGS in incl/Makefile-common to have a 
\family typewriter
-g
\family default
, and compile recompile the relevant Aubit application.
\end_layout

\begin_layout Standard
If a compiled 4gl application is core dumping, then compile that with -g
 (4glpc -g ...) so that we have a debuggable 4gl executable.
\end_layout

\begin_layout Standard
Next, run the core-dumping application through gdb, when it dumps core do
 a 
\family typewriter
bt
\family default
 in gdb..
\end_layout

\begin_layout Standard

\family typewriter
aubit 4glc -g hello.4gl
\end_layout

\begin_layout Standard

\family typewriter
gdb 4glc core
\end_layout

\begin_layout Standard
Now type 
\family typewriter
bt
\family default
 inside gdb - that will give you a backtrace (with any luck).
 
\end_layout

\begin_layout Section
Unexpected behaviour
\end_layout

\begin_layout Standard
If an application is failing in some way, the best thing to do is to create
 and examine (or ask those on the aubit4gl mailing lists to examine) a debug
 file.
\end_layout

\begin_layout Standard
This is created by setting
\end_layout

\begin_layout Standard

\family typewriter
$ export DEBUG=ALL
\end_layout

\begin_layout Standard
You can then run your application and it should generate a file called 'debug.out
'.
 This file can get huge very quickly, though only the last 100 or so lines
 will normally be needed to see whats wrong.
\end_layout

\begin_layout Standard
You may also find it useful to compile using the 
\family typewriter
-g
\family default
 option and run it through the 
\family typewriter
gdb
\family default
 debugger.
\end_layout

\begin_layout Section
All other errors
\end_layout

\begin_layout Standard
When a 4GL module or form is compiled, the compiler will generate a .err
 file if the compilation is not successful.
 
\end_layout

\begin_layout Section
compiler errors
\end_layout

\begin_layout Section
Reporting bugs
\end_layout

\begin_layout Standard
For most cases, the simplest way to report a bug is to generate a test case.
 This is the minimal amount of code required to reproduce the bug.
 This may entail forms etc which should be included.
 Once a test case has been generated, either post it to one of the Aubit4GL
 mailing lists, or create an account on the Mantis Bug Tracking system at
 www.aubit.com/mantis and enter it there.
\end_layout

\begin_layout Section
4GL Programs
\end_layout

\begin_layout Standard
Debugging your own 4GL programs will require you to debug the C code which
 the Aubit4GL compiler translates your 4GL program into.
 As mentioned above, the appropriate tool for this is gdb.
\end_layout

\begin_layout Subsection
Simple guide to debugging 
\end_layout

\begin_layout Standard
Debugging in Aubit4gl is more complicated that using the PCODE interactive
 debugger - this is because we compile to C and not to PCODE!
\end_layout

\begin_layout Standard
We therefore need to use the 'C' debugger - gdb
\end_layout

\begin_layout Standard
In order to put the 'debugging symbols' into the output file - we need to
 recompile our 4gl programs with the -g option :
\end_layout

\begin_layout LyX-Code
4glpc -g m1.4gl -o m1
\end_layout

\begin_layout Standard
You can then run the program within the debugger using gdb : 
\end_layout

\begin_layout LyX-Code
$ gdb ./m1 
\end_layout

\begin_layout LyX-Code
$ gdb> run m1
\end_layout

\begin_layout Standard
This is quite useful - but you'll see the generated C code in the debugger
 rather than the 4gl you started with.
 In order to fix this - we can set an environment variable: 
\end_layout

\begin_layout LyX-Code
$ export A4GL_INCLINES=Y
\end_layout

\begin_layout Standard
This instructs the Aubit4gl compile to insert extra lines into the C output
 that it generated which indicate which original 4GL lines the C code relates
 to.
\end_layout

\begin_layout Standard
You then need to recompile your 4gl programs to get a debuggable program
 : 
\end_layout

\begin_layout LyX-Code
$ export A4GL_INCLINES=Y 
\end_layout

\begin_layout LyX-Code
$ 4glpc -g m1.4gl -o m1 
\end_layout

\begin_layout LyX-Code
$ gdb ./m1
\end_layout

\begin_layout Subsubsection
Clobbering
\end_layout

\begin_layout Standard
One feature of aubit4gl is that it 'clobbers' function names.
 For example, take a function called 
\family typewriter
foo()
\end_layout

\begin_layout LyX-Code
FUNCTION foo() 
\end_layout

\begin_layout LyX-Code
   DISPLAY "Hello World" 
\end_layout

\begin_layout LyX-Code
END FUNCTION
\end_layout

\begin_layout Standard
Aubit4gl will rename this function at compile time to include a namespace
 prefix.
 By default this is 
\family typewriter
aclfgl_
\family default
.
 This means that in the C code the function will be 
\family typewriter
aclfgl_foo()
\family default
 and not just 
\family typewriter
foo()
\family default
.
 This is important because if you are using gdb to debug the program, you
 will only be able to use the 
\family typewriter
aclfgl_foo
\family default
 name for debugging.
\end_layout

\begin_layout Subsubsection
Windows, Forms, etc 
\end_layout

\begin_layout Standard
Standard gdb debugging will work for screens/windows/forms etc - but will
 be difficult to use because of switching between gdb (in line mode) and
 the 4gl program in screen mode.
 The gdb messages will appear over the top of the screen and make it difficult
 to use any underlying menu/form etc..
\end_layout

\begin_layout Standard
Eg..
\end_layout

\begin_layout LyX-Code
ADBACCESS: Query-language Connection Database Table Session ...
 
\end_layout

\begin_layout LyX-Code
Select, Create, Info, Drop or Close a database.
 
\end_layout

\begin_layout LyX-Code
0x00b847a2 in _dl_sysinfo_int80 () from /lib/ld-linux.so.2 
\end_layout

\begin_layout LyX-Code
(gdb) bt---------------------------------------- Press CTRL-W for Help --------
 
\end_layout

\begin_layout LyX-Code
#0 0x00b847a2 in _dl_sysinfo_int80 () from /lib/ld-linux.so.2 
\end_layout

\begin_layout LyX-Code
#1 0x001cf19d in poll () from /lib/tls/libc.so.6 
\end_layout

\begin_layout LyX-Code
#2 0x0747b4eb in _nc_timed_wait (mode=3, milliseconds=500, timeleft=0x0)
 at ../../ncurses/tty/lib_twait.c:229 
\end_layout

\begin_layout LyX-Code
#3 0x074608ca in check_mouse_activity (delay=-4) at ../../ncurses/base/lib_getch.c:70
 
\end_layout

\begin_layout LyX-Code
#4 0x07460bbe in _nc_wgetch (win=0x9ee3af0, result=0xbffa69c0, use_meta=1)
 at ../../ncurses/base/lib_getch.c:314 
\end_layout

\begin_layout LyX-Code
#5 0x07461573 in wgetch (win=0xfffffffc) at ../../ncurses/base/lib_getch.c:467
 
\end_layout

\begin_layout LyX-Code
#6 0x00bdd330 in A4GL_getch_swin (window_ptr=0x9ee8500) at newpanels.c:1350
 
\end_layout

\begin_layout LyX-Code
#7 0x00bdd4e3 in A4GL_getch_win () at newpanels.c:1308 
\end_layout

\begin_layout LyX-Code
#8 0x00bda0e1 in UILIB_A4GL_menu_loop_v2 (menuv=0x9eec1c8, vevt=0x0) at
 curslib.c:2722 
\end_layout

\begin_layout LyX-Code
#9 0x0090c83b in A4GL_menu_loop_v2 (menu=0x9eec1c8, evt=0x0) at API_ui.c:284
 
\end_layout

\begin_layout LyX-Code
#10 0x08055d00 in aclfgl_main_menu (_nargs=0) at menus.ec:464 
\end_layout

\begin_layout LyX-Code
#11 0x0804ea97 in main (argc=1, argv=0xbffa6e74) at asql.ec:841 
\end_layout

\begin_layout LyX-Code
(gdb) cont 
\end_layout

\begin_layout LyX-Code
Continuing.
 
\end_layout

\begin_layout LyX-Code
   Query-language Connection 
\end_layout

\begin_layout Standard
One way around this is to use gdb from another terminal window.
 In that way - you can start the 4gl program as normal, then attach to it
 via its process ID - keeping the two sessions separate..
\end_layout

\begin_layout Standard
Eg.
 Imagine our program is called 
\family typewriter
m1
\family default
 - we can run it in one xterm, then use 
\family typewriter
ps
\family default
 to find the process id, then attach using 
\family typewriter
gdb -p pid
\family default
 on another xterm
\end_layout

\begin_layout Standard
Xterm1:
\end_layout

\begin_layout LyX-Code
$ ./m1
\end_layout

\begin_layout LyX-Code
+-------------+ 
\end_layout

\begin_layout LyX-Code
|             | 
\end_layout

\begin_layout LyX-Code
|             | 
\end_layout

\begin_layout LyX-Code
|             | 
\end_layout

\begin_layout LyX-Code
+-------------+
\end_layout

\begin_layout Standard
Xterm2:
\end_layout

\begin_layout LyX-Code
$ ps ax | grep m1 
\end_layout

\begin_layout LyX-Code
14079 pts/5 S+ 0:00 grep m1 
\end_layout

\begin_layout LyX-Code
$ gdb -p 14079 
\end_layout

\begin_layout LyX-Code
gdb> 
\end_layout

\begin_layout Standard
This keeps xterm1 in screen mode all the time, and xterm2 in line mode all
 the time - without any gdb messages appearing on xterm1 to 'mess it up'.
\end_layout

\begin_layout Standard
NOTE: You will need to ensure xterm1 has the focus again when entering informati
on or using a 4gl menu!
\end_layout

\begin_layout Subsubsection
Simple GDB commands 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
run - Run the program
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
run\InsetSpace ~
arg1\InsetSpace ~
arg2 - Run the program with arguments 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
br\InsetSpace ~
function - break when going calling 'function' (dont forget the aclfgl_
 prefix) 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
cont - continue execution after a breakpoint 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
step - step through the program (will step into functions if required) 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
next - step through the program (will NOT step into functions) 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
list - list the next few lines of the program 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
list\InsetSpace ~
- - list the last few lines of the program 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
watch\InsetSpace ~
variable - break when 'variable' changes 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
print\InsetSpace ~
variable - prints the contents of a variable 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
bt - 'backtrace':list all the calls up to this one This will not list the
 actual parameters passed - as 4gl passes only the number of parameters
 at C level 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
help - help with gdb!
\end_layout

\begin_layout Standard
Some useful internals : 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
print\InsetSpace ~
a4gl_sqlca.sqlcode print a4gl_status
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
print\InsetSpace ~
A4GLSTK_getStackTrace() prints the 4gl stack trace (includes parameters!)
\end_layout

\begin_layout Chapter
Revisions
\end_layout

\begin_layout Section
2006-9-1
\end_layout

\begin_layout Itemize
expanded Chapter 20 Debugging with material from Mike Aubury
\end_layout

\begin_layout Itemize
Added Title page.
\end_layout

\begin_layout Section
2006-8-15
\end_layout

\begin_layout Itemize
Added GUI Form Widgets and their attributes
\end_layout

\begin_layout Section
2006-8-1
\end_layout

\begin_layout Itemize
Further elaboration of builtin functions 
\end_layout

\begin_layout Itemize
Folded get_info() documention into this manual
\end_layout

\begin_layout Itemize
Change of syntax (use .
 instead of ::) for extended library package calls
\end_layout

\begin_layout Itemize
More info about libraries, especially libchannel
\end_layout

\begin_layout Itemize
Put a Quick Reference section into the Language Chapter
\end_layout

\begin_layout Section
2005-9-9
\end_layout

\begin_layout Standard
Just editing changes:
\end_layout

\begin_layout Itemize
Fix numerous spelling mistakes
\end_layout

\begin_layout Itemize
Fix some infelicities of English expression
\end_layout

\begin_layout Itemize
Fix punctuation, syntax, and some grammatical errors
\end_layout

\begin_layout Section
2005-3-12
\end_layout

\begin_layout Standard
Extensive new material from Mike Aubury
\end_layout

\begin_layout Itemize
Quick Installation
\end_layout

\begin_layout Itemize
Elaboration of combinations of Informix/PostgreSQL with EC/C
\end_layout

\begin_layout Itemize
Troubleshooting 
\end_layout

\begin_layout Itemize
Details of 4glpc and 4glc compiler flags
\end_layout

\begin_layout Itemize
Utilities:adbschema, adbaccess, asql, etc
\end_layout

\begin_layout Itemize
Extension Libraries: channel, file, etc
\end_layout

\begin_layout Itemize
Debugging
\end_layout

\begin_layout Itemize
Aubit 4GL GTK GUI development
\end_layout

\begin_layout Section
2004-4-27
\end_layout

\begin_layout Itemize
Chapter 2: further information about PostgreSQL and in particular the gborg.postg
resql.org project
\end_layout

\begin_layout Itemize
Chapter 5: include Mike's documentation on IMPORT PACKAGE packagename
\end_layout

\begin_layout Section
2004-2-22
\end_layout

\begin_layout Itemize
Some tidying of chapters 1-3
\end_layout

\begin_layout Itemize
LyX preamble now sets up PDF properties: pdfinfo, pdfcatalog.
 You can navigate with Table of contents (bookmarks) on the left under Acroread
 now.
\end_layout

\begin_layout Itemize
HTML version now shows section numbering.
\end_layout

\begin_layout Section
Problems
\end_layout

\begin_layout Itemize
Tables bug in latex2html is now fixed (thanks to Ross Moore of MacQuarie
 University)
\end_layout

\begin_layout Itemize
Stylesheets still not right (latex2html configuration problem?)
\end_layout

\begin_layout Chapter
\start_of_appendix
UNIX environment variables
\end_layout

\begin_layout Standard
The following list of environment variables was derived from the configurator
 program's description file.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_AUTOBANG=YES|NO UI/TUI/MENU 
\newline
Enable automatic ! for command entry(like
 dbaccess menus) for all applicable statements
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_CINT COMPILE/RUNTIME 
\newline
Full path to CINT C-code interpreter, if installed,
 othewise 'no'.
 Used by 4glc compiler to run C compiled code after compilation.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_C_COMP COMPILE 
\newline
Name of the executable of C compiler to use.
 Note that 4glpc uses $CC
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_EXE_EXT COMPILE 
\newline
Extension to use for executable files compiled by Aubit
 compiler.
 Aubit default extensions for compiled resources (forms,menus,help) and
 objects as used by Amake and Aubit compiler (see resources.c) Amake does
 NOT read this file (?-check) note that composite variables A4GL_FRM_EXT
 and A4GL_MNU_EXT exist only in/for Amake defaults:
\newline
A4GL_MNU_BASE_EXT=.mnu
\newline
A4GL_HLP
_EXT=.hlp
\newline
A4GL_FRM_BASE_EXT=.afr
\newline
A4GL_XML_EXT=.xml
\newline
A4GL_PACKED_EXT=.dat
\newline
A4GL_OBJ_EXT=.ao
\newline
A
4GL_LIB_EXT=.aox
\newline
A4GL_SOB_EXT=.aso
\newline
A4GL_SOL_EXT=.asx
\newline
A4GL_EXE_EXT=.4ae
\newline
To emulate
 Informix p-code extensions (for instance, to re-use legacy make files)
 you would use this settings; note that doing this is not recomended and
 that created files will still be in Aubit format, not Informix one:
\newline
A4GL_MNU_EXT
=<no equivalent>
\newline
A4GL_HLP_EXT=.iem
\newline
A4GL_FRM_BASE_EXT=.frm
\newline
A4GL_XML_EXT=''
\newline
A4GL_PACKED_
EXT=''
\newline
A4GL_OBJ_EXT=.4go
\newline
A4GL_LIB_EXT=<no (standard) equivalent>
\newline
A4GL_SOB_EXT=<no
 equivalent>
\newline
A4GL_SOL_EXT=<no equivalent>
\newline
A4GL_EXE_EXT=.4gi
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FORMTYPE FORMS/RUNTIME 
\newline
Determine which runtime library to use for reading
 forms $AUBITDIR/lib/libFORM_?.so Default forms driver to be loaded When
 used: run-time only
\newline
Options: (GENERIC), NOFORM, XDR
\newline
Generic implies that
 format specified with A4GL_PACKER will be used
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FRM_BASE_EXT RUNTIME/COMPILE/FORMS 
\newline
Default form extension (for all
 packing types)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_HELPTYPE HELP/RUNTIME 
\newline
Determine which runtime library to use for displaying
 help messages $AUBITDIR/lib/libHELP_?.so
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_HLP_EXT HELP/RUNTIME/COMPILE 
\newline
Specify the default extension for a help
 file
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_INIFILE COMPILE/RUNTIME 
\newline
Environment variable optionaly specifiying
 aubitrc file to use
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_LEXDIALECT ESQL/COMPILE 
\newline
Determine which ESQL/C dialect to use $AUBITDIR/lib
/libESQL_?.so When A4GL_LEXTYPE=EC, specify type of EC compiler to be used.
 Ignored if A4GL_LEXTYPE is not set to EC When used: compile-time only
\newline
Options:
 (INFORMIX), POSTGRES, SAPDB, QUERIX
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_LEXTYPE COMPILE 
\newline
Determine what language to convert the 4GL code into
 $AUBITDIR/lib/libLEX_?.so Default output language driver for 4gl compiler:
 When used: compile-time only
\newline
Options: (C), PERL, EC, CS
\newline
Note CS means C#
\newline
Note:
 EC (Embedded SQL C) can be Informix ESQL/C, SAP DB pre-compiler, Querix
 esqlc or PostgreSQL ecpg.
 Using EC will limit Aubit DB connectivity at run-time to that of used EC
 compiler, ignoring setting of A4GL_SQLTYPE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_LIB_EXT COMPILE 
\newline
Extension to use for libraries created by Aubit compiler
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_LINK_LIBS COMPILE 
\newline
Libraries to link against when producing executables
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MENUTYPE MENU/COMPILE/RUNTIME 
\newline
Determine library to use for menuhandlers
 (not normal 4GL menus) $AUBITDIR/lib/libMENU_?.so Default menu driver to
 be loaded: When used: run-time only
\newline
Options: (NOMENU), XDR, GENERIC
\newline
Generic
 implies that format specified with A4GL_PACKER will be used
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MNU_BASE_EXT COMPILE/RUNTIME/MENU 
\newline
Base extension for compiled menu
 files Base extension (without packer extension) to use when compiling/opening
 menu files
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MSGTYPE HELP/RUNTIME 
\newline
Determine library for help message handling $AUBITDIR/
lib/libMSG_?.so Default help message driver to be loaded: When used: run-time
 only
\newline
Options: (NATIVE), XML (??? XML? check this!)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MV_CMD COMPILE 
\newline
Command to ise to move files on the file system
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_OBJ_EXT COMPILE extension to use when compiling 4GL modules to objects
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_OMIT_NO_LOG
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PACKED_EXT COMPILE/RUNTIME 
\newline
Determine file extension for packing
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PACKER MENU/FORMS/HELP/COMPILE/RUNTIME 
\newline
Determine library for packing
 forms/menus/help etc $AUBITDIR/lib/libPACKER_?.so You can select which packer
 to use 
\newline
Options:(PACKED),XDR, XML, PERL
\newline
(PACKED) - default This is very similar
 to XDR in that data is written in a hopefully portable way (optionally
 non-portable if the required functions aren't available).
 This will probably give the smallest output files
\newline
XDR This is the same as
 doing it the old way
\newline
XML This stores and reads the data in an XML file.
 The reading is very limited and can basically only read the XML files that
 it generates - IT IS NOT A FULL BLOWN XML PARSER.
 It uses some odd constructs and isn't ideal - but you'll get the idea when
 you see the output.
 Size of created files is much larger then PACKED or XDR
\newline
PERL This generates
 a data structure which can be used inside a perl program - its pretty complicat
ed stuff though using hashes for the data representation.
 What you do with it after you've generated it is up to you, because this
 is an output only library (ie it can't read back what its written).
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PDFTYPE REPORT/RUNTIME 
\newline
Determine which library to use for extended
 reports $AUBITDIR/lib/libEXREPORT_?.so Determine default driver for Extended
 Reporting When used: run-time only
\newline
Options: PDF, (NOPDF)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_RESERVEWORDS COMPILE --obsolete?-- Reserved word handling Used to determine
 if traditionaly reserved words in 4GL language should be treated as reserved
 Procesing of reserved word is experimental.
 Set this to YES, if you want to disable this functionality.
 When set to NO, compiler will try to process most reserved words, instead
 of reporting the error.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_RM_CMD COMPILE 
\newline
Command to use for deleting files on the file system
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SAPDB_ESQLC ESQL/COMPILE 
\newline
Full path to SAP DB ESQL/C compiler full path
 to SAP-DB ESQL/C pre-compiler executable used when compiling EC output
 for SAP DB(does not have to be in the path)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SQLTYPE SQL/RUNTIME/COMPILE Determine which library to use to connect
 to the database $AUBITDIR/libSQL_?.so Name of default SQL library plug-in
 to use.
 When used: run-time and compile-time
\newline
Options: (nosql) , <ODBC MANAGERS>
 iodbc unixodbc odbc32 (Windows only),
\newline
<DIRECT ODBC> ifxodbc, pgodbc, sapodbc,
 sqliteodbc,
\newline
<NATIVE> esql esqpPG esqlSAP esqlQ sqlite sqliteS pg
\newline
<SPECIAL>
 FILESCHEMA
\newline
FILESCHEMA is to be used for compiling programs where either
 the database doesn't exist yet - or you can't get immediate access to it.
 This takes the 'database' as a filename (with a .schema extension) and uses
 that to collect the data used by compiler(s) Warning: this setting is ignored
 at run-rime when A4GL_LEXTYPE is set to 'EC'.
 At compile time, it is used by compilers regardless of A4GL_LEXTYPE setting
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_UI UI/RUNTIME 
\newline
Determine which plug-in to use for the user interface
 $AUBITDIR/lib/libUI_?.so Defines default UI (user intertface) driver plug-in
 to load When used: run-time only
\newline
Options: (CONSOLE) [no deps.], HL_TUI [curses],
 GTK [GTK+], HL_GTK.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_USE_ALIAS_AS=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_XML_EXT COMPILE/RUNTIME 
\newline
extension to use with XML packer Used when
 when creating output (forms,menus) or opening resource files using XML
 packer Default: SEE ALSO: A4GL_ALWAYSCLOBBER=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_ANSI_ERROR SQL/COMPILE 
\newline
ANSI SQL 92 error checking mode When ANSI_ERROR
 is set to Yes, compiler will abort if non ANSI SQL 92 statement is found
 in source code (Static SQL only).
 If neither A4GL_ANSI_WARN or A4GL_ANSI_ERROR is set, no checking is performed.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_ANSI_WARN SQL/COMPILE 
\newline
ANSI SQL 92 warning checking mode When ANSI_WARN
 is set to Yes compiler will display a warning if it encounters static SQL
 statement not confitming to ANSI SQL 92 specification If neither A4GL_ANSI_WARN
 or A4GL_ANSI_ERROR is set, no checking is performed.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_ARR_DIR_MSG UI/TUI Display/Input array message 'There are no more rows
 in that direction'
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
AUBITDIR COMPILE/RUNTIME Specify the location of the aubit source tree or
 installation Default for source distribution:/opt/aubit/aubit4glsrc Default
 for binary distribution:/opt/aubit4gl Usually set using --prefix=/path
 to 'configure' script
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
AUBITETC COMPILE/RUNTIME 
\newline
Location of global Aubit configuration directory
 This internal variable points to default location of Aubit config files
 Default: /etc/opt/aubit4gl You should not need to change this.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
AUBIT_Y2K RUNTIME 
\newline
Specify Y2K handling of dates: 
\newline
+n (n<100) - set to nearest
 year using +n years from today as limit for future
\newline
-n (n>-100) - set to
 nearest year using -n from today as limit for past (note: -25 = +75 ) eg
 if year=1997 n=20 > 17 will be taken as historic anything <17 is future
 n=-20 <77 will be taken as future >77 is in the past
\newline
XX00 - always use century
 XX
\newline
999 - Do not add anything - dealing with AD 0-99
\newline
-999 - use current century
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_AUTONULL COMPILE 
\newline
Auto initializing module and function local variables
\newline
=YES|
NO
\newline
This setting is used at compile-time only.
 Numeric variables are initializet to 0, everything else to NULL To turn
 on, set to 'Y' (??? or is that YES ???)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_BACKGROUND UI/TUI 
\newline
Default background character (in hex) when creating
 a window (eg 2E for a '.') Application windows background colour xxxx is
 a HEX code of a colour attribute - eg 1400 (for 0x1400) for blue and reverse.
 Applies to all windows created when no attribute is specified (including
 the main screen)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_CLASSIC_I4GL_MONO UI/TUI 
\newline
Inhibit mapping of colours to attributes (like
 red->BOLD)
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_BKG UI/TUI 
\newline
specify the default background color
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_BKG_DEF UI/TUI 
\newline
specify the default background color
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_BLACK UI/TUI 
\newline
Remap black screen colour to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_BLUE UI/TUI 
\newline
Remap blue screen color to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_CYAN UI/TUI 
\newline
Remap cyan screen color to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_FG UI/TUI 
\newline
specify the default fg color
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_FG_DEF UI/TUI 
\newline
specify the default fg color
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_GREEN UI/TUI 
\newline
Remap green screen color to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_MAGENTA UI/TUI 
\newline
Remap magenta screen color to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_RED UI/TUI 
\newline
Remap red screen color to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_WHITE UI/TUI 
\newline
Remap white screen color to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLOR_TUI_YELLOW UI/TUI 
\newline
Remap yellow screen color to alternative
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COLUMNS UI/TUI 
\newline
Specify the width of the screen See A4GL_LINES for descripti
on
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COMMENTS COMPILE 
\newline
Add comments to the generated code
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COMMENT_LIKE_DISPLAY UI 
\newline
Specify comments to be in current display color
\newline
=YES
|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_COMMENT_LIKE_INPUT UI 
\newline
Specify comments to be in current input color
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_CONSTANT2DEFINES COMPILE 
\newline
Print on standard output a #define for all
 constants
\newline
=YES|NO (can be used to generate a .h file)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DBDATE RUNTIME 
\newline
Specifies how dates will be formated
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DBEDIT RUNTIME 
\newline
Name of the editor to use for TEXT BLOB fields Applies to
 asql only?
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DBPATH RUNTIME/COMPILE 
\newline
Path to look in for databases and resource files
 See 'DBPATH' for more information
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DBPATH SQL/HELP/FORMS/MENU/RUNTIME/COMPILE 
\newline
Path to look in for databases
 and resource files DBPATH variable containls list of directory(es) that
 will be searched for objects like compiled form, help and menu files, and
 SQLite databases.
 Use coloumn (:) as a delimiter between paths you want searched, (;) on
 Windows.
 Default: tools/ in Aubit source code root directory and tools/ in Aubit
 binaryinstallation directory.
 As opposed to most Aubit settings that are exclusive and order of there
 source (environment, aubitrc, built-in resources) decides which one will
 prevail, DBPATH and A4GL_DBPATH are cumulated from both variables, and
 added one to another in order depending on their source.
 So if you have path 1 in environment variable A4GL_DBPATH path 2 in environment
 variable DBPATH, path 3 in A4GL_DBPATH in aubitrc, path 4 in DBPATH in
 aubitrc, cumulated value will look like this: 1:2:3:4.
 Search for the file in DBPATH will then be performed from left to right,
 and first path found to contain file looked for will be used.
 NOTE: DBPATH to xxx/incl is for adbaccess form files Only SQLite databases
 are searched for using DBPATH.
 Resources file are:compiled forms/menus/help/p-code files
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DBPRINT PRINT/RUNTIME/REPORT 
\newline
Printing command Name of command to use to
 pass report output when executing reports defines as START REPORT ...
 TO PRINTER
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DEBUG DEBUG/COMPILE/RUNTIME 
\newline
Log extensive information for tracing bugs
 in Aubit4gl code When you encounter programs that crash, use this for debugging
 - it will create file 
\family typewriter
debug.out
\family default
 that can be very useful when you don't get a core dump, so you don't have
 file 
\family typewriter
core
\family default
 to run 
\family typewriter
gdb
\family default
 on.
 WARNING: do not set this under normal circumstances - all programs will
 create debug.out file when they run, files can be VERY large, and they will
 slow down program execution considerably.
 This setting applies to all Aubit compiler executables (including all compilers
) and to all 4gl programs compiled with the Aubit compiler.
\newline
FIXME: we should
 have separate settings for compilers and compiled programs, like A4GL_DEBUG_COM
P and A4GL_DEBUG_PRG
\newline
FIXME: add note about priority numbers 
\newline
Default=<not
 set>
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DEBUG_CFG DEBUG
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DEBUG_DECIMAL DEBUG
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DEBUG_LEVEL DEBUG/COMPILE/RUNTIME 
\newline
Specify the detail in which debug
 messages will be logged
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DEFPRINTER PRINT
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DUMPCOMMENTS FORMS/COMPILE 
\newline
Dump form file attributes when compiling
 form to stdout
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DUMPSTRINGS COMPILE 
\newline
Dump all the strings in a 4GL to a file called
 strings.out
\newline
=YES|NO (normally set to 'ident') (see TRANSLATEFILE)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DUMP_CORE DEBUG/RUNTIME 
\newline
Action to perform when aubit/4gl programs crash
\newline
=YES
|NO either print a sorry message (Internal Error...) , or dump core (seg fault)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_ERROR_MSG
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_ESQL_UNLOAD ESQL/RUNTIME
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_EXTENDED_ERRORLOG DEBUG/RUNTIME 
\newline
Error log handling Add module and line
 when writing to the error log from CALL errorlog(..)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_EXTENDED_GRAPHICS FORMS/UI/TUI 
\newline
enable the use of extended graphics
 from form files (+<>^v for cross and tee's) If set to Y allows forms to
 contain the additional graphics characters <,>,^,v, and + to be used for
 tee's and an intersection.So the following :
\newline

\backslash

\family typewriter
gp--v--q
\backslash
g
\family default

\newline

\family typewriter

\backslash
g|\InsetSpace ~
\InsetSpace ~
|\InsetSpace ~
\InsetSpace ~
|
\backslash
g
\family default

\newline

\family typewriter

\backslash
g>--+--<
\backslash
g
\family default

\newline

\backslash

\family typewriter
g|\InsetSpace ~
\InsetSpace ~
|\InsetSpace ~
\InsetSpace ~
|
\backslash
g
\family default

\newline

\family typewriter

\backslash
gb--^--d
\backslash
g
\family default
 Will draw a box with an intersecting horizonal and vertical line.
 Note - you'll need to set this before you compile the form as well as when
 you run program that will use form file compiled this way
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FAKELEXTYPE PCODE/COMPILE 
\newline
Compile C code resulting from 4gl compilation
 to P-code
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FAKE_IMMEDIATE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FIELD_CONSTR_EXPR UI/TUI 
\newline
Message to display when a fields value cannot
 be used for a construct statement
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FIELD_ERROR_MSG UI/TUI 
\newline
Message to display when a fields value is invalid
 (eg non numeric in numeric field)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FIELD_INCL_MSG UI/TUI 
\newline
Message to display when a value in a field is
 not in the include list
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FIELD_PICTURE_MSG UI/TUI 
\newline
Message to display when a pressed which is
 invalid for picture fields
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FIELD_REQD_MSG UI/TUI 
\newline
Message to display when a field requires a value
 to be entered
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FIXUPDATE=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FORMAT_OVERFLOW RUNTIME 
\newline
Determines what happens when a decimal number
 is too large to fit [ROUND,REFORMAT]
\newline
=ROUND|REFORMAT
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_GTKGUI UI/RUNTIME GTK+ ---obsolete?---
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
GTKRC UI/RUNTIME GTK+ 
\newline
resources file to use when running in GTK+ GUI mode
 --probaly obsolete, GTK libs use this themselves?--
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_GTK_INC_PATH UI/COMPILE Path to includes needed ghen compiling GTK
 gui enabled code ---should be obsolete--- Full path to GTK+ includes (header)
 files, used when ...? FIXME: why do we need this?
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_GUIPORT UI/RUNTIME ---obsolete?---
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_HIDE_MENU MENU/UI/TUI 
\newline
Remove menu when finished with it, default is
 to leave it displayed
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_DIM_INACTIVE_MENU MENU/UI/TUI 
\newline
Leave menu displayed - but as DIM rather
 than NORMAL to show its inactive
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
HOME COMPILE/RUNTIME 
\newline
System environement vatialbe pointing to current user's
 home directory Used to find user-scpecific copy of Aubit configuration
 file (aubitrc) if any
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_INCLINES DEBUG/COMPILE 
\newline
Adds originating line number to genrated source
 code
\newline
=YES|NO Adds originating line number of each created target language
 statement coresponding to 4gl source code, to created target language source
 code, which is useful for debugging.
 e.g.: #line 2 '../tools/test/test_build.4gl'
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
INFORMIXDIR ESQL/COMPILE 
\newline
Location of Informix ESQL/C installation Used when
 compiling EC ouptput using Informix ESQL/C compiler
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_INIT_COL_REFRESH UI/TUI 
\newline
Reinitialise curses colors on exit Used when
 curses colours must be reinitialized when returning to Screen mode (terminal
 specific)
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_INPARRAY_FULL_MSG UI/TUI Message to display when input array becomes
 full
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_KEEP_QUALIFIER=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_KEYFILE DEBUG/UI/RUNTIME 
\newline
Read keystokes from a file and replay them
 Mechanism for doing automated testing A4GL_KEYFILE=(some filename in DBPATH)
 SEE ALSO: A4GL_KEYDELAY
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_KEYDELAY DEBUG/UI/RUNTIME 
\newline
Speed to replay keystokes Mechanism for doing
 automated testing
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_KEYDELAY=(time in usec 1000000 = 1 second, defaults to 0.1s) SEE ALSO:
 A4GL_KEYFILE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_NEEDALLKEYS DEBUG/UI/RUNTIME 
\newline
Keyfile handling.
 Specifies an error if more key stokes are requested than appear in the
 keystoke file (otherwise -return to keyboard input) SEE ALSO: A4GL_KEYFILE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_KEYLOG DEBUG/UI/RUNTIME 
\newline
Log all keystokes to the specified file
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_LANGUAGE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_LINES UI/TUI 
\newline
Number of rows on the screen.
 Terminal size This should make programs work with a normal (not xterm)
 terminal session.
 Defaults:
\newline
A4GL_COLUMNS=80
\newline
A4GL_LINES=24 FIXME: is this really A4GL_ variable
 - terminal will set LINES/COLUMNS, not A4GL_LINES/A4GL_COLUMNS SEE ALSO:
 A4GL_COLUMNS
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_LOGNAME DEBUG/RUNTIME
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
MAKE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MAP4GL=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MARK_SCOPE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MONEY_AS_DECIMAL=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MONEY_AS_MONEY=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_MONO UI/TUI 
\newline
Force monochrome output
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_NOCFILE=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_NOCLOBBER=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_NO_INVIS_ATTR UI/TUI 
\newline
Disable usage of A_INVIS in curses - attempt alternati
ve method for concealment
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PAGER
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PAUSE_MSG REPORT/RUNTIME 
\newline
Message to show when executing PAUSE statement
 in REPORT
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PGKEYSMOVE UI 
\newline
Defines the use of the PgUp and PgDn keys as the same
 as NEXT KEY or for ON KEY (PGDN)
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
POSTGRESDIR ESQL/COMPILE 
\newline
Base directory of PostgreSQL installation.
 Used when looking for includes or libraries to link with, when compiling
 usign PostgreSQL ESQL compiler
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PRINTPROGRESS
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PRINTSCRFILE DEBUG/UI/TUI 
\newline
Specify a file to dump screen to (start with
 a | to pipe to a command)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_PRINTSCRKEY DEBUG/UI/TUI 
\newline
Specify a key to automatically dump the screen
 with (goes to PRINTSCRFILE)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_RPCTYPE RUNTIME 
\newline
Determine which library to use for remote procedure
 calls $AUBITDIR/lib/libRPC_?.so Determine default RPC (Remote Procedure
 Call) driver to load When used: run-time only
\newline
Options: SUNRPC, (NORPC),
 XMLRPC
\newline
Note: XMLRPC is client only at the moment
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SCROLLBACKTO1 UI/TUI 
\newline
Display array handling
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SCROLLTOEND UI/TUI 
\newline
Display array handling
\newline
=YES|NO In display array scroll
 back to first line if PgUp is used rather than to just first page
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SIMPLE_GRAPHICS UI/TUI 
\newline
Force usage of simple graphics for borders
\newline
=YES|NO
 if set to YES then +,|,- will be used to draw graphics characters instead
 of proper borders (if available)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SQLCNVPATH RUNTIME/SQL 
\newline
Specifies the location of the conversion details
 for SQL grammars CONFIG FILE BASED CONVERSIONS convert_sql() now uses configura
tion files.
 These are by default located in /opt/aubit4gl/etc/convertsql/, but that
 can be changed with A4GL_SQLCNVPATH.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SQLCONVERT COMPILE/RUNTIME/SQL 
\newline
Autoconvert SQL from sources files dialect
 to runtime dialect.
 Conversion of SQL statements in 4GL code, to the SQL dialect of target
 RDBMS.
 Conversion is only done if you set A4GL_SQLCONVERT=YES and only if the
 dialect used by the program differs from that used by the DBMS interface.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SQLDIALECT COMPILE/RUNTIME/SQL 
\newline
SQL Dialect used for the source file.
 Declares the SQL dialect of SQL code in 4GL source code.
 an 4GL directive to change the default SQL dialect at runtime is: SET SQL
 DIALECT TO ORACLE by default the system assumes the 4GL application is
 using Informix SQL syntax, but this can be changed by setting, for example:A4GL
_SQLEXEC SQL
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SQLPWD SQL/COMPILE/RUNTIME 
\newline
Database access password See A4GL_SQLUID
 for description
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SQLUID SQL/COMPILE/RUNTIME 
\newline
Database access user name FIXME: is not
 odbc.ini supposed to have default login name and password? Defines username
 and password for accessing database server via ODBC: needed for DATABASE
 and DEFINE LIKE statements at compile time, and procedural DATABASE statement
 ar run-time.
 You can use OPEN SESSION and supply login information at run-time, but
 NOT at compile time:
\newline
Default=<no default value> WARNING!! BE CAREFULL NOT
 TO HAVE A TAB OR OTHER SPECIAL CHARACTRS IN THE VALUE OF THIS VARIABLES
 !!!!!!!!!!
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SQL_CURRENT_FUNCTION SQL
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SYSTEM
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SYSTEMDIR
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_SYSUSER
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_TEMPDIR
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_TRANSLATEFILE COMPILE 
\newline
Specifies the location of a translation file.
 This is used for transforming 4GL strings via a message file (see DUMPSTRINGS)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_TRANSMODE
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_TRIMDUMP DEBUG/UI/TUI 
\newline
Trim the results of a dump screen to a specified
 screen size (eg 24x80) =24x80|25x80|24x132|25x132
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_TRIMUSINGFMT RUNTIME 
\newline
Trim trailing spaces from a using string variable
 before applying it
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_USEPAGEKEYS UI 
\newline
Does odd processing with PgUp PgDn keys on keyboard
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_USE_BINDING_FOR_PUT SQL
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_USE_DATABASE_STMT SQL
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_USE_FORM_SIZE FORMS/UI/RUNTIME
\newline
Aubit used to honouring the size y by
 x in the form, this has been removed.
 If you require to specify the size, it can still be used by setting A4GL_USE_FO
RM_SIZE=Y (using this is an Aubit extension - and not default informix behaviour
!)
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_USE_INDICATOR ESQL/COMPILE 
\newline
Use indicator variables in ESQL/C generated
 code
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
VISUAL RUNTIME 
\newline
Name of the editor for BLOB fields (?)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_YYDEBUG DEBUG/COMPILE 
\newline
Aubit parser debugging
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_EXDTYPE RUNTIME 
\newline
External data types support to be loaded $AUBITDIR/lib/libE
XDTYPE_?.so Currently only MPZ (large integers) are supported FIME: not sure
 if this is needed - looks like this is loaded on request: see example testmpz.4g
l into the tools/test directory.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_NULL_DECIMAL_IF_BAD RUNTIME 
\newline
Null a decimal value rather than set it
 to 0 if its invalid
\newline
=YES|NO The standard informix behaviour seems to be
 to set the value to 0 for decimals but sets dates to NULL.
 This is inconsistent and so this default behaviour is switchable via this
 configuration setting
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_BEEPONERROR RUNTIME 
\newline
Indicates that a beep should be emitted by the
 ERROR statement
\newline
=YES|NO
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FLASHONERROR RUNTIME 
\newline
Indicates that a screen flash should be emitted
 by the ERROR statement
\newline
=YES|NO Not all terminals are capable of emitting
 a screen flash.
 If a screen flash is not possible then the terminal bell is rung instead.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_REFRESH_AFTER_MOVE UI/TUI 
\newline
Issue a screen update after a cursor movement
\newline
=YES
|NO This is a screen drawing optimisation function.
 Normally a screen update is not required but there may be some instances
 where the screen cursor does not move to the right place if this isn't
 set.
 If you're not too worried about where the screen cursor is, or your application
 doesn't suffer from this problem then set this to N
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_FIRSTCOL_ONERR UI/TUI 
\newline
Move to the beginning of a field after an error
\newline
=YES|N
O Can only be set if CLR_FIELD_ON_ERROR=N See CLR_FIELD_ON_ERROR
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_CLR_FIELD_ON_ERROR UI/TUI 
\newline
Clears a field after an error
\newline
=YES|NO If this
 is set them FIRSTCOL_ONERR will never be triggered See FIRSTCOL_ONERR
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_NO_REFRESH_AFTER_SYSTEM UI 
\newline
Issue a screen refresh after any sysem command
\newline
=Y
ES|NO In Informix 4GL, the screen is not refreshed after every system command
 but only after a new screen instruction is issued.
 This means that if you are running a lot of system commands, Aubit4GL's
 screen may appear to flicker between line mode and screen mode.
 Set this to N to inhibit the automatic screen refresh.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
A4GL_NO_ARRAY_EXPAND COMPILE 
\newline
Remove the array expansion code
\newline
=YES|NO This
 is solely for backward compatibilty with older Aubit4GL versions.
 It should be set to N in all other cases..
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
RM_COMMENTS_FIRST COMPILE 
\newline
remove any comments before compiling the 4GL code
\newline
=YES|
NO This defaults to Yes, if you have problems with compilation - it may
 be that this code is getting confused.
 Try setting to N, or setting DUMP_LAST
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
GDB_ATTACH RUNTIME Attach GDB 
\newline
to the process when a Segmentation Fault occurs
\newline
=YE
S|NO This is useful for tracing back problems during runtime execution The
 first command to execute in gdb would normally be a 'bt' which should give
 something like :
\newline
#0 0x402095a9 in __wait4 () from /lib/libc.so.6
\newline
#1 0x40271ad8
 in __DTOR_END__ () from /lib/libc.so.6
\newline
#2 0x401ad506 in system () from /lib/libc.so.
6
\newline
#3 0x40038858 in A4GL_core_dump () at fglwrap.c:911
\newline
#4 <signal handler called>
\newline
#5
 0x8048bbd in aclfgl_xxx (_nargs=0) at ./x1.c:95
\newline
#6 0x8048a6d in main (argc=1,
 argv=0xbffff1d4) at ./x1.c:58
\newline
#7 0x40180baf in __libc_start_main () from /lib/libc.
so.6
\newline
Ignore everything up to the <signal handler called>, and 'frame 5' (in
 this case) should show the offending line.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
DUMP_LAST COMPILE 
\newline
output the results of the last remove comments
\newline
=YES|NO
 This will produce a file 'last' which contains the file with the comments
 removed.
 This is used to check the operation of the RM_COMMENTS_FIRST code
\end_layout

\end_body
\end_document
