'\" @(#)$Id: fglbld5.doc,v 1.1 2002-06-16 07:36:14 afalout Exp $
'\" @(#)FGLBLD: User Guide and Reference Manual
'\" @(#)Part 5 of 5
'\" -----------------------------------------------------
'\" Definitions
.ds fB \s-2\fBFGLBLD\fP\s0
.ds iR Informix-RDS
.ds sP \s-2SPI\s0
\!!rasterize=300
\!!thickness=2
'\" -----------------------------------------------------
'\"
.PH "''\s12\fHSphinx Ltd\fP\s0''"
.PF "'\s8Sphinx\s0'Page %'\s8Version $Revision: 1.1 $ $Date: 2002-06-16 07:36:14 $\s0'"
.H 1 "FGLBLD SUPPORT CODE"
There are two parts of \*(fB that use the support code.
First of all, some code is needed with each generated program;
this means the D-List code, the \*(mK rules \*cinformix.mk\*d,
and the files \*cperfaux.4gl\*d, \*crepdest.4gl\*d,
\*crepdest.4pr\*d and \*cpopstr.c\*d.
Second, there is the code needed by the custom version
of \*Cfglgo\*D and \*Cfgldb\*D.
At first sight, this should be the same as the code needed by the
generated code; however, if \*(fB is compiled using \*(iR,
it has to be run with a custom runner which has a number of
extra functions in it, and these are also supplied to the user.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "D-lists"
The D-List code consists of 6 source files and 5 manual pages.
The source files are:
.VL 1.5i 0.0i 1
.LI dlist.h
Definitions used throughout the D-List code.
.LI dlist.c
The basic D-List manipulation routines which would be used by C programs.
.LI dlistint.c
The interface from \*(i4 onto an integer D-List.
.LI dliststr.c
The interface from \*(i4 onto a string D-List.
.LI dlistdec.c
The interface from \*(i4 onto a decimal D-List.
.LI dlistdbl.c
The interface from \*(i4 onto a float D-List.
.LE 1
The interesting code is in \*cdlist.c\*d;
this actually handles the D-List proper.
The interface code in the other `\*c.c\*d' files is maintained by
parallel editing \(em a little hard work would probably allow one
file to be used for all 4 interfaces.
.P
For each of the `\*c.c\*d' files, there is a corresponding
`\*c.man\*d' file which can be printed using \*(tR or \*(nR
with the `\*c-man\*d' option.
For more information, look at the manual pages or the source code.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "MAKE rules"
The file \*cinformix.mk\*d is used to tell Augmented Make
(which is the version normally available on System V Unix)
how to compile \*(iX programs.
The rules are included by the \*cinclude\*d directive in the
\*cmakefile\*d generated by \*(fB.
Only one copy is needed per directory; it is not altered when \*(fB creates it.
.P
There is one oddity already mentioned, namely that the forms
which are generated by \*(fB have the extension `\*c.4pr\*d'
instead of `\*c.per\*d' as would normally be used.
This allows you to distinguish between form files for use with
\*(i4 and ones for use with \*(iQ (\*(pF).
The rules in \*cinformix.mk\*d handle both extensions and give
`\*c.4pr\*d' files precedence over `\*c.per\*d' files.
.P
The rules do not cover converting `\*c.4gl\*d' files into
`\*c.ec\*d' or `\*c.c\*d' files \(em there is not normally any
need to do this, and if there is, you can probably manage the
necessary changes yourself.
Similarly, there is no rule for converting `\*c.ec\*d'
files into `\*c.c\*d' files.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Other functions"
.H 3 "Transaction Logs"
If the database has a transaction log, all operations using 
update cursors must occur inside a transaction.
Further, when the transaction is
committed (or rolled back), all active (open) cursors are closed.
The seemingly anti-social behaviour makes life difficult for 
programmers, but simplifies the transaction handling code
inside the database agent and also corresponds to the ANSI standard
definition of how \s-2COMMIT WORK\s0 should behave.
.P
It also means that the program must be careful
about how it handles transactions;
it is not acceptable to put \s-2BEGIN WORK\s0 immediately in front of 
the main menu and \s-2COMMIT WORK\s0 after it for several reasons.
First, each row that is
selected by an \s-2UPDATE CURSOR\s0 is locked until either the 
next row is fetched (if the row was not changed)
or until the next \s-2COMMIT WORK\s0 (if the row was changed).
A user could edit a lot of rows of data, and each one
would be locked against other users until the \s-2COMMIT WORK\s0.
This reduces the usability of the system.
More seriously, there is normally a limit to
the number of locks the system can maintain,
so a protracted transaction
might fail simply because the user updated too many rows.
If the transaction did fail,
the user have to redo all the changes they had made,
and would be mightily displeased.
.P
At the other extreme,
each update and delete operation could be a separate transaction,
and each sequence of inserts another.
This uses the minimum number of locks,
and because the \*(fB code uses D-Lists, it gives an entirely acceptable
performance for the user.
If \s-2SCROLL CURSORS\s0 were being used in place of D-Lists,
it would imply that the \s-2SCROLL CURSOR\s0
will be re-opened every time a change was made:
this would be acceptable if the user was primarily browsing through
the data but not if they were performing a major series of updates.
'\"
'\" -----------------------------------------------------
'\"
.H 3 "Handling transaction logs"
Transaction logs can be made to come and go \(em it isn't always 
easy, but it can be done.
Ideally, the generated programs should continue to work regardless of
whether there is a transaction log or not.
To achieve this independence, a set of functions should be
used to \s-2BEGIN,\s0 \s-2COMMIT\s0 and \s-2ROLLBACK
WORK\s0, not the raw commands.
These functions are used where the analogous construct
should be invoked, but wrap the code in a conditional test which 
checks whether there is a log or not.
The functions are:
.eS
CALL begin_work()
CALL commit_work()
CALL rollback_work().
.eE
There is an additional function \*cend_work\*d which
takes an argument:
if the argument is zero, it does \s-2COMMIT WORK\s0,
otherwise it does \s-2ROLLBACK WORK\s0:
.eS
CALL end_work(opstatus)
.eE
To find out whether there is a transaction log present,
there is a function called \*ctranslog\*d which returns 1 (true) 
if there is a transaction log present and 0 (false) if not.
This routine only tests the database once,
so it is not an expensive operation, but the other routines are 
the only ones that need to use it normally.
.eS
IF translog () THEN
    MESSAGE "Transaction Logging is enabled"
END IF
.eE
By using these routines, a program can be created which will work
correctly whether or not the database has a transaction log.
.P
These transaction handling routines are part of the code in the file
\*cperfaux.4gl\*d which is produced every time an \*(sP is generated.
The code generated by \*(fB uses these routines and can be run on a database
which has a transaction log as well as a database without any transaction log,
and the transaction log can be added or removed after the program is compiled
and the program continues to work correctly.
'\"
'\" -----------------------------------------------------
'\"
.H 3 "Miscellaneous functions"
There are two other routines in \*cperfaux.4gl\*d; these are
\*cshell_escape\*d which is a primitive but effective way of
letting the user get access to the operating system, and
\*ccheck_interrupt\*d which is called inside the main menu
generated by \*(fB to clear the interrupt flag and produce a
suitable warning message.
The shell escape routine can usefully have several extra features
added; first it can loop to allow someone to enter several
commands in a row, and secondly, security control could be added
so that only privileged users could do shell escapes at all.
This second change would need to be part of an integrated
security control package.
.P
In code developed by Sphinx, the startup code in the \s-2MAIN\s0
program would call a function (normally called \*cstd_options\*d)
with a set of arguments to identify the program, the help message
file, the error log file and any necessary security clearance.
This function would also set the options in a project-standard way.
This enforces a uniform approach to options.
Note that \s-2DEFER INTERRUPT\s0 and \s-2DEFER QUIT\s0 must be
placed in the \s-2MAIN\s0 program.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Custom versions of \*Cfglgo\*D and \*Cfgldb\*D"
The shell script \*cmkfglgo\*d provided with an \*(iR version of
\*(fB copies the necessary source files from the \*(fB private
directory top the current directory and then compiles \*Cfgldb\*D
and \*Cfglgo\*D, in that order, using the makefile \*ci4glrds.mk\*d,
which is also provided.
If you wish to add extra functions to your custom versions of
\*Cfglgo\*D and \*Cfgldb\*D, you will need to edit the makefile
and also \*cfgiusr.c\*d.
When you add the functions to the list inside \*cfgiusr.c\*d,
prepare the external declaration in the same format as the one
for \*cround\*d (for example).
Then jump to the bottom of the file and (using \*Cvi\*D)
do what it says in the comment.
.P
There is a complete set of documentation for the various
facilities which are included in these versions of \*Cfglgo\*D
and \*Cfgldb\*D: take a good look \(em there may be some pleasant
surprises in store for you.
'\"
'\" -----------------------------------------------------
'\"
.H 1 "FGLBLD Installation"
The \*(fB installation process is closely modelled on the system
described in the document `Distributing Software',
or maybe the process described there is closely modelled on the
installation process developed for \*(fB \(em the relationship is
close in either case.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Compiling FGLBLD"
You will have received a set of source files which should be
copied off the distribution media into one directory.
You will need about 3 megabytes of free disc space on the file
system where the software is to be compiled, and an extra
megabyte on the file system where the software is to be installed
unless you do some backup and cleanup work prior to installing
the software.
.P
There is some minimal configuration work to be done.
There are two variants of the case-insensitive match option to
\*Cgrep\*D; some versions use `\*c-i\*d' and others use `\*c-y\*d'.
The `\*c.alt\*d' scripts are distributed to use the `\*c-y\*d'
option and may need to be modified to suit your system.
.P
To compile the software, type the relevant one of the commands:
.eS
$ make rds
$ make c4gl
.eE
Stand well back and wait.
.P
When it is complete, there will be a sub-directory called
\*cDistribution\*d which will contain all the material to be
copied onto the distribution media.
The distribution media should be made by changing into the
\*cDistribution\*d directory and then archiving everything in
that directory and below using \*Ccpio\*D or \*Ctar\*D as required.
If the software is only to be installed on the local machine,
it can be installed by running the installation process in the
\*cDistribution\*d directory \(em see the section on `Installing \*(fB'.
.P
If there are any problems, the most likely problems are:
.AL
.LI
Your machine does not support \*Cranlib\*D.
Modify \*cMakefile\*d so that the \*cRANLIB\*d line reads:
.eS
RANLIB=: ranlib
.eE
.LI
Insufficient space on the disc.
You will have to make sufficient space.
.LE
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Installing FGLBLD"
A binary distribution of \*(fB can be copied off the distribution
media onto any convenient portion of the disc as the installation
process will relocate the software if necessary.
.P
To install the software, you will need about 1 megabyte of spare disc space.
.P
The actual installation process is done by \*croot\*d, though as
no files need special privileges, it could be installed by some
other user provided the install script was suitably hacked \(em
all it requires is one line added after the line which starts
`\*cuid=\*d';
.eS
uid=0
.eE
The installation is performed by running \*c./install\*d in the
directory into which the software was copied.
All the configuration parameters can be modified by setting
environment variables.
The required parameters are:
.VL 1.5i 1
.LI "Public directory"
Specified by \*cFGLBLDBIN\*d.
Default: \*c$INFORMIXDIR/bin\*d.
Two or three small shell scripts are copied into this directory.
.LI "Private directory"
Specified by \*cFGLBLDDIR\*d.
Default: \*c/usr/fglbld\*d.
.LI "Owner"
Specified by \*cFGLUSR\*d.
Default: \*cinformix\*d.
.LI "Group"
Specified by \*cFGLGRP\*d.
Default: \*cinformix\*d.
.LI "Distribution Type"
Specified by \*cFGLTYPE\*d.
Default: \*cRDS\*d.
Alternative: \*cC4GL\*d.
.LE 1
The distribution type is normally fixed by the supplier of the software
but you may have a choice.
The public directory should normally be something like
\*c$INFORMIXDIR/bin\*d or \*c/usr/local/bin\*d which will already
be on user's search paths, but it can be specified as
\*c$FGLBLDDIR/bin\*d, in which case the designation `public
directory' becomes a misnomer.
.P
NB: it is assumed that you have the necessary version of \*(i4
installed on the system.
If you are using \*(iR, you should have a full development system
and you will need a suitable C compiler available.
.P
NB: if the public directory is already on people's search paths,
there is no need for people to modify their environment to be
able to use the \*(fB.
Otherwise, people will need to ensure that the public directory
is added to their search path.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Customising FGLBLD"
If required, the template files and code generator scripts can be
modified to conform to local (or project) standards.
The code generators are kept in \*c$FGLBLDDIR/bin\*d and have the
extension `\*c.alt\*d'.
The template files are all kept in \*c$FGLBLDDIR/src\*d.
Note that \*cfglbld.alt\*d generates all the code in the input
and report files `\fIprogram\fP\*ci.4gl\*d' and
`\fIprogram\fP\*cr.4gl\*d' without using a template, and that
all the modifications made to generated forms are made within the
`\*c.alt\*d' scripts.
.P
\fITip\fP: if you are not creating a second installation
of \*(fB for a project on a machine where a standard distribution
of \*(fB will also be available,
then create a directory called \*c$FGLBLDDIR/Originals\*d
and copy all the `\*c.alt\*d' files and all the files in
\*cFGLBLDDIR/src\*d into that directory before modifying anything.
The \*cOriginals\*d directory and all the files in it should not
have write permission for anyone.
.P
When it comes to modifying the generated code, the template file
to be edited depends on which generated file is to be modified.
The list of files is shown in Figure 16.
.DS CB
.FG "Which template file or code generator?"
.TS
box;
c|c
lfI |lfCWp10.
Generated File	Template File
=
program\*cc.4gl\*d	src/performc.4gl
_
program\*cg.4gl\*d	src/performg.4gl
_
program\*ci.4gl\*d	bin/fglbld.alt
_
program\*cm.4gl\*d	src/performm.4gl
_
program\*cr.4gl\*d	src/performr.4gl \*(iSand\*(iE
	bin/fglbld.alt
_
program\*c.mk\*d	src/perform.mk
_
program\*c.4gl\*d	bin/upopup.alt \*(iSor\*(iE
	bin/cpopup.alt \*(iSor\*(iE
	bin/mkselect.alt
_
program\*c.4pr\*d	bin/fglbld.alt \*(iSor\*(iE
	bin/cpopup.alt \*(iSor\*(iE
	bin/upopup.alt
_
program\*c.msg\*d	src/perform.msg \*(iSand\*(iE
	bin/fglbld.alt
.TE
.DE
'\"
'\" -----------------------------------------------------
'\"
.H 3 "Standard Changes"
Some of the changes likely to be made to the generated source code
can be classed as normal.
For example, the code which is generated by the distributed version of \*(fB
conforms either to Sphinx's standards
or to the author's private standards where there is
no comparable standard laid down by Sphinx
and other people and establishments will want to use different standards.
'\"
'\" -----------------------------------------------------
'\"
.H 4 "Changing the SCCS header information."
As distributed, the generated files have a short header of
5 lines (including a line with only an opening brace and a line with only a
closing brace), as illustrated by Figures 10 and 13.
This header contains a suitable SCCS identification string for the generated
file, plus information about the version of \*(fB which generated the code,
and a brief indication of what is in the file.
Many projects use more elaborate headers; these can be provided by editing
the template files and generator files.
.P
You are required to keep the version information provided by \*(fB
in the generated source code:
it is a condition of your licence to use the software.
'\"
'\" -----------------------------------------------------
'\"
.H 4 "Modifying the generated code."
Some aspects of the generated code will often need modifying.
For example, the main program will often need improving to call
a standard option-setting startup routine (\*cstd_options\*d at Sphinx).
This will normally imply replacing the \s-2OPTIONS\s0 in \*csrc/performm.4gl\*d
with a call to the appropriate function with sensible default arguments.
.P
Some minor cosmetic surgery can be applied; for example, the code in
\*cins_\*d\fIprogram\fP may be modified to remove the loop and the code in
\*cmnu_\*d\fIprogram\fP would be modified to make Add the next
option after an Add operation.
.P
Similarly, the position and format of the \fIn\fP-out-of-\fIm\fP counter
may need to be modified \(em adjustments are made in \*ccsr_\*d\fIprogram\fP.
.P
In general, more radical changes are not supported.
You could make them, but you are responsible for the results.
'\"
'\" -----------------------------------------------------
'\"
.H 4 "Adding extra standard code."
Standard code does not need editing to be compiled.
By definition, it is independent of the database in use.
The functions in the code do not change name
depending on the table for which the code is generated.
.P
There is a line in \*cbin/fglbld.alt\*d which looks like:
.eS
AUX="perfaux.4gl repdest.4gl nxtfield.4gl repdest.4pr"
.eE
The files listed on this line are copied verbatim from the source directory
to the directory where the \*(sP is being created.
You may, of course, add your own files to this list.
'\"
'\" -----------------------------------------------------
'\"
.H 4 "Adding extra generated code."
Generated code is systematically modified when the code is generated.
The template file is stored in the source directory, and the file name
should start \*cperform\*d and should have a suitable extension.
For example, one project introduced a file called \*cperformu.4gl\*d.
.P
If the generated file does not rely on some action being written out long-hand
for each column, the file should be treated in the same way as
\*cperformg.4gl\*d is.
There are two lines in \*cbin/fglbld.alt\*d which will need changing:
.eS
for ext in c.4gl g.4gl m.4gl
for ext in c.4gl g.4gl i.4gl m.4gl r.4gl .mk
.eE
The first of these is at approximately line 200, the second at approximately
line 650; these numbers are subject to change.
.P
If the new generated code must iterate over the columns, you will need to
choose either the sequence which generates \fIprogram\fP\*cr.4gl\*d or the
sequence which generates \fIprogram\fP\*ci.4gl\*d as the basis for your own
code generation work.
It is suggested that you should write an auxilliary script which is called
from \*cbin/fglbld.alt\*d rather than try to expand that script,
which is already rather too large for comfort.
The environment checking code at the top of \*cfglbld.alt\*d can be used
in your script \(em how do you think scripts such as \*ccpopup.alt\*d were
created in the first place?
Be sure that you add your generated file to the second of the two lists shown
above \(em these are what get edited.
'\"
'\" -----------------------------------------------------
'\"
.H 4 "Template comonent names."
The names of the parts of the database and so on which can be
edited systematically in the template files are called template components.
The template components names always start with an `X' or an `x'.
The values are available are shown in Figure 17.
.DS CB
.FG "Template variables and their meaning."
.TS
box;
c | c | c
lfCWp10 | l | lw(2.5i).
Variable	Case	Meaning
=
Xdbase	AU	Database name
xdbase	AL	Database name
_
Xtable	IC	Table name
xtable	AL	Table name
xtabname	AL	Table name (\fIarchaic\fP)
_
Xpkey	IC\(dg	Primary key column name
xpkey	AL	Primary key column name
Xpktype	AU	Primary key column type
_
Xcollist	AL	T{
List of column names in the order in which they occur in
the table definition, separated by spaces.
T}
_
Xmenu	AU	Menu title (\fImay include blanks\fP)
Xselected	UD	T{
Type of object being selected.
Not defined for an \*(sP or a fetch function.
T}
_
Xform	AL	Basename of files
program	AL	Basename of files (\fIinconsistent\fP)
_
Xopt_ins	YN	Generate insert code
Xafterfield	YN	Include \s-2AFTER FIELD\s0 code
Xbeforefield	YN	Include \s-2BEFORE FIELD\s0 code
Xcontrolp	YN	Include F6/^P code
Xcontrolb	YN	Include F5/^B code
Xopt_upd	YN	Generate update code
Xopt_del	YN	Generate delete code
Xopt_rep	YN	Generate report code
Xopt_sh	YN	Generate shell escape code
Xinput	YN	Generate input code
_
Xpkey_dec	YN	Primary key is rowid
xpkvalue	LC	T{
Name of variable storing primary key value.
Normally \*cwr_xtable.xpkey\*d, but \*cct_xtable.rowid\*d
if the primary key is \s-2ROWID\s0.
T}
.TE
.SP
.TS
box;
c s
c|c
l|l.
Key to case values
_
Code	Meaning
=
UC	Upper-case only
LC	Lower-case only
IC	Initial capital, rest lower-case
IC\(dg	Initial capital except for \s-2ROWID\s0
UD	User defined (lower case recommended)
YN	Upper-case `Y' or `N' only
.TE
.DE
Code which has to be compiled conditionally in the \*(sP
is handled by the options (with case flag `YN' in Figure 17).
If the flag is set to `Y', the code is included; if the flag is
set to `N', the code is excluded.
The code for this conditional inclusion is marked by lines which start:
.eS
#Xopt_ins
\&...
#Xopt_sh
#Xinput
#Xpkey_dec
.eE
For illustrations of how all this works, look at the code in the file
\*csrc/performc.4gl\*d and \*cbin/fglbld.alt\*d.
'\"
'\" -----------------------------------------------------
'\"
.H 3 "Non-standard Changes"
Anything which involves modifying the \*(i4 front-end program is
a non-standard change and is totally unsuported.
Adding extra options or eliminating unwanted options or adding extra
facilities is difficult and not supported.
The code works, and some of it was generated with a fairly modern
version of \*(fB against a specially designed database with
tables suitable for the requirements of \*(fB.
Any changes may break almost anything; you are on your own.
.P
Anything which changes the error handling in the generated code
is unsupported.
You can modify the error handling if you wish, but you are on your own.
Eliminating error handling is most unwise.
.P
Any changes to the cursor handling in the generated code is unsupported.
Any changes in the D-List code is unsupported.
Any changes in the way transactions are handled is unsupported.
Adding table-level locking requires extreme care if the same compiled
code is to work on the database regardless of whether the database
has a transaction log or not.
The conundrum to be solved is that if there is no log, the table lock
has to be released explicitly; if the database has a transaction log,
the table lock cannot be released explicitly but is released by a
\s-2COMMIT WORK\s0 or \s-2ROLLBACK WORK\s0 statement.
If the database has a log, the lock must be applied within a transaction;
it can be applied at any time if there is no log.
'\"
'\" -----------------------------------------------------
'\"
.H 3 "Testing a customised generator."
When debugging a modified generator script, it is convenient to have a shell
script which sets all the environment variables used by the `\*c.alt\*d'
scripts available to save having to run the front-end program all the time.
The \*(i4 program \*cfglbld\*d will prexserve these scripts if the environment
variable \*cDEBUG\*d is set to any value other than an empty string.
The scripts normally live in \*c/tmp\*d where they will be cleaned up after a
few days, but they could be copied to the current directory
and renamed for reuse.
'\"
'\" -----------------------------------------------------
'\"
.H 1 "REJECTED STRATEGIES"
Many moons ago, \*(fB ran with \s-2SCROLL CURSORS\s0.
Only a few routines in the `\fIprogram\fP\*cc.4gl\*d' file would
have to be changed to use \s-2SCROLL CURSORS\s0 again, but there
would be unpleasant consequences for the performance.
Either the currency (up-to-date-ness) of the lists must be sacrificed
to provide good performance, or performance must be sacrificed to
improve the currency of the lists.
.P
\*(fB uses the `\*c.4pr\*d' extension for \*(i4 form source files.
An alternative extension `\*c.4gf\*d' was rejected as a Sphinx internal
standard because it might subsequently be used by \*(iX.
.P
The current version of \*(fB uses \*(i4 report code to generate a
shell script that runs the code generator shell script rather than
have all the skeletal code embedded within the \*(i4 program.
This has many advantages, not least of which are that the \*(i4 is simpler,
and it is infinitely easier to modify the shell scripts than it is
to modify \*(i4 code, even with \*(iR.
The code basically uses \*Ccp\*D and \*Csed\*D and \*Cecho\*D to generate the
code, and fortunately, all modern shells have \*Cecho\*D as a built-in command
so the overhead of process forking and execing is reduced.
.P
All control parameters to the code generator scripts (the `\*c.alt\*d' files)
are environment variables, not arguments.
This is a bit nasty \(em analogous to using global variables, really \(em
but at least the values are self-documenting and defaults can easily be
supplied for undefined values and so on.
It was decided not to use arguments since the full set of arguments would need
to be specified every time the program was called, and the standard Bourne
shell does not allow references to `\*c$10\*d' and higher argument numbers.
(To be absolutely precise, the Bourne shell treats `\*c$10\*d' as the value of
`\*c$1\*d' with a zero `\*c0\*d' appended.)
'\"
'\" -----------------------------------------------------
'\"
.H 1 "WHAT IS MISSING?"
There are features missing from both \*(fB and \*(i4 which would
make life easier for the user of \*(fB.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Extensions for Master/Detail Relationships"
A master/detail relationship exists between two tables when an entry 
in the master table may have associated with it zero or more
entries in the detail table.
The classic example of this is a sales order;
the master table will have the information about which customer 
is doing the buying, the address to ship the goods to, order 
date, purchase order number, etc, and the detail table will list 
the quantity, part number, discount, etc for each line of the order.
.P
\*(pF provides the Master and Detail options.
Once the master values have been specified, the user chooses 
the Detail option and \*(pF automatically selects all the rows that 
match the master values.
The user can then edit these in the 
same way as the master values
\(em notably they can add, update and delete detail rows.
However, the add process is uncomfortable since it is necessary 
to use the add option, enter the data and hit the \s-2ESCAPE\s0
key for each row of data.
When all the detail data has
been entered, the user has to choose the Master option again, 
move on to (or add) the next set of Master data,
and then use the Detail option again.
.P
Using \*(i4, this process can be simplified because the user can 
be allowed to enter the master data, and when that is done,
the program can give the user an \s-2INPUT ARRAY\s0 to enter the
Detail data (no questions asked, no fiddle-faddle, just enter the data).
It does \s-2COMMIT WORK\s0,
for the second time, the program can insert all the data into the
database, and the user can add the next master information.
The update process should be a little different: it should generally show 
as much of detail data as there is room for and then
offer a menu which allows the user to update either the master 
or the detail data.
The Exit option of this sub-menu should have yet another
sub-menu with options Save-and-Exit, Discard-and-Exit and 
Resume-Editing, with the obvious meanings.
.P
The same input routines should be used in both
the Update and Add options.
The Delete option will delete the master
record and all the corresponding detail records.
In general, the Query,
Next and Previous option will only deal with the master record; 
there should usually be a Show option with fills in all the 
details on request.
.P
This scheme may seem too elaborate but it has two advantages; 
first, the user can feel that they are in control,
and second, it can be extended easily to cope with complex 
situations where one table is the master of several detail tables.
It does not handle a three tier master/\%detail/\%sub-detail relationship,
but this would need to be
handled very carefully in any case to avoid confusing the user.
.P
Throughout this description, terms such as should and could have 
been used to indicate that the method outlined here can be modified.
For example, with some master/detail relationships,
a repeating Add would not be desirable.
The relationships discussed have been very closely bound together,
and each master record has been master of but a few detail records (say 1-40).
If the relationship is not as close,
or if many detail records may apply to one master,
it may be better to implement a full simplified
\*(pF interface for the details, so that the user can
edit the details in the same general way as in \*(pF.
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Better default report facilities"
The report facility provided by \*(fB is crude;
a better report generator facility would allow for a screen-based
report using a form to display one page of information at a time,
and would probably also provide more powerful facilities for
controlling the layout of the reports for printers\*F.
.FS
InFourGen-Report is supplied as a separate product from
InFourGen-Screen; improved report facilities in \*(fB would
probably be provided as a separate, compatible product, too.
.FE
'\"
'\" -----------------------------------------------------
'\"
.H 2 "Features missing from \*(i4"
For a fuller list of features which \*(i4 is lacking, see the
document `Possible Improvements to Informix-4GL'.
The ones which would make most difference to \*(fB-generated code are:
.AL 1
.LI
Dynamically configurable report dimensions.
.LI
User-defined types as in Pascal.
.LI
A proper mechanism for passing arrays and records as arguments to functions.
.LI
Better control within \s-2INPUT ARRAY\s0.
.LI
The ability to specify that \fIn\fP rows of data have been
initialised in the \s-2INPUT ARRAY\s0 and that the user cannot
add rows to this list, nor delete rows from the list.
.LE 1
'\"
'\" -----------------------------------------------------
'\"
.H 1 "WHAT MAY CHANGE?"
.AL 1
.LI
If it seems necessary for the master/detail system, \*(fB will
acquire the ability to parse an existing form and generate code
to handle that form.
This would imply that reordering the fields would be done by the
user before any code was generated, and that \*(fB would handle
the reordered input automatically.
.LI
More detailed information may be provided so that the generated
code can automatically generate the code for the columns which
need popup functions, and possibly even do some of the validation handling.
This would need code to handle an \s-2INPUT ARRAY\s0 pre-initialised
with the complete list of the table's columns.
.LI
It would be possible to generate fetch functions with a larger cache
than the one record cache currently in use.
.LI
A cleverer report facility may be provided.
.LI
It should be possible to specify the order in which the data should be
sorted so that the user sees the data in a suitable order.
This would be required in both the \*(sP and popup definition screens.
At the moment, the data is in ascending order of the primary key column.
This is often a sensible choice,
but not when the primary key has to \s-2ROWID\s0.
The extra flexibility should be available.
.LI
At some stage, the process which specifies the \*(sP may have an
\s-2INPUT ARRAY\s0 facility which would allow the detailed validation
required for each column to be specified,
including whether there should be a popup on the column
(and if so, should it be generated, and what table does it cross-refer),
and whether there is a lookup needed
(if there is a popup, there should be a lookup, and the converse is often true),
and so on.
.LE
