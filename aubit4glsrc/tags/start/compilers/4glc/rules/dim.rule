dim_section : 
              DEFINE_TYPE identifier {
              	dim_set_name($<str>3);
              }
                              AS dim_dtype
;

dim_dtype            : 
                                              dim_array_variable 
                              |            dim_record_variable 
                              |            CHAR {dim_push_type("char","1",0);}

                              |            CHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET {dim_push_type("char",$<str>3,0);}
                              |            VARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET
{dim_push_type("char",$<str>3,0);}
                              |            VARCHAR OPEN_BRACKET INT_VALUE COMMA INT_VALUE
CLOSE_BRACKET {dim_push_type("char",$<str>3,0);}
                              |            INTEGER {dim_push_type("long",0,0);}
                              |            SMALLINT {dim_push_type("integer",0,0);}
                              |            KWFORM {dim_push_type("FORM",0,0);}
                              |            DECIMAL {
char buff[256];
sprintf(buff,"%d",16*256+2);
dim_push_type("fgldecimal",buff,0);
}
                              |            DECIMAL OPEN_BRACKET INT_VALUE CLOSE_BRACKET {

char buff[256];
sprintf(buff,"%d",atoi($<str>3)*256+2);
dim_push_type("fgldecimal",buff,0);
}
                              |            DECIMAL OPEN_BRACKET INT_VALUE COMMA INT_VALUE
CLOSE_BRACKET {
char buff[256];
sprintf(buff,"%d",atoi($<str>3)*256+atoi($<str>5));
dim_push_type("fgldecimal",buff,0);
}
                              |            MONEY {dim_push_type("fglmoney",0,0);}
                              |            MONEY OPEN_BRACKET INT_VALUE CLOSE_BRACKET
{dim_push_type("fglmoney",0,0);}
                              |            MONEY OPEN_BRACKET INT_VALUE COMMA INT_VALUE
CLOSE_BRACKET {dim_push_type("fglmoney",0,0);}
                              |            FLOAT {dim_push_type("double",0,0);}
                              |            SMALLFLOAT {dim_push_type("float",0,0);}
                              |            DATE {dim_push_type("fgldate",0,0);}
                              |            BYTE {dim_push_type("fglbyte",0,0);}
                              |            TEXT {dim_push_type("fgltext",0,0);}
                              |            DATETIME datetime_qual {
dim_push_type("struct dtime ",$<str>2,0);
}
                              |            INTERVAL interval_qual {dim_push_type("struct ival ",0,0);}
                              |            dim_like_var
{dim_push_like($<str>1);fflush(stdout);printcomment("/*added(XXXXX)\n */");} 
              ;



dim_like_var      : 
LIKE  tab_name  DOT col_name  {
printcomment("/*column like(ZZZ)\n*/");
sprintf($<str>$,"%s.%s",$<str>2,$<str>4)
; printcomment ("/*set col...(ZZZ)\n*/");}
;


dim_array_variable          : 
ARRAY OPEN_SQUARE number_arr_list CLOSE_SQUARE {
dim_push_type(0,0,$<str>3);
}
OF dim_dtype
|
ASSOCIATE op_char assoc_open_bracket INT_VALUE assoc_close_bracket
WITH_ARRAY OPEN_SQUARE number_arr_assoc 
CLOSE_SQUARE 
{
dim_push_associate($<str>4,$<str>8);
dim_push_type(0,0,$<str>8);
}
OF dim_dtype  {
dim_pop_associate();

}
;



dim_record_variable        : RECORD {dim_push_record();} dim_def_part END_RECORD
{dim_pop_record();}
|            RECORD_LIKE {dim_push_record();debug("Like\n");} identifier DOT MULTIPLY
                                  {debug("Table:%s\n",$<str>3);
                                  dim_push_rectab($<str>3);
                                  dim_pop_record();} 

;


dim_def_part : dim_def_part2 |  dim_def_part COMMA dim_def_part2
;

dim_def_part2 : dim_var_def_list dim_dtype
;

dim_var_def_list	: dim_var_def_name
	| dim_var_def_list COMMA dim_var_def_name 
	;

dim_var_def_name	:	identifier { dim_push_name($<str>$); } ;



