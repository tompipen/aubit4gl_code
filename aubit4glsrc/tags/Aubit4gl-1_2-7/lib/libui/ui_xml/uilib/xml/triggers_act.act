<!DOCTYPE actions SYSTEM "flexml-act.dtd">
<actions>
<top>
<![CDATA[

#include <stdio.h>                  
#include <stdlib.h>                  
#include <string.h>
#include "attr.h"
#include "debug.h"
static char *inbuff=0;
char *myinputptr;
int myinputlim;


static int haveLexedAttr=0;
static struct s_attr lexed_attr;
static struct s_syncvalues sync;

struct s_attr *xml_parse(char *s) {
	int rval;
        inbuff=s;
	if (haveLexedAttr==0) {
		// first time through
		haveLexedAttr=1;
		lexed_attr.id=0;
		lexed_attr.envelopeId=0;
		lexed_attr. yourId=0;
		lexed_attr. data=0;
		lexed_attr. type=0;
		lexed_attr. lastkey=0;
		lexed_attr. infield=0;
		lexed_attr. fileid=0;
		lexed_attr. programname=0;
	}
		if (lexed_attr.id!=0) {
			free(lexed_attr.id);
			lexed_attr.id=0;
		}

		if (lexed_attr.envelopeId!=0) {
			free(lexed_attr.envelopeId);
			lexed_attr.envelopeId=0;
		}

		if (lexed_attr. yourId!=0) {
			free(lexed_attr. yourId);
			lexed_attr. yourId=0;
		}

		if (lexed_attr. data!=0) {
			free(lexed_attr. data);
			lexed_attr. data=0;
		}

		if (lexed_attr. type!=0) {
			free(lexed_attr. type);
			lexed_attr. type=0;
		}

		if (lexed_attr. lastkey!=0) {
			free(lexed_attr. lastkey);
			lexed_attr. lastkey=0;
		}

		if (lexed_attr. infield!=0) {
			free(lexed_attr. infield);
			lexed_attr. infield=0;
		}

		if (lexed_attr. fileid!=0) {
			free(lexed_attr. fileid);
			lexed_attr. fileid=0;
		}

		if (lexed_attr. programname!=0) {
			free(lexed_attr. programname);
			lexed_attr. programname=0;
		}


        myinputlim=strlen(s);
        myinputptr=inbuff;
        memset(&lexed_attr,0, sizeof(struct s_attr));

	if (strlen(s)< 1000) {
        	UIdebug(3,"INPUT = %s\n",s);
	}

        rval=xml_yylex(); 


	if (rval==0) {
                return &lexed_attr;
        } else {
                printf("X2 - yylex failed (%s) rval=%d\n",s,rval);
                return &lexed_attr;
        }
}

int my_yyinput(char *buf,int maxsize) {
int n=attr_min(maxsize,myinputlim);
if (n>0) {
        memcpy(buf,myinputptr,n);
        myinputptr+=n;
        myinputlim-=n;
        }
return n;
}


]]>
</top>

<start tag='TRIGGERED'>
	<![CDATA[ 
	{
		sync.vals=0;
		sync.nvalues=0;
		lexed_attr.id=0;
		lexed_attr.envelopeId=0;
		lexed_attr.yourId=0;
		lexed_attr.data=0;
		lexed_attr.type=0;
		lexed_attr.scrline=0;
		lexed_attr.arrline=0;
		lexed_attr.arrcount=0;
		lexed_attr.lastkey=0;
		lexed_attr.lastcursor=0;
		lexed_attr.infield=0;
                lexed_attr.filelen=-1;
                lexed_attr.fileid=0;
                lexed_attr.bufferTouched=0;
                lexed_attr.programname=0;

		if ({ID}) lexed_attr.id=strdup({ID}); 
		if ({ENVELOPEID}) lexed_attr.envelopeId=strdup({ENVELOPEID}); 
		if ({YOURID}) lexed_attr.yourId=strdup({YOURID}); 
		if ({TYPE}) lexed_attr.type=strdup({TYPE}); 
		if ({DATA}) lexed_attr.data=strdup({DATA}); 
		if ({SCRLINE}) lexed_attr.scrline=atoi({SCRLINE}); 
		if ({ARRLINE}) lexed_attr.arrline=atoi({ARRLINE}); 
		if ({ARRCOUNT}) lexed_attr.arrcount=atoi({ARRCOUNT}); 
		if ({LASTKEY}) lexed_attr.lastkey=strdup({LASTKEY}); 
		if ({LASTCURSOR}) lexed_attr.lastcursor=atol({LASTCURSOR}); 
		if ({INFIELD}) lexed_attr.infield=strdup({INFIELD}); 
		if ({FILEID}) lexed_attr.fileid=strdup({FILEID});
		if ({BUFFERTOUCHED}) lexed_attr.bufferTouched=atoi({BUFFERTOUCHED});
		if ({PROGRAMNAME}) lexed_attr.programname=strdup({PROGRAMNAME});
                if ({FILELEN}) lexed_attr.filelen=atoi({FILELEN});

	//printf("Arrline set to %d\n",lexed_attr.arrline);
		
	}
	]]>
</start>
<end tag='TRIGGERED'>
	<![CDATA[ 
	{
		/* dump_attr(&lexed_attr); */
	}
	]]>
</end>

<start tag='SYNCVALUES'>
	<![CDATA[ 
	{
		/* Just to be sure these are cleared down... */
		if (sync.vals) {
			int a;
			for (a=0;a<sync.nvalues;a++) {
				if (sync.vals[a].value) 	free(sync.vals[a].value);
				if (sync.vals[a].fieldname) 	free(sync.vals[a].fieldname);
			}
			free(sync.vals);
		}
                sync.nvalues=0;
                sync.vals=0;
	}
	]]>
</start>

<end tag='SYNCVALUES'>
	<![CDATA[ 
	{
		memcpy(&lexed_attr.sync,&sync,sizeof(sync));
	}
	]]>
</end>

<end tag='SYNCVALUE'>
	<![CDATA[ 
	{
		sync.nvalues++;
		sync.vals=realloc(sync.vals, sizeof(struct s_syncvalue)*sync.nvalues) ;

                if ({FIELDTYPE}) {
                        sync.vals[sync.nvalues-1].fieldtype=atoi({FIELDTYPE});
                } else {
                        sync.vals[sync.nvalues-1].fieldtype=-1;
                }

		sync.vals[sync.nvalues-1].fieldname=strdup({FIELDNAME});
		sync.vals[sync.nvalues-1].value=strdup(pcdata);
		sync.vals[sync.nvalues-1].touched=atoi({TOUCHED});

	}
	]]>
</end>

<start tag='SYNCROWS'>
	<![CDATA[ 
	{
	if (lexed_attr.rows.row) {
		/* free_rows(lexed_attr.rows.row); */
	}
	lexed_attr.rows.nrows=0;
	lexed_attr.rows.row=0;
	}
	]]>
</start>
<start tag='ROW'>
	<![CDATA[ 
	{
		lexed_attr.rows.nrows++;
		lexed_attr.rows.row=realloc(lexed_attr.rows.row,sizeof(struct s_row)* lexed_attr.rows.nrows);
		lexed_attr.rows.row[lexed_attr.rows.nrows-1].rownum=atoi({SUBSCRIPT});
		lexed_attr.rows.row[lexed_attr.rows.nrows-1].sync.nvalues=0;
		lexed_attr.rows.row[lexed_attr.rows.nrows-1].sync.vals=0;
	}
	]]>
</start>

<end tag='ROW'>
	<![CDATA[ 
	{
		int a;
		lexed_attr.rows.row[lexed_attr.rows.nrows-1].sync.nvalues=sync.nvalues;
		lexed_attr.rows.row[lexed_attr.rows.nrows-1].sync.vals=malloc(sizeof(struct s_syncvalue)*sync.nvalues);
		for (a=0;a<sync.nvalues;a++) {
			lexed_attr.rows.row[lexed_attr.rows.nrows-1].sync.vals[a].value=strdup(sync.vals[a].value);
			lexed_attr.rows.row[lexed_attr.rows.nrows-1].sync.vals[a].fieldtype=sync.vals[a].fieldtype;
			lexed_attr.rows.row[lexed_attr.rows.nrows-1].sync.vals[a].fieldname=strdup(sync.vals[a].fieldname);
		}
	}
	]]>
</end>
<main/>
</actions>
