
key_val_sl : KW_KEY key_do_sl {$<str_list>$=$<str_list>2;};




single_key_val : KW_KEY key_do {strcpy($<str>$,$<str>2);}
;

key_do	: key_value  {strcpy($<str>$,$<str>1);}
	| OPEN_BRACKET key_value_list CLOSE_BRACKET  {strcpy($<str>$,$<str>2);}
;


key_do_sl	: key_value  {
		$<str_list>$=malloc(sizeof(str_list));
		$<str_list>$->str_list_entry.str_list_entry_len=1;
		$<str_list>$->str_list_entry.str_list_entry_val=malloc(sizeof($<str_list>$->str_list_entry.str_list_entry_val[0]) * $<str_list>$->str_list_entry.str_list_entry_len);
		$<str_list>$->str_list_entry.str_list_entry_val[$<str_list>$->str_list_entry.str_list_entry_len-1]=strdup($<str>1);
	}
	| OPEN_BRACKET key_value_list_sl CLOSE_BRACKET  {
		$<str_list>$=$<str_list>2;
	}
;


key_value_list_sl : key_value  {
			$<str_list>$=malloc(sizeof(str_list));
			$<str_list>$->str_list_entry.str_list_entry_len=1;
			$<str_list>$->str_list_entry.str_list_entry_val=malloc(sizeof($<str_list>$->str_list_entry.str_list_entry_val[0]) * $<str_list>$->str_list_entry.str_list_entry_len);
			$<str_list>$->str_list_entry.str_list_entry_val[$<str_list>$->str_list_entry.str_list_entry_len-1]=strdup($<str>1);
		}
		| key_value_list_sl KW_COMMA key_value {
			$<str_list>$=$<str_list>1;
			$<str_list>$->str_list_entry.str_list_entry_len=$<str_list>1->str_list_entry.str_list_entry_len+1;
			$<str_list>$->str_list_entry.str_list_entry_val=realloc($<str_list>1->str_list_entry.str_list_entry_val, sizeof($<str_list>$->str_list_entry.str_list_entry_val[0]) * $<str_list>$->str_list_entry.str_list_entry_len);
			$<str_list>$->str_list_entry.str_list_entry_val[$<str_list>$->str_list_entry.str_list_entry_len-1]=strdup($<str>3);

		}
;


key_value_list : key_value | key_value_list KW_COMMA key_value {
	SPRINTF2($<str>$,"%s||%s",$<str>1,$<str>3);
}
;

key_value : key_value_1 
;

key_value_1 : 	KW_FKEY 
	| 	KW_CTRL_KEY 
	| 	KW_INTERRUPT 
	| 	KW_ACCEPT 
	|       KW_SINGLE_KEY {strcpy($<str>$,$<str>1);}
        |       KW_ESCAPE {strcpy($<str>$,"escape");}
        |       KWUP {strcpy($<str>$,"up");}
        |       KW_HELP {strcpy($<str>$,"help");}
        |       KWDOWN {strcpy($<str>$,"down");}
        |       KW_RETURN {strcpy($<str>$,"return");}
        |       KW_DELETE {strcpy($<str>$,"delete");}
        |       KW_INSERT {strcpy($<str>$,"insert");}
        |       KW_TAB {strcpy($<str>$,"tab");}
        |       KW_LEFT {strcpy($<str>$,"left");}
        |       KW_RIGHT {strcpy($<str>$,"right");}     
        |       KW_NEXTPAGE {strcpy($<str>$,"nextpage");}     
        |       KW_NEXT {strcpy($<str>$,"nextpage");}     
        |       KW_PREVPAGE {strcpy($<str>$,"prevpage");}     
        |       KW_PREVIOUS {strcpy($<str>$,"prevpage");}     
	|       CHAR_VALUE { rm_quotes($<str>1); strcpy($<str>$,$<str>1); }
;


idle_time: INT_VALUE {$<integer_val>$=atoi($<str>1);}
| INT_VALUE IDLE_SECONDS {$<integer_val>$=atoi($<str>1);}
| INT_VALUE IDLE_MINUTES {$<integer_val>$=atoi($<str>1)*60;}
| INT_VALUE IDLE_HOURS {$<integer_val>$=atoi($<str>1)*60*60;}
;


