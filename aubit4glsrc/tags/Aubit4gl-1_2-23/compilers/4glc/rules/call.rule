/*
=====================================================================
                        Source: call.rule
=====================================================================
*/


call_cmd	: FCALL atline {set_cmdlineno($<integer_val>2);} call_ext { set_cmdlineno($<integer_val>2); $<cmd>$=$<cmd>4;}
;


copyback_cmd : COPYBACK ensured_variable_usage_expression {
	$<cmd>$=new_copyback_cmd($<ptr>2);
}
;


call_ext: function_call_expr opt_return {
   		$<cmd>$=new_call_cmd(chk_expr($<ptr>1),$<ptr_list>2);
		//start_bind('i',0);
	}
	| member_fcall opt_return {
   		$<cmd>$=new_call_cmd(chk_expr($<ptr>1),$<ptr_list>2);
	}
   | DIALOGKEYSETLABEL OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_fcall("fgl_dialog_setkeylabel",$<ptr_list>3,A4GL_compiling_module_basename(),lastlineno,get_namespace("fgl_dialog_setkeylabel"));
   		$<cmd>$=new_call_cmd(chk_expr($<ptr>$),NULL);
		//start_bind('i',0);
	}
   | DIALOGSETCURRLINE OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_fcall("fgl_dialog_setcurrline",$<ptr_list>3,A4GL_compiling_module_basename(),lastlineno,get_namespace("fgl_dialog_setcurrline"));
   		$<cmd>$=new_call_cmd(chk_expr($<ptr>$),NULL);
		//start_bind('i',0);
	}
   | DIALOG_DOT NAMED OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		char buff[256];
		SPRINTF1(buff,"fgl_dialog_%s",downshift($<str>2));
		$<ptr>$=A4GL_new_expr_fcall(buff,$<ptr_list>4,A4GL_compiling_module_basename(),lastlineno, get_namespace(buff) );
   		$<cmd>$=new_call_cmd(chk_expr($<ptr>$),NULL);
		//start_bind('i',0);
	}
   | FORM_IS_COMPILED OPEN_BRACKET identifier KW_COMMA func_expr_call_args CLOSE_BRACKET {
			expr_str *e;
			e=A4GL_new_expr_form_is_compiled($<str>3, $<ptr_list>5,A4GL_compiling_module_basename(),lastlineno);
   			$<cmd>$=new_call_cmd(e,NULL);
	}
   | FORM_IS_COMPILED OPEN_BRACKET identifier CLOSE_BRACKET {
			expr_str *e;
			e=A4GL_new_expr_form_is_compiled($<str>3, NULL,A4GL_compiling_module_basename(),lastlineno);
   			$<cmd>$=new_call_cmd(e,NULL);
   }
   | KW_CHANNEL_WRITE OPEN_BRACKET func_expr_call_args CLOSE_BRACKET  opt_return {
		char buff[200];
		$<ptr>$=A4GL_new_expr_shared_fcall("channel", "write",$<ptr_list>3,A4GL_compiling_module_basename(),lastlineno, get_namespace("channel::write"),buff);
		if ($<ptr>$==0) {
			a4gl_yyerror(buff);
			$<cmd>$=NULL;
		} else {
   			$<cmd>$=new_call_cmd(chk_expr($<ptr>$),$<ptr_list>5);
		}
		
        }


;






opt_return 	:  {$<ptr_list>$=0;}
		| RETURNING expanded_ibind_var_list_with_null {$<ptr_list>$=$<ptr_list>2; inc_var_assigned_from_binding_list($<ptr_list>2);}
;



opt_without_waiting: {$<integer_val>$=0;} | WITHOUT_WAITING {$<integer_val>$=1;}
;


opt_func_call_args : { $<ptr_list>$=0; }
		|  func_expr_call_args { $<ptr_list>$=expand_variables_in_expr_str_list($<ptr_list>1,0,1); }
;

func_call_args :  func_expr_call_args { $<ptr_list>$=expand_variables_in_expr_str_list($<ptr_list>1,0,1); }
;

func_expr_call_args	: func_arg { $<ptr_list>$=A4GL_new_ptr_list($<ptr>1); }
	| func_expr_call_args KW_COMMA func_arg { $<ptr_list>$=A4GL_new_append_ptr_list($<ptr_list>1,$<ptr>3); }

;



func_arg :	fgl_expr_c  {$<ptr>$=$<ptr>1;}
;

remote_host_name : CHAR_VALUE | identifier { SPRINTF1($<str>$,"\"%s\"",$<str>1); }
;

remote_func_name : identifier 			{ SPRINTF1($<str>$,"\"%s\"",$<str>1); } 
		|  identifier KW_DOT identifier 	{ SPRINTF2($<str>$,"\"%s.%s\"",$<str>1,$<str>3); }
;


/* ============================= call.rule ========================== */
