/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _FGL_H_RPCGEN
#define _FGL_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef char *str;

typedef char *sql_ident;

enum dt_display_type {
	DT_DISPLAY_TYPE_LINE = 0,
	DT_DISPLAY_TYPE_AT = 1,
	DT_DISPLAY_TYPE_MENUITEM = 2,
	DT_DISPLAY_TYPE_MAIN_CAPTION = 3,
	DT_DISPLAY_TYPE_FIELD_LIST = 4,
	DT_DISPLAY_TYPE_FORM_FIELD = 5,
	DT_DISPLAY_TYPE_FORM_CAPTION = 6,
	DT_DISPLAY_TYPE_STATUSBOX = 7,
};
typedef enum dt_display_type dt_display_type;

struct form_field {
	str form;
	struct fh_field_list *field_list;
};
typedef struct form_field form_field;

struct x_y {
	struct expr_str *y;
	struct expr_str *x;
};
typedef struct x_y x_y;

struct s_full_col {
	str tab;
	str col;
};
typedef struct s_full_col s_full_col;

struct s_exchange_clobber {
	str origval;
	str newval;
	str important;
};
typedef struct s_exchange_clobber s_exchange_clobber;

enum e_scope {
	E_SCOPE_NOTSET = 0,
	E_SCOPE_LOCAL = 1,
	E_SCOPE_REPORT_LOCAL = 2,
	E_SCOPE_MODULE = 3,
	E_SCOPE_IMPORTED_GLOBAL = 4,
	E_SCOPE_EXPORTED_GLOBAL = 5,
	E_SCOPE_SYSTEM = 6,
	E_SCOPE_TYPE = 7,
	E_SCOPE_CLASS = 8,
	E_SCOPE_CLASS_PARENT = 9,
};
typedef enum e_scope e_scope;

struct dt_display {
	dt_display_type dttype;
	union {
		x_y x_y;
		str caption;
		struct fh_field_list *field_list;
		form_field fldform_field;
	} dt_display_u;
};
typedef struct dt_display dt_display;

enum cmd_type {
	E_CMD_ALLOC_ARR_CMD = 0,
	E_CMD_AT_TERM_CMD = 1,
	E_CMD_CALL_CMD = 2,
	E_CMD_CANCEL_CMD = 3,
	E_CMD_CASE_CMD = 4,
	E_CMD_CHECK_MENU_CMD = 5,
	E_CMD_CLEAR_CMD = 6,
	E_CMD_CLOSE_CMD = 7,
	E_CMD_CLOSE_SQL_CMD = 8,
	E_CMD_CODE_CMD = 9,
	E_CMD_CONNECT_CMD = 10,
	E_CMD_CONSTRUCT_CMD = 11,
	E_CMD_CONTINUE_CMD = 12,
	E_CMD_CONVERT_CMD = 13,
	E_CMD_CURRENT_WIN_CMD = 14,
	E_CMD_DEALLOC_ARR_CMD = 15,
	E_CMD_DECLARE_CMD = 16,
	E_CMD_DEFER_CMD = 17,
	E_CMD_DISABLE_MENU_CMD = 18,
	E_CMD_DISPLAY_ARRAY_CMD = 19,
	E_CMD_DISPLAY_B_N_CMD = 20,
	E_CMD_DISPLAY_CMD = 21,
	E_CMD_DISPLAY_FORM_CMD = 22,
	E_CMD_ENABLE_MENU_CMD = 23,
	E_CMD_ERROR_CMD = 24,
	E_CMD_EXECUTE_CMD = 25,
	E_CMD_EXECUTE_IMMEDIATE_CMD = 26,
	E_CMD_EXIT_PROG_CMD = 27,
	E_CMD_EXT_CMD = 28,
	E_CMD_FINISH_CMD = 29,
	E_CMD_FLUSH_CMD = 30,
	E_CMD_FOREACH_CMD = 31,
	E_CMD_FOR_CMD = 32,
	E_CMD_FREE_CMD = 33,
	E_CMD_FREE_BLOB_CMD = 34,
	E_CMD_FREE_REP_CMD = 35,
	E_CMD_GOTO_CMD = 36,
	E_CMD_HIDE_CMD = 37,
	E_CMD_HIDE_OPTION_CMD = 38,
	E_CMD_IF_CMD = 39,
	E_CMD_INIT_CMD = 40,
	E_CMD_INPUT_ARRAY_CMD = 41,
	E_CMD_INPUT_CMD = 42,
	E_CMD_LABEL_CMD = 43,
	E_CMD_LET_CMD = 44,
	E_CMD_LOAD_CMD = 45,
	E_CMD_LOCATE_CMD = 46,
	E_CMD_MENU_CMD = 47,
	E_CMD_MESSAGE_CMD = 48,
	E_CMD_MOVE_CMD = 49,
	E_CMD_MSG_BOX_CMD = 50,
	E_CMD_NEED_CMD = 51,
	E_CMD_NEXT_FIELD_CMD = 52,
	E_CMD_NEXT_FORM_CMD = 53,
	E_CMD_NEXT_OPTION_CMD = 54,
	E_CMD_OPEN_CURSOR_CMD = 55,
	E_CMD_OPEN_FORM_CMD = 56,
	E_CMD_OPEN_FORM_GUI_CMD = 57,
	E_CMD_OPEN_STATUSBOX_CMD = 58,
	E_CMD_OPEN_WINDOW_CMD = 59,
	E_CMD_OPTIONS_CMD = 60,
	E_CMD_OUTPUT_CMD = 61,
	E_CMD_PAUSE_CMD = 62,
	E_CMD_PAUSE_SCREEN_OFF_CMD = 63,
	E_CMD_PAUSE_SCREEN_ON_CMD = 64,
	E_CMD_PREPARE_CMD = 65,
	E_CMD_PRINT_CMD = 66,
	E_CMD_PRINT_FILE_CMD = 67,
	E_CMD_PRINT_IMG_CMD = 68,
	E_CMD_PROMPT_CMD = 69,
	E_CMD_PUT_CMD = 70,
	E_CMD_RESIZE_ARR_CMD = 71,
	E_CMD_RETURN_CMD = 72,
	E_CMD_RUN_CMD = 73,
	E_CMD_RUN_WAITING_FOR_CMD = 74,
	E_CMD_SCROLL_CMD = 75,
	E_CMD_SET_DATABASE_CMD = 76,
	E_CMD_SHOW_CMD = 77,
	E_CMD_SHOW_OPTION_CMD = 78,
	E_CMD_SKIP_BY_CMD = 79,
	E_CMD_SKIP_CMD = 80,
	E_CMD_SKIP_TO_CMD = 81,
	E_CMD_SKIP_TO_TOP_CMD = 82,
	E_CMD_SLEEP_CMD = 83,
	E_CMD_SELECT_CMD = 84,
	E_CMD_SQL_BLOCK_CMD = 85,
	E_CMD_SQL_CMD = 86,
	E_CMD_SQL_DEBUG_FILE_CMD = 87,
	E_CMD_SQL_TRANSACT_CMD = 88,
	E_CMD_START_CMD = 89,
	E_CMD_START_RPC_CMD = 90,
	E_CMD_STOP_RPC_CMD = 91,
	E_CMD_TERM_REP_CMD = 92,
	E_CMD_UNCHECK_MENU_CMD = 93,
	E_CMD_UNLOAD_CMD = 94,
	E_CMD_VALIDATE_CMD = 95,
	E_CMD_WHENEVER_CMD = 96,
	E_CMD_SHOW_MENU_CMD = 97,
	E_CMD_WHILE_CMD = 98,
	E_CMD_ENABLE_CMD = 99,
	E_CMD_ENABLE_FORM_CMD = 100,
	E_CMD_DISABLE_CMD = 101,
	E_CMD_DISABLE_FORM_CMD = 102,
	E_CMD_FETCH_CMD = 103,
	E_CMD_PDF_CALL_CMD = 104,
	E_CMD_SET_SESSION_CMD = 105,
	E_CMD_UPDATE_CMD = 106,
	E_CMD_INSERT_CMD = 107,
	E_CMD_DELETE_CMD = 108,
	E_CMD_LINT_IGNORE_CMD = 109,
	E_CMD_LINT_EXPECT_CMD = 110,
	E_CMD_COPYBACK_CMD = 111,
	E_CMD_CREATE_PROCEDURE_CMD = 112,
	E_CMD_SPL_SYSTEM_CMD = 113,
	E_CMD_SPL_FOREACH_SELECT_CMD = 114,
	E_CMD_SPL_FOREACH_EXECUTE_CMD = 115,
	E_CMD_SPL_LET_CMD = 116,
	E_CMD_SPL_RAISE_EXCEPTION_CMD = 117,
	E_CMD_SPL_ON_EXCEPTION_CMD = 118,
	E_CMD_SPL_IF_CMD = 119,
	E_CMD_SPL_WHILE_CMD = 120,
	E_CMD_SPL_FOR_CMD = 121,
	E_CMD_SPL_CALL_CMD = 122,
	E_CMD_SPL_TRACE_CMD = 123,
	E_CMD_SPL_RETURN_CMD = 124,
	E_CMD_SPL_BLOCK_CMD = 125,
	E_CMD_LAST = 126,
};
typedef enum cmd_type cmd_type;

struct str_list {
	struct {
		u_int str_list_entry_len;
		str *str_list_entry_val;
	} str_list_entry;
};
typedef struct str_list str_list;

enum e_boolean {
	EB_FALSE = 0,
	EB_TRUE = 1,
	EB_NOTSET = 2,
};
typedef enum e_boolean e_boolean;

struct field {
	str fieldname;
	str subscript;
};
typedef struct field field;

struct attrib {
	int color;
	enum e_boolean nonewlines;
	enum e_boolean bold;
	enum e_boolean blink;
	enum e_boolean reverse;
	enum e_boolean dim;
	enum e_boolean invisible;
	enum e_boolean underline;
	enum e_boolean normal;
	struct expr_str *style_expr;
	struct expr_str *variable_str;
	struct expr_str *currentrowdisplayexpr;
	struct expr_str *count;
	struct expr_str *maxcount;
	enum e_boolean allow_insert;
	enum e_boolean allow_delete;
	enum e_boolean no_new_lines;
	enum e_boolean border;
	str text;
	str pad;
	struct expr_str *comment_line;
	struct expr_str *form_line;
	struct expr_str *error_line;
	struct expr_str *menu_line;
	struct expr_str *message_line;
	struct expr_str *prompt_line;
	struct expr_str *var_attrib;
};
typedef struct attrib attrib;

struct funcname_list {
	struct {
		u_int name_len;
		str *name_val;
	} name;
	struct {
		u_int namespaces_len;
		str *namespaces_val;
	} namespaces;
};
typedef struct funcname_list funcname_list;

struct struct_start_rpc_cmd {
	struct expr_str *valid_port;
	funcname_list remote_func_list;
};
typedef struct struct_start_rpc_cmd struct_start_rpc_cmd;

struct struct_lint_ignore_cmd {
	struct str_list *values;
};
typedef struct struct_lint_ignore_cmd struct_lint_ignore_cmd;

struct struct_lint_expect_cmd {
	struct str_list *values;
};
typedef struct struct_lint_expect_cmd struct_lint_expect_cmd;

struct struct_copyback_cmd {
	struct expr_str *variable;
};
typedef struct struct_copyback_cmd struct_copyback_cmd;

enum cancel_type {
	CT_INSERT = 0,
	CT_DELETE = 1,
};
typedef enum cancel_type cancel_type;

struct struct_cancel_cmd {
	enum cancel_type c;
};
typedef struct struct_cancel_cmd struct_cancel_cmd;

struct struct_update_cmd {
	struct expr_str *connid;
	str table;
	str_list *column_list;
	struct s_select_list_item_list *value_list;
	struct expr_str *where_clause;
};
typedef struct struct_update_cmd struct_update_cmd;

struct s_update_pair {
	str column_name;
	struct s_select_list_item *value;
};
typedef struct s_update_pair s_update_pair;

struct struct_insert_cmd {
	struct expr_str *connid;
	str table;
	str_list *column_list;
	struct s_select_list_item_list *value_list;
	struct s_select *subselect;
};
typedef struct struct_insert_cmd struct_insert_cmd;

struct struct_delete_cmd {
	struct expr_str *connid;
	str table;
	struct expr_str *where_clause;
};
typedef struct struct_delete_cmd struct_delete_cmd;

enum e_close_type_nosql {
	E_CT_WINDOW = 0,
	E_CT_FORM = 1,
	E_CT_STATUSBOX = 2,
};
typedef enum e_close_type_nosql e_close_type_nosql;

enum e_close_type_withsql {
	E_CT_DATABASE = 0,
	E_CT_SESSION = 1,
	E_CT_CURS_OR_PREP = 2,
};
typedef enum e_close_type_withsql e_close_type_withsql;

struct struct_close_cmd {
	enum e_close_type_nosql cl_type;
	struct expr_str *ident;
};
typedef struct struct_close_cmd struct_close_cmd;

struct struct_close_sql_cmd {
	enum e_close_type_withsql cl_type;
	struct expr_str *ident;
};
typedef struct struct_close_sql_cmd struct_close_sql_cmd;

struct struct_free_cmd {
	struct expr_str *connid;
	struct expr_str *cursorname;
};
typedef struct struct_free_cmd struct_free_cmd;

struct struct_free_blob_cmd {
	struct expr_str *var;
};
typedef struct struct_free_blob_cmd struct_free_blob_cmd;

enum e_block_cmd {
	EBC_WHILE = 0,
	EBC_FOR = 1,
	EBC_INPUT = 2,
	EBC_FOREACH = 3,
	EBC_CONSTRUCT = 4,
	EBC_DISPLAY = 5,
	EBC_MENU = 6,
	EBC_PROMPT = 7,
	EBC_CASE = 8,
	EBC_SPL_FOR = 9,
	EBC_SPL_WHILE = 10,
	EBC_SPL_FOREACH = 11,
};
typedef enum e_block_cmd e_block_cmd;

struct struct_continue_cmd {
	enum e_block_cmd what;
	int block_id;
	int sio_id;
};
typedef struct struct_continue_cmd struct_continue_cmd;

struct struct_ext_cmd {
	enum e_block_cmd what;
	int block_id;
};
typedef struct struct_ext_cmd struct_ext_cmd;

enum e_defer {
	EDEFER_QUIT = 0,
	EDEFER_INTERRUPT = 1,
};
typedef enum e_defer e_defer;

struct struct_defer_cmd {
	enum e_defer what;
};
typedef struct struct_defer_cmd struct_defer_cmd;

struct struct_code_cmd {
	str contents;
};
typedef struct struct_code_cmd struct_code_cmd;

struct struct_disable_menu_cmd {
	str_list *strlist;
};
typedef struct struct_disable_menu_cmd struct_disable_menu_cmd;

struct struct_enable_menu_cmd {
	str_list *strlist;
};
typedef struct struct_enable_menu_cmd struct_enable_menu_cmd;

struct struct_check_menu_cmd {
	str_list *strlist;
};
typedef struct struct_check_menu_cmd struct_check_menu_cmd;

struct struct_uncheck_menu_cmd {
	str_list *strlist;
};
typedef struct struct_uncheck_menu_cmd struct_uncheck_menu_cmd;

struct struct_goto_cmd {
	str label;
};
typedef struct struct_goto_cmd struct_goto_cmd;

struct struct_label_cmd {
	str label;
};
typedef struct struct_label_cmd struct_label_cmd;

struct struct_error_cmd {
	struct expr_str_list *expr_list;
	enum e_boolean wait_for_key;
	attrib *attributes;
};
typedef struct struct_error_cmd struct_error_cmd;

struct struct_execute_cmd {
	struct expr_str *connid;
	struct expr_str_list *inbind;
	struct expr_str_list *outbind;
	struct expr_str *sql_stmtid;
};
typedef struct struct_execute_cmd struct_execute_cmd;

struct struct_execute_immediate_cmd {
	struct expr_str *connid;
	struct expr_str *sql_stmt;
};
typedef struct struct_execute_immediate_cmd struct_execute_immediate_cmd;

struct struct_flush_cmd {
	struct expr_str *connid;
	struct expr_str *cursorname;
};
typedef struct struct_flush_cmd struct_flush_cmd;

struct struct_sleep_cmd {
	struct expr_str *sleep_expr;
};
typedef struct struct_sleep_cmd struct_sleep_cmd;

struct struct_move_cmd {
	struct expr_str *windowname;
	struct expr_str *x;
	struct expr_str *y;
	enum e_boolean relative;
};
typedef struct struct_move_cmd struct_move_cmd;

struct struct_show_menu_cmd {
	str menuname;
	str menuhandler;
	struct expr_str *mn_file;
};
typedef struct struct_show_menu_cmd struct_show_menu_cmd;

struct struct_show_cmd {
	struct expr_str *windowname;
};
typedef struct struct_show_cmd struct_show_cmd;

struct struct_hide_cmd {
	struct expr_str *windowname;
};
typedef struct struct_hide_cmd struct_hide_cmd;

enum run_mode {
	ERM_NOT_SET = 0,
	ERM_LINE_MODE = 1,
	ERM_FORM_MODE = 2,
};
typedef enum run_mode run_mode;

struct struct_run_cmd {
	struct expr_str *run_string;
	enum e_boolean wait;
	enum run_mode run_mode;
	struct expr_str *returning;
};
typedef struct struct_run_cmd struct_run_cmd;

struct struct_run_waiting_for_cmd {
	struct expr_str *run_string;
	struct expr_str *sleep;
	struct expr_str *msg_repeat_every;
	struct expr_str *msg_text;
	int msg_type;
};
typedef struct struct_run_waiting_for_cmd struct_run_waiting_for_cmd;

enum e_direction {
	E_UP = 0,
	E_DOWN = 1,
};
typedef enum e_direction e_direction;

struct struct_scroll_cmd {
	struct fh_field_list *srec;
	struct expr_str *val;
};
typedef struct struct_scroll_cmd struct_scroll_cmd;

struct struct_exit_prog_cmd {
	struct expr_str *exit_val;
};
typedef struct struct_exit_prog_cmd struct_exit_prog_cmd;

typedef struct command *command_ptr;

struct commands {
	struct {
		u_int cmds_len;
		command_ptr *cmds_val;
	} cmds;
};
typedef struct commands commands;

struct struct_return_cmd {
	struct expr_str_list *retvals;
	int with_resume;
};
typedef struct struct_return_cmd struct_return_cmd;

struct struct_prepare_cmd {
	struct expr_str *connid;
	struct expr_str *stmtid;
	struct expr_str *sql;
};
typedef struct struct_prepare_cmd struct_prepare_cmd;

enum e_location {
	E_LOC_FILE = 0,
	E_LOC_MEMORY = 1,
};
typedef enum e_location e_location;

struct locate_pos {
	e_location where;
	union {
		struct expr_str *filename;
	} locate_pos_u;
};
typedef struct locate_pos locate_pos;

struct struct_locate_cmd {
	struct expr_str_list *variables;
	locate_pos where;
};
typedef struct struct_locate_cmd struct_locate_cmd;

struct struct_message_cmd {
	struct expr_str_list *message_expr;
	attrib *attributes;
	enum e_boolean wait;
};
typedef struct struct_message_cmd struct_message_cmd;

struct struct_init_cmd {
	struct expr_str_list *varlist;
	str_list *tablist;
	struct expr_str_list *init_like_exprlist;
	int tonull;
};
typedef struct struct_init_cmd struct_init_cmd;

struct struct_next_field_cmd {
	int rel;
	struct fh_field_entry *nextfield;
	int sio;
};
typedef struct struct_next_field_cmd struct_next_field_cmd;

struct struct_at_term_cmd {
	str funcname;
};
typedef struct struct_at_term_cmd struct_at_term_cmd;

struct struct_next_option_cmd {
	struct expr_str *menuoption;
};
typedef struct struct_next_option_cmd struct_next_option_cmd;

struct struct_show_option_cmd {
	struct expr_str_list *menuoptions;
};
typedef struct struct_show_option_cmd struct_show_option_cmd;

struct struct_hide_option_cmd {
	struct expr_str_list *menuoptions;
};
typedef struct struct_hide_option_cmd struct_hide_option_cmd;

struct struct_for_cmd {
	struct expr_str *var;
	struct expr_str *start;
	struct expr_str *end;
	struct expr_str *step;
	commands *for_commands;
	int block_id;
};
typedef struct struct_for_cmd struct_for_cmd;

struct struct_display_form_cmd {
	struct expr_str *formname;
	attrib *attributes;
};
typedef struct struct_display_form_cmd struct_display_form_cmd;

typedef struct expr_str *expr_str_ptr;

struct call_list {
	struct {
		u_int calls_by_call_len;
		command_ptr *calls_by_call_val;
	} calls_by_call;
	struct {
		u_int calls_by_expr_len;
		expr_str_ptr *calls_by_expr_val;
	} calls_by_expr;
};
typedef struct call_list call_list;

struct struct_call_cmd {
	struct expr_str *fcall;
	struct expr_str_list *returning;
};
typedef struct struct_call_cmd struct_call_cmd;

struct struct_pdf_call_cmd {
	struct expr_str *fcall;
	struct expr_str_list *returning;
};
typedef struct struct_pdf_call_cmd struct_pdf_call_cmd;

struct if_cond {
	int lineno;
	struct expr_str *test_expr;
	commands *whentrue;
};
typedef struct if_cond if_cond;

struct if_conds {
	struct {
		u_int conditions_len;
		if_cond *conditions_val;
	} conditions;
};
typedef struct if_conds if_conds;

struct struct_if_cmd {
	if_conds truths;
	int lineno;
	int else_lineno;
	commands *whenfalse;
};
typedef struct struct_if_cmd struct_if_cmd;

struct struct_foreach_cmd {
	struct expr_str *connid;
	struct expr_str *cursorname;
	struct expr_str_list *inputvals;
	struct expr_str_list *outputvals;
	commands *foreach_commands;
	int block_id;
};
typedef struct struct_foreach_cmd struct_foreach_cmd;

struct single_option {
	str option;
	str value;
	struct expr_str *expr;
	int isKey;
};
typedef struct single_option single_option;

typedef single_option *single_option_ptr;

struct manyoptions {
	struct {
		u_int options_len;
		single_option_ptr *options_val;
	} options;
};
typedef struct manyoptions manyoptions;

struct struct_options_cmd {
	manyoptions *options;
};
typedef struct struct_options_cmd struct_options_cmd;

struct startrep {
	char towhat;
	struct expr_str *s1;
	int with_page_length;
	int with_left_margin;
	int with_right_margin;
	int with_top_margin;
	int with_bottom_margin;
	str with_top_of_page;
};
typedef struct startrep startrep;

enum bluebar_style {
	E_BLUEBAR_NONE = 0,
	E_BLUEBAR_RECTANGLE = 1,
	E_BLUEBAR_5LINE = 2,
};
typedef enum bluebar_style bluebar_style;

struct bluebar {
	enum bluebar_style style;
	double r;
	double g;
	double b;
};
typedef struct bluebar bluebar;

struct pdf_startrep {
	char towhat;
	struct expr_str *s1;
	double with_page_length;
	double with_page_width;
	double with_left_margin;
	double with_right_margin;
	double with_top_margin;
	double with_bottom_margin;
	str fontname;
	double fontsize;
	int papersize;
	double pageheadersize;
	double firstpageheadersize;
	double pagetrailersize;
	enum e_boolean isdefault;
	enum e_boolean ascii_height;
	enum e_boolean ascii_width;
	struct bluebar bluebar;
};
typedef struct pdf_startrep pdf_startrep;

struct convert {
	char towhat;
	struct expr_str *s1;
	struct expr_str *conv_type;
	struct expr_str *filter;
};
typedef struct convert convert;

struct struct_convert_cmd {
	str repname;
	str namespace;
	struct convert *conv_c;
};
typedef struct struct_convert_cmd struct_convert_cmd;

struct struct_finish_cmd {
	str repname;
	str namespace;
	struct convert *conv_c;
};
typedef struct struct_finish_cmd struct_finish_cmd;

struct struct_start_cmd {
	str repname;
	str namespace;
	struct startrep *sc_c;
};
typedef struct struct_start_cmd struct_start_cmd;

struct struct_let_cmd {
	struct expr_str_list *vars;
	struct expr_str_list *vals;
};
typedef struct struct_let_cmd struct_let_cmd;

struct rowscols {
	struct expr_str *rows;
	struct expr_str *columns;
};
typedef struct rowscols rowscols;

enum e_wintype {
	EWT_FORM = 0,
	EWT_ROWSCOLS = 1,
};
typedef enum e_wintype e_wintype;

struct windowtype {
	e_wintype wintype;
	union {
		struct expr_str *formfilename;
		struct rowscols rowscols;
	} windowtype_u;
};
typedef struct windowtype windowtype;

struct struct_open_window_cmd {
	struct expr_str *windowname;
	struct expr_str *x;
	struct expr_str *y;
	windowtype wt;
	struct attrib *attributes;
};
typedef struct struct_open_window_cmd struct_open_window_cmd;

struct s_fetch_place {
	long ab_rel;
	struct expr_str *fetch_expr;
};
typedef struct s_fetch_place s_fetch_place;

struct s_fetch {
	struct expr_str *cname;
	struct s_fetch_place *fp;
};
typedef struct s_fetch s_fetch;

struct struct_fetch_cmd {
	struct expr_str *connid;
	struct s_fetch *fetch;
	struct expr_str_list *outbind;
};
typedef struct struct_fetch_cmd struct_fetch_cmd;

struct struct_open_form_cmd {
	struct expr_str *formname;
	struct expr_str *form_filename;
};
typedef struct struct_open_form_cmd struct_open_form_cmd;

struct struct_open_form_gui_cmd {
	struct expr_str *form;
	struct expr_str *y;
	struct expr_str *x;
	struct expr_str *like;
	int disable;
	str formhandler;
};
typedef struct struct_open_form_gui_cmd struct_open_form_gui_cmd;

struct struct_unload_cmd {
	struct expr_str *connid;
	struct expr_str *sql;
	struct expr_str *filename;
	struct expr_str *delimiter;
};
typedef struct struct_unload_cmd struct_unload_cmd;

struct struct_load_cmd {
	struct expr_str *connid;
	struct expr_str *filename;
	struct expr_str *delimiter;
	struct expr_str *sqlvar;
	str tabname;
	str_list *collist;
};
typedef struct struct_load_cmd struct_load_cmd;

struct struct_connect_cmd {
	struct expr_str *conn_dbname;
	struct expr_str *conn_name;
	struct expr_str *username;
	struct expr_str *password;
};
typedef struct struct_connect_cmd struct_connect_cmd;

enum report_blocks {
	RB_FIRST_PAGE_HEADER = 0,
	RB_PAGE_HEADER = 1,
	RB_PAGE_TRAILER = 2,
	RB_ON_EVERY_ROW = 3,
	RB_ON_LAST_ROW = 4,
	RB_BEFORE_GROUP_OF = 5,
	RB_AFTER_GROUP_OF = 6,
	RB_FORMAT_EVERY_ROW = 7,
};
typedef enum report_blocks report_blocks;

struct report_block_data {
	report_blocks rb;
	union {
		struct expr_str_list *variables;
		struct expr_str *bf_variable;
		struct expr_str *af_variable;
	} report_block_data_u;
};
typedef struct report_block_data report_block_data;

struct report_format_section_entry {
	report_block_data rb_block;
	commands *rep_sec_commands;
	int lineno;
	int orderby_var_no;
};
typedef struct report_format_section_entry report_format_section_entry;

typedef report_format_section_entry *report_format_section_entry_ptr;

struct report_format_section {
	struct {
		u_int entries_len;
		report_format_section_entry_ptr *entries_val;
	} entries;
	int lines_in_header;
	int lines_in_first_header;
	int lines_in_trailer;
};
typedef struct report_format_section report_format_section;

enum e_report_orderby {
	REPORT_ORDERBY_IMPLICIT = 0,
	REPORT_ORDERBY_EXTERNAL = 1,
	REPORT_ORDERBY = 2,
};
typedef enum e_report_orderby e_report_orderby;

struct report_orderby_section {
	enum e_report_orderby rord_type;
	struct expr_str_list *variables;
};
typedef struct report_orderby_section report_orderby_section;

struct struct_display_cmd {
	struct expr_str_list *exprs;
	dt_display *where;
	enum e_boolean by_name;
	attrib *attributes;
};
typedef struct struct_display_cmd struct_display_cmd;

struct struct_display_b_n_cmd {
	struct expr_str_list *vars;
	attrib *attributes;
};
typedef struct struct_display_b_n_cmd struct_display_b_n_cmd;

struct struct_open_cursor_cmd {
	char cursor_type;
	struct expr_str *connid;
	struct expr_str *cursorname;
	struct expr_str_list *using_bind;
};
typedef struct struct_open_cursor_cmd struct_open_cursor_cmd;

struct struct_put_cmd {
	struct expr_str *connid;
	struct expr_str *cursorname;
	struct expr_str_list *values;
};
typedef struct struct_put_cmd struct_put_cmd;

struct s_cur_def {
	str forUpdate;
	struct struct_insert_cmd *insert_cmd;
	struct expr_str *ident;
	struct s_select *select;
};
typedef struct s_cur_def s_cur_def;

struct struct_declare_cmd {
	struct expr_str *connid;
	struct expr_str *cursorname;
	struct s_cur_def *declare_dets;
	e_boolean with_hold;
	e_boolean scroll;
	e_boolean isstmt;
	char cursor_type;
};
typedef struct struct_declare_cmd struct_declare_cmd;

struct struct_validate_cmd {
	struct expr_str_list *list;
	struct expr_str_list *validate_list;
	str_list *tablist;
};
typedef struct struct_validate_cmd struct_validate_cmd;

struct struct_while_cmd {
	struct expr_str *while_expr;
	commands *while_commands;
	int block_id;
};
typedef struct struct_while_cmd struct_while_cmd;

struct struct_current_win_cmd {
	struct expr_str *windowname;
};
typedef struct struct_current_win_cmd struct_current_win_cmd;

struct when {
	int lineno;
	int colno;
	struct expr_str *when_expr;
	commands *when_commands;
};
typedef struct when when;

typedef when *when_ptr;

struct whens {
	struct {
		u_int whens_len;
		when_ptr *whens_val;
	} whens;
};
typedef struct whens whens;

struct struct_case_cmd {
	struct expr_str *case_expr;
	struct whens *whens;
	commands *otherwise;
	int block_id;
};
typedef struct struct_case_cmd struct_case_cmd;

struct struct_output_cmd {
	str repname;
	str namespace;
	struct expr_str_list *expressions;
};
typedef struct struct_output_cmd struct_output_cmd;

struct struct_term_rep_cmd {
	str repname;
	str namespace;
};
typedef struct struct_term_rep_cmd struct_term_rep_cmd;

enum e_clear {
	E_CLR_SCREEN = 0,
	E_CLR_WINDOW = 1,
	E_CLR_STATUS = 2,
	E_CLR_FORM = 3,
	E_CLR_FORM_DEFAULTS = 4,
	E_CLR_FIELDS = 5,
	E_CLR_FIELDS_TO_DEFAULT = 6,
};
typedef enum e_clear e_clear;

struct clear_data {
	e_clear clr_type;
	union {
		struct expr_str *window;
		struct expr_str *statwindow;
		struct fh_field_list *fields;
		struct fh_field_list *deffields;
	} clear_data_u;
};
typedef struct clear_data clear_data;

struct struct_clear_cmd {
	clear_data clr_data;
	enum e_boolean todefaults;
};
typedef struct struct_clear_cmd struct_clear_cmd;

struct struct_sql_cmd {
	struct expr_str *connid;
	str sql;
};
typedef struct struct_sql_cmd struct_sql_cmd;

struct struct_sql_debug_file_cmd {
	struct expr_str *connid;
	struct expr_str *debugfile;
};
typedef struct struct_sql_debug_file_cmd struct_sql_debug_file_cmd;

struct struct_select_cmd {
	struct expr_str *connid;
	struct s_select *sql;
	str forupdate;
};
typedef struct struct_select_cmd struct_select_cmd;

struct struct_skip_cmd {
	struct expr_str *skip_amt;
};
typedef struct struct_skip_cmd struct_skip_cmd;

struct struct_skip_by_cmd {
	struct expr_str *skip_amt;
};
typedef struct struct_skip_by_cmd struct_skip_by_cmd;

struct struct_skip_to_cmd {
	struct expr_str *skip_amt;
};
typedef struct struct_skip_to_cmd struct_skip_to_cmd;

struct struct_sql_transact_cmd {
	struct expr_str *connid;
	int trans;
};
typedef struct struct_sql_transact_cmd struct_sql_transact_cmd;

struct struct_set_database_cmd {
	struct expr_str *set_dbname;
	enum e_boolean exclusive_mode;
};
typedef struct struct_set_database_cmd struct_set_database_cmd;

struct struct_whenever_cmd {
	int whencode;
	str whento;
};
typedef struct struct_whenever_cmd struct_whenever_cmd;

struct struct_sql_block_cmd {
	struct expr_str *connid;
	struct expr_str_list *list;
	int convert;
};
typedef struct struct_sql_block_cmd struct_sql_block_cmd;

struct struct_need_cmd {
	struct expr_str *expr;
};
typedef struct struct_need_cmd struct_need_cmd;

struct struct_print_cmd {
	struct expr_str_list *print_expr;
	enum e_boolean semi;
};
typedef struct struct_print_cmd struct_print_cmd;

struct struct_print_file_cmd {
	struct expr_str *filename;
	enum e_boolean semi;
};
typedef struct struct_print_file_cmd struct_print_file_cmd;

struct struct_print_img_cmd {
	struct expr_str *var;
	struct expr_str *scale_x;
	struct expr_str *scale_y;
	str img_type;
	enum e_boolean semi;
};
typedef struct struct_print_img_cmd struct_print_img_cmd;

struct struct_pause_cmd {
	struct expr_str *pause_msg;
};
typedef struct struct_pause_cmd struct_pause_cmd;

enum e_event {
	EVENT_BEF_ROW = 0,
	EVENT_AFT_ROW = 1,
	EVENT_BEFORE_DELETE = 2,
	EVENT_AFTER_DELETE = 3,
	EVENT_BEFORE_INSERT = 4,
	EVENT_AFTER_INSERT = 5,
	EVENT_BEFORE_INSERT_DELETE = 6,
	EVENT_AFTER_INSERT_DELETE = 7,
	EVENT_ON_IDLE = 8,
	EVENT_ON_INTERVAL = 9,
	EVENT_ON_TIME = 10,
	EVENT_KEY_PRESS = 11,
	EVENT_ANYKEY_PRESS = 12,
	EVENT_ON_ACTION = 13,
	EVENT_AFTER_INPUT = 14,
	EVENT_BEFORE_INPUT = 15,
	EVENT_BEFORE_FIELD = 16,
	EVENT_AFTER_DISPLAY = 17,
	EVENT_BEFORE_DISPLAY = 18,
	EVENT_AFTER_CONSTRUCT = 19,
	EVENT_BEFORE_CONSTRUCT = 20,
	EVENT_BEFORE_MENU = 21,
	EVENT_AFTER_FIELD = 22,
	EVENT_MENU_COMMAND = 23,
	EVENT_BEFORE_OPEN_FORM = 24,
	EVENT_AFTER_EVENT = 25,
	EVENT_BEFORE_CLOSE_FORM = 26,
	EVENT_BEFORE_ANY = 27,
	EVENT_AFTER_ANY = 28,
	EVENT_BEFORE = 29,
	EVENT_AFTER = 30,
	EVENT_BEFORE_EVENT = 31,
	EVENT_ON = 32,
	EVENT_ON_CHANGE = 33,
	EVENT_AFTER_INP_CLEAN = 34,
};
typedef enum e_event e_event;

struct menuoption {
	str_list *keys;
	int helpno;
	struct expr_str *shortname;
	struct expr_str *longname;
};
typedef struct menuoption menuoption;

struct event_data {
	e_event event_type;
	union {
		int idle_n;
		int interval_n;
		int time_n;
		str_list *key;
		str on_action;
		str_list *on;
		struct fh_field_list *before_field;
		struct fh_field_list *after_field;
		menuoption *mnoption;
		str_list *before;
		str_list *after;
	} event_data_u;
};
typedef struct event_data event_data;

struct on_event {
	event_data evt_data;
	commands *on_event_commands;
	int lineno;
	int colno;
};
typedef struct on_event on_event;

typedef on_event *on_event_ptr;

struct on_events {
	struct {
		u_int event_len;
		on_event_ptr *event_val;
	} event;
};
typedef struct on_events on_events;

struct struct_menu_cmd {
	struct expr_str *menu_title;
	struct attrib *menu_attrib;
	struct on_events *events;
	int sio;
	int blockid;
	struct expr_str *menu_attrib_comment;
	struct expr_str *menu_attrib_style;
	struct expr_str *menu_attrib_image;
};
typedef struct struct_menu_cmd struct_menu_cmd;

struct struct_prompt_cmd {
	struct expr_str_list *prompt_str;
	struct attrib *prompt_str_attrib;
	struct attrib *prompt_fld_attrib;
	enum e_boolean for_char;
	struct expr_str *promptvar;
	int helpno;
	struct on_events *events;
	int sio;
	int blockid;
};
typedef struct struct_prompt_cmd struct_prompt_cmd;

struct struct_display_array_cmd {
	struct expr_str *srec;
	struct expr_str *arrayname;
	struct attrib *attributes;
	struct on_events *events;
	struct fh_field_entry *scroll_using;
	int helpno;
	int sio;
	int blockid;
	str slice;
	int slice_start;
	int slice_end;
};
typedef struct struct_display_array_cmd struct_display_array_cmd;

struct struct_input_cmd {
	struct expr_str_list *variables;
	struct fh_field_list *field_list;
	struct on_events *events;
	struct attrib *attributes;
	enum e_boolean by_name;
	enum e_boolean without_defaults;
	int helpno;
	int sio;
	int blockid;
};
typedef struct struct_input_cmd struct_input_cmd;

struct cons_list_entry {
	str tabname;
	str colname;
};
typedef struct cons_list_entry cons_list_entry;

typedef cons_list_entry *cons_list_entry_ptr;

struct cons_list {
	struct {
		u_int list_len;
		cons_list_entry_ptr *list_val;
	} list;
};
typedef struct cons_list cons_list;

struct struct_input_array_cmd {
	struct expr_str *srec;
	struct expr_str *arrayname;
	struct attrib *attributes;
	struct on_events *events;
	e_boolean without_defaults;
	int helpno;
	int sio;
	int blockid;
	str slice;
	int slice_start;
	int slice_end;
};
typedef struct struct_input_array_cmd struct_input_array_cmd;

struct struct_construct_cmd {
	enum e_boolean by_name;
	struct expr_str *constr_var;
	cons_list *con_columns;
	struct fh_field_list *list;
	struct on_events *events;
	struct attrib *attributes;
	enum e_boolean without_defaults;
	int helpno;
	int sio;
	int blockid;
	struct expr_str *callback_function;
};
typedef struct struct_construct_cmd struct_construct_cmd;

struct user_details {
	struct expr_str *username;
	struct expr_str *password;
};
typedef struct user_details user_details;

struct struct_free_rep_cmd {
	str repname;
	str namespace;
};
typedef struct struct_free_rep_cmd struct_free_rep_cmd;

struct struct_alloc_arr_cmd {
	struct expr_str *variable;
};
typedef struct struct_alloc_arr_cmd struct_alloc_arr_cmd;

struct struct_dealloc_arr_cmd {
	struct expr_str *variable;
};
typedef struct struct_dealloc_arr_cmd struct_dealloc_arr_cmd;

struct struct_resize_arr_cmd {
	struct expr_str *variable;
};
typedef struct struct_resize_arr_cmd struct_resize_arr_cmd;

struct struct_enable_cmd {
	struct fh_field_list *srec;
};
typedef struct struct_enable_cmd struct_enable_cmd;

struct struct_enable_form_cmd {
	struct expr_str *formname;
	struct fh_field_list *srec;
};
typedef struct struct_enable_form_cmd struct_enable_form_cmd;

struct struct_disable_cmd {
	struct fh_field_list *srec;
};
typedef struct struct_disable_cmd struct_disable_cmd;

struct struct_disable_form_cmd {
	struct expr_str *formname;
	struct fh_field_list *srec;
};
typedef struct struct_disable_form_cmd struct_disable_form_cmd;

struct struct_msg_box_cmd {
	struct expr_str_list *msg;
	struct expr_str_list *caption;
	int icon;
	int buttons;
	int default_button;
	int disable;
	struct expr_str *returning;
};
typedef struct struct_msg_box_cmd struct_msg_box_cmd;

struct struct_next_form_cmd {
	str form;
	str field;
};
typedef struct struct_next_form_cmd struct_next_form_cmd;

struct struct_call_shared_cmd {
	str niy;
};
typedef struct struct_call_shared_cmd struct_call_shared_cmd;

struct struct_open_statusbox_cmd {
	str name;
	struct expr_str *at_x;
	struct expr_str *at_y;
	struct expr_str *sz_width;
	struct expr_str *sz_height;
};
typedef struct struct_open_statusbox_cmd struct_open_statusbox_cmd;

struct struct_set_session_cmd {
	str session_type;
	struct expr_str *s1;
	struct expr_str *s2;
	struct expr_str *s3;
};
typedef struct struct_set_session_cmd struct_set_session_cmd;

struct vname {
	str name;
	str alias;
};
typedef struct vname vname;

struct vname_name_list {
	struct {
		u_int names_len;
		vname *names_val;
	} names;
};
typedef struct vname_name_list vname_name_list;

enum e_constant_type {
	CONST_TYPE_CHAR = 0,
	CONST_TYPE_FLOAT = 1,
	CONST_TYPE_INTEGER = 2,
	CONST_TYPE_IDENT = 3,
};
typedef enum e_constant_type e_constant_type;

struct constant_data {
	e_constant_type consttype;
	union {
		str data_c;
		str data_ident;
		int data_i;
		double data_f;
	} constant_data_u;
};
typedef struct constant_data constant_data;

struct linked_variable {
	str tabname;
	struct vname_name_list col_list;
};
typedef struct linked_variable linked_variable;

typedef struct variable *variable_ptr;

struct assoc_array_variable {
	variable_ptr variable;
	int size;
	int char_size;
};
typedef struct assoc_array_variable assoc_array_variable;

struct simple_variable {
	int datatype;
	int dimensions[2];
	struct expr_str *defaultvalue;
};
typedef struct simple_variable simple_variable;

struct record_variable {
	struct {
		u_int variables_len;
		variable_ptr *variables_val;
	} variables;
	int record_alloc;
	struct linked_variable *linked;
	str user_ptr;
};
typedef struct record_variable record_variable;

struct object_variable {
	str class_name;
	variable_ptr definition;
};
typedef struct object_variable object_variable;

struct assoc_subscript {
	str subscript_string;
	struct expr_str *subscript_value;
};
typedef struct assoc_subscript assoc_subscript;

enum e_variable_type {
	VARIABLE_TYPE_SIMPLE = 0,
	VARIABLE_TYPE_RECORD = 1,
	VARIABLE_TYPE_ASSOC = 2,
	VARIABLE_TYPE_CONSTANT = 3,
	VARIABLE_TYPE_FUNCTION_DECLARE = 4,
	VARIABLE_TYPE_OBJECT = 5,
	VARIABLE_TYPE_TYPE_DECLARATION = 6,
};
typedef enum e_variable_type e_variable_type;

struct variable_data {
	e_variable_type variable_type;
	union {
		struct simple_variable v_simple;
		struct record_variable v_record;
		struct assoc_array_variable v_assoc;
		constant_data v_const;
		struct object_variable v_object;
		struct variable *type_declaration;
	} variable_data_u;
};
typedef struct variable_data variable_data;

struct variable {
	struct vname_name_list names;
	str defsrc;
	char user_system;
	enum e_scope escope;
	int is_static;
	int is_extern;
	struct {
		u_int arr_subscripts_len;
		int *arr_subscripts_val;
	} arr_subscripts;
	variable_data var_data;
	str src_module;
	int usage;
	int assigned;
	int flags;
	int lineno;
};
typedef struct variable variable;

struct lint_warning {
	int lineno;
	str warning;
};
typedef struct lint_warning lint_warning;

struct variable_list {
	struct {
		u_int variables_len;
		variable_ptr *variables_val;
	} variables;
	int sorted_list;
};
typedef struct variable_list variable_list;

struct create_proc_data {
	str funcname;
	struct {
		u_int parameters_len;
		variable_ptr *parameters_val;
	} parameters;
	struct {
		u_int returning_len;
		variable_ptr *returning_val;
	} returning;
	struct s_spl_block *block;
	struct expr_str_list *document;
	struct expr_str *listing;
	enum e_boolean isDBA;
};
typedef struct create_proc_data create_proc_data;

struct struct_create_proc_cmd {
	struct expr_str *connid;
	struct create_proc_data *create_proc;
};
typedef struct struct_create_proc_cmd struct_create_proc_cmd;

struct struct_spl_system_cmd {
	struct expr_str *cmd;
};
typedef struct struct_spl_system_cmd struct_spl_system_cmd;

struct struct_spl_let_cmd {
	struct str_list *vars;
	struct expr_str_list *values;
};
typedef struct struct_spl_let_cmd struct_spl_let_cmd;

struct struct_spl_raise_exception_cmd {
	struct expr_str *sql_err;
	struct expr_str *isam_err;
	struct expr_str *err_text;
};
typedef struct struct_spl_raise_exception_cmd struct_spl_raise_exception_cmd;

struct spl_if_cond {
	struct expr_str *test_expr;
	struct s_spl_block *commands;
};
typedef struct spl_if_cond spl_if_cond;

struct spl_if_conds {
	struct {
		u_int conditions_len;
		spl_if_cond *conditions_val;
	} conditions;
};
typedef struct spl_if_conds spl_if_conds;

struct struct_spl_if_cmd {
	spl_if_conds conditions;
};
typedef struct struct_spl_if_cmd struct_spl_if_cmd;

struct struct_spl_while_cmd {
	struct expr_str *condition;
	struct s_spl_block *block;
};
typedef struct struct_spl_while_cmd struct_spl_while_cmd;

struct struct_spl_return_cmd {
	struct expr_str_list *rvals;
	int withResume;
};
typedef struct struct_spl_return_cmd struct_spl_return_cmd;

struct struct_spl_block_cmd {
	struct s_spl_block *block;
};
typedef struct struct_spl_block_cmd struct_spl_block_cmd;

struct struct_spl_trace_cmd {
	struct expr_str *trace_expr;
};
typedef struct struct_spl_trace_cmd struct_spl_trace_cmd;

struct struct_spl_for_cmd {
	str vname;
	struct expr_str_list *value_list;
	struct s_spl_block *block;
};
typedef struct struct_spl_for_cmd struct_spl_for_cmd;

struct struct_spl_on_exception_cmd {
	struct list_of_integers *exception_list;
	struct str_list *set_list;
	struct s_spl_block *block;
	int resume;
};
typedef struct struct_spl_on_exception_cmd struct_spl_on_exception_cmd;

struct struct_spl_foreach_select_cmd {
	int withHold;
	str cursorName;
	struct s_select *select_stmt;
	struct s_spl_block *block;
};
typedef struct struct_spl_foreach_select_cmd struct_spl_foreach_select_cmd;

struct s_spl_execute {
	str proc_name;
	struct expr_str_list *parameters;
};
typedef struct s_spl_execute s_spl_execute;

struct struct_spl_call_cmd {
	struct s_spl_execute *fcall;
	str_list *return_variables;
};
typedef struct struct_spl_call_cmd struct_spl_call_cmd;

struct struct_spl_foreach_execute_cmd {
	struct s_spl_execute *fcall;
	str_list *into_vars;
	struct s_spl_block *block;
};
typedef struct struct_spl_foreach_execute_cmd struct_spl_foreach_execute_cmd;

struct command_data {
	cmd_type type;
	union {
		struct_start_rpc_cmd start_rpc_cmd;
		struct_call_cmd call_cmd;
		struct_cancel_cmd cancel_cmd;
		struct_case_cmd case_cmd;
		struct_close_cmd close_cmd;
		struct_close_sql_cmd close_sql_cmd;
		struct_sql_debug_file_cmd sql_debug_file_cmd;
		struct_code_cmd code_cmd;
		struct_construct_cmd construct_cmd;
		struct_defer_cmd defer_cmd;
		struct_display_b_n_cmd display_b_n_cmd;
		struct_display_cmd display_cmd;
		struct_display_form_cmd display_form_cmd;
		struct_display_array_cmd display_array_cmd;
		struct_alloc_arr_cmd alloc_arr_cmd;
		struct_dealloc_arr_cmd dealloc_arr_cmd;
		struct_resize_arr_cmd resize_arr_cmd;
		struct_error_cmd error_cmd;
		struct_ext_cmd ext_cmd;
		struct_continue_cmd continue_cmd;
		struct_exit_prog_cmd exit_prog_cmd;
		struct_for_cmd for_cmd;
		struct_foreach_cmd foreach_cmd;
		struct_free_cmd free_cmd;
		struct_free_blob_cmd free_blob_cmd;
		struct_goto_cmd goto_cmd;
		struct_check_menu_cmd check_menu_cmd;
		struct_uncheck_menu_cmd uncheck_menu_cmd;
		struct_disable_menu_cmd disable_menu_cmd;
		struct_enable_menu_cmd enable_menu_cmd;
		struct_msg_box_cmd msg_box_cmd;
		struct_if_cmd if_cmd;
		struct_init_cmd init_cmd;
		struct_next_field_cmd next_field_cmd;
		struct_next_form_cmd next_form_cmd;
		struct_input_cmd input_cmd;
		struct_input_array_cmd input_array_cmd;
		struct_scroll_cmd scroll_cmd;
		struct_label_cmd label_cmd;
		struct_let_cmd let_cmd;
		struct_locate_cmd locate_cmd;
		struct_at_term_cmd at_term_cmd;
		struct_return_cmd return_cmd;
		struct_menu_cmd menu_cmd;
		struct_next_option_cmd next_option_cmd;
		struct_show_option_cmd show_option_cmd;
		struct_hide_option_cmd hide_option_cmd;
		struct_message_cmd message_cmd;
		struct_open_window_cmd open_window_cmd;
		struct_open_statusbox_cmd open_statusbox_cmd;
		struct_open_form_cmd open_form_cmd;
		struct_open_form_gui_cmd open_form_gui_cmd;
		struct_open_cursor_cmd open_cursor_cmd;
		struct_connect_cmd connect_cmd;
		struct_options_cmd options_cmd;
		struct_prepare_cmd prepare_cmd;
		struct_execute_cmd execute_cmd;
		struct_execute_immediate_cmd execute_immediate_cmd;
		struct_prompt_cmd prompt_cmd;
		struct_start_cmd start_cmd;
		struct_convert_cmd convert_cmd;
		struct_free_rep_cmd free_rep_cmd;
		struct_output_cmd output_cmd;
		struct_finish_cmd finish_cmd;
		struct_term_rep_cmd term_rep_cmd;
		struct_need_cmd need_cmd;
		struct_skip_cmd skip_cmd;
		struct_skip_by_cmd skip_by_cmd;
		struct_skip_to_cmd skip_to_cmd;
		struct_print_cmd print_cmd;
		struct_print_file_cmd print_file_cmd;
		struct_print_img_cmd print_img_cmd;
		struct_pause_cmd pause_cmd;
		struct_run_cmd run_cmd;
		struct_run_waiting_for_cmd run_waiting_for_cmd;
		struct_sleep_cmd sleep_cmd;
		struct_sql_block_cmd sql_block_cmd;
		struct_validate_cmd validate_cmd;
		struct_whenever_cmd whenever_cmd;
		struct_while_cmd while_cmd;
		struct_clear_cmd clear_cmd;
		struct_current_win_cmd current_win_cmd;
		struct_show_cmd show_cmd;
		struct_hide_cmd hide_cmd;
		struct_move_cmd move_cmd;
		struct_put_cmd put_cmd;
		struct_unload_cmd unload_cmd;
		struct_load_cmd load_cmd;
		struct_sql_cmd sql_cmd;
		struct_sql_transact_cmd sql_transact_cmd;
		struct_select_cmd select_cmd;
		struct_flush_cmd flush_cmd;
		struct_declare_cmd declare_cmd;
		struct_set_database_cmd set_database_cmd;
		struct_fetch_cmd fetch_cmd;
		struct_show_menu_cmd show_menu_cmd;
		struct_enable_cmd enable_cmd;
		struct_update_cmd update_cmd;
		struct_insert_cmd insert_cmd;
		struct_delete_cmd delete_cmd;
		struct_enable_form_cmd enable_form_cmd;
		struct_disable_cmd disable_cmd;
		struct_disable_form_cmd disable_form_cmd;
		struct_pdf_call_cmd pdf_call_cmd;
		struct_set_session_cmd set_session_cmd;
		struct_lint_ignore_cmd lint_ignore_cmd;
		struct_lint_expect_cmd lint_expect_cmd;
		struct_copyback_cmd copyback_cmd;
		struct_create_proc_cmd create_proc_cmd;
		struct_spl_system_cmd spl_system_cmd;
		struct_spl_foreach_select_cmd spl_foreach_select_cmd;
		struct_spl_foreach_execute_cmd spl_foreach_execute_cmd;
		struct_spl_let_cmd spl_let_cmd;
		struct_spl_raise_exception_cmd spl_raise_exception_cmd;
		struct_spl_on_exception_cmd spl_on_exception_cmd;
		struct_spl_if_cmd spl_if_cmd;
		struct_spl_while_cmd spl_while_cmd;
		struct_spl_for_cmd spl_for_cmd;
		struct_spl_call_cmd spl_call_cmd;
		struct_spl_trace_cmd spl_trace_cmd;
		struct_spl_return_cmd spl_return_cmd;
		struct_spl_block_cmd spl_block_cmd;
	} command_data_u;
};
typedef struct command_data command_data;

struct fgl_comment {
	int lineno;
	int colno;
	int printed;
	str comment;
	char type;
};
typedef struct fgl_comment fgl_comment;

struct cmd_int_list {
	struct {
		u_int int_vals_len;
		int *int_vals_val;
	} int_vals;
};
typedef struct cmd_int_list cmd_int_list;

struct command {
	command_data cmd_data;
	str comment;
	int lineno;
	int colno;
	str module;
	struct cmd_int_list *ignore_error_list;
};
typedef struct command command;

enum flist_type {
	FLIST_NORMAL = 0,
	FLIST_SPECIAL = 1,
};
typedef enum flist_type flist_type;

struct flist {
	str name;
	enum flist_type type;
	str special;
};
typedef struct flist flist;

struct file_description {
	str name;
	struct {
		u_int list_len;
		struct flist *list_val;
	} list;
};
typedef struct file_description file_description;

typedef struct module_entry *module_entry_ptr;

struct s_module_entry_ptr_list {
	struct {
		u_int module_entry_ptr_list_len;
		module_entry_ptr *module_entry_ptr_list_val;
	} module_entry_ptr_list;
};
typedef struct s_module_entry_ptr_list s_module_entry_ptr_list;

struct globals_definition {
	str mod_dbname;
	struct {
		u_int external_datatypes_len;
		str *external_datatypes_val;
	} external_datatypes;
	enum e_boolean schema_only;
	long compiled_time;
	variable_list exported_global_variables;
};
typedef struct globals_definition globals_definition;

struct s_dependant_tables {
	str tabname;
	str checksuminfo;
};
typedef struct s_dependant_tables s_dependant_tables;

struct s_source_code {
	struct {
		u_int lines_len;
		str *lines_val;
	} lines;
};
typedef struct s_source_code s_source_code;

struct module_definition {
	str mod_dbname;
	str namespace;
	str force_ui;
	str debug_filename;
	struct {
		u_int external_datatypes_len;
		str *external_datatypes_val;
	} external_datatypes;
	str compile_time_sqltype;
	struct {
		u_int comment_list_len;
		struct fgl_comment *comment_list_val;
	} comment_list;
	struct {
		u_int imported_files_len;
		struct file_description *imported_files_val;
	} imported_files;
	enum e_boolean schema_only;
	enum e_boolean genStackInfo;
	str module_name;
	long compiled_time;
	struct str_list *global_files;
	struct {
		u_int clobberings_len;
		struct s_exchange_clobber *clobberings_val;
	} clobberings;
	struct {
		u_int dependant_tables_len;
		struct s_dependant_tables *dependant_tables_val;
	} dependant_tables;
	variable_list module_variables;
	variable_list exported_global_variables;
	variable_list imported_global_variables;
	struct {
		u_int module_entries_len;
		module_entry_ptr *module_entries_val;
	} module_entries;
	str full_path_filename;
	struct s_source_code source_code;
	long moduleIsInLibrary;
};
typedef struct module_definition module_definition;

struct expr_str_list {
	struct {
		u_int list_len;
		expr_str_ptr *list_val;
	} list;
};
typedef struct expr_str_list expr_str_list;

struct s_expr_op {
	struct expr_str *left;
	struct expr_str *right;
	struct expr_str *escape;
};
typedef struct s_expr_op s_expr_op;

struct s_spl_block {
	variable_list variables;
	commands *commands;
};
typedef struct s_spl_block s_spl_block;

struct s_expr_function_call {
	str fname;
	str namespace;
	struct expr_str_list *parameters;
	str module;
	int line;
};
typedef struct s_expr_function_call s_expr_function_call;

struct s_expr_pdf_function_call {
	str fname;
	str namespace;
	struct expr_str_list *parameters;
	str module;
	int line;
};
typedef struct s_expr_pdf_function_call s_expr_pdf_function_call;

struct s_expr_shared_function_call {
	str lib;
	str fname;
	str namespace;
	struct expr_str_list *parameters;
	str module;
	int line;
};
typedef struct s_expr_shared_function_call s_expr_shared_function_call;

struct s_expr_infield {
	int sio_id;
	struct fh_field_list *field_list;
	str module;
	int line;
};
typedef struct s_expr_infield s_expr_infield;

struct s_expr_get_fldbuf {
	int sio_id;
	struct fh_field_list *field_list;
	str module;
	int line;
};
typedef struct s_expr_get_fldbuf s_expr_get_fldbuf;

struct s_expr_form_is_compiled {
	struct expr_str *formname;
	struct expr_str_list *params;
	str module;
	int line;
};
typedef struct s_expr_form_is_compiled s_expr_form_is_compiled;

struct s_expr_field_touched {
	int sio_id;
	struct fh_field_list *field_list;
	str module;
	int line;
};
typedef struct s_expr_field_touched s_expr_field_touched;

struct s_expr_wordwrap {
	struct expr_str *expr;
	struct expr_str *wrap_at;
};
typedef struct s_expr_wordwrap s_expr_wordwrap;

struct s_expr_member_function_call_n {
	struct expr_str *var_usage_ptr;
	str funcName;
	str objectType;
	str namespace;
	int datatype;
	expr_str_list *parameters;
	str module;
	int line;
};
typedef struct s_expr_member_function_call_n s_expr_member_function_call_n;

struct s_expr_dynarr_function_call_n {
	struct expr_str *var_usage_ptr;
	str funcName;
	str namespace;
	expr_str_list *parameters;
	str module;
	int line;
};
typedef struct s_expr_dynarr_function_call_n s_expr_dynarr_function_call_n;

struct s_expr_extend {
	struct expr_str *expr;
	int to;
};
typedef struct s_expr_extend s_expr_extend;

struct s_expr_external_call {
	str host;
	str func;
	struct expr_str *port;
	str namespace;
	struct expr_str_list *parameters;
	int without_waiting;
	str module;
	int line;
};
typedef struct s_expr_external_call s_expr_external_call;

struct s_expr_current {
	int from;
	int to;
};
typedef struct s_expr_current s_expr_current;

struct s_expr_in {
	struct expr_str *expr;
	struct expr_str_list *elist;
};
typedef struct s_expr_in s_expr_in;

struct s_expr_datetime {
	str dtval;
	int extend;
};
typedef struct s_expr_datetime s_expr_datetime;

struct s_expr_tmp {
	str str;
	int dtype;
};
typedef struct s_expr_tmp s_expr_tmp;

struct s_expr_interval {
	str intval;
	int extend;
};
typedef struct s_expr_interval s_expr_interval;

struct s_expr_exists_sq {
	struct s_select *subquery;
};
typedef struct s_expr_exists_sq s_expr_exists_sq;

struct s_expr_in_sq {
	struct expr_str *expr;
	struct s_select *subquery;
};
typedef struct s_expr_in_sq s_expr_in_sq;

struct s_expr_cast {
	struct expr_str *expr;
	int target_dtype;
	int src_dtype;
	int notnull;
	int force;
};
typedef struct s_expr_cast s_expr_cast;

struct s_expr_bound_fcall {
	str lib;
	str namespace;
	str fname;
	str module;
	int line;
	struct expr_str_list *values;
};
typedef struct s_expr_bound_fcall s_expr_bound_fcall;

struct s_expr_agg {
	char agg_type;
	int expr_num;
	int in_group;
	struct expr_str *agg_expr;
	struct expr_str *expr_where;
	int blockid;
};
typedef struct s_expr_agg s_expr_agg;

struct s_expr_dynarr_extent {
	struct expr_str *var;
	int n;
};
typedef struct s_expr_dynarr_extent s_expr_dynarr_extent;

struct s_func {
	str funcname;
	str namespace;
};
typedef struct s_func s_func;

struct s_named_param {
	str param_name;
	struct expr_str *param_value;
};
typedef struct s_named_param s_named_param;

enum e_expr_type {
	ET_EXPR_EXPR_LIST = 0,
	ET_EXPR_BINDING = 1,
	ET_EXPR_STRING = 2,
	ET_EXPR_TODAY = 3,
	ET_EXPR_TIME = 4,
	ET_EXPR_LINENO = 5,
	ET_EXPR_PAGENO = 6,
	ET_EXPR_TIME_EXPR = 7,
	ET_EXPR_DATE_EXPR = 8,
	ET_EXPR_NULL = 9,
	ET_EXPR_TRUE = 10,
	ET_EXPR_FALSE = 11,
	ET_EXPR_NOT = 12,
	ET_EXPR_UPSHIFT = 13,
	ET_EXPR_DOWNSHIFT = 14,
	ET_EXPR_EXTEND = 15,
	ET_EXPR_ASCII = 16,
	ET_EXPR_MM = 17,
	ET_EXPR_POINTS = 18,
	ET_EXPR_INCHES = 19,
	ET_EXPR_CURRENT = 20,
	ET_EXPR_OP_MULT = 21,
	ET_EXPR_OP_DIV = 22,
	ET_EXPR_OP_POWER = 23,
	ET_EXPR_OP_ADD = 24,
	ET_EXPR_OP_SUB = 25,
	ET_EXPR_OP_EQUAL = 26,
	ET_EXPR_OP_NOT_EQUAL = 27,
	ET_EXPR_OP_MOD = 28,
	ET_EXPR_OP_USING = 29,
	ET_EXPR_OP_LIKE = 30,
	ET_EXPR_OP_NOT_LIKE = 31,
	ET_EXPR_OP_IN = 32,
	ET_EXPR_OP_NOT_IN = 33,
	ET_EXPR_OP_CONCAT = 34,
	ET_EXPR_OP_MATCHES = 35,
	ET_EXPR_OP_NOT_MATCHES = 36,
	ET_EXPR_OP_CLIP = 37,
	ET_EXPR_OP_LESS_THAN = 38,
	ET_EXPR_OP_LESS_THAN_EQ = 39,
	ET_EXPR_OP_GREATER_THAN = 40,
	ET_EXPR_OP_GREATER_THAN_EQ = 41,
	ET_EXPR_OP_YEAR = 42,
	ET_EXPR_OP_MONTH = 43,
	ET_EXPR_OP_DAY = 44,
	ET_EXPR_OP_HOUR = 45,
	ET_EXPR_OP_MINUTE = 46,
	ET_EXPR_OP_SECOND = 47,
	ET_EXPR_OP_ISNULL = 48,
	ET_EXPR_OP_ISNOTNULL = 49,
	ET_EXPR_OP_SPACES = 50,
	ET_EXPR_OP_AND = 51,
	ET_EXPR_OP_OR = 52,
	ET_EXPR_NEG = 53,
	ET_EXPR_FCALL = 54,
	ET_EXPR_PDF_FCALL = 55,
	ET_EXPR_SHARED_FCALL = 56,
	ET_EXPR_MEMBER_FCALL_NEW = 57,
	ET_EXPR_DYNARR_FCALL_NEW = 58,
	ET_EXPR_COLUMN = 59,
	ET_EXPR_REPORT_EMAIL = 60,
	ET_EXPR_REPORT_PRINTER = 61,
	ET_EXPR_QUOTED_STRING = 62,
	ET_EXPR_TRANSLATED_STRING = 63,
	ET_EXPR_LITERAL_DOUBLE_STR = 64,
	ET_EXPR_LITERAL_LONG = 65,
	ET_EXPR_LITERAL_STRING = 66,
	ET_EXPR_LITERAL_EMPTY_STRING = 67,
	ET_EXPR_REDUCED = 68,
	ET_EXPR_EXTERNAL = 69,
	ET_EXPR_GET_FLDBUF = 70,
	ET_EXPR_FORM_IS_COMPILED = 71,
	ET_EXPR_WORDWRAP = 72,
	ET_EXPR_NOT_EXISTS_SUBQUERY = 73,
	ET_EXPR_EXISTS_SUBQUERY = 74,
	ET_EXPR_OP_IN_SUBQUERY = 75,
	ET_EXPR_OP_NOTIN_SUBQUERY = 76,
	ET_EXPR_CAST = 77,
	ET_EXPR_CONCAT_LIST = 78,
	ET_EXPR_YEAR_FUNC = 79,
	ET_EXPR_MONTH_FUNC = 80,
	ET_EXPR_DAY_FUNC = 81,
	ET_EXPR_DATE_FUNC = 82,
	ET_EXPR_TIME_FUNC = 83,
	ET_EXPR_DTVAL = 84,
	ET_EXPR_INFIELD = 85,
	ET_EXPR_FIELD_TOUCHED = 86,
	ET_EXPR_NOT_FIELD_TOUCHED = 87,
	ET_EXPR_IVAL_VAL = 88,
	ET_EXPR_TEMP = 89,
	ET_EXPR_BOUND_FCALL = 90,
	ET_EXPR_AGGREGATE = 91,
	ET_EXPR_FGL_SIZEOF = 92,
	ET_EXPR_FGL_ADDRESSOF = 93,
	ET_EXPR_FGL_ISDYNARR_ALLOCATED = 94,
	ET_EXPR_FGL_DYNARR_EXTENTSIZE = 95,
	ET_EXPR_FIELDTOWIDGET = 96,
	ET_EXPR_ID_TO_INT = 97,
	ET_EXPR_FIELDNAME = 98,
	ET_EXPR_MODULE_FUNC = 99,
	ET_EXPR_IDENTIFIER = 100,
	ET_EXPR_PARAMETER = 101,
	ET_EXPR_VARIABLE_IDENTIFIER = 102,
	ET_EXPR_CACHED = 103,
	ET_EXPR_MENU_ALL = 104,
	ET_EXPR_VARIABLE_USAGE = 105,
	ET_EXPR_VARIABLE_USAGE_WITH_ASC_DESC = 106,
	ET_EXPR_SQLBLOCK = 107,
	ET_EXPR_SQLBLOCK_TEXT = 108,
	ET_EXPR_SQLBLOCK_INTO = 109,
	ET_EXPR_SELECT_LIST_ITEM = 110,
	ET_EXPR_BRACKET = 111,
	ET_E_V_OR_LIT_VAR = 112,
	ET_E_V_OR_LIT_INT = 113,
	ET_E_V_OR_LIT_STRING = 114,
	ET_E_V_OR_LIT_VAR_AS_STRING = 115,
	ET_E_V_OR_LIT_IDENT = 116,
	ET_E_V_OR_LIT_NOVALUE = 117,
	ET_EXPR_THROUGH = 118,
	ET_EXPR_WHERE_CURRENT_OF = 119,
	ET_EXPR_ASSOC = 120,
	ET_EXPR_CURSOR_NAME_FUNCTION = 121,
	ET_EXPR_REFERENCE = 122,
	ET_EXPR_PDF_X = 123,
	ET_EXPR_PDF_Y = 124,
	ET_EXPR_PDF_CURRENT_X = 125,
	ET_EXPR_PDF_CURRENT_Y = 126,
	ET_EXPR_CM = 127,
	ET_EXPR_FUNC = 128,
	ET_EXPR_RIGHT_ALIGNED = 129,
	ET_EXPR_TAG = 130,
	ET_EXPR_RETURN_NULL = 131,
	ET_EXPR_SQLERRMESSAGE = 132,
	ET_EXPR_OP_EQUAL_ALL = 133,
	ET_EXPR_OP_LESS_THAN_ALL = 134,
	ET_EXPR_OP_GREATER_THAN_ALL = 135,
	ET_EXPR_OP_NOT_EQUAL_ALL = 136,
	ET_EXPR_OP_LESS_THAN_EQ_ALL = 137,
	ET_EXPR_OP_GREATER_THAN_EQ_ALL = 138,
	ET_EXPR_OP_EQUAL_ANY = 139,
	ET_EXPR_OP_LESS_THAN_ANY = 140,
	ET_EXPR_OP_GREATER_THAN_ANY = 141,
	ET_EXPR_OP_NOT_EQUAL_ANY = 142,
	ET_EXPR_OP_LESS_THAN_EQ_ANY = 143,
	ET_EXPR_OP_GREATER_THAN_EQ_ANY = 144,
	ET_EXPR_SPL_TRACE_ON = 145,
	ET_EXPR_SPL_TRACE_OFF = 146,
	ET_EXPR_SPL_TRACE_PROCEDURE = 147,
	ET_EXPR_SPL_TRACE_EXPR = 148,
	ET_EXPR_NAMED_PARAM = 149,
	ET_EXPR_SPL_FOR_ITEM = 150,
	ET_EXPR_LAST = 151,
};
typedef enum e_expr_type e_expr_type;

struct s_expr_aligned {
	struct expr_str *print_text;
	struct expr_str *print_to;
};
typedef struct s_expr_aligned s_expr_aligned;

struct s_expr_tag {
	struct expr_str *print_text;
	struct expr_str *tag;
};
typedef struct s_expr_tag s_expr_tag;

struct s_expr_cached {
	int cache_num;
	int ref_cnt;
};
typedef struct s_expr_cached s_expr_cached;

struct s_expr_parameter {
	enum e_boolean isReference;
	str expr_string;
};
typedef struct s_expr_parameter s_expr_parameter;

struct s_spl_for_item {
	struct expr_str *start;
	struct expr_str *end;
	struct expr_str *step;
};
typedef struct s_spl_for_item s_spl_for_item;

typedef s_spl_for_item *spl_for_item_ptr;

struct expr_str {
	e_expr_type expr_type;
	union {
		struct s_expr_parameter expr_param;
		str expr_string;
		long expr_long;
		struct s_expr_cached expr_cached;
		struct s_expr_extend *expr_extend;
		struct expr_str_list *expr_list;
		struct s_expr_function_call *expr_function_call;
		struct s_expr_pdf_function_call *expr_pdf_function_call;
		struct s_expr_shared_function_call *expr_shared_function_call;
		struct s_expr_member_function_call_n *expr_member_function_call_n;
		struct s_expr_dynarr_function_call_n *expr_dynarr_function_call_n;
		struct s_expr_external_call *expr_external_call;
		struct s_expr_op *expr_op;
		struct s_expr_current *expr_current;
		struct s_expr_get_fldbuf *expr_get_fldbuf;
		struct s_expr_form_is_compiled *expr_form_is_compiled;
		struct s_expr_infield *expr_infield;
		struct s_expr_wordwrap *expr_wordwrap;
		struct s_expr_in *expr_in;
		struct s_expr_exists_sq *expr_exists_sq;
		struct s_expr_in_sq *expr_in_sq;
		struct s_expr_cast *expr_cast;
		struct s_expr_datetime *expr_datetime;
		struct s_expr_interval *expr_interval;
		struct s_expr_field_touched *expr_field_touched;
		struct s_expr_tmp *expr_tmp;
		struct s_expr_bound_fcall *expr_bound_fcall;
		struct s_expr_agg *expr_agg;
		struct s_expr_dynarr_extent *expr_dynarr_extent;
		struct fh_field_entry *expr_field_entry;
		struct assoc_subscript *expr_assoc_subscript;
		struct expr_str *expr_expr;
		struct variable_usage *expr_variable_usage;
		struct variable_usage_with_asc_desc *expr_variable_usage_with_asc_desc;
		struct s_select_list_item *sl_item;
		struct s_expr_aligned *expr_aligned;
		struct s_expr_tag *expr_tag;
		struct expr_str *var;
		int i;
		str s;
		str sv;
		str si;
		struct s_named_param *expr_named_param;
		struct s_func expr_func;
		struct s_spl_for_item *expr_spl_for_item;
	} expr_str_u;
};
typedef struct expr_str expr_str;

struct fh_field_entry {
	struct expr_str *field;
	struct expr_str *fieldsub;
};
typedef struct fh_field_entry fh_field_entry;

struct fh_field_list {
	struct {
		u_int field_list_entries_len;
		struct fh_field_entry *field_list_entries_val;
	} field_list_entries;
};
typedef struct fh_field_list fh_field_list;

struct variable_usage_with_asc_desc {
	struct variable_usage *var_usage;
	char asc_desc;
};
typedef struct variable_usage_with_asc_desc variable_usage_with_asc_desc;

struct variable_usage {
	str variable_name;
	struct {
		u_int subscripts_len;
		expr_str_ptr *subscripts_val;
	} subscripts;
	expr_str *substrings_start;
	expr_str *substrings_end;
	int variable_id;
	str object_type;
	int datatype;
	int datatype_length;
	enum e_scope escope;
	struct variable_usage *next;
};
typedef struct variable_usage variable_usage;

enum subtype {
	ST_INT = 0,
	ST_EXPR = 1,
	ST_VAR = 2,
};
typedef enum subtype subtype;

enum e_sli {
	E_SLI_CHAR = 0,
	E_SLI_COLUMN = 1,
	E_SLI_SUBQUERY_EXPRESSION = 2,
	E_SLI_BUILTIN_CONST_TRUE = 3,
	E_SLI_BUILTIN_CONST_FALSE = 4,
	E_SLI_BUILTIN_CONST_USER = 5,
	E_SLI_BUILTIN_CONST_TODAY = 6,
	E_SLI_BUILTIN_CONST_STAR = 7,
	E_SLI_BUILTIN_CONST_COUNT_STAR = 8,
	E_SLI_BUILTIN_CONST_CURRENT = 9,
	E_SLI_BUILTIN_CONST_ROWID = 10,
	E_SLI_BUILTIN_FUNC_YEAR = 11,
	E_SLI_BUILTIN_FUNC_MONTH = 12,
	E_SLI_BUILTIN_FUNC_DAY = 13,
	E_SLI_BUILTIN_FUNC_MDY = 14,
	E_SLI_BUILTIN_FUNC_WEEKDAY = 15,
	E_SLI_BUILTIN_FUNC_DOW = 16,
	E_SLI_BUILTIN_FUNC_DATE = 17,
	E_SLI_BUILTIN_AGG_AVG = 18,
	E_SLI_BUILTIN_AGG_MAX = 19,
	E_SLI_BUILTIN_AGG_MIN = 20,
	E_SLI_BUILTIN_AGG_SUM = 21,
	E_SLI_BUILTIN_AGG_COUNT = 22,
	E_SLI_BRACKET_EXPR = 23,
	E_SLI_UNITS_YEAR = 24,
	E_SLI_UNITS_MONTH = 25,
	E_SLI_UNITS_DAY = 26,
	E_SLI_UNITS_HOUR = 27,
	E_SLI_UNITS_MINUTE = 28,
	E_SLI_UNITS_SECOND = 29,
	E_SLI_OP = 30,
	E_SLI_BETWEEN = 31,
	E_SLI_NOT_BETWEEN = 32,
	E_SLI_DATETIME = 33,
	E_SLI_INTERVAL = 34,
	E_SLI_EXTEND = 35,
	E_SLI_LITERAL = 36,
	E_SLI_IN_VALUES = 37,
	E_SLI_IN_SELECT = 38,
	E_SLI_NOT_IN_VALUES = 39,
	E_SLI_NOT_IN_SELECT = 40,
	E_SLI_ISNULL = 41,
	E_SLI_ISNOTNULL = 42,
	E_SLI_NOT = 43,
	E_SLI_REGEX_LIKE = 44,
	E_SLI_REGEX_NOT_LIKE = 45,
	E_SLI_REGEX_MATCHES = 46,
	E_SLI_REGEX_NOT_MATCHES = 47,
	E_SLI_REGEX_ILIKE = 48,
	E_SLI_REGEX_NOT_ILIKE = 49,
	E_SLI_FCALL = 50,
	E_SLI_ASC = 51,
	E_SLI_DESC = 52,
	E_SLI_IBIND = 53,
	E_SLI_COLUMN_NOT_TRANSFORMED = 54,
	E_SLI_VARIABLE = 55,
	E_SLI_QUERY = 56,
	E_SLI_SUBQUERY = 57,
	E_SLI_QUERY_PLACEHOLDER = 58,
	E_SLI_JOIN = 59,
	E_SLI_CASE = 60,
	E_SLI_CASE_ELEMENT = 61,
	E_SLI_COLUMN_ORDERBY = 62,
	E_SLI_VAR_REPLACE = 63,
	E_SLI_BUILTIN_CONST_TIME = 64,
	E_SLI_BUILTIN_CONST_NULL = 65,
	E_SLI_VARIABLE_USAGE = 66,
	E_SLI_VARIABLE_USAGE_IN_SELECT_LIST = 67,
	E_SLI_VARIABLE_USAGE_LIST = 68,
	E_SLI_CAST_EXPR = 69,
};
typedef enum e_sli e_sli;

enum sq_expression_type {
	E_SQE_DONT_CARE = 0,
	E_SQE_ALL = 1,
	E_SQE_ANY = 2,
	E_SQE_SOME = 3,
	E_SQE_EXISTS = 4,
	E_SQE_NOT_EXISTS = 5,
};
typedef enum sq_expression_type sq_expression_type;

typedef struct s_select_list_item *elements_ptr;

struct s_select_list_item_list {
	struct {
		u_int list_len;
		elements_ptr *list_val;
	} list;
};
typedef struct s_select_list_item_list s_select_list_item_list;

struct s_sli_case {
	struct {
		u_int elements_len;
		elements_ptr *elements_val;
	} elements;
};
typedef struct s_sli_case s_sli_case;

struct s_sli_case_element {
	struct s_select_list_item *condition;
	struct s_select_list_item *response;
};
typedef struct s_sli_case_element s_sli_case_element;

struct s_sli_cast {
	struct s_select_list_item *expr;
	str datatype;
};
typedef struct s_sli_cast s_sli_cast;

struct sql_statement {
	int stmt_type;
	str sql_string;
	struct expr_str_list *ibind;
	struct expr_str_list *obind;
	int nibind;
	int nobind;
};
typedef struct sql_statement sql_statement;

struct s_table_list_element {
	str tabname;
	str alias;
	struct {
		u_int columns_len;
		str *columns_val;
	} columns;
};
typedef struct s_table_list_element s_table_list_element;

typedef s_table_list_element *s_table_list_element_ptr;

struct s_table_list {
	struct {
		u_int tables_len;
		struct s_table_list_element *tables_val;
	} tables;
};
typedef struct s_table_list s_table_list;

enum e_outer_type {
	E_OUTER_NONE = 0,
	E_OUTER_NORMAL = 1,
	E_OUTER_LEFT_OUTER = 2,
	E_OUTER_RIGHT_OUTER = 3,
	E_INNER = 4,
};
typedef enum e_outer_type e_outer_type;

struct s_table {
	str tabname;
	str alias;
	struct s_table *next;
	e_outer_type outer_type;
	struct s_table *outer_next;
	struct s_select_list_item *outer_join_condition;
};
typedef struct s_table s_table;

struct s_select_finish {
	struct s_select_list_item_list *order_by;
	str into_temp;
	str insert_into;
	int nolog;
};
typedef struct s_select_finish s_select_finish;

struct sq_subquery {
	char aud[20];
	struct s_select_list_item_list *list;
};
typedef struct sq_subquery sq_subquery;

struct s_limit {
	long start;
	long end;
	long offset;
};
typedef struct s_limit s_limit;

struct list_of_integers {
	struct {
		u_int list_len;
		int *list_val;
	} list;
};
typedef struct list_of_integers list_of_integers;

struct ilist {
	int i0;
	int i1;
	int i2;
	int i3;
	int i4;
	int i5;
};
typedef struct ilist ilist;

struct s_select {
	str modifier;
	struct s_limit limit;
	int ncolumns;
	struct s_select_list_item_list *select_list;
	struct s_select_list_item_list list_of_items;
	struct s_table *first;
	struct s_table_list table_elements;
	struct s_select_list_item *where_clause;
	struct s_select_list_item_list *group_by;
	struct s_select_list_item *having;
	struct s_select *next;
	struct s_select_finish *sf;
	struct expr_str_list *into;
	str union_op;
	str extra_statement;
};
typedef struct s_select s_select;

struct s_select_list_item_column {
	str tabname;
	str colname;
	struct ilist subscript;
};
typedef struct s_select_list_item_column s_select_list_item_column;

struct s_select_list_item_sq_expression {
	enum sq_expression_type type;
	struct s_select_list_item *sq;
};
typedef struct s_select_list_item_sq_expression s_select_list_item_sq_expression;

struct s_select_list_item_complex_expr {
	struct s_select_list_item *left;
	struct s_select_list_item *right;
	char op[10];
};
typedef struct s_select_list_item_complex_expr s_select_list_item_complex_expr;

struct s_select_list_item_between_expr {
	struct s_select_list_item *val;
	struct s_select_list_item *from;
	struct s_select_list_item *to;
};
typedef struct s_select_list_item_between_expr s_select_list_item_between_expr;

struct s_select_list_item_sli_expr {
	struct s_select_list_item *left;
	struct s_select_list_item *right;
};
typedef struct s_select_list_item_sli_expr s_select_list_item_sli_expr;

struct s_select_list_item_slil_expr {
	struct s_select_list_item *left;
	struct s_select_list_item_list *right_list;
};
typedef struct s_select_list_item_slil_expr s_select_list_item_slil_expr;

struct s_select_list_item_agg_expr {
	char aud[20];
	struct s_select_list_item *expr;
};
typedef struct s_select_list_item_agg_expr s_select_list_item_agg_expr;

struct s_select_list_item_builtin_fcall {
	char fname[128];
	struct s_select_list_item_list *params;
};
typedef struct s_select_list_item_builtin_fcall s_select_list_item_builtin_fcall;

struct s_select_list_item_fcall {
	char fname[128];
	struct s_select_list_item_list *params;
};
typedef struct s_select_list_item_fcall s_select_list_item_fcall;

struct s_select_list_item_extend {
	struct s_select_list_item *expr;
	char from[20];
	char to[20];
};
typedef struct s_select_list_item_extend s_select_list_item_extend;

struct s_select_list_item_regex {
	struct s_select_list_item *val;
	struct s_select_list_item *regex;
	char escape[20];
};
typedef struct s_select_list_item_regex s_select_list_item_regex;

struct s_select_list_item_data {
	e_sli type;
	union {
		str expression;
		struct s_sli_cast casting;
		struct s_select_list_item *expr;
		struct s_select_list_item_builtin_fcall builtin_fcall;
		struct s_select_list_item_agg_expr agg_expr;
		struct s_select_list_item_column column;
		struct s_select_list_item_extend extend;
		struct s_select_list_item_fcall fcall;
		struct s_sli_case sqlcase;
		struct s_select_list_item_regex regex;
		struct s_select_list_item_between_expr between_expr;
		struct s_sli_case_element sqlcaseelement;
		struct s_select_list_item_complex_expr complex_expr;
		struct s_select_list_item_sli_expr sli_expr;
		struct s_select_list_item_slil_expr slil_expr;
		struct s_select *subquery;
		struct s_select_list_item_sq_expression sq_expression;
		struct variable_usage *var_usage;
		struct s_select_list_item_list *var_usage_list;
	} s_select_list_item_data_u;
};
typedef struct s_select_list_item_data s_select_list_item_data;

struct s_select_list_item {
	struct s_select_list_item_data data;
	str alias;
	int sign;
};
typedef struct s_select_list_item s_select_list_item;

struct s_function_definition {
	str funcname;
	str namespace;
	enum e_boolean isstatic;
	struct expr_str_list expression_list;
	struct expr_str_list *parameters;
	str module;
	int lineno;
	int lastlineno;
	call_list call_list;
	variable_list variables;
	commands *func_commands;
	struct {
		u_int extra_warnings_len;
		lint_warning *extra_warnings_val;
	} extra_warnings;
	str comment;
};
typedef struct s_function_definition s_function_definition;

struct s_report_definition {
	str funcname;
	str namespace;
	enum e_boolean isstatic;
	struct expr_str_list expression_list;
	variable_list variables;
	struct expr_str_list *parameters;
	startrep *report_output_section;
	report_orderby_section *report_orderby_section;
	report_format_section *report_format_section;
	struct expr_str_list aggregates;
	str module;
	int lineno;
	int colno;
	int lastlineno;
	call_list call_list;
	struct {
		u_int extra_warnings_len;
		lint_warning *extra_warnings_val;
	} extra_warnings;
	str comment;
};
typedef struct s_report_definition s_report_definition;

struct s_pdf_report_definition {
	str funcname;
	str namespace;
	enum e_boolean isstatic;
	struct expr_str_list expression_list;
	variable_list variables;
	struct expr_str_list *parameters;
	pdf_startrep *report_output_section;
	report_orderby_section *report_orderby_section;
	report_format_section *report_format_section;
	struct expr_str_list aggregates;
	str module;
	int lineno;
	int colno;
	int lastlineno;
	call_list call_list;
	struct {
		u_int extra_warnings_len;
		lint_warning *extra_warnings_val;
	} extra_warnings;
	str comment;
};
typedef struct s_pdf_report_definition s_pdf_report_definition;

enum module_entry_type {
	E_MET_FUNCTION_DEFINITION = 0,
	E_MET_MAIN_DEFINITION = 1,
	E_MET_REPORT_DEFINITION = 2,
	E_MET_PDF_REPORT_DEFINITION = 3,
	E_MET_CMD = 4,
	E_MET_IMPORT_FUNCTION_DEFINITION = 5,
	E_MET_IMPORT_LEGACY_DEFINITION = 6,
	E_MET_FORMHANDLER_DEFINITION = 7,
	E_MET_CLASS_DEFINITION = 8,
	E_MET_IMPORT_DATATYPE = 9,
	E_MET_IMPORT_PACKAGE = 10,
};
typedef enum module_entry_type module_entry_type;

struct s_class_definition {
	str classname;
	str parentname;
	struct expr_str_list expression_list;
	variable_list private_variables;
	struct {
		u_int class_entries_len;
		module_entry_ptr *class_entries_val;
	} class_entries;
};
typedef struct s_class_definition s_class_definition;

struct s_import_function_definition {
	str funcname;
	int nparam;
	str module;
	int lineno;
	int colno;
};
typedef struct s_import_function_definition s_import_function_definition;

struct s_import_legacy_definition {
	str funcname;
	str module;
	int lineno;
	int colno;
};
typedef struct s_import_legacy_definition s_import_legacy_definition;

struct s_import_datatype {
	str dtype_name;
	str module;
	int lineno;
};
typedef struct s_import_datatype s_import_datatype;

struct s_import_package {
	str package_name;
	str module;
	int lineno;
};
typedef struct s_import_package s_import_package;

struct s_formhandler_definition {
	str formhandler_name;
	struct on_events *before_events;
	struct on_events *after_events;
	struct on_events *field_op_events;
	variable_list variables;
	struct expr_str_list *input_vars;
	str_list *fields;
	struct {
		u_int extra_warnings_len;
		lint_warning *extra_warnings_val;
	} extra_warnings;
};
typedef struct s_formhandler_definition s_formhandler_definition;

struct module_entry {
	module_entry_type met_type;
	union {
		struct s_import_function_definition import_function_definition;
		struct s_import_legacy_definition import_legacy_definition;
		struct s_import_datatype import_datatype_definition;
		struct s_import_package import_package_definition;
		struct s_function_definition function_definition;
		struct s_formhandler_definition formhandler_definition;
		struct s_report_definition report_definition;
		struct s_pdf_report_definition pdf_report_definition;
		struct s_class_definition class_definition;
		struct command *cmd;
	} module_entry_u;
};
typedef struct module_entry module_entry;

struct program_definition {
	struct {
		u_int modules_len;
		struct module_definition *modules_val;
	} modules;
};
typedef struct program_definition program_definition;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_str (XDR *, str*);
extern  bool_t xdr_sql_ident (XDR *, sql_ident*);
extern  bool_t xdr_dt_display_type (XDR *, dt_display_type*);
extern  bool_t xdr_form_field (XDR *, form_field*);
extern  bool_t xdr_x_y (XDR *, x_y*);
extern  bool_t xdr_s_full_col (XDR *, s_full_col*);
extern  bool_t xdr_s_exchange_clobber (XDR *, s_exchange_clobber*);
extern  bool_t xdr_e_scope (XDR *, e_scope*);
extern  bool_t xdr_dt_display (XDR *, dt_display*);
extern  bool_t xdr_cmd_type (XDR *, cmd_type*);
extern  bool_t xdr_str_list (XDR *, str_list*);
extern  bool_t xdr_e_boolean (XDR *, e_boolean*);
extern  bool_t xdr_field (XDR *, field*);
extern  bool_t xdr_attrib (XDR *, attrib*);
extern  bool_t xdr_funcname_list (XDR *, funcname_list*);
extern  bool_t xdr_struct_start_rpc_cmd (XDR *, struct_start_rpc_cmd*);
extern  bool_t xdr_struct_lint_ignore_cmd (XDR *, struct_lint_ignore_cmd*);
extern  bool_t xdr_struct_lint_expect_cmd (XDR *, struct_lint_expect_cmd*);
extern  bool_t xdr_struct_copyback_cmd (XDR *, struct_copyback_cmd*);
extern  bool_t xdr_cancel_type (XDR *, cancel_type*);
extern  bool_t xdr_struct_cancel_cmd (XDR *, struct_cancel_cmd*);
extern  bool_t xdr_struct_update_cmd (XDR *, struct_update_cmd*);
extern  bool_t xdr_s_update_pair (XDR *, s_update_pair*);
extern  bool_t xdr_struct_insert_cmd (XDR *, struct_insert_cmd*);
extern  bool_t xdr_struct_delete_cmd (XDR *, struct_delete_cmd*);
extern  bool_t xdr_e_close_type_nosql (XDR *, e_close_type_nosql*);
extern  bool_t xdr_e_close_type_withsql (XDR *, e_close_type_withsql*);
extern  bool_t xdr_struct_close_cmd (XDR *, struct_close_cmd*);
extern  bool_t xdr_struct_close_sql_cmd (XDR *, struct_close_sql_cmd*);
extern  bool_t xdr_struct_free_cmd (XDR *, struct_free_cmd*);
extern  bool_t xdr_struct_free_blob_cmd (XDR *, struct_free_blob_cmd*);
extern  bool_t xdr_e_block_cmd (XDR *, e_block_cmd*);
extern  bool_t xdr_struct_continue_cmd (XDR *, struct_continue_cmd*);
extern  bool_t xdr_struct_ext_cmd (XDR *, struct_ext_cmd*);
extern  bool_t xdr_e_defer (XDR *, e_defer*);
extern  bool_t xdr_struct_defer_cmd (XDR *, struct_defer_cmd*);
extern  bool_t xdr_struct_code_cmd (XDR *, struct_code_cmd*);
extern  bool_t xdr_struct_disable_menu_cmd (XDR *, struct_disable_menu_cmd*);
extern  bool_t xdr_struct_enable_menu_cmd (XDR *, struct_enable_menu_cmd*);
extern  bool_t xdr_struct_check_menu_cmd (XDR *, struct_check_menu_cmd*);
extern  bool_t xdr_struct_uncheck_menu_cmd (XDR *, struct_uncheck_menu_cmd*);
extern  bool_t xdr_struct_goto_cmd (XDR *, struct_goto_cmd*);
extern  bool_t xdr_struct_label_cmd (XDR *, struct_label_cmd*);
extern  bool_t xdr_struct_error_cmd (XDR *, struct_error_cmd*);
extern  bool_t xdr_struct_execute_cmd (XDR *, struct_execute_cmd*);
extern  bool_t xdr_struct_execute_immediate_cmd (XDR *, struct_execute_immediate_cmd*);
extern  bool_t xdr_struct_flush_cmd (XDR *, struct_flush_cmd*);
extern  bool_t xdr_struct_sleep_cmd (XDR *, struct_sleep_cmd*);
extern  bool_t xdr_struct_move_cmd (XDR *, struct_move_cmd*);
extern  bool_t xdr_struct_show_menu_cmd (XDR *, struct_show_menu_cmd*);
extern  bool_t xdr_struct_show_cmd (XDR *, struct_show_cmd*);
extern  bool_t xdr_struct_hide_cmd (XDR *, struct_hide_cmd*);
extern  bool_t xdr_run_mode (XDR *, run_mode*);
extern  bool_t xdr_struct_run_cmd (XDR *, struct_run_cmd*);
extern  bool_t xdr_struct_run_waiting_for_cmd (XDR *, struct_run_waiting_for_cmd*);
extern  bool_t xdr_e_direction (XDR *, e_direction*);
extern  bool_t xdr_struct_scroll_cmd (XDR *, struct_scroll_cmd*);
extern  bool_t xdr_struct_exit_prog_cmd (XDR *, struct_exit_prog_cmd*);
extern  bool_t xdr_command_ptr (XDR *, command_ptr*);
extern  bool_t xdr_commands (XDR *, commands*);
extern  bool_t xdr_struct_return_cmd (XDR *, struct_return_cmd*);
extern  bool_t xdr_struct_prepare_cmd (XDR *, struct_prepare_cmd*);
extern  bool_t xdr_e_location (XDR *, e_location*);
extern  bool_t xdr_locate_pos (XDR *, locate_pos*);
extern  bool_t xdr_struct_locate_cmd (XDR *, struct_locate_cmd*);
extern  bool_t xdr_struct_message_cmd (XDR *, struct_message_cmd*);
extern  bool_t xdr_struct_init_cmd (XDR *, struct_init_cmd*);
extern  bool_t xdr_struct_next_field_cmd (XDR *, struct_next_field_cmd*);
extern  bool_t xdr_struct_at_term_cmd (XDR *, struct_at_term_cmd*);
extern  bool_t xdr_struct_next_option_cmd (XDR *, struct_next_option_cmd*);
extern  bool_t xdr_struct_show_option_cmd (XDR *, struct_show_option_cmd*);
extern  bool_t xdr_struct_hide_option_cmd (XDR *, struct_hide_option_cmd*);
extern  bool_t xdr_struct_for_cmd (XDR *, struct_for_cmd*);
extern  bool_t xdr_struct_display_form_cmd (XDR *, struct_display_form_cmd*);
extern  bool_t xdr_expr_str_ptr (XDR *, expr_str_ptr*);
extern  bool_t xdr_call_list (XDR *, call_list*);
extern  bool_t xdr_struct_call_cmd (XDR *, struct_call_cmd*);
extern  bool_t xdr_struct_pdf_call_cmd (XDR *, struct_pdf_call_cmd*);
extern  bool_t xdr_if_cond (XDR *, if_cond*);
extern  bool_t xdr_if_conds (XDR *, if_conds*);
extern  bool_t xdr_struct_if_cmd (XDR *, struct_if_cmd*);
extern  bool_t xdr_struct_foreach_cmd (XDR *, struct_foreach_cmd*);
extern  bool_t xdr_single_option (XDR *, single_option*);
extern  bool_t xdr_single_option_ptr (XDR *, single_option_ptr*);
extern  bool_t xdr_manyoptions (XDR *, manyoptions*);
extern  bool_t xdr_struct_options_cmd (XDR *, struct_options_cmd*);
extern  bool_t xdr_startrep (XDR *, startrep*);
extern  bool_t xdr_bluebar_style (XDR *, bluebar_style*);
extern  bool_t xdr_bluebar (XDR *, bluebar*);
extern  bool_t xdr_pdf_startrep (XDR *, pdf_startrep*);
extern  bool_t xdr_convert (XDR *, convert*);
extern  bool_t xdr_struct_convert_cmd (XDR *, struct_convert_cmd*);
extern  bool_t xdr_struct_finish_cmd (XDR *, struct_finish_cmd*);
extern  bool_t xdr_struct_start_cmd (XDR *, struct_start_cmd*);
extern  bool_t xdr_struct_let_cmd (XDR *, struct_let_cmd*);
extern  bool_t xdr_rowscols (XDR *, rowscols*);
extern  bool_t xdr_e_wintype (XDR *, e_wintype*);
extern  bool_t xdr_windowtype (XDR *, windowtype*);
extern  bool_t xdr_struct_open_window_cmd (XDR *, struct_open_window_cmd*);
extern  bool_t xdr_s_fetch_place (XDR *, s_fetch_place*);
extern  bool_t xdr_s_fetch (XDR *, s_fetch*);
extern  bool_t xdr_struct_fetch_cmd (XDR *, struct_fetch_cmd*);
extern  bool_t xdr_struct_open_form_cmd (XDR *, struct_open_form_cmd*);
extern  bool_t xdr_struct_open_form_gui_cmd (XDR *, struct_open_form_gui_cmd*);
extern  bool_t xdr_struct_unload_cmd (XDR *, struct_unload_cmd*);
extern  bool_t xdr_struct_load_cmd (XDR *, struct_load_cmd*);
extern  bool_t xdr_struct_connect_cmd (XDR *, struct_connect_cmd*);
extern  bool_t xdr_report_blocks (XDR *, report_blocks*);
extern  bool_t xdr_report_block_data (XDR *, report_block_data*);
extern  bool_t xdr_report_format_section_entry (XDR *, report_format_section_entry*);
extern  bool_t xdr_report_format_section_entry_ptr (XDR *, report_format_section_entry_ptr*);
extern  bool_t xdr_report_format_section (XDR *, report_format_section*);
extern  bool_t xdr_e_report_orderby (XDR *, e_report_orderby*);
extern  bool_t xdr_report_orderby_section (XDR *, report_orderby_section*);
extern  bool_t xdr_struct_display_cmd (XDR *, struct_display_cmd*);
extern  bool_t xdr_struct_display_b_n_cmd (XDR *, struct_display_b_n_cmd*);
extern  bool_t xdr_struct_open_cursor_cmd (XDR *, struct_open_cursor_cmd*);
extern  bool_t xdr_struct_put_cmd (XDR *, struct_put_cmd*);
extern  bool_t xdr_s_cur_def (XDR *, s_cur_def*);
extern  bool_t xdr_struct_declare_cmd (XDR *, struct_declare_cmd*);
extern  bool_t xdr_struct_validate_cmd (XDR *, struct_validate_cmd*);
extern  bool_t xdr_struct_while_cmd (XDR *, struct_while_cmd*);
extern  bool_t xdr_struct_current_win_cmd (XDR *, struct_current_win_cmd*);
extern  bool_t xdr_when (XDR *, when*);
extern  bool_t xdr_when_ptr (XDR *, when_ptr*);
extern  bool_t xdr_whens (XDR *, whens*);
extern  bool_t xdr_struct_case_cmd (XDR *, struct_case_cmd*);
extern  bool_t xdr_struct_output_cmd (XDR *, struct_output_cmd*);
extern  bool_t xdr_struct_term_rep_cmd (XDR *, struct_term_rep_cmd*);
extern  bool_t xdr_e_clear (XDR *, e_clear*);
extern  bool_t xdr_clear_data (XDR *, clear_data*);
extern  bool_t xdr_struct_clear_cmd (XDR *, struct_clear_cmd*);
extern  bool_t xdr_struct_sql_cmd (XDR *, struct_sql_cmd*);
extern  bool_t xdr_struct_sql_debug_file_cmd (XDR *, struct_sql_debug_file_cmd*);
extern  bool_t xdr_struct_select_cmd (XDR *, struct_select_cmd*);
extern  bool_t xdr_struct_skip_cmd (XDR *, struct_skip_cmd*);
extern  bool_t xdr_struct_skip_by_cmd (XDR *, struct_skip_by_cmd*);
extern  bool_t xdr_struct_skip_to_cmd (XDR *, struct_skip_to_cmd*);
extern  bool_t xdr_struct_sql_transact_cmd (XDR *, struct_sql_transact_cmd*);
extern  bool_t xdr_struct_set_database_cmd (XDR *, struct_set_database_cmd*);
extern  bool_t xdr_struct_whenever_cmd (XDR *, struct_whenever_cmd*);
extern  bool_t xdr_struct_sql_block_cmd (XDR *, struct_sql_block_cmd*);
extern  bool_t xdr_struct_need_cmd (XDR *, struct_need_cmd*);
extern  bool_t xdr_struct_print_cmd (XDR *, struct_print_cmd*);
extern  bool_t xdr_struct_print_file_cmd (XDR *, struct_print_file_cmd*);
extern  bool_t xdr_struct_print_img_cmd (XDR *, struct_print_img_cmd*);
extern  bool_t xdr_struct_pause_cmd (XDR *, struct_pause_cmd*);
extern  bool_t xdr_e_event (XDR *, e_event*);
extern  bool_t xdr_menuoption (XDR *, menuoption*);
extern  bool_t xdr_event_data (XDR *, event_data*);
extern  bool_t xdr_on_event (XDR *, on_event*);
extern  bool_t xdr_on_event_ptr (XDR *, on_event_ptr*);
extern  bool_t xdr_on_events (XDR *, on_events*);
extern  bool_t xdr_struct_menu_cmd (XDR *, struct_menu_cmd*);
extern  bool_t xdr_struct_prompt_cmd (XDR *, struct_prompt_cmd*);
extern  bool_t xdr_struct_display_array_cmd (XDR *, struct_display_array_cmd*);
extern  bool_t xdr_struct_input_cmd (XDR *, struct_input_cmd*);
extern  bool_t xdr_cons_list_entry (XDR *, cons_list_entry*);
extern  bool_t xdr_cons_list_entry_ptr (XDR *, cons_list_entry_ptr*);
extern  bool_t xdr_cons_list (XDR *, cons_list*);
extern  bool_t xdr_struct_input_array_cmd (XDR *, struct_input_array_cmd*);
extern  bool_t xdr_struct_construct_cmd (XDR *, struct_construct_cmd*);
extern  bool_t xdr_user_details (XDR *, user_details*);
extern  bool_t xdr_struct_free_rep_cmd (XDR *, struct_free_rep_cmd*);
extern  bool_t xdr_struct_alloc_arr_cmd (XDR *, struct_alloc_arr_cmd*);
extern  bool_t xdr_struct_dealloc_arr_cmd (XDR *, struct_dealloc_arr_cmd*);
extern  bool_t xdr_struct_resize_arr_cmd (XDR *, struct_resize_arr_cmd*);
extern  bool_t xdr_struct_enable_cmd (XDR *, struct_enable_cmd*);
extern  bool_t xdr_struct_enable_form_cmd (XDR *, struct_enable_form_cmd*);
extern  bool_t xdr_struct_disable_cmd (XDR *, struct_disable_cmd*);
extern  bool_t xdr_struct_disable_form_cmd (XDR *, struct_disable_form_cmd*);
extern  bool_t xdr_struct_msg_box_cmd (XDR *, struct_msg_box_cmd*);
extern  bool_t xdr_struct_next_form_cmd (XDR *, struct_next_form_cmd*);
extern  bool_t xdr_struct_call_shared_cmd (XDR *, struct_call_shared_cmd*);
extern  bool_t xdr_struct_open_statusbox_cmd (XDR *, struct_open_statusbox_cmd*);
extern  bool_t xdr_struct_set_session_cmd (XDR *, struct_set_session_cmd*);
extern  bool_t xdr_vname (XDR *, vname*);
extern  bool_t xdr_vname_name_list (XDR *, vname_name_list*);
extern  bool_t xdr_e_constant_type (XDR *, e_constant_type*);
extern  bool_t xdr_constant_data (XDR *, constant_data*);
extern  bool_t xdr_linked_variable (XDR *, linked_variable*);
extern  bool_t xdr_variable_ptr (XDR *, variable_ptr*);
extern  bool_t xdr_assoc_array_variable (XDR *, assoc_array_variable*);
extern  bool_t xdr_simple_variable (XDR *, simple_variable*);
extern  bool_t xdr_record_variable (XDR *, record_variable*);
extern  bool_t xdr_object_variable (XDR *, object_variable*);
extern  bool_t xdr_assoc_subscript (XDR *, assoc_subscript*);
extern  bool_t xdr_e_variable_type (XDR *, e_variable_type*);
extern  bool_t xdr_variable_data (XDR *, variable_data*);
extern  bool_t xdr_variable (XDR *, variable*);
extern  bool_t xdr_lint_warning (XDR *, lint_warning*);
extern  bool_t xdr_variable_list (XDR *, variable_list*);
extern  bool_t xdr_create_proc_data (XDR *, create_proc_data*);
extern  bool_t xdr_struct_create_proc_cmd (XDR *, struct_create_proc_cmd*);
extern  bool_t xdr_struct_spl_system_cmd (XDR *, struct_spl_system_cmd*);
extern  bool_t xdr_struct_spl_let_cmd (XDR *, struct_spl_let_cmd*);
extern  bool_t xdr_struct_spl_raise_exception_cmd (XDR *, struct_spl_raise_exception_cmd*);
extern  bool_t xdr_spl_if_cond (XDR *, spl_if_cond*);
extern  bool_t xdr_spl_if_conds (XDR *, spl_if_conds*);
extern  bool_t xdr_struct_spl_if_cmd (XDR *, struct_spl_if_cmd*);
extern  bool_t xdr_struct_spl_while_cmd (XDR *, struct_spl_while_cmd*);
extern  bool_t xdr_struct_spl_return_cmd (XDR *, struct_spl_return_cmd*);
extern  bool_t xdr_struct_spl_block_cmd (XDR *, struct_spl_block_cmd*);
extern  bool_t xdr_struct_spl_trace_cmd (XDR *, struct_spl_trace_cmd*);
extern  bool_t xdr_struct_spl_for_cmd (XDR *, struct_spl_for_cmd*);
extern  bool_t xdr_struct_spl_on_exception_cmd (XDR *, struct_spl_on_exception_cmd*);
extern  bool_t xdr_struct_spl_foreach_select_cmd (XDR *, struct_spl_foreach_select_cmd*);
extern  bool_t xdr_s_spl_execute (XDR *, s_spl_execute*);
extern  bool_t xdr_struct_spl_call_cmd (XDR *, struct_spl_call_cmd*);
extern  bool_t xdr_struct_spl_foreach_execute_cmd (XDR *, struct_spl_foreach_execute_cmd*);
extern  bool_t xdr_command_data (XDR *, command_data*);
extern  bool_t xdr_fgl_comment (XDR *, fgl_comment*);
extern  bool_t xdr_cmd_int_list (XDR *, cmd_int_list*);
extern  bool_t xdr_command (XDR *, command*);
extern  bool_t xdr_flist_type (XDR *, flist_type*);
extern  bool_t xdr_flist (XDR *, flist*);
extern  bool_t xdr_file_description (XDR *, file_description*);
extern  bool_t xdr_module_entry_ptr (XDR *, module_entry_ptr*);
extern  bool_t xdr_s_module_entry_ptr_list (XDR *, s_module_entry_ptr_list*);
extern  bool_t xdr_globals_definition (XDR *, globals_definition*);
extern  bool_t xdr_s_dependant_tables (XDR *, s_dependant_tables*);
extern  bool_t xdr_s_source_code (XDR *, s_source_code*);
extern  bool_t xdr_module_definition (XDR *, module_definition*);
extern  bool_t xdr_expr_str_list (XDR *, expr_str_list*);
extern  bool_t xdr_s_expr_op (XDR *, s_expr_op*);
extern  bool_t xdr_s_spl_block (XDR *, s_spl_block*);
extern  bool_t xdr_s_expr_function_call (XDR *, s_expr_function_call*);
extern  bool_t xdr_s_expr_pdf_function_call (XDR *, s_expr_pdf_function_call*);
extern  bool_t xdr_s_expr_shared_function_call (XDR *, s_expr_shared_function_call*);
extern  bool_t xdr_s_expr_infield (XDR *, s_expr_infield*);
extern  bool_t xdr_s_expr_get_fldbuf (XDR *, s_expr_get_fldbuf*);
extern  bool_t xdr_s_expr_form_is_compiled (XDR *, s_expr_form_is_compiled*);
extern  bool_t xdr_s_expr_field_touched (XDR *, s_expr_field_touched*);
extern  bool_t xdr_s_expr_wordwrap (XDR *, s_expr_wordwrap*);
extern  bool_t xdr_s_expr_member_function_call_n (XDR *, s_expr_member_function_call_n*);
extern  bool_t xdr_s_expr_dynarr_function_call_n (XDR *, s_expr_dynarr_function_call_n*);
extern  bool_t xdr_s_expr_extend (XDR *, s_expr_extend*);
extern  bool_t xdr_s_expr_external_call (XDR *, s_expr_external_call*);
extern  bool_t xdr_s_expr_current (XDR *, s_expr_current*);
extern  bool_t xdr_s_expr_in (XDR *, s_expr_in*);
extern  bool_t xdr_s_expr_datetime (XDR *, s_expr_datetime*);
extern  bool_t xdr_s_expr_tmp (XDR *, s_expr_tmp*);
extern  bool_t xdr_s_expr_interval (XDR *, s_expr_interval*);
extern  bool_t xdr_s_expr_exists_sq (XDR *, s_expr_exists_sq*);
extern  bool_t xdr_s_expr_in_sq (XDR *, s_expr_in_sq*);
extern  bool_t xdr_s_expr_cast (XDR *, s_expr_cast*);
extern  bool_t xdr_s_expr_bound_fcall (XDR *, s_expr_bound_fcall*);
extern  bool_t xdr_s_expr_agg (XDR *, s_expr_agg*);
extern  bool_t xdr_s_expr_dynarr_extent (XDR *, s_expr_dynarr_extent*);
extern  bool_t xdr_s_func (XDR *, s_func*);
extern  bool_t xdr_s_named_param (XDR *, s_named_param*);
extern  bool_t xdr_e_expr_type (XDR *, e_expr_type*);
extern  bool_t xdr_s_expr_aligned (XDR *, s_expr_aligned*);
extern  bool_t xdr_s_expr_tag (XDR *, s_expr_tag*);
extern  bool_t xdr_s_expr_cached (XDR *, s_expr_cached*);
extern  bool_t xdr_s_expr_parameter (XDR *, s_expr_parameter*);
extern  bool_t xdr_s_spl_for_item (XDR *, s_spl_for_item*);
extern  bool_t xdr_spl_for_item_ptr (XDR *, spl_for_item_ptr*);
extern  bool_t xdr_expr_str (XDR *, expr_str*);
extern  bool_t xdr_fh_field_entry (XDR *, fh_field_entry*);
extern  bool_t xdr_fh_field_list (XDR *, fh_field_list*);
extern  bool_t xdr_variable_usage_with_asc_desc (XDR *, variable_usage_with_asc_desc*);
extern  bool_t xdr_variable_usage (XDR *, variable_usage*);
extern  bool_t xdr_subtype (XDR *, subtype*);
extern  bool_t xdr_e_sli (XDR *, e_sli*);
extern  bool_t xdr_sq_expression_type (XDR *, sq_expression_type*);
extern  bool_t xdr_elements_ptr (XDR *, elements_ptr*);
extern  bool_t xdr_s_select_list_item_list (XDR *, s_select_list_item_list*);
extern  bool_t xdr_s_sli_case (XDR *, s_sli_case*);
extern  bool_t xdr_s_sli_case_element (XDR *, s_sli_case_element*);
extern  bool_t xdr_s_sli_cast (XDR *, s_sli_cast*);
extern  bool_t xdr_sql_statement (XDR *, sql_statement*);
extern  bool_t xdr_s_table_list_element (XDR *, s_table_list_element*);
extern  bool_t xdr_s_table_list_element_ptr (XDR *, s_table_list_element_ptr*);
extern  bool_t xdr_s_table_list (XDR *, s_table_list*);
extern  bool_t xdr_e_outer_type (XDR *, e_outer_type*);
extern  bool_t xdr_s_table (XDR *, s_table*);
extern  bool_t xdr_s_select_finish (XDR *, s_select_finish*);
extern  bool_t xdr_sq_subquery (XDR *, sq_subquery*);
extern  bool_t xdr_s_limit (XDR *, s_limit*);
extern  bool_t xdr_list_of_integers (XDR *, list_of_integers*);
extern  bool_t xdr_ilist (XDR *, ilist*);
extern  bool_t xdr_s_select (XDR *, s_select*);
extern  bool_t xdr_s_select_list_item_column (XDR *, s_select_list_item_column*);
extern  bool_t xdr_s_select_list_item_sq_expression (XDR *, s_select_list_item_sq_expression*);
extern  bool_t xdr_s_select_list_item_complex_expr (XDR *, s_select_list_item_complex_expr*);
extern  bool_t xdr_s_select_list_item_between_expr (XDR *, s_select_list_item_between_expr*);
extern  bool_t xdr_s_select_list_item_sli_expr (XDR *, s_select_list_item_sli_expr*);
extern  bool_t xdr_s_select_list_item_slil_expr (XDR *, s_select_list_item_slil_expr*);
extern  bool_t xdr_s_select_list_item_agg_expr (XDR *, s_select_list_item_agg_expr*);
extern  bool_t xdr_s_select_list_item_builtin_fcall (XDR *, s_select_list_item_builtin_fcall*);
extern  bool_t xdr_s_select_list_item_fcall (XDR *, s_select_list_item_fcall*);
extern  bool_t xdr_s_select_list_item_extend (XDR *, s_select_list_item_extend*);
extern  bool_t xdr_s_select_list_item_regex (XDR *, s_select_list_item_regex*);
extern  bool_t xdr_s_select_list_item_data (XDR *, s_select_list_item_data*);
extern  bool_t xdr_s_select_list_item (XDR *, s_select_list_item*);
extern  bool_t xdr_s_function_definition (XDR *, s_function_definition*);
extern  bool_t xdr_s_report_definition (XDR *, s_report_definition*);
extern  bool_t xdr_s_pdf_report_definition (XDR *, s_pdf_report_definition*);
extern  bool_t xdr_module_entry_type (XDR *, module_entry_type*);
extern  bool_t xdr_s_class_definition (XDR *, s_class_definition*);
extern  bool_t xdr_s_import_function_definition (XDR *, s_import_function_definition*);
extern  bool_t xdr_s_import_legacy_definition (XDR *, s_import_legacy_definition*);
extern  bool_t xdr_s_import_datatype (XDR *, s_import_datatype*);
extern  bool_t xdr_s_import_package (XDR *, s_import_package*);
extern  bool_t xdr_s_formhandler_definition (XDR *, s_formhandler_definition*);
extern  bool_t xdr_module_entry (XDR *, module_entry*);
extern  bool_t xdr_program_definition (XDR *, program_definition*);

#else /* K&R C */
extern bool_t xdr_str ();
extern bool_t xdr_sql_ident ();
extern bool_t xdr_dt_display_type ();
extern bool_t xdr_form_field ();
extern bool_t xdr_x_y ();
extern bool_t xdr_s_full_col ();
extern bool_t xdr_s_exchange_clobber ();
extern bool_t xdr_e_scope ();
extern bool_t xdr_dt_display ();
extern bool_t xdr_cmd_type ();
extern bool_t xdr_str_list ();
extern bool_t xdr_e_boolean ();
extern bool_t xdr_field ();
extern bool_t xdr_attrib ();
extern bool_t xdr_funcname_list ();
extern bool_t xdr_struct_start_rpc_cmd ();
extern bool_t xdr_struct_lint_ignore_cmd ();
extern bool_t xdr_struct_lint_expect_cmd ();
extern bool_t xdr_struct_copyback_cmd ();
extern bool_t xdr_cancel_type ();
extern bool_t xdr_struct_cancel_cmd ();
extern bool_t xdr_struct_update_cmd ();
extern bool_t xdr_s_update_pair ();
extern bool_t xdr_struct_insert_cmd ();
extern bool_t xdr_struct_delete_cmd ();
extern bool_t xdr_e_close_type_nosql ();
extern bool_t xdr_e_close_type_withsql ();
extern bool_t xdr_struct_close_cmd ();
extern bool_t xdr_struct_close_sql_cmd ();
extern bool_t xdr_struct_free_cmd ();
extern bool_t xdr_struct_free_blob_cmd ();
extern bool_t xdr_e_block_cmd ();
extern bool_t xdr_struct_continue_cmd ();
extern bool_t xdr_struct_ext_cmd ();
extern bool_t xdr_e_defer ();
extern bool_t xdr_struct_defer_cmd ();
extern bool_t xdr_struct_code_cmd ();
extern bool_t xdr_struct_disable_menu_cmd ();
extern bool_t xdr_struct_enable_menu_cmd ();
extern bool_t xdr_struct_check_menu_cmd ();
extern bool_t xdr_struct_uncheck_menu_cmd ();
extern bool_t xdr_struct_goto_cmd ();
extern bool_t xdr_struct_label_cmd ();
extern bool_t xdr_struct_error_cmd ();
extern bool_t xdr_struct_execute_cmd ();
extern bool_t xdr_struct_execute_immediate_cmd ();
extern bool_t xdr_struct_flush_cmd ();
extern bool_t xdr_struct_sleep_cmd ();
extern bool_t xdr_struct_move_cmd ();
extern bool_t xdr_struct_show_menu_cmd ();
extern bool_t xdr_struct_show_cmd ();
extern bool_t xdr_struct_hide_cmd ();
extern bool_t xdr_run_mode ();
extern bool_t xdr_struct_run_cmd ();
extern bool_t xdr_struct_run_waiting_for_cmd ();
extern bool_t xdr_e_direction ();
extern bool_t xdr_struct_scroll_cmd ();
extern bool_t xdr_struct_exit_prog_cmd ();
extern bool_t xdr_command_ptr ();
extern bool_t xdr_commands ();
extern bool_t xdr_struct_return_cmd ();
extern bool_t xdr_struct_prepare_cmd ();
extern bool_t xdr_e_location ();
extern bool_t xdr_locate_pos ();
extern bool_t xdr_struct_locate_cmd ();
extern bool_t xdr_struct_message_cmd ();
extern bool_t xdr_struct_init_cmd ();
extern bool_t xdr_struct_next_field_cmd ();
extern bool_t xdr_struct_at_term_cmd ();
extern bool_t xdr_struct_next_option_cmd ();
extern bool_t xdr_struct_show_option_cmd ();
extern bool_t xdr_struct_hide_option_cmd ();
extern bool_t xdr_struct_for_cmd ();
extern bool_t xdr_struct_display_form_cmd ();
extern bool_t xdr_expr_str_ptr ();
extern bool_t xdr_call_list ();
extern bool_t xdr_struct_call_cmd ();
extern bool_t xdr_struct_pdf_call_cmd ();
extern bool_t xdr_if_cond ();
extern bool_t xdr_if_conds ();
extern bool_t xdr_struct_if_cmd ();
extern bool_t xdr_struct_foreach_cmd ();
extern bool_t xdr_single_option ();
extern bool_t xdr_single_option_ptr ();
extern bool_t xdr_manyoptions ();
extern bool_t xdr_struct_options_cmd ();
extern bool_t xdr_startrep ();
extern bool_t xdr_bluebar_style ();
extern bool_t xdr_bluebar ();
extern bool_t xdr_pdf_startrep ();
extern bool_t xdr_convert ();
extern bool_t xdr_struct_convert_cmd ();
extern bool_t xdr_struct_finish_cmd ();
extern bool_t xdr_struct_start_cmd ();
extern bool_t xdr_struct_let_cmd ();
extern bool_t xdr_rowscols ();
extern bool_t xdr_e_wintype ();
extern bool_t xdr_windowtype ();
extern bool_t xdr_struct_open_window_cmd ();
extern bool_t xdr_s_fetch_place ();
extern bool_t xdr_s_fetch ();
extern bool_t xdr_struct_fetch_cmd ();
extern bool_t xdr_struct_open_form_cmd ();
extern bool_t xdr_struct_open_form_gui_cmd ();
extern bool_t xdr_struct_unload_cmd ();
extern bool_t xdr_struct_load_cmd ();
extern bool_t xdr_struct_connect_cmd ();
extern bool_t xdr_report_blocks ();
extern bool_t xdr_report_block_data ();
extern bool_t xdr_report_format_section_entry ();
extern bool_t xdr_report_format_section_entry_ptr ();
extern bool_t xdr_report_format_section ();
extern bool_t xdr_e_report_orderby ();
extern bool_t xdr_report_orderby_section ();
extern bool_t xdr_struct_display_cmd ();
extern bool_t xdr_struct_display_b_n_cmd ();
extern bool_t xdr_struct_open_cursor_cmd ();
extern bool_t xdr_struct_put_cmd ();
extern bool_t xdr_s_cur_def ();
extern bool_t xdr_struct_declare_cmd ();
extern bool_t xdr_struct_validate_cmd ();
extern bool_t xdr_struct_while_cmd ();
extern bool_t xdr_struct_current_win_cmd ();
extern bool_t xdr_when ();
extern bool_t xdr_when_ptr ();
extern bool_t xdr_whens ();
extern bool_t xdr_struct_case_cmd ();
extern bool_t xdr_struct_output_cmd ();
extern bool_t xdr_struct_term_rep_cmd ();
extern bool_t xdr_e_clear ();
extern bool_t xdr_clear_data ();
extern bool_t xdr_struct_clear_cmd ();
extern bool_t xdr_struct_sql_cmd ();
extern bool_t xdr_struct_sql_debug_file_cmd ();
extern bool_t xdr_struct_select_cmd ();
extern bool_t xdr_struct_skip_cmd ();
extern bool_t xdr_struct_skip_by_cmd ();
extern bool_t xdr_struct_skip_to_cmd ();
extern bool_t xdr_struct_sql_transact_cmd ();
extern bool_t xdr_struct_set_database_cmd ();
extern bool_t xdr_struct_whenever_cmd ();
extern bool_t xdr_struct_sql_block_cmd ();
extern bool_t xdr_struct_need_cmd ();
extern bool_t xdr_struct_print_cmd ();
extern bool_t xdr_struct_print_file_cmd ();
extern bool_t xdr_struct_print_img_cmd ();
extern bool_t xdr_struct_pause_cmd ();
extern bool_t xdr_e_event ();
extern bool_t xdr_menuoption ();
extern bool_t xdr_event_data ();
extern bool_t xdr_on_event ();
extern bool_t xdr_on_event_ptr ();
extern bool_t xdr_on_events ();
extern bool_t xdr_struct_menu_cmd ();
extern bool_t xdr_struct_prompt_cmd ();
extern bool_t xdr_struct_display_array_cmd ();
extern bool_t xdr_struct_input_cmd ();
extern bool_t xdr_cons_list_entry ();
extern bool_t xdr_cons_list_entry_ptr ();
extern bool_t xdr_cons_list ();
extern bool_t xdr_struct_input_array_cmd ();
extern bool_t xdr_struct_construct_cmd ();
extern bool_t xdr_user_details ();
extern bool_t xdr_struct_free_rep_cmd ();
extern bool_t xdr_struct_alloc_arr_cmd ();
extern bool_t xdr_struct_dealloc_arr_cmd ();
extern bool_t xdr_struct_resize_arr_cmd ();
extern bool_t xdr_struct_enable_cmd ();
extern bool_t xdr_struct_enable_form_cmd ();
extern bool_t xdr_struct_disable_cmd ();
extern bool_t xdr_struct_disable_form_cmd ();
extern bool_t xdr_struct_msg_box_cmd ();
extern bool_t xdr_struct_next_form_cmd ();
extern bool_t xdr_struct_call_shared_cmd ();
extern bool_t xdr_struct_open_statusbox_cmd ();
extern bool_t xdr_struct_set_session_cmd ();
extern bool_t xdr_vname ();
extern bool_t xdr_vname_name_list ();
extern bool_t xdr_e_constant_type ();
extern bool_t xdr_constant_data ();
extern bool_t xdr_linked_variable ();
extern bool_t xdr_variable_ptr ();
extern bool_t xdr_assoc_array_variable ();
extern bool_t xdr_simple_variable ();
extern bool_t xdr_record_variable ();
extern bool_t xdr_object_variable ();
extern bool_t xdr_assoc_subscript ();
extern bool_t xdr_e_variable_type ();
extern bool_t xdr_variable_data ();
extern bool_t xdr_variable ();
extern bool_t xdr_lint_warning ();
extern bool_t xdr_variable_list ();
extern bool_t xdr_create_proc_data ();
extern bool_t xdr_struct_create_proc_cmd ();
extern bool_t xdr_struct_spl_system_cmd ();
extern bool_t xdr_struct_spl_let_cmd ();
extern bool_t xdr_struct_spl_raise_exception_cmd ();
extern bool_t xdr_spl_if_cond ();
extern bool_t xdr_spl_if_conds ();
extern bool_t xdr_struct_spl_if_cmd ();
extern bool_t xdr_struct_spl_while_cmd ();
extern bool_t xdr_struct_spl_return_cmd ();
extern bool_t xdr_struct_spl_block_cmd ();
extern bool_t xdr_struct_spl_trace_cmd ();
extern bool_t xdr_struct_spl_for_cmd ();
extern bool_t xdr_struct_spl_on_exception_cmd ();
extern bool_t xdr_struct_spl_foreach_select_cmd ();
extern bool_t xdr_s_spl_execute ();
extern bool_t xdr_struct_spl_call_cmd ();
extern bool_t xdr_struct_spl_foreach_execute_cmd ();
extern bool_t xdr_command_data ();
extern bool_t xdr_fgl_comment ();
extern bool_t xdr_cmd_int_list ();
extern bool_t xdr_command ();
extern bool_t xdr_flist_type ();
extern bool_t xdr_flist ();
extern bool_t xdr_file_description ();
extern bool_t xdr_module_entry_ptr ();
extern bool_t xdr_s_module_entry_ptr_list ();
extern bool_t xdr_globals_definition ();
extern bool_t xdr_s_dependant_tables ();
extern bool_t xdr_s_source_code ();
extern bool_t xdr_module_definition ();
extern bool_t xdr_expr_str_list ();
extern bool_t xdr_s_expr_op ();
extern bool_t xdr_s_spl_block ();
extern bool_t xdr_s_expr_function_call ();
extern bool_t xdr_s_expr_pdf_function_call ();
extern bool_t xdr_s_expr_shared_function_call ();
extern bool_t xdr_s_expr_infield ();
extern bool_t xdr_s_expr_get_fldbuf ();
extern bool_t xdr_s_expr_form_is_compiled ();
extern bool_t xdr_s_expr_field_touched ();
extern bool_t xdr_s_expr_wordwrap ();
extern bool_t xdr_s_expr_member_function_call_n ();
extern bool_t xdr_s_expr_dynarr_function_call_n ();
extern bool_t xdr_s_expr_extend ();
extern bool_t xdr_s_expr_external_call ();
extern bool_t xdr_s_expr_current ();
extern bool_t xdr_s_expr_in ();
extern bool_t xdr_s_expr_datetime ();
extern bool_t xdr_s_expr_tmp ();
extern bool_t xdr_s_expr_interval ();
extern bool_t xdr_s_expr_exists_sq ();
extern bool_t xdr_s_expr_in_sq ();
extern bool_t xdr_s_expr_cast ();
extern bool_t xdr_s_expr_bound_fcall ();
extern bool_t xdr_s_expr_agg ();
extern bool_t xdr_s_expr_dynarr_extent ();
extern bool_t xdr_s_func ();
extern bool_t xdr_s_named_param ();
extern bool_t xdr_e_expr_type ();
extern bool_t xdr_s_expr_aligned ();
extern bool_t xdr_s_expr_tag ();
extern bool_t xdr_s_expr_cached ();
extern bool_t xdr_s_expr_parameter ();
extern bool_t xdr_s_spl_for_item ();
extern bool_t xdr_spl_for_item_ptr ();
extern bool_t xdr_expr_str ();
extern bool_t xdr_fh_field_entry ();
extern bool_t xdr_fh_field_list ();
extern bool_t xdr_variable_usage_with_asc_desc ();
extern bool_t xdr_variable_usage ();
extern bool_t xdr_subtype ();
extern bool_t xdr_e_sli ();
extern bool_t xdr_sq_expression_type ();
extern bool_t xdr_elements_ptr ();
extern bool_t xdr_s_select_list_item_list ();
extern bool_t xdr_s_sli_case ();
extern bool_t xdr_s_sli_case_element ();
extern bool_t xdr_s_sli_cast ();
extern bool_t xdr_sql_statement ();
extern bool_t xdr_s_table_list_element ();
extern bool_t xdr_s_table_list_element_ptr ();
extern bool_t xdr_s_table_list ();
extern bool_t xdr_e_outer_type ();
extern bool_t xdr_s_table ();
extern bool_t xdr_s_select_finish ();
extern bool_t xdr_sq_subquery ();
extern bool_t xdr_s_limit ();
extern bool_t xdr_list_of_integers ();
extern bool_t xdr_ilist ();
extern bool_t xdr_s_select ();
extern bool_t xdr_s_select_list_item_column ();
extern bool_t xdr_s_select_list_item_sq_expression ();
extern bool_t xdr_s_select_list_item_complex_expr ();
extern bool_t xdr_s_select_list_item_between_expr ();
extern bool_t xdr_s_select_list_item_sli_expr ();
extern bool_t xdr_s_select_list_item_slil_expr ();
extern bool_t xdr_s_select_list_item_agg_expr ();
extern bool_t xdr_s_select_list_item_builtin_fcall ();
extern bool_t xdr_s_select_list_item_fcall ();
extern bool_t xdr_s_select_list_item_extend ();
extern bool_t xdr_s_select_list_item_regex ();
extern bool_t xdr_s_select_list_item_data ();
extern bool_t xdr_s_select_list_item ();
extern bool_t xdr_s_function_definition ();
extern bool_t xdr_s_report_definition ();
extern bool_t xdr_s_pdf_report_definition ();
extern bool_t xdr_module_entry_type ();
extern bool_t xdr_s_class_definition ();
extern bool_t xdr_s_import_function_definition ();
extern bool_t xdr_s_import_legacy_definition ();
extern bool_t xdr_s_import_datatype ();
extern bool_t xdr_s_import_package ();
extern bool_t xdr_s_formhandler_definition ();
extern bool_t xdr_module_entry ();
extern bool_t xdr_program_definition ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_FGL_H_RPCGEN */
