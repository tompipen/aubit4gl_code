# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   binary install make include|
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+
#
# $Id: Makefile-install.mki,v 1.61 2003-02-22 01:52:21 afalout Exp $
#

#This file is included from both source distribution root make file and
#root makefile disrtibuted with binary distribution


#FIXME: use install tool:
#	${INSTALL} -m 755    ${FILES}     ${D4GL_BIN}
#	${INSTALL} -m 755 -s ${FGLRUN}    ${D4GL_D4GL}
#	@for file in ${FILES.42m}; do (set -x; ${INSTALL} -m 644 $$file ${D4GL_D4GL} ) done
#	${INSTALL} -m 644    ${FILE1.42f} ${D4GL_D4GL}

#<block for binary install Makefile ======================================>

## ==================================================================
##                    install targets
## ==================================================================

#######################################
#Prepare and install global aubitrc
install.aubitrc:
ifneq "${INFILE}" ""
ifneq "${AUBIT_BIN_INSTALL}" "1"
	sed -e "/${STARTWITH}/s/${STARTWITH}/${REPLACEWITH}/" ${INFILE} > /tmp/aubitrc.tmp
else
	${CP} ${INFILE} /tmp/aubitrc.tmp
endif
ifeq "${AUBITRCFILEEXISTS}" ""
	${MKPATH} ${AUBITETC}
#FIXME: following test will fail if performed on the same run when directory is created,
#since make will evaluate it BEFORE mkdir is executed:
ifeq "$(shell  if test -w ${AUBITETC} ; then echo 1; fi)" "1"
	mv /tmp/aubitrc.tmp ${AUBITETC}/aubitrc
	chmod a+r ${AUBITETC}/aubitrc
	@echo "Configuration files installed to ${AUBITETC}/aubitrc"
else 
	@echo "======== WARNING: ${AUBITETC} is not writable. ==========="
endif
else
	@echo " "
	@echo "WARNING: Configuration file aubitrc exists in ${AUBITETC}/aubitrc"
	@echo "====================== WILL NOT OVERWRITE ======================"
	@echo "use 'make install.aubitrc aubitrc=new' if you want to do that "
	@echo "Automatically created aubitrc placed in /tmp/aubitrc.tmp"
	@echo " "
endif
else
	@echo "ERROR: cannot find ${LOOKFOR_INFILE} - please run 'configure' "
endif

#######################################
#allow user to install amake without compiling aubit. All files installed
#here are also included in default "install" target.
install.amake: install.amake.files install.aubit-config.link
	@echo "Amake installed"

install.amake.files:
	${CP} ${AMAKE_TOBIN} $(BIN_DEST)
	${CP} ${AMAKE_TOINCL} $(INCL_DEST)

install.aubit-config.link: install.bin.install.link.dir
#   -w file True if file exists and is writable.
ifeq "$(shell  if test -w ${BIN_INSTALL_LINK} ; then echo 1; fi)" "1"
	${LN_S} $(INSTALL_DIR)/bin/aubit-config ${BIN_INSTALL_LINK}/aubit-config
	${LN_S} $(INSTALL_DIR)/bin/amake ${BIN_INSTALL_LINK}/amake
else
	@echo "WARNING: ${BIN_INSTALL_LINK} is not writable."
endif

install.bin.install.link.dir:
	${MKPATH} ${BIN_INSTALL_LINK}

#######################################
#Create links for bin programs to location of Aubit bynary installation:
install.links: deinstall.bin.links install.aubit-config.link install.bin.install.link.dir
#   -w file True if file exists and is writable.
ifeq "$(shell  if test -w ${BIN_INSTALL_LINK} ; then echo 1; fi)" "1"
	${LN_S} $(INSTALL_DIR)/bin/aubit ${BIN_INSTALL_LINK}/aubit
	@echo "Links to Aubit programs installed to ${BIN_INSTALL_LINK}/ "
else
	@echo "WARNING: ${BIN_INSTALL_LINK} is not writable."
endif


#This will work only on Linux, and Aubit loads from $AUBITDIR.lib anyway:
#install.libs.conf:
#ifeq "${GREP_LD_SO_CONF}" ""
#	echo "$(INSTALL_DIR)/lib" >> ${LD_SO_CONF}
#	@echo "Added $(INSTALL_DIR)/lib entry to ${LD_SO_CONF}."
#	ldconfig
#	@echo "Refreshed ldconfig cache."
#else
#	@echo "${GREP_LD_SO_CONF} entry in ${LD_SO_CONF} already exists."
#endif

#######################################
install.libs.links: deinstall.libs.links
	${MKPATH} ${LIB_INSTALL_LINK}
ifeq "$(shell  if test -w ${LIB_INSTALL_LINK} ; then echo 1; fi)" "1"
	${LN_S_LIB} $(INSTALL_DIR)/lib/libaubit4gl${SO_EXT} ${LIB_INSTALL_LINK}/libaubit4gl${SO_EXT}
else
	@echo "WARNING: ${LIB_INSTALL_LINK} is not writable."
endif
	@echo "Links to Aubit libraries installed to ${LIB_INSTALL_LINK}/ "

## ==================================================================
##                    deinstall targets
## ==================================================================

#######################################
#we could just drop the whole $(INSTALL_DIR) tree, but this is not very safe;
#in the case user placed some files there (stupido!) he will hate us
#nevertheless, so we will remove file-by-file:
deinstall.all: deinstall.libs.links deinstall.bin.links deinstall.build \
				deinstall.files deinstall.tree deinstall.ldconfig
	@echo ""
	@echo "Aubit compiler de-installed."
	@echo "Config file in ${AUBITETC} was NOT deleted."


#######################################
#Deinstall all installed files:
deinstall.files:
#Run clean from makefiles first:
	-${MAKE} -C $(INSTALL_DIR)/tools/test clean
	-${MAKE} -C $(INSTALL_DIR)/tools/test/gui clean
#Remove files as they are installed - Do not remove files from ${FROMHOME}
	${RM} ${FROMBIN} ${FROMLIB} ${FROMDOCS} ${FROMTEST} ${FROMETC} \
	${FROMROOT} ${FROMINCL} ${FROMIDE} ${FROMCONVSQL}
#Drop Autoconf support directory:
	rm -rf $(INSTALL_DIR)/etc/config
#files created after installation, and by Autoconf:
	${RM} $(INSTALL_DIR)/*.${ARCHEXT} $(INSTALL_DIR)/configure $(INSTALL_DIR)/Makefile \
	$(INSTALL_DIR)/config.log $(INSTALL_DIR)/config.status $(INSTALL_DIR)/etc/aubitrc-bin

#######################################
#delete installation tree (only if directories are now empty):
deinstall.tree:
	-rmdir $(INSTALL_DIR)/bin
	-rmdir $(INSTALL_DIR)/lib
	-rmdir $(INSTALL_DIR)/etc/convertsql
	-rmdir $(INSTALL_DIR)/etc
	-rmdir $(INSTALL_DIR)/incl
	-rmdir $(INSTALL_DIR)/tools/test/gui
	-rmdir $(INSTALL_DIR)/tools/test
	-rmdir $(INSTALL_DIR)/tools
	-rmdir $(INSTALL_DIR)/docs
	-rmdir $(INSTALL_DIR)

#######################################
#Whay do we need LD_LIBRARY_PATH any more? For external libs out of path, like
#Informix ESQL/C, ODBC, GTK...
#Remove entries added to system configuration for libraries paths
deinstall.ldconfig:
ifneq "${LDCONFIG}" "no"
#remove entry from library path config file:
ifeq "${GREP_LD_SO_CONF}" ""
	@echo "$(INSTALL_DIR)/lib entry in ${LD_SO_CONF} does not exist."
else
	sed -e "/${GREP_LD_SO_CONF_REMOVE}/s/${GREP_LD_SO_CONF_REMOVE}//" ${LD_SO_CONF} > /tmp/ld_so_conf.tmp
	mv /tmp/ld_so_conf.tmp ${LD_SO_CONF}
	@echo "Removed ${GREP_LD_SO_CONF} entry from ${LD_SO_CONF}."
	ldconfig
	@echo "Refreshed ldconfig cache."
endif
else
	@echo FIXME: remove stuff from .bashrc
endif

#######################################
#remove links to libraries:
deinstall.libs.links:
	${RM} ${LIB_INSTALL_LINK}/libaubit4gl${SO_EXT}

#######################################
#remove links to binaries:
deinstall.bin.links:
	${RM} ${BIN_INSTALL_LINK}/aubit-config ${BIN_INSTALL_LINK}/aubit

#######################################
#stuff left over from automatic nightly builds (aubitbuild.sh):
deinstall.build:
	${RM} $(INSTALL_DIR)/*.htm $(INSTALL_DIR)/*.tmp $(INSTALL_DIR)/*.html


## ==================================================================
##                    other targets
## ==================================================================

tt:
	(export DEBUG=ALL; cd tools/test; sh aubit 4glc test_build.4gl)
	(export DEBUG=ALL; cd tools/test; sh aubit 4glc -o test_build.4gl)

#######################################
#test: tt
test:
	${MAKE} -C tools/test test.build
	@echo in Makefile: LD_LIBRARY_PATH = ${LD_LIBRARY_PATH}
	@echo "+------------------ Runing Aubit compiled program: ------------------+"
	A4GL_UI=CONSOLE; export A4GL_UI; DEBUG=ALL; export DEBUG; tools/test/test_build
	@echo "+--------------------------------------------------------------------+"

#######################################
ldconfig:
ifneq "${ADD_LD_LIBRARY_PATH}" ""
ifneq "${LDCONFIG}" "no"
	@echo "+--------------------------------------------------------------------+"
		@echo "| Adding to ${LD_SO_CONF} :                                        |"
	@echo "|                                                                    |"
#the dollar sign at the end of apath:		X=`grep $$apath$$ ${LD_SO_CONF}`;\
#means "at the end of the line", to catter for the cases when ently like
#/opt/informix/lib/cli is already in ld.so.conf file, but we want to add
#/opt/informix/lib, and grep thinks it's already in there
	@\
	ADDED=0;\
	for apath in ${ADD_LD_LIBRARY_PATH_SPACE}; do \
		X=`grep $$apath$$ ${LD_SO_CONF}`;\
		if test "$$X" = ""; then \
			ADDED=1;\
			echo $$apath ; \
			echo $$apath >> ${LD_SO_CONF}; \
		fi; \
	done;\
	if test "$$ADDED" = "0"; then \
        echo "| Nothing added: All paths already present in ld.so.conf             |";\
    fi;
	@echo "|                                                                    |"
	@ldconfig
	@echo "| Refreshed ldconfig cache.                                          |"
#	@echo "+--------------------------------------------------------------------+
else
#FIXME: and what if user is not using Bash, but some other shell?
ifeq "$(shell  if test -f ${HOME}/.bashrc ; then echo 1; fi)" "1"
ifeq "$(shell  grep ${ADD_LD_LIBRARY_PATH} ${HOME}/.bashrc)" ""
	@echo "+--------------------------------------------------------------------+"
	@echo "| Adding to ${HOME}/.bashrc :                                        |"
	@echo ' ' >> ${HOME}/.bashrc
	@echo '#Added automatically by Aubit 4gl compiler confgure: ' >> ${HOME}/.bashrc
	@echo 'export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:${ADD_LD_LIBRARY_PATH}' >> ${HOME}/.bashrc
	@echo "| Added to your ${HOME}/.bashrc script LD_LIBRARY_PATH definition:   |"
	@echo "${ADD_LD_LIBRARY_PATH}"
	@echo "| Please source this file, by typing:                                |"
	@echo "|    . ${HOME}/.bashrc                                               |"
	@echo "| BEFORE you attempt to compile Aubit source code, or run Aubit      |"
	@echo "| programs.                                                          |"
#	@echo ""
else
	@echo "+--------------------------------------------------------------------+"
	@echo "| ADD_LD_LIBRARY_PATH already present in ${HOME}/.bashrc |"
endif
else
	@echo "+--------------------------------------------------------------------+"
	@echo "| File ${HOME}/.bashrc does not exist. Please add library paths      |"
	@echo "| manually.                                                          |"
endif
endif
endif

install.aubitbuild.cron: OUT = /etc/cron.d/aubitbuild
install.aubitbuild.cron: OUT2 = ${HOME}/aubitbuild.cron
install.aubitbuild.cron:
#prepare the scrip to run:
	@echo "#!${SH}" > ${OUT}
	@echo "" >> ${OUT}
	@echo ". /etc/profile" >> ${OUT}
	@echo "" >> ${OUT}
	@echo "AUBITDIR=${AUBIT_SRC_ROOT}" >> ${OUT}
	@echo "LOGFILE=/tmp/cron.log" >> ${OUT}
	@echo "SH=${SH}" >> ${OUT}
	@echo "MAILFILE=/tmp/aubitbuild.mail" >> ${OUT}
	@echo "MAILADDR=andrej@falout.org" >> ${OUT}
	@echo "" >> ${OUT}
	@echo ". /etc/bashrc > /dev/null" >> ${OUT}
	@echo "" >> ${OUT}
	@echo "if [ ! -f $$AUBITDIR/bin/aubitbuild.sh ]; then" >> ${OUT}
	@echo "   if [ ! -f $AUBITDIR/configure ]; then" >> ${OUT}
	@echo "      autoconf" >> ${OUT}
	@echo "   fi" >> ${OUT}
	@echo "	  cd $$AUBITDIR" >> ${OUT}
	@echo "   ./configure > /tmp/aubit_configure.log 2>&1" >> ${OUT}
	@echo "   if [ ! -f $$AUBITDIR/bin/aubitbuild.sh ]; then" >> ${OUT}
	@echo "       echo 'Failed to run configure. Stop.'" >> ${OUT}
	@echo "   fi" >> ${OUT}
	@echo "fi" >> ${OUT}
	@echo "" >> ${OUT}
	@echo 'echo "-------------------------------------" >> $$LOGFILE' >> ${OUT}
	@echo 'date >> $$LOGFILE' >> ${OUT}
	@echo '. /etc/profile >> $$LOGFILE' >> ${OUT}
	@echo 'echo "Running : $$SH $$AUBITDIR/bin/aubitbuild.sh"  >> $$LOGFILE' >> ${OUT}
	@echo "" >> ${OUT}
	@echo "##################################" >> ${OUT}
	@echo '$$SH $$AUBITDIR/bin/aubitbuild.sh > $$MAILFILE 2>&1' >> ${OUT}
	@echo "##################################" >> ${OUT}
	@echo "" >> ${OUT}
	@echo "RET=$?" >> ${OUT}
	@echo "if test $RET != '0'" >> ${OUT}
	@echo "then" >> ${OUT}
	@echo "	echo Command returned code $RET >> $LOGFILE" >> ${OUT}
	@echo "fi" >> ${OUT}
	@echo "" >> ${OUT}
	@echo "cat $$MAILFILE | ssmtp $$MAILADDR" >> ${OUT}
	@echo "" >> ${OUT}
	@echo 'date >> $$LOGFILE' >> ${OUT}
	@echo 'echo "-------------------------------------" >> $$LOGFILE' >> ${OUT}
	@echo 'echo >> $$LOGFILE' >> ${OUT}
	@echo "" >> ${OUT}
#prepare the crontab to install:
	@echo "" > ${OUT2}
	@echo "MAILTO=andrej@falout.org" >> ${OUT2}
	@echo "SHELL=${SH}" >> ${OUT2}
	@echo "00 06 * * * ${OUT}" >> ${OUT2}
	@echo "" >> ${OUT2}
	crontab ${OUT2}
	crontab -l
	chmod a+x ${OUT}
	@echo "cron script ${OUT} installed, using ${OUT2}"
ifeq "${TARGET_OS}" "cygwin"
#Activate cron daemon as Windows service:
	cygrunsrv -E cron
	cygrunsrv -R cron
	cygrunsrv -I cron -p /usr/sbin/cron -a -D -o -e"CYGWIN=tty ntsec"
	cygrunsrv -S cron
	chmod 1777 /var/cron
	chmod 1777 /var/cron/tabs
	chmod 640 /var/cron/tabs/*
	chgrp SYSTEM /var/cron/tabs/*
#IS cron running?
	ps -ef | grep cron
#CygWin diagnostic:
#	cygcheck -s -r -v
	@echo "You will need ssmtp.exe IN THE PATH to get mail from cron."
	@echo "Check your /etc/ssmtp/ssmtp.conf for 'root' 'mailhub' and 'hostname' entries."
#	root=postmaster
#	mailhub=aptiva
#	hostname=istation.falout.com
endif
	@echo "Done."

deinstall.aubitbuild.cron:
	crontab -r
	crontab -l
	@echo "crontab removed."

show.gcc.define:
	${CC} -E -dM - </dev/null

libltdl:
	(cd libltdl; configure  --enable-ltdl-install --with-auxdir=../etc/config)
	${MAKE} -C libltdl

#Create Windows setup wizzard executable:
winsetup:
	(cd ${AUBITDIR}; config.status --file etc/aubit-InnoSetup.iss)
	unix2dos -D ${AUBITDIR}/etc/aubit-InnoSetup.iss
	(cd "E:\Program files\W2000\My Inno Setup Extensions 3"; iscc "${WIN_CYGPATH}/${AUBITDIR}/etc/aubit-InnoSetup.iss")
#Setup program should now be at ${AUBITDIR}\etc\Output\setup.exe

#</block for binary install Makefile ===================================>


## ==================================================================
##                    Third-party products installation
## ==================================================================

#NOTE: settings are in Makefiele-common.in


missing.optional: ${INSTALL_MISSING_OPTIONAL}
	@echo " "
	@echo "All missing optional components installed. Please re-run 'configure' to detect changes."
	@echo " "

########################
# 1: Install iODBC ODBC manager
install.iodbc: ${IODBC_RUNTIME_RPM} ${IODBC_SDK_RPM} ${IODBC_GUI_RPM}
#Conflicts with unixODBC:
	-cp /etc/odbc.ini /etc/odbc.ini.${TIME}.bak
	-cp /etc/odbcinst.ini /etc/odbcinst.ini.${TIME}.bak
#with unixODBC-devel
	-cp /usr/include/sql.h /usr/include/sql.h.${TIME}.bak
	-cp /usr/include/sqlext.h /usr/include/sqlext.h.${TIME}.bak
	-cp /usr/include/sqltypes.h /usr/include/sqltypes.h.${TIME}.bak
	${RPM} -i --replacefiles $^
	@echo " "
	@echo "Created backup copies of following files, if they existed:"
	@echo "   /etc/odbc.ini /etc/odbcinst.ini /usr/include/sql.h"
	@echo "   /usr/include/sqlext.h /usr/include/sqltypes.h"
	@echo "by adding extension <current_time>.bak to them."
	@echo "Please review, and edit if appropriate."
	@echo "Package info & manuals: ${IODBC_INFO}"
	@echo " "
	@echo "iODBC ODBC manager installed. Please re-run 'configure' to detect changes."
	@echo " "

########################
# 2: Install PDFlib:
install.pdflib: ${PDFLIB_SRC_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${PDFLIB_SRC}; ./configure; make; make install
	@echo "Package info & manuals: ${PDFLIB_INFO}"
	@echo " "
	@echo "PDFlib compiled and installed.  Please re-run 'configure' to detect changes."
	@echo " "

#   - add LIBDIR to the `LD_RUN_PATH' environment variable
#     during linking
#   - use the `-Wl,--rpath -Wl,LIBDIR' linker flag

######################
# 3: install XML-RPC and libWWW
install.xmlrpc: ${XMLRPC_RPM} ${LIBWWW_RPM} ${XMLRPC_DEV_RPM}
	${RPM} -Uvh $^
	@echo "Package info & manuals: ${XMLRPC_INFO}"
	@echo " "
	@echo " **************** WARNING ! ********************"
	@echo " In some packages of libwwwxml, there is no link between "
	@echo "	libwwwxml.so.0.1.0 and libwwwxml.so - if Aubit configure script fails to "
	@echo " detect XML_RPC libraries, check this, and if needed creat it manually:"
	-ln -s /usr/lib/libmd5.so.0.1.0       /usr/lib/libmd5.so
	-ln -s /usr/lib/libxmltok.so.0.1.0    /usr/lib/libxmltok.so
	-ln -s /usr/lib/libxmlparse.so.0.1.0  /usr/lib/libxmlparse.so
	-ln -s /usr/lib/libwwwxml.so.0.1.0    /usr/lib/libwwwxml.so
	-ln -s /usr/lib/libwwwinit.so.0.1.0   /usr/lib/libwwwinit.so
	-ln -s /usr/lib/libwwwapp.so.0.1.0    /usr/lib/libwwwapp.so
	-ln -s /usr/lib/libwwwhtml.so.0.1.0   /usr/lib/libwwwhtml.so
	-ln -s /usr/lib/libwwwtelnet.so.0.1.0 /usr/lib/libwwwtelnet.so
	-ln -s /usr/lib/libwwwnews.so.0.1.0   /usr/lib/libwwwnews.so
	-ln -s /usr/lib/libwwwhttp.so.0.1.0   /usr/lib/libwwwhttp.so
	-ln -s /usr/lib/libwwwmime.so.0.1.0   /usr/lib/libwwwmime.so
	-ln -s /usr/lib/libwwwgopher.so.0.1.0 /usr/lib/libwwwgopher.so
	-ln -s /usr/lib/libwwwftp.so.0.1.0    /usr/lib/libwwwftp.so
	-ln -s /usr/lib/libwwwfile.so.0.1.0   /usr/lib/libwwwfile.so
	-ln -s /usr/lib/libwwwdir.so.0.1.0    /usr/lib/libwwwdir.so
	-ln -s /usr/lib/libwwwcache.so.0.1.0  /usr/lib/libwwwcache.so
	-ln -s /usr/lib/libwwwstream.so.0.1.0 /usr/lib/libwwwstream.so
	-ln -s /usr/lib/libwwwmux.so.0.1.0    /usr/lib/libwwwmux.so
	-ln -s /usr/lib/libwwwtrans.so.0.1.0  /usr/lib/libwwwtrans.so
	-ln -s /usr/lib/libwwwcore.so.0.1.0   /usr/lib/libwwwcore.so
	-ln -s /usr/lib/libwwwutils.so.0.1.0  /usr/lib/libwwwutils.so
	-ln -s /usr/lib/libwwwzip.so.0.1.0    /usr/lib/libwwwzip.so
	@echo " "
	@echo "libWWW and XML-RPC installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 4: Install IksEmEl Jabber lib:
install.iksemel: ${IKSEMEL_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${IKSEMEL_SRC}; ${SH} autogen.sh; ./configure; make; make install
	@echo "Package info & manuals: ${IKSEMEL_INFO}"
	@echo " "
	@echo "IksEmEl compiled and installed.  Please re-run 'configure' to detect changes."
	@echo " "

#####################
# 5: Install SWIG library wraper:
install.swig: ${SWIG_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SWIG_INFO}"
	@echo " "
	@echo "SWIG installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 6: install GRAPHVIZ that contains Dot tool
install.dot: ${GRAPHVIZ_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${GRAPHVIZ_INFO}"
	@echo " "
	@echo "Graphviz and Dot tool installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 7: Install SAP DB ODBC driver
install.sapdb.odbc: install.sapdb.odbc.first install.sapdb.env
install.sapdb.odbc.first: ${SAPODBC_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SAPODBC_INFO}"
	@echo " "
	@echo "SAP DB ODBC installed.  Please re-run 'configure' to detect changes."
	@echo " "

#####################
# 8: Install DoxyGen documentation tool
install.doxygen: ${DOXYGEN_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${DOXYGEN_INFO}"
	@echo " "
	@echo "DOXYGEN installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 9: Install Informix ESQL/C compiler and ODBC libraries
install.ifx.esql: ${IFXESQLC_BIN_ZIP}
	mkdir -p /tmp/ifxcsdk
	unzip $^ -d /tmp/ifxcsdk
	mkdir -p ${INFORMIXDIR}
#this will automatically create group 'informix':
	-useradd informix
	export INFORMIXDIR=${INFORMIXDIR};	rpm -i --relocate /opt/informix=${INFORMIXDIR} csdk.rpm
#ERROR: INFORMIXDIR does not match the target directory name provided in
#the rpm command.  If you are not installing this product in the
#default INFORMIXDIR name for Linux (/opt/informix), you MUST provide
#your INFORMIXDIR directory name with the --prefix (RPM 2.X syntax)
#or --relocate (RPM 3.X syntax) parameter in your rpm -i command line.
	@echo "Package info & manuals: ${IFXESQLC_INFO}"
	@echo " "
	@echo "Informix CSDK (contains ESQL/C and ODBC) installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 10: Install PostgreSQL ODBC libraries:
install.pg.odbc: install.pg.src install.pg.odbc.first
install.pg.odbc.first: ${PGODBC_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${PGODBC_INFO}"
	@echo " "
	@echo "PostreSQL ODBC libraries installed.  Please re-run 'configure' to detect changes."
	@echo " "

#we need the source code to extract iodbc.h and other headers, missing in other PG distributions:
install.pg.src: ${PGODBC_SRC_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
#	cd /tmp/${PGODBC_SRC_SRC}; ${SH} autogen.sh; ./configure; make; make install
	mkdir -p /usr/include/pgsql/iodbc
	cp /tmp/${PGODBC_SRC_SRC}/iodbc.h /tmp/${PGODBC_SRC_SRC}/isql.h /tmp/${PGODBC_SRC_SRC}/isqlext.h /usr/include/pgsql/iodbc
	@echo " "
	@echo "Package info & manuals: ${PGODBC_INFO}"
	@echo " "
	@echo "PostgreSQL ODBC source code extracted, header files installed."
	@echo "Please re-run 'configure' to detect changes."
	@echo " "

######################
# 11: install unixODBC development package, including header files
install.unixodbcdev: ${UNIXODBCDEV_RPM}
#Conflicts with iODBC:
	-cp /usr/include/sql.h /usr/include/sql.h.${TIME}.bak
	-cp /usr/include/sqlext.h /usr/include/sqlext.h.${TIME}.bak
	-cp /usr/include/sqltypes.h /usr/include/sqltypes.h.${TIME}.bak
	${RPM} -i --replacefiles $^
	@echo " "
	@echo "Created backup copies of following files, if they existed:"
	@echo "   /usr/include/sql.h"
	@echo "   /usr/include/sqlext.h /usr/include/sqltypes.h"
	@echo "by adding extension <current_time>.bak to them."
	@echo "Please review, and edit if appropriate."
	@echo " "
	@echo "Package info & manuals: ${UNIXODBCDEV_INFO}"
	@echo " "
	@echo "unixODBC DEV package installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 12: Install unixODBC libraries, development and GUI manager packages
install.unixodbc: install.unixodbc.first install.unixodbcdev
install.unixodbc.first: ${UNIXODBC_RPM} ${UNIXODBCDEV_GUI_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${UNIXODBC_INFO}"
	@echo " "
	@echo "unixODBC installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 13: Install MPZ GNU Multiple precision library:
install.mpz: ${MPZ_SRC_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${MPZ_SRC}; ./configure; make; make install
	@echo "Package info & manuals: ${MPZ_INFO}"
	@echo " "
	@echo "MPZ library compiled and installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 14: Install PostgreSQL ESQL/C pre-compiler:
install.pg.esql: ${PGESQLC_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${PGESQLC_INFO}"
	@echo " "
	@echo "PostreSQL ESQL/C compiler installed.  Please re-run 'configure' to detect changes."
	@echo " "

#####################
# 15: Install Check unit testing libraries
install.libcheck: ${CHECK_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${CHECK_INFO}"
	@echo " "
	@echo "Check libraries installed.  Please re-run 'configure' to detect changes."
	@echo " "

####################
# 16: Install SADB ESQL/C:
install.sapdb.esql: ${SAPDBESQL_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SAPDBESQL_INFO}"
	@echo " "
	@echo "SAP DB ESQL/C pre-compiler installed.  Please re-run 'configure' to detect changes."
	@echo " "

# 17:
install.sunrpc:
	@echo "Package info & manuals: ${SUNRPC_INFO}"
	@echo "FIXME: TO-DO"

# 18: GTK+ libraries
install.gtk: install.gtk.first install.gtk.dev
install.gtk.first:
	@echo "Package info & manuals: ${GTK_INFO}"
	@echo "FIXME: TO-DO"

# 19:
install.curses:
	@echo "Package info & manuals: ${CURSES_INFO}"
	@echo "FIXME: TO-DO"

# 20: SAP DB Environment, needed by ODBC driver
install.sapdb.env: ${SAPDBENV_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SAPDBENV_INFO}"
	@echo " "
	@echo "SAP DB Environment installed.  Please re-run 'configure' to detect changes."
	@echo " "

#########################
# 21: GTK+ dev packages:
install.gtk.dev: ${GTK_GTK_DEV_RPM} ${GTK_GDK_DEV_RPM} ${GTK_GLIB_DEV_RPM} \
	${GTK_PANGO_DEV_RPM} ${GTK_ATK_DEV_RPM} ${XFREE86_DEV_RPM} ${GNOME_LIBS_DEVEL} \
	${FREETYPE_DEV_RPM} ${FONTCONFIG_DEV_RPM} ${XFT_DEV_RPM} ${GTKPLUS_DEV_RPM} \
	${ORBIT_DEV_RPM} ${IMLIB_DEV_RPM} ${ESOUND_DEV_RPM} ${GLIB_DEV_RPM} \
	${LIBTIFF_DEV_RPM} ${LIBJPEG_DEV_RPM} ${LIBUNGIF_DEV_RPM} ${AUDIOFILE_DEV_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${GTK_DEV_INFO}"
	@echo " "
	@echo "GTK+ development packages installed.  Please re-run 'configure' to detect changes."
	@echo " "

########################
#Define how to get installation files:
${IODBC_RUNTIME_RPM}:
	${WGET} ${IODBC_PATH}/${IODBC_RUNTIME_RPM}
${IODBC_SDK_RPM}:
	${WGET} ${IODBC_PATH}/${IODBC_SDK_RPM}
${IODBC_GUI_RPM}:
	${WGET} ${IODBC_PATH}/${IODBC_GUI_RPM}
${PDFLIB_SRC_TGZ}:
	${WGET} ${PDFLIB_PATH}/${PDFLIB_SRC_TGZ}
${IKSEMEL_TGZ}:
	${WGET} ${IKSEMEL_PATH}/${IKSEMEL_TGZ}
${GRAPHVIZ_RPM}:
	${WGET} ${GRAPHVIZ_PATH}/${GRAPHVIZ_RPM}
${IFXESQLC_BIN_ZIP}:
	${WGET} ${IFXESQLC_PATH}/${IFXESQLC_BIN_ZIP}
${XMLRPC_RPM}:
	${WGET} ${XMLRPC_PATH}/${XMLRPC_RPM}
${XMLRPC_DEV_RPM}:
	${WGET} ${XMLRPC_PATH}/$@
${LIBWWW_RPM}:
	${WGET} ${LIBWWW_PATH}/${LIBWWW_RPM}
${SAPODBC_RPM}:
	${WGET}  ${SAPODBC_PATH}/${SAPODBC_RPM}
${UNIXODBCDEV_RPM}:
	${WGET} ${UNIXODBCDEV_PATH}/${UNIXODBCDEV_RPM}
${PGESQLC_RPM}:
	${WGET} ${PGESQLC_PATH}/${PGESQLC_RPM}
${PGODBC_RPM}:
	${WGET} ${PGODBC_PATH}/${PGODBC_RPM}
${MPZ_SRC_TGZ}:
	${WGET} ${MPZ_PATH}/${MPZ_SRC_TGZ}
${SWIG_RPM}:
	${WGET} ${SWIG_PATH}/${SWIG_RPM}
${DOXYGEN_RPM}:
    ${WGET} ${DOXYGEN_PATH}/${DOXYGEN_RPM}
${CHECK_RPM}:
#NOTE: ?download
	${WGET} ${CHECK_PATH}/${CHECK_RPM}?download
${SAPDBESQL_RPM}:
	${WGET} ${SAPDBESQL_PATH}/${SAPDBESQL_RPM}
${SAPDBENV_RPM}:
	${WGET} ${SAPDBENV_PATH}/${SAPDBENV_RPM}
${GTK_GTK_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_GTK_DEV_RPM}
${GTK_GDK_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_GDK_DEV_RPM}
${GTK_GLIB_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_GLIB_DEV_RPM}
${PGODBC_SRC_TGZ}:
	${WGET} ${PGODBC_SRC_PATH}/$@
${GTK_PANGO_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_PANGO_DEV_RPM}
${GTK_ATK_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_ATK_DEV_RPM}
${XFREE86_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${XFREE86_DEV_RPM}
${GNOME_LIBS_DEVEL}:
	${WGET} ${GTK_DEV_PATH}/${GNOME_LIBS_DEVEL}


${FREETYPE_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${FREETYPE_DEV_RPM}
${FONTCONFIG_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${FONTCONFIG_DEV_RPM}
${XFT_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${XFT_DEV_RPM}
${GTKPLUS_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTKPLUS_DEV_RPM}
${ORBIT_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${ORBIT_DEV_RPM}
${IMLIB_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${IMLIB_DEV_RPM}
${ESOUND_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@

${GLIB_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${LIBTIFF_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${LIBJPEG_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${LIBUNGIF_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${AUDIOFILE_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@




# ============================== EOF ================================

