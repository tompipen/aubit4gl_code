# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   binary install make include|
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-5 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+
#
# $Id: Makefile-install.mki,v 1.110 2006-10-21 13:02:49 afalout Exp $
#

#This file is included from both source distribution root make file and
#root makefile disrtibuted with binary distribution


#FIXME: use install tool:
#	${INSTALL} -m 755    ${FILES}     ${D4GL_BIN}
#	${INSTALL} -m 755 -s ${FGLRUN}    ${D4GL_D4GL}
#	@for file in ${FILES.42m}; do (set -x; ${INSTALL} -m 644 $$file ${D4GL_D4GL} ) done
#	${INSTALL} -m 644    ${FILE1.42f} ${D4GL_D4GL}

#<block for binary install Makefile ======================================>

#Cant declare PHONY here???
#.PHONY: install.links install.bin.links install.lib.links \
#	deinstall.links: deinstall.bin.links deinstall.libs.links

## ==================================================================
##                    install targets
## ==================================================================

#######################################
#Prepare and install global aubitrc
install.aubitrc:
ifneq "${INFILE}" ""
ifneq "${AUBIT_BIN_INSTALL}" "1"
	sed -e "/${STARTWITH}/s/${STARTWITH}/${REPLACEWITH}/" ${INFILE} > /tmp/aubitrc.tmp
else
	${CP} ${INFILE} /tmp/aubitrc.tmp
endif
ifeq "${AUBITRCFILEEXISTS}" ""
	@if ! test -d ${AUBITETC} ; then ${MKPATH} ${AUBITETC}; fi
#THIS MUST BE A PURE SHELL - not a $(shell ...) as make variables are evaluated
#BEFORE any make target commands are executed!
	@if test -w ${AUBITETC} ; then \
		mv /tmp/aubitrc.tmp ${AUBITETC}/aubitrc; \
		chmod a+r ${AUBITETC}/aubitrc; \
		echo "Configuration files installed to ${AUBITETC}/aubitrc"; \
	else \
		echo "======== NOTE: ${AUBITETC} is not writable. ==========="; \
	fi
else
	@echo " "
	@echo "WARNING: Configuration file aubitrc exists in ${AUBITETC}/aubitrc"
	@echo "====================== WILL NOT OVERWRITE ======================"
	@echo "use 'make install.aubitrc aubitrc=new' if you want to do that "
	@echo "Automatically created aubitrc placed in /tmp/aubitrc.tmp"
	@echo " "
endif
else
	@echo "ERROR: cannot find ${LOOKFOR_INFILE} - please run 'configure' "
endif

#######################################
#allow user to install amake without compiling aubit. All files installed
#here are also included in default "install" target.
install.amake: install.tree install.amake.files install.aubit-config.link
	@echo "Amake installed"

install.amake.files:
	${CP} ${AMAKE_TOBIN} $(BIN_DEST)
	${CP} ${AMAKE_TOINCL} $(INCL_DEST)

install.aubit-config.link: install.bin.install.link.dir
	@if ! test -d ${BIN_INSTALL_LINK}; then ${MKPATH} ${BIN_INSTALL_LINK}; fi
	@if test -w ${BIN_INSTALL_LINK} ; then \
		${LN_S} $(INSTALL_DIR)/bin/aubit-config ${BIN_INSTALL_LINK}/aubit-config; \
		${LN_S} $(INSTALL_DIR)/bin/amake ${BIN_INSTALL_LINK}/amake; \
		echo "Links from $(INSTALL_DIR)/bin to ${BIN_INSTALL_LINK} for aubit-config and amake installed"; \
	else \
		echo " "; \
		echo "+---------------------------------------------------------------------------"; \
		echo "| NOTE: ${BIN_INSTALL_LINK} is not writable-cant install aubit-config link"; \
		echo "+---------------------------------------------------------------------------"; \
		${MKPATH} ${HOME}/bin; \
		if test -w ${HOME}/bin ; then \
			${LN_S} $(INSTALL_DIR)/bin/aubit-config ${HOME}/bin/aubit-config; \
			${LN_S} $(INSTALL_DIR)/bin/amake ${HOME}/bin/amake; \
			echo "Links from $(INSTALL_DIR)/bin to ${HOME}/bin/ for aubit-config and amake installed"; \
		else \
			echo " "; \
			echo "+---------------------------------------------------------------------------"; \
			echo "| WARNING: ${HOME}/bin is not writable-cant install aubit-config link"; \
			echo "+---------------------------------------------------------------------------"; \
		fi \
	fi

install.bin.install.link.dir:
	@if ! test -d ${BIN_INSTALL_LINK}; then ${MKPATH} ${BIN_INSTALL_LINK}; fi
	@if ! test -d ${HOME}/bin; then ${MKPATH} ${HOME}/bin; fi


#Install all links
install.links: install.bin.links install.libs.links
	@echo "All links installed"
	
#De-install all links
deinstall.links: deinstall.bin.links deinstall.libs.links
	@echo "All links de-installed"
	
#######################################
#Create links for bin programs to location of Aubit bynary installation:
install.bin.links: deinstall.bin.links install.aubit-config.link install.bin.install.link.dir
	@if ! test -d ${BIN_INSTALL_LINK}; then ${MKPATH} ${BIN_INSTALL_LINK}; fi
	@if test -w ${BIN_INSTALL_LINK} ; then \
		${LN_S} $(INSTALL_DIR)/bin/aubit ${BIN_INSTALL_LINK}/aubit; \
		echo "Links from $(INSTALL_DIR)/bin to ${BIN_INSTALL_LINK}/ for 'aubit' installed"; \
	else \
		echo " "; \
		echo "+---------------------------------------------------------------------------"; \
		echo "| NOTE: ${BIN_INSTALL_LINK} is not writable - won't install 'aubit' link there"; \
		echo "+---------------------------------------------------------------------------"; \
		if ! test -d ${HOME}/bin ; then ${MKPATH} ${HOME}/bin; fi; \
		if test -w ${HOME}/bin ; then \
			${LN_S} $(INSTALL_DIR)/bin/aubit ${HOME}/bin/aubit; \
			echo "Links from $(INSTALL_DIR)/bin to ${HOME}/bin/ for 'aubit' installed"; \
		else \
			echo " "; \
			echo "+---------------------------------------------------------------------------"; \
			echo "| WARNING: ${HOME}/bin is not writable - won't install 'aubit' link there"; \
			echo "+---------------------------------------------------------------------------"; \
		fi; \
	fi

#######################################
install.libs.links: deinstall.libs.links
#Link libaubit4gl with version string to plain libaubit4gl:
	${LN_S_LIB} $(INSTALL_DIR)/lib/libaubit4gl-${A4GL_VERSION_STRING}${SO_EXT} $(INSTALL_DIR)/lib/libaubit4gl${SO_EXT}
	@if ! test -d ${LIB_INSTALL_LINK}; then ${MKPATH} ${LIB_INSTALL_LINK}; fi
	@if test -w ${LIB_INSTALL_LINK} ; then \
		${LN_S_LIB} $(INSTALL_DIR)/lib/libaubit4gl${SO_EXT} ${LIB_INSTALL_LINK}/libaubit4gl${SO_EXT}; \
		echo "Links from $(INSTALL_DIR)/lib to ${LIB_INSTALL_LINK}/ for libaubit4gl installed"; \
	else \
		echo " "; \
		echo "+---------------------------------------------------------------------------"; \
		echo "| NOTE: ${LIB_INSTALL_LINK} is not writable - won't create Aubit libraries links there"; \
		echo "+---------------------------------------------------------------------------"; \
	fi



#Note: there are not alternatives here - there is no location that is by default writable to 
#to a regular user, that is by default included in LD_LIBRARY_PATH or ldconfig paths.
#Therefore, user will need to add $(INSTALL_DIR)/lib to his LD_LIBRARY_PATH himself
#manually (hopefully to ${HOME}/.profile) as no other options are avilable to regular user 
#appart from asking a sys admin. Or using 'abit' wrapper script.
	

#This will work only on Linux, and Aubit loads from $AUBITDIR.lib anyway:
#But NOT libs that are linked and not dlopen()-ed (like libESQL_ and file...)
#Same target is in Makefile-install makefile (for binary distros)
#Can't put targets in MAkefile-common - I should create one include makefile 
#for targets needed by both binary and source distros 
install.libs.conf:
	@if test -w /etc/ld.so.conf.d ; then \
		echo "$(INSTALL_DIR)/lib" > /etc/ld.so.conf.d/aubit4gl.conf; \
	fi
ifneq "${LDCONFIG}" "no"	
	@if test -w /etc/ ; then \
		if "${LDCONFIG}" ; then \
			echo "Refreshed ldconfig cache." ;\
		else \
			echo "Unable to refresh ldconfig cache." ;\
		fi; \
	fi
else
	@echo "ldconfig not found on your system"
endif


ifeq "1" "2"
#OBSOLETE - The above should have same effect and is simpler
ifneq "${LDCONFIG}" "no"
ifeq "${GREP_LD_SO_CONF}" ""
	@if echo "$(INSTALL_DIR)/lib" >> ${LD_SO_CONF} ; \
	then \
		echo "Added $(INSTALL_DIR)/lib entry to ${LD_SO_CONF}."; \
		if ldconfig ; then \
			echo "Refreshed ldconfig cache." ;\
		else \
			echo "Unable to refresh ldconfig cache." ;\
		fi ;\
	else \
		echo "WARNING : $(INSTALL_DIR)/lib entry NOT ADDED to ${LD_SO_CONF}. (maybe you're not root ?)"; \
	fi
else
	@echo "${GREP_LD_SO_CONF} entry in ${LD_SO_CONF} already exists."
endif
else
	@echo "ldconfig not found on your system"
endif
endif

## ==================================================================
##                    Windows registry
## ==================================================================

#Add basic registry keys, so native windows executable can find aubitrc
install.registry:
ifdef COMSPEC
#A4GL_UI; ValueData: GTK
#Version; ValueData: @AUBIT_VERSION@.@AUBIT_BUILD@; Flags: uninsdeletekey
#ValueName: A4GL_SQLTYPE; ValueData: sqlite;
	regtool add  "/HKCU/Software/Aubit project"
	regtool add  "/HKCU/Software/Aubit project/Aubit 4GL compiler"
	regtool add  "/HKLM/Software/Aubit project"
	regtool add  "/HKLM/Software/Aubit project/Aubit 4GL compiler"
#AUBITDIR	
	regtool add  "/HKCU/Software/Aubit project/Aubit 4GL compiler/AUBITDIR"
	regtool -s set "/HKCU/Software/Aubit project/Aubit 4GL compiler/AUBITDIR" "${AUBITDIR}"
	regtool add  "/HKLM/Software/Aubit project/Aubit 4GL compiler/AUBITDIR"
	regtool -s set "/HKLM/Software/Aubit project/Aubit 4GL compiler/AUBITDIR" "${AUBITDIR}"
#A4GL_INIFILE
	regtool add  "/HKCU/Software/Aubit project/Aubit 4GL compiler/A4GL_INIFILE"
#WARNING - do not hard-code - use @AUBITETC@ instead!!
	regtool -s set "/HKCU/Software/Aubit project/Aubit 4GL compiler/A4GL_INIFILE" "${CYGWIN_PATH_WIN}/etc/opt/aubit4gl/abitrc"
	regtool add  "/HKLM/Software/Aubit project/Aubit 4GL compiler/A4GL_INIFILE"
#WARNING - do not hard-code - use @AUBITETC@ instead!!	
	regtool -s set "/HKLM/Software/Aubit project/Aubit 4GL compiler/A4GL_INIFILE" "${CYGWIN_PATH_WIN}/etc/opt/aubit4gl/abitrc"
#Show current settings
	@echo "-------------------------HKCU-----------------------------------"
	@echo "AUBITDIR=`regtool get "/HKCU/Software/Aubit project/Aubit 4GL compiler/AUBITDIR"`"
	@echo "A4GL_INIFILE=`regtool get "/HKCU/Software/Aubit project/Aubit 4GL compiler/A4GL_INIFILE"`"	
	@echo "-------------------------HKLM-----------------------------------"
	@echo "AUBITDIR=`regtool get "/HKLM/Software/Aubit project/Aubit 4GL compiler/AUBITDIR"`"
	@echo "A4GL_INIFILE=`regtool get "/HKLM/Software/Aubit project/Aubit 4GL compiler/A4GL_INIFILE"`"	
	@echo "----------------------------------------------------------------"	
endif

## ==================================================================
##                    deinstall targets
## ==================================================================

#######################################
#we could just drop the whole $(INSTALL_DIR) tree, but this is not very safe;
#in the case user placed some files there (stupido!) he will hate us
#nevertheless, so we will remove file-by-file:
deinstall.all: deinstall.libs.links deinstall.bin.links deinstall.build \
				deinstall.files deinstall.tree deinstall.ldconfig
	@echo ""
	@echo "Aubit compiler de-installed."
	@echo "Config file in ${AUBITETC} was NOT deleted."


#######################################
#Deinstall all installed files:
deinstall.files:
#Run clean from makefiles first:
	-${MAKE} -C $(INSTALL_DIR)/tools/test clean
	-${MAKE} -C $(INSTALL_DIR)/tools/test/gui clean
#Remove files as they are installed - Do not remove files from ${FROMHOME}
	${RM} ${FROMBIN} ${FROMLIB} ${FROMDOCS} ${FROMTEST} ${FROMETC} \
	${FROMROOT} ${FROMINCL} ${FROMIDE} ${FROMCONVSQL} ${FROMIMPORT} \
	${FROMSETTINGS} ${FROMPLUGIN}
#Remove possibly present previous version of libaubit4gl:
	-${RM} $(INSTALL_DIR)/lib/libaubit4gl-*${SO_EXT}
#Drop Autoconf support directory:
	rm -rf $(INSTALL_DIR)/etc/config
#files created after installation, and by Autoconf:
	${RM} $(INSTALL_DIR)/*.${ARCHEXT} $(INSTALL_DIR)/configure $(INSTALL_DIR)/Makefile \
	$(INSTALL_DIR)/config.log $(INSTALL_DIR)/config.status $(INSTALL_DIR)/etc/aubitrc-bin
	${RM} $(addprefix $(INSTALL_DIR)/,${ALL_MAKEFILE})

#######################################
#delete installation tree (only if directories are now empty):
deinstall.tree:
	-rmdir $(INSTALL_DIR)/bin
	-rmdir $(INSTALL_DIR)/lib
	-rmdir $(INSTALL_DIR)/etc/convertsql
	-rmdir $(INSTALL_DIR)/etc/import
	-rmdir $(INSTALL_DIR)/etc
	-rmdir $(INSTALL_DIR)/incl
	-rmdir $(INSTALL_DIR)/tools/test/gui
	-rmdir $(INSTALL_DIR)/tools/test
	-rmdir $(INSTALL_DIR)/tools/4glpc/settings
	-rmdir $(INSTALL_DIR)/tools/4glpc
	-rmdir $(INSTALL_DIR)/tools
	-rmdir $(INSTALL_DIR)/docs
	-rmdir $(INSTALL_DIR)/plugins-${A4GL_VERSION_STRING}
#Force delete any plugin directories possibly present from previous
#versions that where not properly de-installed, but avoid current version
	-@x=`ls -d $(INSTALL_DIR)/plugins-* 2>/dev/null | grep -v ${A4GL_VERSION_STRING}`; \
		for one in $$x; do \
			echo "Forcing remove of previous version plug-in directory $$one";\
			rm -rf "$$one";\
		done;
	-rmdir $(INSTALL_DIR)

#######################################
#Whay do we need LD_LIBRARY_PATH any more? For external libs out of path, like
#Informix ESQL/C, ODBC, GTK...
#Remove entries added to system configuration for libraries paths
deinstall.ldconfig:
ifneq "${LDCONFIG}" "no"
	@if test -w /etc/ld.so.conf.d ; then \
		${RM} /etc/ld.so.conf.d/aubit4gl.conf; \
	fi
#remove entry from library path config file:
ifeq "${GREP_LD_SO_CONF}" ""
	@echo "$(INSTALL_DIR)/lib entry in ${LD_SO_CONF} does not exist."
else
	sed -e "/${GREP_LD_SO_CONF_REMOVE}/s/${GREP_LD_SO_CONF_REMOVE}//" ${LD_SO_CONF} > /tmp/ld_so_conf.tmp
	mv /tmp/ld_so_conf.tmp ${LD_SO_CONF}
	@echo "Removed ${GREP_LD_SO_CONF} entry from ${LD_SO_CONF}."
	ldconfig
	@echo "Refreshed ldconfig cache."
endif
else
	@echo FIXME: remove stuff from .bashrc
endif

#######################################
#remove links to libraries:
deinstall.libs.links:
#Remove the link from plain name to the one with version string:
	${RM} $(INSTALL_DIR)/lib/libaubit4gl${SO_EXT}
#	@echo "checking ${LIB_INSTALL_LINK}/libaubit4gl${SO_EXT}"
	@if test -L ${LIB_INSTALL_LINK}/libaubit4gl${SO_EXT}; then \
		if test -w ${LIB_INSTALL_LINK} ; then \
			${RM} ${LIB_INSTALL_LINK}/libaubit4gl${SO_EXT}; \
			echo "Removed libaubit4gl link in ${LIB_INSTALL_LINK}"; \
		else \
			echo " "; \
			echo "+---------------------------------------------------------------------------"; \
			echo "| WARNING : Unable to remove link ${LIB_INSTALL_LINK}/libaubit4gl${SO_EXT}"; \
			echo "| - insufficienet user permisions"; \
			echo "+---------------------------------------------------------------------------"; \
		fi; \
	fi


#######################################
#remove links to binaries:
deinstall.bin.links:
	@if test -L ${BIN_INSTALL_LINK}/aubit-config -o -L ${BIN_INSTALL_LINK}/aubit \
			-o -L ${BIN_INSTALL_LINK}/amake; then \
		if test -w ${BIN_INSTALL_LINK} ; then \
			${RM} ${BIN_INSTALL_LINK}/aubit-config ${BIN_INSTALL_LINK}/aubit \
				${BIN_INSTALL_LINK}/amake; \
			echo "Removed aubit-config, amake and aubit links in ${BIN_INSTALL_LINK}"; \
		else \
			echo " "; \
			echo "+---------------------------------------------------------------------------"; \
			echo "| WARNING:Unable to remove the aubit-config and aubit links in the"; \
			echo "| ${BIN_INSTALL_LINK} directory - insufficienet user permisions"; \
			echo "+---------------------------------------------------------------------------"; \
		fi \
	fi
	@if test -L ${HOME}/bin/aubit-config -o -L ${HOME}/bin/aubit \
			-o -L ${HOME}/bin/amake; then \
		if test -w ${HOME}/bin ; then \
			${RM} ${HOME}/bin/aubit-config ${HOME}/bin/aubit \
				${HOME}/bin/amake; \
			echo "Removed aubit-config, amake and aubit links in ${HOME}/bin/aubit-config"; \
		else \
			echo " "; \
			echo "+---------------------------------------------------------------------------"; \
			echo "| WARNING:Unable to remove the aubit-config and aubit links in the"; \
			echo "| ${BIN_INSTALL_LINK} directory - insufficienet user permisions"; \
			echo "+---------------------------------------------------------------------------"; \
		fi \
	fi

#######################################
#stuff left over from automatic nightly builds (aubitbuild.sh):
deinstall.build:
	${RM} $(INSTALL_DIR)/*.htm $(INSTALL_DIR)/*.tmp $(INSTALL_DIR)/*.html


## ==================================================================
##                    other targets
## ==================================================================

tt:
	(export DEBUG=ALL; cd tools/test; sh aubit 4glc test_build.4gl)
	(export DEBUG=ALL; cd tools/test; sh aubit 4glc -o test_build.4gl)

#######################################
#test: tt
test:
	${MAKE} -C tools/test test.build
ifeq "${COMSPEC}" ""
	@echo "in Makefile-install.mki: LD_LIBRARY_PATH = '${LD_LIBRARY_PATH}'"
else
	@echo "in Makefile-install.mki: PATH = '${PATH}'"
endif
	@echo "+------------------ Runing Aubit compiled program: ------------------+"
	A4GL_UI=CONSOLE; export A4GL_UI; DEBUG=ALL; export DEBUG; tools/test/test_build
	@echo "+--------------------------------------------------------------------+"

#######################################
ldconfig:
ifneq "${ADD_LD_LIBRARY_PATH}" ""
ifneq "${LDCONFIG}" "no"
	@echo "+--------------------------------------------------------------------+"
		@echo "| Adding to ${LD_SO_CONF} (if possible) :                          |"
	@echo "|                                                                    |"
#the dollar sign at the end of apath:		X=`grep $$apath$$ ${LD_SO_CONF}`;\
#means "at the end of the line", to catter for the cases when ently like
#/opt/informix/lib/cli is already in ld.so.conf file, but we want to add
#/opt/informix/lib, and grep thinks it's already in there
#WARNING - THIS WILL NOT WORL IF THERE ARE SPACES IN PATHS - WHICH SHOULD
#HOPEFULLY HAPPEN ONLY ON WINDOWS - WHERE THERE IS NO LD_LIBRARY_PATH
#SO WE SHOULD NOT RUN THIS BLOCK ANYWAY
#WE DO NOT RUN THIS IF LDCONFIG IS no - WHICH IT IS ON WINDOWS - BUT MAKE STILL
#EVALUATES THIS CODE ANYWAY
	@\
	ADDED=0;\
	for apath in '${ADD_LD_LIBRARY_PATH_SPACE}' ; do \
		X=`grep "$$apath$$" "${LD_SO_CONF}"`;\
		if test "$$X" = ""; then \
			ADDED=1;\
			echo "Paths : $$apath" ; \
			if echo "$$apath" >> ${LD_SO_CONF} ; \
			then \
				echo "|                                                                    |" \
				ldconfig \
				echo "| Refreshed ldconfig cache.                                          |" \
			else \
				echo "WARNING : Unable to add $$apath to ${LD_SO_CONF} (you're probably not root)"; \
			fi; \
		fi; \
	done;\
	if test "$$ADDED" = "0"; then \
        echo "| Nothing added: All paths already present in ld.so.conf             |";\
        fi;
#	@echo "+--------------------------------------------------------------------+
else
#FIXME: and what if user is not using Bash, but some other shell?
ifeq "$(shell  if test -f ${HOME}/.bashrc ; then echo 1; fi)" "1"
#WARNING - must quote because of Windows, but will it expand with single quotes?
#SHOULD NOT RUN THIS ON WINDOWS ANYWAY - NO LD_LIBRARY_PATH on Windows
#But it will get evaluated by Make anyway
ifeq "$(shell  grep '${ADD_LD_LIBRARY_PATH}' ${HOME}/.bashrc)" ""
	@echo "+--------------------------------------------------------------------+"
	@echo "| Adding to ${HOME}/.bashrc :                                        |"
	@echo ' ' >> ${HOME}/.bashrc
	@echo '#Added automatically by Aubit 4gl compiler confgure: ' >> ${HOME}/.bashrc
	@echo 'export LD_LIBRARY_PATH="$$LD_LIBRARY_PATH:${ADD_LD_LIBRARY_PATH}"' >> ${HOME}/.bashrc
	@echo "| Added to your ${HOME}/.bashrc script LD_LIBRARY_PATH definition:   |"
	@echo "${ADD_LD_LIBRARY_PATH}"
	@echo "| Please source this file, by typing:                                |"
	@echo "|    . ${HOME}/.bashrc                                               |"
	@echo "| BEFORE you attempt to compile Aubit source code, or run Aubit      |"
	@echo "| programs.                                                          |"
#	@echo ""
else
	@echo "+--------------------------------------------------------------------+"
	@echo "| ADD_LD_LIBRARY_PATH already present in ${HOME}/.bashrc |"
endif
else
	@echo "+--------------------------------------------------------------------+"
	@echo "| File ${HOME}/.bashrc does not exist. Please add library paths      |"
	@echo "| manually.                                                          |"
endif
endif
endif


######################################
#Copy our cron script to cron directory
copy.aubitbuild:
ifdef COMSPEC
	${CP} ./etc/aubitbuild.cron.sh /etc/cron.d/
#Make it executable	
	chmod a+x /etc/cron.d/*
	@echo "./etc/aubitbuild.cron.sh copied to /etc/cron.d/"	
else	
	${CP} ./etc/aubitbuild.cron.sh /etc/cron.daily/
	@echo "./etc/aubitbuild.cron.sh copied to /etc/cron.daily/"	
	chmod a+x /etc/cron.daily/
endif	

#####################################
#prepare the crontab file to install:
prepare.crontab.file: OUT2 = ${HOME}/aubitbuild.cron
prepare.crontab.file:
	@echo "" > ${OUT2}
	@echo "MAILTO=andrej@aptiva" >> ${OUT2}
	@echo "SHELL=${SH}" >> ${OUT2}
ifdef COMSPEC
#WATCH OUT FOR UNIX/Windows overwriting each others download page!
#Start Windows job at 01:00:00 AM  
	@echo "00 01 * * * /etc/cron.d/aubitbuild.cron.sh" >> ${OUT2}
else
#Start Linux job at 06:00:00 AM
#Why am I making a copy of aubitbuild.cron.sh anyway?
#	@echo "00 06 * * * /etc/cron.d/aubitbuild.cron.sh" >> ${OUT2}
	@echo "00 06 * * * ${AUBITDIR}/etc/aubitbuild.cron.sh" >> ${OUT2}
endif
	@echo "" >> ${OUT2}

	
######################################
#Put Aubit nihgtly cron script unser daily cron directory
install.cron: OUT2 = ${HOME}/aubitbuild.cron
install.cron: prepare.crontab.file
ifdef COMSPEC
#Copy our cron script to cron directory
	${MAKE} copy.aubitbuild
#Activate the crontab using prepared crontab script
	crontab ${OUT2}
	@echo "cron script /etc/cron.d/aubitbuild.cron.sh installed, using ${OUT2}"	
	${MAKE} show.cron
#We dont want to deinstall as part of install - let user deinstall:	
#	${MAKE} deinstall.cron
#Install cron as Windows service:
#	cygrunsrv -I cron -p /usr/sbin/cron -a -D -o -e"CYGWIN=tty ntsec"
	cygrunsrv -I cron -p /usr/sbin/cron -a -D -o
#Start the service:	
	cygrunsrv -S cron
#Set correct permisions:	
	chmod 1777 /var/cron
	chmod 1777 /var/cron/tabs
	chmod 640 /var/cron/tabs/*
	chgrp SYSTEM /var/cron/tabs/*
	${MAKE} show.cron	
#CygWin diagnostic:
#	cygcheck -s -r -v
	@echo "You will need ssmtp.exe IN THE PATH to get mail from cron."
	@echo "Check your /etc/ssmtp/ssmtp.conf for 'root' 'mailhub' and 'hostname' entries."
	@echo "Log goes to /var/log/cron.log"
#	root=postmaster
#	mailhub=aptiva
#	hostname=istation.falout.com
else
######################## UNIX #########################
ifdef USE_DAILY_CRON
#Just use daily cron job
#What time does daily cron start? - WATCH OUT FOR UNIX/Windows overwriting each others download page!
#looks like 04:02 AM?
	${MAKE} copy.aubitbuild
else
#------------------------------- 
#Install out own crontab, so we can set the start time
#Just in case we forgot it in cron daily scripts directory:
	${RM} /etc/cron.daily/aubitbuild.cron.sh
#Copy our cron script to cron directory
#	${MAKE} copy.aubitbuild
#Activate the crontab using prepared crontab script
	crontab ${OUT2}
#	@echo "cron script /etc/cron.d/aubitbuild.cron.sh installed, using ${OUT2}"
	@echo "cron script ${AUBITDIR}/etc/aubitbuild.cron.sh installed, using ${OUT2}"
	${MAKE} show.cron
	@echo "Log goes to /var/log/cron.log"
#-------------------------------
######################## end UNIX #########################
endif
endif
	@echo "aubitbuild cron script installed."

####################################
#Remove aubitbuild from cron
deinstall.cron:
ifdef COMSPEC
	${RM} /etc/cron.d/aubitbuild.cron.sh
#remove current crontab:	
	crontab -r
#Stop Windows service:
	-cygrunsrv -E cron
#Remove Windows service:
	-cygrunsrv -R cron
#Note - it appears that even after the service is "removed" it is just 
#"marked to be removed" and it actually takes a reboot for it to dissapear
#from services list, so that a new one can be installed?
else
	${RM} /etc/cron.daily/aubitbuild.cron.sh 
endif
	@echo "aubitbuild cron script removed."

#####################################
#Show status of crontab and Windows service
show.cron:	
#show what crontab now has installed:
	crontab -l
#Is cron running?
ifdef COMSPEC
	ps -ef | grep cron
#Query the crontab Windows service:	
	-cygrunsrv.exe -Q cron
else
	ps -ef | grep crond
endif
	



show.gcc.define:
	${CC} -E -dM - </dev/null

libltdl:
	(cd libltdl; configure  --enable-ltdl-install --with-auxdir=../etc/config)
	${MAKE} -C libltdl

#Create Windows setup wizzard executable:
winsetup:
ifndef NOREFRESH
	(cd ${AUBITDIR}; config.status --file etc/aubit-InnoSetup.iss)
	MAKINGAUBIT=0 ${SH} ${AUBITDIR}/bin/4glpc.obsolete -deps
endif
	unix2dos -D ${AUBITDIR}/etc/aubit-InnoSetup.iss
#	(cd "E:\Program files\W2000\My Inno Setup Extensions 3"; iscc "${WIN_CYGPATH}/${AUBITDIR}/etc/aubit-InnoSetup.iss")
#	(cd "E:\Program files\W2000\My Inno Setup Extensions 3"; iscc "${AUBITDIR}/etc/aubit-InnoSetup.iss")
	(cd "${INNO_ROOTDIR}"; iscc "${AUBITDIR}/etc/aubit-InnoSetup.iss")

#Setup program should now be at ${AUBITDIR}\etc\Output\setup.exe

#</block for binary install Makefile ===================================>

################################
#Do a silent install of Windows setup, so we can check if all files 
#we need get installed
install.winsetup.silent:
#/LOADINF="filename" 
#	Instructs Setup to load the settings from the specified file after having checked the command line. This file can be prepared using the '/SAVEINF=' command as explained below. 
#	Don't forget to use quotes if the filename contains spaces. 
#/SAVEINF="filename" 
#	Instructs Setup to save installation settings to the specified file. 
#	Don't forget to use quotes if the filename contains spaces.
#/SILENT shows only progress indicator, /VERYSILENT not even that
	rm -rf d:\tmp\aubit4gl-silent
	${AUBITDIR}/etc/Output/setup.exe /SP- /DIR="d:\tmp\aubit4gl-silent" /NOICONS \
		/COMPONENTS="runtime,compiler,help,4GLexamples,Shell,Make" /VERYSILENT
#Components NOT to install:
#JABBER,GWD,SQLITE,SQLITEODBC,PDFLIB,PCRE,util,TUI
		

## ==================================================================
##                    Third-party products installation settings
## ==================================================================

#			echo "MSYS_ROOTDIR=$MSYS_ROOTDIR"
#			echo "MSYS_VERSION=$MSYS_VERSION"
#			echo "MINGW_ROOTDIR=$MINGW_ROOTDIR"
#			echo "MINGW_VERSION=$MINGW_VERSION"

MSYS_SH		=$(shell cygpath -a "${MSYS_ROOTDIR}")/bin/sh.exe -c
MSYS_CONF	=. /etc/profile

##################
# 1: iODBC ODBC manager
IODBC_INFO          =http://www.iodbc.org
IODBC_PATH          =http://www.iodbc.org/downloads/iODBC
#Archive contains Driver Manager Runtime (iODBC Shared Libraries & 
#Template ".odbc.ini" file) in a RPM (release 3.51.2)
IODBC_RUNTIME_RPM   =libiodbc-3.51.2-1.i386-rh9.rpm
#Archive contains Driver Manager Development (iODBC Static Libraries & 
#Header files) in a RPM Package (release 3.51.2)
IODBC_SDK_RPM       =libiodbc-devel-3.51.2-1.i386-rh9.rpm
#Archive contains graphical administrator and plugins in a RPM 
#package (release 3.51.2)
IODBC_GUI_RPM       =libiodbc-admin-3.51.2-1.i386-rh9.rpm
#Source code:
IODBC_SRC_NAME		=libiodbc-3.52.4
IODBC_SRC_TAR_GZ	=${IODBC_SRC_NAME}.tar.gz

##################
# 2: PDF pdflib
PDFLIB_INFO			=http://www.pdflib.com

#Unix source code:
PDFLIB_PATH			=http://www.pdflib.com/products/pdflib/download/603src
PDFLIB_SRC          =PDFlib-Lite-6.0.3
PDFLIB_SRC_TGZ		=${PDFLIB_SRC}.tar.gz

#Linux binary:
#NOTE: Binary packages of PDFlib will require commertial licensing, 
#otherwise they will print stuff on your pages! We are installing SRC 
#package by default - not binary
PDFLIB_BIN_PATH		=http://www.pdflib.com/products/pdflib/download/503
PDFLIB_BIN_TGZ		=PDFlib-5.0.3-Linux.tar.gz

#Windows (source):
PDFLIB_WIN_PATH     =${PDFLIB_PATH}
PDFLIB_WIN_NAME     =${PDFLIB_SRC}
PDFLIB_WIN_ZIP		=${PDFLIB_WIN_NAME}.zip


##################
# 3: XML-RPC
XMLRPC_INFO			=http://xmlrpc-c.sourceforge.net
XMLRPC_PATH			=http://download.sourceforge.net/xmlrpc-c
XMLRPC_RPM          =xmlrpc-c-0.9.9-1.i386.rpm
XMLRPC_DEV_RPM      =xmlrpc-c-devel-0.9.9-1.i386.rpm
#        xmlrpc-c is needed by xmlrpc-c-devel-0.9.9-1
#        libxmlrpc.so.3 is needed by xmlrpc-c-devel-0.9.9-1
#        libxmlrpc_client.so.3 is needed by xmlrpc-c-devel-0.9.9-1
#        libxmlrpc_xmlparse.so.3 is needed by xmlrpc-c-devel-0.9.9-1
#        libxmlrpc_xmltok.so.3 is needed by xmlrpc-c-devel-0.9.9-1


#Looks like RH no longer has ftp of this - try Fedora maybe?
LIBWWW_PATH         =${RH_RPM_PATH}

ifeq "${RH_RPM_VER}" "7.3"
	LIBWWW_RPM			=w3c-libwww-5.3.2-5.i386.rpm
endif
ifeq "${RH_RPM_VER}" "8.0"
	LIBWWW_RPM			=w3c-libwww-5.4.0-1.i386.rpm
endif
ifeq "${LIBWWW_RPM}" ""
	#default
	LIBWWW_PATH         =ftp://rpmfind.net/linux/redhat/beta/taroon/en/as/i386/RedHat/RPMS
	LIBWWW_RPM			=w3c-libwww-5.4.0-5.i386.rpm
endif


XMLRPC_SRC_PATH		=http://download.sourceforge.net/xmlrpc-c
XMLRPC_SRC_NAME		=xmlrpc-c-0.9.9
XMLRPC_SRC_TAR_GZ	=${XMLRPC_SRC_NAME}.tar.gz

LIBWWW_INFO			=http://www.w3c.org/Library/
LIBWWW_SRC_PATH		=http://www.w3c.org/Library/Distribution
LIBWWW_SRC_NAME		=w3c-libwww-5.4.0
LIBWWW_SRC_ZIP		=${LIBWWW_SRC_NAME}.zip

##################
# 4: eksemel library (JABBER IM protocol)
IKSEMEL_INFO		=http://iksemel.jabberstudio.org
IKSEMEL_PATH        =http://www.jabberstudio.org/files/iksemel
IKSEMEL_SRC         =iksemel-1.2
IKSEMEL_TGZ         =${IKSEMEL_SRC}.tar.gz
#IKSEMEL_SVN_CO		=svn co svn://jabberstudio.org/iksemel/svn/trunk/iksemel
IKSEMEL_SVN_CO		=svn co http://svn.uludag.org.tr/projeler/iksemel/

##################
# 5: swig
SWIG_INFO           =http://www.swig.org
SWIG_PATH           =${RH_RPM_PATH}
ifeq "${RH_RPM_VER}" "7.3"
	SWIG_RPM			=swig-1.1p5-12.i386.rpm
endif
ifeq "${RH_RPM_VER}" "8.0"
	SWIG_RPM			=swig-1.1p5-20.i386.rpm
endif
ifeq "${SWIG_RPM}" ""
	#default
	SWIG_RPM			=swig-1.1p5-20.i386.rpm
endif

##################
# 6: doxygen dot tool, used for drawing dependency graphs - part of Graphviz package
GRAPHVIZ_INFO		=http://www.research.att.com/sw/tools/graphviz/
GRAPHVIZ_PATH       =http://www.graphviz.org/pub/graphviz
GRAPHVIZ_RPM		=graphviz-1.8.10-4.i386.rpm

GRAPHVIZ_WIN_PATH	=http://www.graphviz.org/pub/graphviz/ARCHIVE
GRAPHVIZ_WIN_EXE	=graphviz-1.16.exe
#Freetype2, jpeg, expat, libz, png support libs:
GRAPHVIZ_WIN_EXTRA_LIBS	=http://www.graphviz.org/Misc/third-party.zip

##################
# 7: SAPODBC
SAPODBC_INFO        =http://www.sapdb.org
SAPODBC_PATH		=ftp://ftp.sap.com/pub/sapdb/bin/linux
SAPODBC_RPM			=sapdb-callif-7.3.0.29-1.i386.rpm

##################
# 8: DoxyGen
DOXYGEN_INFO        =http://www.stack.nl/~dimitri/doxygen/
DOXYGEN_PATH		=${RH_RPM_PATH}
ifeq "${RH_RPM_VER}" "7.3"
	DOXYGEN_RPM			=doxygen-1.2.14-4.i386.rpm
endif
ifeq "${RH_RPM_VER}" "8.0"
	DOXYGEN_RPM			=doxygen-1.2.14-8.i386.rpm
endif
ifeq "${DOXYGEN_RPM}" ""
	#default
	DOXYGEN_RPM			=doxygen-1.2.14-8.i386.rpm
endif


##################
# 9: IFX ESQL/C and ODBC
IFXESQLC_INFO       =http://www.ibm.com/informix
#CSDK includes ESQL/C compiler
IFXESQLC_PATH       =ftp://ftp.software.ibm.com/software/data/informix/downloads
IFXESQLC_BIN_ZIP	=csdk280_uc21lin_ux.zip
ifeq "${INFORMIXDIR}" ""
	INFORMIXDIR=/opt/informix
endif

##################
# 10: PGODBC
PGODBC_INFO         =http://gborg.postgresql.org/project/psqlodbc
PGODBC_PATH         =${RH_RPM_PATH}
ifeq "${RH_RPM_VER}" "7.3"
	PGODBC_RPM			=postgresql-odbc-7.2.1-5.i386.rpm
endif
ifeq "${RH_RPM_VER}" "8.0"
	PGODBC_RPM			=postgresql-odbc-7.2.2-1.i386.rpm
endif
ifeq "${PGODBC_RPM}" ""
    #default
	PGODBC_RPM			=postgresql-odbc-7.2.2-1.i386.rpm
endif
#PGODBC_SRC_PATH     =ftp://ftp.us.postgresql.org/odbc/versions/src
PGODBC_SRC_PATH     =http://mirror.poundhost.com/ftp.freebsd.org/distfiles/postgresql

PGODBC_SRC_SRC      =psqlodbc-7.2.5
PGODBC_SRC_TGZ      =${PGODBC_SRC_SRC}.tar.gz

##################
# 11: unixODBC DEV headers
#We will often find unixODBC already installed, but without header files...
UNIXODBCDEV_INFO	=http://www.unixodbc.org
UNIXODBCDEV_PATH    =${RH_RPM_PATH}
ifeq "${RH_RPM_VER}" "7.3"
	UNIXODBCDEV_RPM		=unixODBC-devel-2.2.0-5.i386.rpm
endif
ifeq "${RH_RPM_VER}" "8.0"
	UNIXODBCDEV_RPM		=unixODBC-devel-2.2.2-3.i386.rpm
endif
ifeq "${UNIXODBCDEV_RPM}" ""
    #default
	UNIXODBCDEV_RPM		=unixODBC-devel-2.2.2-3.i386.rpm
endif


##################
# 12: unixODBC
UNIXODBC_INFO		=http://www.unixodbc.org
UNIXODBC_PATH       =${RH_RPM_PATH}
ifeq "${RH_RPM_VER}" "7.3"
	UNIXODBC_RPM		=unixODBC-2.2.0-5.i386.rpm
	UNIXODBC_GUI_RPM	=unixODBC-kde-2.2.0-5.i386.rpm
endif
ifeq "${RH_RPM_VER}" "8.0"
	UNIXODBC_RPM		=unixODBC-2.2.2-3.i386.rpm
	UNIXODBC_GUI_RPM	=unixODBC-kde-2.2.2-3.i386.rpm
endif
ifeq "${UNIXODBC_RPM}" ""
    #default
	UNIXODBC_RPM		=unixODBC-2.2.2-3.i386.rpm
	UNIXODBC_GUI_RPM	=unixODBC-kde-2.2.2-3.i386.rpm
endif

##################
# 13: MPZ - gnu mp
MPZ_INFO            =http://swox.com/gmp
MPZ_MANUAL			=http://www.gnu.org/manual/gmp/html_mono/gmp.html
#MPZ_PATH            =ftp://mirrors.kernel.org/gnu/gmp
MPZ_PATH            =ftp://ftp.gnu.org/gnu/gmp
MPZ_SRC             =gmp-4.1.4
MPZ_SRC_TGZ			=${MPZ_SRC}.tar.gz

##################
# 14: PG ESQL, also (USED TO) contain ODBC headers
PGESQLC_INFO        =http://www.postgresql.org
PGESQLC_PATH        =${RH_RPM_PATH}
ifeq "${RH_RPM_VER}" "7.3"
	PGESQLC_RPM         =postgresql-devel-7.2.1-5.i386.rpm
endif
ifeq "${RH_RPM_VER}" "8.0"
	PGESQLC_RPM         =postgresql-devel-7.2.2-1.i386.rpm
endif
ifeq "${PGESQLC_RPM}" ""
	#default
	PGESQLC_RPM         =postgresql-devel-7.2.2-1.i386.rpm
endif

##################
# 15: libcheck
CHECK_INFO			=http://check.sourceforge.net/
CHECK_PATH			=http://download.sourceforge.net/check
CHECK_RPM			=check-0.8.3-1.i386.rpm
#No specific windows version, try compiling from source code 
CHECK_SRC_PATH		=http://optusnet.dl.sourceforge.net/sourceforge/check
CHECK_SRC_NAME		=check-0.9.2
CHECK_SRC_TAR_GZ	=${CHECK_SRC_NAME}.tar.gz

##################
# 16: SAPDB ESQL/C, also needed by ODBC drivers
SAPDBESQL_INFO      =http://www.sapdb.org
SAPDBESQL_PATH      =ftp://ftp.sap.com/pub/sapdb/bin/linux
SAPDBESQL_RPM       =sapdb-precompiler-7.3.0.29-1.i386.rpm

##################
# 17: Sun RPC - XDR and Sun RPC
SUNRPC_INFO         =

##################
# 18: GTK+ - GUI
#TODO-merge with item 21
ifdef COMSPEC
	#abandoned - GTK_INFO		=http://www.dropline.net/gtk
	GTK_INFO			=www.gimp.org/win32 or http://gladewin32.sourceforge.net/
else
	GTK_INFO			=http://www.gtk.org/
endif
##################
# 19: curses - TUI
CURSES_INFO			=http://www.gnu.org/software/ncurses/ncurses.html

##################
# 20: SAP DB environment, neeed by ESQLC precompiler
SAPDBENV_INFO       =http://www.sapdb.org
SAPDBENV_PATH       =ftp://ftp.sap.com/pub/sapdb/bin/linux
SAPDBENV_RPM        =sapdb-ind-7.3.0.29-1.i386.rpm

#################
# 21: GTK+ development packages - pkg-config info and headers
GTK_DEV_INFO		=http://www.gtk.org/
GTK_DEV_PATH        =${RH_RPM_PATH}

ifeq "${RH_RPM_VER}" "8.0"
	GTK_GTK_DEV_RPM		=gtk2-devel-2.0.6-8.i386.rpm
	GTK_GDK_DEV_RPM		=gdk-pixbuf-devel-0.18.0-4.i386.rpm
	GTK_GLIB_DEV_RPM	=glib2-devel-2.0.6-2.i386.rpm

	GTK_PANGO_DEV_RPM   =pango-devel-1.1.1-1.i386.rpm
	GTK_ATK_DEV_RPM     =atk-devel-1.0.3-1.i386.rpm
	XFREE86_DEV_RPM     =XFree86-devel-4.2.0-72.i386.rpm
	GNOME_LIBS_DEVEL    =gnome-libs-devel-1.4.1.2.90-22.i386.rpm

	FREETYPE_DEV_RPM    =freetype-devel-2.1.2-7.i386.rpm
	FONTCONFIG_DEV_RPM	=fontconfig-devel-2.0-3.i386.rpm
	XFT_DEV_RPM         =Xft-devel-2.0-1.i386.rpm
    GTKPLUS_DEV_RPM     =gtk+-devel-1.2.10-22.i386.rpm
	ORBIT_DEV_RPM       =ORBit-devel-0.5.13-5.i386.rpm
	IMLIB_DEV_RPM		=imlib-devel-1.9.13-9.i386.rpm
	ESOUND_DEV_RPM      =esound-devel-0.2.28-1.i386.rpm

	GLIB_DEV_RPM		=glib-devel-1.2.10-8.i386.rpm
	LIBTIFF_DEV_RPM		=libtiff-devel-3.5.7-7.i386.rpm
	LIBJPEG_DEV_RPM		=libjpeg-devel-6b-21.i386.rpm
	LIBUNGIF_DEV_RPM	=libungif-devel-4.1.0-13.i386.rpm
	AUDIOFILE_DEV_RPM	=audiofile-devel-0.2.3-3.i386.rpm
endif
ifeq "${GTK_GTK_DEV_RPM}" ""
	#default
	GTK_GTK_DEV_RPM=notset
endif

#################
# 22: Yacc (Bison)
#ftp://ftp.gnu.org/gnu/bison/bison-1.875.tar.gz


#################
# 23: Lclint (Splint) C code checker:
#See http://www.splint.org


##################
# 24: Electric Fence
#info: http://perens.com/FreeSoftware/ and http://freshmeat.net/projects/efence/?topic_id=47
#ftp://ftp.perens.com/pub/ElectricFence/

#################
# 26: SQLite
SQLITE_INFO=http://www.hwaci.com/sw/sqlite/index.html
SQLITE_PATH=http://www.hwaci.com/sw/sqlite/
#RPM containing documentation, header files, and static library:
SQLITE_RPM_LIB=sqlite-devel-2.8.5-1.i386.rpm
#RPM containing shared libraries and the sqlite command-line program.
SQLITE_RPM_DEV=sqlite-2.8.5-1.i386.rpm

SQLITE_WIN_PATH=http://sqlite.org
SQLITE_WIN_LIB=sqlitedll-3_0_8.zip
SQLITE_WIN_EXE=sqlite-3_0_8.zip
SQLITE_SRC_NAME=sqlite-3.0.8
SQLITE_SRC_TAR_GZ=${SQLITE_SRC_NAME}.tar.gz

#ODBC driver for SQLite:
SQLITE_ODBC_INFO=http://www.ch-werner.de/sqliteodbc
SQLITE_ODBC_PATH=http://www.ch-werner.de/sqliteodbc
SQLITE_ODBC_SRC=sqliteodbc-0.70
SQLITE_ODBC_TGZ_SRC=${SQLITE_ODBC_SRC}.tar.gz
SQLITE_ODBC_WIN=sqliteodbc-win32.zip

#################
# 27: libspopc
SPOPC_INFO=http://brouits.free.fr/libspopc/
SPOPC_PATH=http://brouits.free.fr/libspopc
SPOPC_SRC=libspopc-0.5.7
SPOPC_TGZ_SRC=${SPOPC_SRC}.tgz

##################
# 28: cint
CINT_INFO=http://root.cern.ch/root/Cint.html
#ifdef COMSPEC
#	#This is MSVC version and creates nmake makefile - no good
#	CINT_BIN_WIN=cintwin
#	CINT_PATH=ftp://root.cern.ch/root/
#	CINT_TAR_GZ_BIN_WIN=${CINT_BIN_WIN}.tar.gz
#	#See:
#	#http://darbujan.fzu.cz/~cint/03/msg00425.html
#	#We have to get source code and compile it with patches available at:
#	#
#	
#else
#http://www-d0.fnal.gov/D0Code/source/CINT/platform/mingw
#http://www-d0.fnal.gov/cgi-bin/cvsweb.cgi/CINT/
	CINT_SRC=cint5.15
	CINT_PATH=ftp://root.cern.ch/root/
	CINT_TAR_GZ_SRC=${CINT_SRC}.tar.gz	
#endif


##################
# 29: PDcurses - TUI
PDCURSES_INFO			=http://pdcurses.sourceforge.net/
PDCURSES_WIN_PATH		=http://umn.dl.sourceforge.net/sourceforge/pdcurses
PDCURSES_WIN_ZIP		=pdc25_vc_w32.zip
PDCURSES_SRC			=pdcurs26
PDCURSES_SRC_ZIP		=${PDCURSES_SRC}.zip
PDCURSES_SRC_UNIX		=PDCurses-2.6
PDCURSES_SRC_TAR_GZ		=${PDCURSES_SRC_UNIX}.tar.gz
ifneq "${COMSPEC}" ""
	PDCURSES_WIN_INSTALLDIR	=$(shell cygpath -u ${HOMEDRIVE})/${PDCURSES_SRC}-mingw
endif

##################
# 30: PCRE - Perl Compatible Regular Expressions 
PCRE_INFO				=http://www.pcre.org/
PCRE_SRC_PATH			=ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre
PCRE_SRC				=pcre-5.0
PCRE_SRC_GZ				=${PCRE_SRC}.tar.gz
#Windows installer (with all dependencies)
#PCRE_WIN_PATH			=http://gnuwin32.sourceforge.net/downlinks/pcre-bin.php
PCRE_WIN_PATH			=http://unc.dl.sourceforge.net/sourceforge/gnuwin32
PCRE_WIN_INSTALLER		=pcre-4.4-bin.exe


##################
# 31: SXML
SXML_INFO				=http://freshmeat.net/projects/sxml
SXML_SRC_PATH			=http://scain.firenze.net
SXML_SRC				=sxml
SXML_SRC_GZ				=${SXML_SRC}.tar.gz

#################
# 32: Valgrind
#Valgrind is Linux only - no Windows port - IS THERE AN EQUIVALENT ON WINDOWS?
VALGRING_INFO			=http://valgrind.kde.org

##################
# 33: PostgreSQL with Informix compatibility patches
PGIFX_INFO				=http://gborg.postgresql.org/project/pginformix/projdisplay.php
#PGIFX_SRC_PATH			=http://informix.fastcrypt.com
PGIFX_SRC_PATH			=http://aubit.com/aubit4gl/postgres
#PGIFX_SRC				=postgresql081704
PGIFX_SRC				=postgresql020705
PGIFX_SRC_GZ			=${PGIFX_SRC}.tar.gz
PGIFX_INSTPATH			=/opt/pg-ifx/${PGIFX_SRC}
PGIFX_CTL				=${PGIFX_INSTPATH}/pg-ifx-ctl-${PGIFX_SRC}

##################
# 34: LibVNCserver:
install.libvncserver:
#CVS modules: libvncserver rdp2vnc vncterm
#	cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/libvncserver login
	${MKPATH} /tmp/libvncserver
	cd /tmp/libvncserver; cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/libvncserver co libvncserver

	
###################
# 35: ORBit CORBA
ORBIT_INFO			=http://www.gnome.org/projects/ORBit2
ORBIT_SRC_PATH		=ftp://ftp.gnome.org/pub/gnome/sources/ORBit2/2.12/
ORBIT_SRC			=ORBit2-2.12.0
ORBIT_SRC_TAR_GZ	=${ORBIT_SRC}.tar.gz
ORBIT_WIN_PATH			=http://hei.unige.ch/~strba5
ORBIT_WIN_BIN_NAME		=ORBit2-2.12.0
ORBIT_WIN_BIN_ZIP		=${ORBIT_WIN_BIN_NAME}.zip
ORBIT_IDL_WIN_BIN_NAME	=libIDL-0.8.4
ORBIT_IDL_WIN_BIN_ZIP	=${ORBIT_IDL_WIN_BIN_NAME}.zip


###################
# 36: C and C++ Code Counter (CCCC) - source code metrics
CCCC_INFO		=http://cccc.sourceforge.net/
CCCC_PATH		=http://optusnet.dl.sourceforge.net/sourceforge/cccc
CCCC_SRC_NAME	=cccc-3.pre84
CCCC_SRC_TAR_GZ	=${CCCC_SRC_NAME}.tar.gz


###################
# 37: SMTP library (send mail)
SMTP_INFO		=http://libsmtp.berlios.de/
SMTP_PATH		=http://download.berlios.de/libsmtp
SMTP_SRC_NAME	=libsmtp-0.8.5
SMTP_SRC_TAR_BZ2=${SMTP_SRC_NAME}.tar.bz2

###################
# 38: Ingres
#INGRES_INFO	=http://opensource.ca.com/projects/ingres
INGRES_INFO		=http://opensource.ingres.com/projects/ingres
#INGRES_PATH	=http://opensource.ca.com/projects/ingres/files/ab.int.lnx.ga/ingres-3.0.1.109-GA-pc-linux-i386.tar.gz/view
INGRES_PATH		=http://downloads.ingres.com/download
INGRES_BIN_NAME	=ingres2006-9.0.4-104-NPTL-gpl-pc-linux-i386
INGRES_BIN_TGZ	=${INGRES_BIN_NAME}.tgz


###################
# 39: SF-upload 
SFDL_INFO=http://sf-upload.sourceforge.net/
SFDL_PATH=http://optusnet.dl.sourceforge.net/sourceforge/sf-upload
SFDL_NAME=sf-upload-2.02
SFDL_TAR_GZ=${SFDL_NAME}.tar.gz

## ==================================================================
##                    Third-party products installation
## ==================================================================

#NOTE: settings are in Makefiele-common.in

install.optional: missing.optional
install.missing: missing.optional
missing.optional: ${INSTALL_MISSING_OPTIONAL}
	@echo " "
	@echo "All missing optional components installed. Please re-run 'configure' to detect changes."
	@echo " "

show.missing:
	@echo "List of missing optional components not detected by Autoconf:"
	@echo ""
	@echo "${INSTALL_MISSING_OPTIONAL}"
	@echo ""
	@echo "Use 'make install.missing' to install them all, or invoke individual targets."
	@echo ""

########################
# 1: Install iODBC ODBC manager
ifeq "${IODBC_USE_RPM}" "1"
install.iodbc: ${IODBC_RUNTIME_RPM} ${IODBC_SDK_RPM} ${IODBC_GUI_RPM}
#Conflicts with unixODBC:
	-cp /etc/odbc.ini /etc/odbc.ini.${TIME}.bak
	-cp /etc/odbcinst.ini /etc/odbcinst.ini.${TIME}.bak
#with unixODBC-devel
	-cp /usr/include/sql.h /usr/include/sql.h.${TIME}.bak
	-cp /usr/include/sqlext.h /usr/include/sqlext.h.${TIME}.bak
	-cp /usr/include/sqltypes.h /usr/include/sqltypes.h.${TIME}.bak
	${RPM} -i --replacefiles $^
	@echo " "
	@echo "Created backup copies of following files, if they existed:"
	@echo "   /etc/odbc.ini /etc/odbcinst.ini /usr/include/sql.h"
	@echo "   /usr/include/sqlext.h /usr/include/sqltypes.h"
	@echo "by adding extension <current_time>.bak to them."
	@echo "Please review, and edit if appropriate."
else
install.iodbc: ${IODBC_SRC_TAR_GZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
#--disable-libodbc is needed to prevent libodbc.so installation, and potential
#conflict with unixODBC library with same name (*diots!)
	cd /tmp/${IODBC_SRC_NAME}; ./configure --prefix=/opt/iodbc --disable-libodbc
	cd /tmp/${IODBC_SRC_NAME}; make
#Create backups:	
	cp /etc/odbc.ini ${HOME}/odbc.ini.${TIME}.bak
	cp /etc/odbcinst.ini ${HOME}/odbcinst.ini.${TIME}.bak
#Must install as root as it installs files under /etc (and it has to)
	su - c "cd /tmp/${IODBC_SRC_NAME}; make install"
endif
	@echo "Package info & manuals: ${IODBC_INFO}"
	@echo " "
	@echo "iODBC ODBC manager installed. Please re-run 'configure' to detect changes."
	@echo " "

########################
# 2: Install PDFlib:
ifdef COMSPEC
#Windows:
install.pdflib: ${PDFLIB_WIN_ZIP}
ifeq "${PDF_WIN_TYPE}" "bin"
	${UNZIP} $^ -d ${SYSTEMDRIVE}/tmp
#Copy and rename only dll/h/lib files (must add lib prefix for Autoconf to find them)
	${MKPATH} /usr/local/lib/
	${MKPATH} /usr/local/include
	cp ${SYSTEMDRIVE}/tmp/${PDFLIB_WIN_NAME}/pdflib/pdflib.dll /usr/local/lib/libpdf.dll
	cp ${SYSTEMDRIVE}/tmp/${PDFLIB_WIN_NAME}/pdflib/pdflib.lib /usr/local/lib/libpdf.lib
	cp ${SYSTEMDRIVE}/tmp/${PDFLIB_WIN_NAME}/pdflib/pdflib.h /usr/local/include
else
#Build it from source code - this failed under CygWin shell using MinGW GCC
#so it has to be compiled using MSYS
#TODO - can I invoke MYSYS shell directly form here? something like:
#${MSYS_SH} "{$MSYS_CONF}; cd /f/cygwin/tmp/PDFlib-Lite-6.0.1; make install"
ifeq "${WINCOMP_PFD}" "cygwin"
	${UNZIP} $^ -d /tmp
	cd /tmp/${PDFLIB_WIN_NAME}; ./configure; make; make install
else
#Use Msys to compile source code: xxxxxx
#	${UNZIP} $^ -d ${TEMP}
#	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${XMLRPC_SRC_NAME}; ./configure"
#	${MSYS_SH} "${MSYS_CONF}; cd $(shell cygpath -m "${TEMP}/${PDFLIB_WIN_NAME}"); ./configure"
#	${MSYS_SH} "${MSYS_CONF}; cd $(shell cygpath -m "${TEMP}/${PDFLIB_WIN_NAME}"); make" 
	${MSYS_SH} "${MSYS_CONF}; cd $(shell cygpath -m "${TEMP}/${PDFLIB_WIN_NAME}"); make install"
endif
endif
else
#UNIX:
install.pdflib: ${PDFLIB_SRC_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${PDFLIB_SRC}; ./configure; make; make install
endif
	@echo "Package info & manuals: ${PDFLIB_INFO}"
	@echo " "
	@echo "PDFlib compiled and installed.  Please re-run 'configure' to detect changes."
	@echo " "

#   - add LIBDIR to the `LD_RUN_PATH' environment variable
#     during linking
#   - use the `-Wl,--rpath -Wl,LIBDIR' linker flag


tttmp:
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${XMLRPC_SRC_NAME}; ./configure --disable-abyss-server --disable-cgi-server --disable-cplusplus"

1xxyy:                                                                                                                                                        
#Then, libxmlrpc:	
	rm -rf ${SYSTEMDRIVE}/tmp/${XMLRPC_SRC_NAME}
	cd ${SYSTEMDRIVE}/tmp; tar --gunzip -xf ${CYG_AUBITDIR}/${XMLRPC_SRC_TAR_GZ}
#Have to copy this file manually, since install choked on MSYS path mangling:
	cp /cygdrive/d/tmp/w3c-libwww-5.4.0/libwww-config /cygdrive/d/msys/1.0/bin/
	chmod a+x /cygdrive/d/msys/1.0/bin/libwww-config        
xxyy:              
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${XMLRPC_SRC_NAME}; ./configure --disable-libwww-client --disable-abyss-server --disable-cgi-server --disable-cplusplus"
#Disabled all I can, but seems this is abyss error:
#  --enable-fast-install --disable-libtool-lock 
#gcc -DHAVE_CONFIG_H -I. -I. -I../../.. -g -O2 -D_UNIX -D_FORK -I/usr/local/include -I/usr/local/include/w3c-libwww -DHAVE_CONFIG_H -c conf.c -o conf.o
#conf.c:44:17: pwd.h: No such file or directory
#In file included from conf.c:47:
#abyss.h:221:21: pthread.h: No such file or directory
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${XMLRPC_SRC_NAME}; make clean"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${XMLRPC_SRC_NAME}; make"
#Install chokes on:	
#make[2]: Entering directory `/d/tmp/xmlrpc-c-0.9.9/examples'
#/bin/sh ../mkinstalldirs /usr/local/bin
#mkdir /usr/local/bin
#mkdir: `/usr/local/bin' exists but is not a directory
	-${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${XMLRPC_SRC_NAME}; make install"
#Have to copy this file manually, since install choked on MSYS path mangling:
	cp /cygdrive/d/tmp/xmlrpc-c-0.9.9/xmlrpc-c-config /cygdrive/d/msys/1.0/bin/	
	cp /cygdrive/d/tmp/xmlrpc-c-0.9.9/src/xmlrpc_client.h /cygdrive/d/msys/1.0/local/include/
	@echo "use configure --with-xmlrpc=/cygdrive/d/msys/1.0/local"
	@echo "Or: configure --with-xmlrpc=${MSYS_ROOTDIR}/local/lib/libwwwhtml.a"
	@echo "For Autoconf to detect XML-RCP "



######################
# 3: install XML-RPC and libWWW
ifdef COMSPEC
install.xmlrpc:  ${LIBWWW_SRC_ZIP} ${XMLRPC_SRC_TAR_GZ}
#First, libwww:
	rm -rf ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}
	${UNZIP} ${LIBWWW_SRC_ZIP} -d ${SYSTEMDRIVE}/tmp
#	cd ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}; ./configure; make; make install
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}; ./configure"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}; make clean"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}; make"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}; make install"
#Breaks at:	
#/bin/sh ../../config/mkinstalldirs /usr/local/bin
#mkdir /usr/local/bin
#mkdir: `/usr/local/bin' exists but is not a directory	
#installs to /usr/local/lib and /usr/local/include/w3c-libwww/ 
#Which is from CygWin shell: /cygdrive/d/msys/1.0/local/lib/libwwwhtml.a
#Or: ${MSYS_ROOTDIR}/local/lib/libwwwhtml.a
	cp ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}/wwwconf.h ${MSYS_ROOTDIR}/local/include/
	cp ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}/src/.libs/libxmlrpc_client.a ${SYSTEMDRIVE}/tmp/${LIBWWW_SRC_NAME}/src/.libs/libxmlrpc_client.la ${MSYS_ROOTDIR}/local/lib
else                                                                     
install.xmlrpc: ${XMLRPC_RPM} ${LIBWWW_RPM} ${XMLRPC_DEV_RPM}
	${RPM} -Uvh $^                                                                   
	@echo " **************** WARNING ! ********************"
	@echo " In some packages of libwwwxml, there is no link between "
	@echo "	libwwwxml.so.0.1.0 and libwwwxml.so - if Aubit configure script fails to "
	@echo " detect XML_RPC libraries, check this, and if needed creat it manually:"
	-ln -s /usr/lib/libmd5.so.0.1.0       /usr/lib/libmd5.so
	-ln -s /usr/lib/libxmltok.so.0.1.0    /usr/lib/libxmltok.so
	-ln -s /usr/lib/libxmlparse.so.0.1.0  /usr/lib/libxmlparse.so
	-ln -s /usr/lib/libwwwxml.so.0.1.0    /usr/lib/libwwwxml.so
	-ln -s /usr/lib/libwwwinit.so.0.1.0   /usr/lib/libwwwinit.so
	-ln -s /usr/lib/libwwwapp.so.0.1.0    /usr/lib/libwwwapp.so
	-ln -s /usr/lib/libwwwhtml.so.0.1.0   /usr/lib/libwwwhtml.so
	-ln -s /usr/lib/libwwwtelnet.so.0.1.0 /usr/lib/libwwwtelnet.so
	-ln -s /usr/lib/libwwwnews.so.0.1.0   /usr/lib/libwwwnews.so
	-ln -s /usr/lib/libwwwhttp.so.0.1.0   /usr/lib/libwwwhttp.so
	-ln -s /usr/lib/libwwwmime.so.0.1.0   /usr/lib/libwwwmime.so
	-ln -s /usr/lib/libwwwgopher.so.0.1.0 /usr/lib/libwwwgopher.so
	-ln -s /usr/lib/libwwwftp.so.0.1.0    /usr/lib/libwwwftp.so
	-ln -s /usr/lib/libwwwfile.so.0.1.0   /usr/lib/libwwwfile.so
	-ln -s /usr/lib/libwwwdir.so.0.1.0    /usr/lib/libwwwdir.so
	-ln -s /usr/lib/libwwwcache.so.0.1.0  /usr/lib/libwwwcache.so
	-ln -s /usr/lib/libwwwstream.so.0.1.0 /usr/lib/libwwwstream.so
	-ln -s /usr/lib/libwwwmux.so.0.1.0    /usr/lib/libwwwmux.so
	-ln -s /usr/lib/libwwwtrans.so.0.1.0  /usr/lib/libwwwtrans.so
	-ln -s /usr/lib/libwwwcore.so.0.1.0   /usr/lib/libwwwcore.so
	-ln -s /usr/lib/libwwwutils.so.0.1.0  /usr/lib/libwwwutils.so
	-ln -s /usr/lib/libwwwzip.so.0.1.0    /usr/lib/libwwwzip.so
endif
	@echo " "
	@echo "Package info & manuals: ${XMLRPC_INFO}"
	@echo " "
	@echo "libWWW and XML-RPC installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 4: Install IksEmEl Jabber lib:
ifdef COMSPEC
install.iksemel: ${IKSEMEL_TGZ}
	cd ${SYSTEMDRIVE}/tmp; tar --gunzip -xf ${CYG_AUBITDIR}/${IKSEMEL_TGZ}
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${IKSEMEL_SRC}; ./configure"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${IKSEMEL_SRC}; make"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${IKSEMEL_SRC}; make install"
else
ifdef IKSEMEL_USE_SRC
install.iksemel: ${IKSEMEL_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
#	cd /tmp/${IKSEMEL_SRC}; ${SH} autogen.sh; ./configure; make; make install
	cd /tmp/${IKSEMEL_SRC}; ./configure
	cd /tmp/${IKSEMEL_SRC}; make
	cd /tmp/${IKSEMEL_SRC}; make install
else
install.iksemel:
#NOTE: needs libgnutls-dev, texinfo and automake to compile!
	cd /tmp; ${IKSEMEL_SVN_CO}
	cd /tmp/iksemel; ./autogen.sh
	cd /tmp/iksemel; ./configure
	cd /tmp/iksemel; make 
	su -c "cd /tmp/iksemel; make install"
endif
endif	
	@echo "Package info & manuals: ${IKSEMEL_INFO}"
	@echo " "
	@echo "IksEmEl compiled and installed.  Please re-run 'configure' to detect changes."
	@echo " "

#####################
# 5: Install SWIG library wraper:
install.swig: ${SWIG_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SWIG_INFO}"
	@echo " "
	@echo "SWIG installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 6: install GRAPHVIZ that contains Dot tool
ifdef COMSPEC
install.dot: ${GRAPHVIZ_WIN_EXE}
	@echo "Execute ${GRAPHVIZ_WIN_EXE} to install"
else
install.dot: ${GRAPHVIZ_RPM}
	${RPM} -i $^
endif

	@echo "Package info & manuals: ${GRAPHVIZ_INFO}"
	@echo " "
	@echo "Graphviz and Dot tool installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 7: Install SAP DB ODBC driver
install.sapdb.odbc: install.sapdb.odbc.first install.sapdb.env
install.sapdb.odbc.first: ${SAPODBC_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SAPODBC_INFO}"
	@echo " "
	@echo "SAP DB ODBC installed.  Please re-run 'configure' to detect changes."
	@echo " "

#####################
# 8: Install DoxyGen documentation tool
install.doxygen: ${DOXYGEN_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${DOXYGEN_INFO}"
	@echo " "
	@echo "DOXYGEN installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 9: Install Informix ESQL/C compiler and ODBC libraries
install.ifx.esql: ${IFXESQLC_BIN_ZIP}
	mkdir -p /tmp/ifxcsdk
	${UNZIP} $^ -d /tmp/ifxcsdk
	mkdir -p ${INFORMIXDIR}
#this will automatically create group 'informix':
	-useradd informix
	export INFORMIXDIR=${INFORMIXDIR};	rpm -i --relocate /opt/informix=${INFORMIXDIR} csdk.rpm
#ERROR: INFORMIXDIR does not match the target directory name provided in
#the rpm command.  If you are not installing this product in the
#default INFORMIXDIR name for Linux (/opt/informix), you MUST provide
#your INFORMIXDIR directory name with the --prefix (RPM 2.X syntax)
#or --relocate (RPM 3.X syntax) parameter in your rpm -i command line.
	@echo "Package info & manuals: ${IFXESQLC_INFO}"
	@echo " "
	@echo "Informix CSDK (contains ESQL/C and ODBC) installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 10: Install PostgreSQL ODBC libraries:
install.pg.odbc: install.pg.src install.pg.odbc.first
install.pg.odbc.first: ${PGODBC_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${PGODBC_INFO}"
	@echo " "
	@echo "PostreSQL ODBC libraries installed.  Please re-run 'configure' to detect changes."
	@echo " "

#we need the source code to extract iodbc.h and other headers, missing in other PG distributions:
install.pg.src: ${PGODBC_SRC_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
#	cd /tmp/${PGODBC_SRC_SRC}; ${SH} autogen.sh; ./configure; make; make install
	mkdir -p /usr/include/pgsql/iodbc
	cp /tmp/${PGODBC_SRC_SRC}/iodbc.h /tmp/${PGODBC_SRC_SRC}/isql.h /tmp/${PGODBC_SRC_SRC}/isqlext.h /usr/include/pgsql/iodbc
	@echo " "
	@echo "Package info & manuals: ${PGODBC_INFO}"
	@echo " "
	@echo "PostgreSQL ODBC source code extracted, header files installed."
	@echo "Please re-run 'configure' to detect changes."
	@echo " "

######################
# 11: install unixODBC development package, including header files
install.unixodbcdev: ${UNIXODBCDEV_RPM}
#Conflicts with iODBC:
	-cp /usr/include/sql.h /usr/include/sql.h.${TIME}.bak
	-cp /usr/include/sqlext.h /usr/include/sqlext.h.${TIME}.bak
	-cp /usr/include/sqltypes.h /usr/include/sqltypes.h.${TIME}.bak
	${RPM} -i --replacefiles $^
	@echo " "
	@echo "Created backup copies of following files, if they existed:"
	@echo "   /usr/include/sql.h"
	@echo "   /usr/include/sqlext.h /usr/include/sqltypes.h"
	@echo "by adding extension <current_time>.bak to them."
	@echo "Please review, and edit if appropriate."
	@echo " "
	@echo "Package info & manuals: ${UNIXODBCDEV_INFO}"
	@echo " "
	@echo "unixODBC DEV package installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 12: Install unixODBC libraries, development and GUI manager packages
install.unixodbc: install.unixodbc.first install.unixodbcdev
install.unixodbc.first: ${UNIXODBC_RPM} ${UNIXODBCDEV_GUI_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${UNIXODBC_INFO}"
	@echo " "
	@echo "unixODBC installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 13: Install MPZ GNU Multiple precision library:
install.mpz: ${MPZ_SRC_TGZ}
ifdef COMSPEC
	cd ${SYSTEMDRIVE}/tmp; tar --gunzip -xf ${CYG_AUBITDIR}/${MPZ_SRC_TGZ}
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${MPZ_SRC}; ./configure"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${MPZ_SRC}; make"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${MPZ_SRC}; make install"
else	
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${MPZ_SRC}; ./configure; make; make install
endif	
	@echo "Package info & manuals: ${MPZ_INFO}"
	@echo " "
	@echo "MPZ library compiled and installed.  Please re-run 'configure' to detect changes."
	@echo " "

######################
# 14: Install PostgreSQL ESQL/C pre-compiler:
#install.pg.esql: ${PGESQLC_RPM}
#	${RPM} -i $^
#install.pg.esql: get.pg.esql.cvs
install.pg.esql: get.pg.esql.cvs
#PostgreSQL needs Bison version 1.875 or later.
#	export YACC=/opt/bison-1.875-inst/bin/bison; cd /usr/src/pgsql-server; ./configure --prefix=/opt/ecpg-cvs
	export YACC=${YACC}; cd /usr/src/pgsql-server; ./configure --prefix=/opt/ecpg-cvs
	-cd /usr/src/pgsql-server/src/interfaces/ecpg; make
#First make will fail with:
#mv -f y.tab.c ./preproc.c
#mv: cannot stat `y.tab.c': No such file or directory
	cp /usr/src/pgsql-server/src/interfaces/ecpg/preproc/preproc.tab.c 	/usr/src/pgsql-server/src/interfaces/ecpg/preproc/y.tab.c
	cp /usr/src/pgsql-server/src/interfaces/ecpg/preproc/preproc.tab.h  /usr/src/pgsql-server/src/interfaces/ecpg/preproc/y.tab.h
#one more time...
	cd /usr/src/pgsql-server/src/interfaces/ecpg; make
#do the installation as per --prefix
	cd /usr/src/pgsql-server/src/interfaces/ecpg; make install
#See if it runs:
#	/usr/src/pgsql-server/src/interfaces/ecpg/preproc/ecpg --version
	/opt/ecpg-cvs/bin/ecpg --version
	@echo "Package info & manuals: ${PGESQLC_INFO}"
	@echo " "
	@echo "PostreSQL ESQL/C compiler installed.  Please re-run 'configure' to detect changes."
	@echo " "

#Get PG ecpg from CVS:
get.pg.esql.cvs:
	@echo "NOTE: enter 'xxx' when prompted for password:"
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot login;
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/interfaces/ecpg
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/Makefile.global.in
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/configure.in
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/configure
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/backend/access/common/heaptuple.c
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/config
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/template/linux
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/GNUmakefile.in
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/include/pg_config.h.in
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/backend/port/tas/dummy.s
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/backend/port/dynloader/linux.c
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/backend/port/sysv_sema.c
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/backend/port/sysv_shmem.c
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/backend/port/dynloader/linux.h
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/include/port/linux.h
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/makefiles/Makefile.linux
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/Makefile.shlib
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/include
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/interfaces/libpq
	cd /usr/src; unset CVSROOT; unset CVS_RSH; cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql-server/src/port

#Apply Informix compatibility patch
#info=http://gborg.postgresql.org/project/pginformix/projdisplay.php
#file=ftp://gborg.postgresql.org/pub/pginformix/stable/informix.patch.tar.gz
#or
#ftp://gborg.postgresql.org/pub/pginformix/stable/informix.patch.gz
#this patch was made against a REL7_4 tag of cvs, untar this into the source directory 
#of postgres and run cat informix.diff | patch -p0 -c and then configure and build as normal

	
	
#####################
# 15: Install Check unit testing libraries
install.libcheck: ${CHECK_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${CHECK_INFO}"
	@echo " "
	@echo "Check libraries installed.  Please re-run 'configure' to detect changes."
	@echo " "

####################
# 16: Install SADB ESQL/C:
install.sapdb.esql: ${SAPDBESQL_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SAPDBESQL_INFO}"
	@echo " "
	@echo "SAP DB ESQL/C pre-compiler installed.  Please re-run 'configure' to detect changes."
	@echo " "

# 17:
install.sunrpc:
	@echo "Package info & manuals: ${SUNRPC_INFO}"
	@echo "FIXME: TO-DO"

# 18: GTK+ libraries
install.gtk: install.gtk.first install.gtk.dev
install.gtk.first:
	@echo "Package info & manuals: ${GTK_INFO}"
	@echo "FIXME: TO-DO"

# 19:
install.curses:
	@echo "Package info & manuals: ${CURSES_INFO}"
	@echo "FIXME: TO-DO"

# 20: SAP DB Environment, needed by ODBC driver
install.sapdb.env: ${SAPDBENV_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${SAPDBENV_INFO}"
	@echo " "
	@echo "SAP DB Environment installed.  Please re-run 'configure' to detect changes."
	@echo " "

#########################
# 21: GTK+ dev packages:
install.gtk.dev: ${GTK_GTK_DEV_RPM} ${GTK_GDK_DEV_RPM} ${GTK_GLIB_DEV_RPM} \
	${GTK_PANGO_DEV_RPM} ${GTK_ATK_DEV_RPM} ${XFREE86_DEV_RPM} ${GNOME_LIBS_DEVEL} \
	${FREETYPE_DEV_RPM} ${FONTCONFIG_DEV_RPM} ${XFT_DEV_RPM} ${GTKPLUS_DEV_RPM} \
	${ORBIT_DEV_RPM} ${IMLIB_DEV_RPM} ${ESOUND_DEV_RPM} ${GLIB_DEV_RPM} \
	${LIBTIFF_DEV_RPM} ${LIBJPEG_DEV_RPM} ${LIBUNGIF_DEV_RPM} ${AUDIOFILE_DEV_RPM}
	${RPM} -i $^
	@echo "Package info & manuals: ${GTK_DEV_INFO}"
	@echo " "
	@echo "GTK+ development packages installed.  Please re-run 'configure' to detect changes."
	@echo " "

#########################
# 22: DBIx::Informix::Perform has been added to the CPAN module taxonomy and the
#file DBIx-Informix-Perform-0.01.tar.gz will be available therein on or about 2 Apr. 2003.
#
#Tim Bunce has convinced the other interested person(s) in the CPAN Module
#Namespace group that the proper name is DBIx::Perform. The original downloads
#file is restored (was just hidden anyway) and the change to DBIx::Informix::Perform
#will become a branch on the CVS tree, which can be merged to the trunk if we ever need it

#################
# 26: SQLite

ifdef COMSPEC
ifdef SQLITE_BIN
##################################
#Install Windows binaries
install.sqlite: ${SQLITE_WIN_LIB} ${SQLITE_WIN_EXE}
	${UNZIP} ${SQLITE_WIN_LIB} -d ${SYSTEMDRIVE}/tmp
	${UNZIP} ${SQLITE_WIN_EXE} -d ${SYSTEMDRIVE}/WINNT
#We need this two so sqlite.exe can work:
	cp ${SYSTEMDRIVE}/tmp/sqlite.def ${SYSTEMDRIVE}/WINNT/sqlite.def
	cp ${SYSTEMDRIVE}/tmp/sqlite.dll ${SYSTEMDRIVE}/WINNT/sqlite.dll
#We need this two so we can link Aubit. Note that we added 'lib' prefix
	cp ${SYSTEMDRIVE}/tmp/sqlite.def /usr/lib/libsqlite.def
	cp ${SYSTEMDRIVE}/tmp/sqlite.dll /usr/lib/libsqlite.dll
else
###################################
#Compile from source code (Windows)
install.sqlite: ${SQLITE_SRC_TAR_GZ}
#warning: path in tarball is just 'sqlite' !
	${MKPATH} ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}
	cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}; tar --gunzip -xf ${CYG_AUBITDIR}/$^
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; ./configure"
	@echo "Unpacked and configure SQLite source in /tmp/${SQLITE_SRC_NAME}/sqlite"	
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; make"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; make dll"
	@echo "Compiled SQLite source in /tmp/${SQLITE_SRC_NAME}/sqlite"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; make install"
#make install will NOT install dll - and we have to also add 'lib' prefix
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; cp ./sqlite3.dll /usr/local/lib/libsqlite3.dll"
	@echo "Installed SQLite to /usr/local"
endif
else
ifdef SQLITE_BIN
install.sqlite: ${SQLITE_RPM_LIB} ${SQLITE_RPM_DEV}
	${RPM} -i $^
else
install.sqlite: ${SQLITE_SRC_TAR_GZ}
#warning: path in tarball is just 'sqlite' !
	${MKPATH} /tmp/${SQLITE_SRC_NAME}
	cd /tmp/${SQLITE_SRC_NAME}; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${SQLITE_SRC_NAME}/sqlite; ./configure
	cd /tmp/${SQLITE_SRC_NAME}/sqlite; make
	cd /tmp/${SQLITE_SRC_NAME}/sqlite; make install
endif
endif
	@echo " "
	@echo "Package info & manuals: ${SQLITE_INFO}"
	@echo " "
	@echo "SQLite installed.  Please re-run 'configure' to detect changes."
	@echo " "

##########################
#SQLite ODBC driver:
ifdef COMSPEC
ifdef SQLITEODBC_BIN
############################################
#Install SQLite precompiled Windows binaries 
install.sqlite.odbc: ${SQLITE_ODBC_WIN}
	${UNZIP} ${SQLITE_ODBC_WIN} -d ${SYSTEMDRIVE}/tmp/sqliteodbc
	cd ${SYSTEMDRIVE}/tmp/sqliteodbc; inst.exe
#There is no .a/.def file there, so we can't link with this anyway...
#	cp ${SYSTEMDRIVE}/tmp/sqliteodbc/sqliteodbc.dll /lib/libsqliteodbc.dll
else
############################################
#Compile from source code (Windows)
install.sqlite.odbc: ${SQLITE_ODBC_TGZ_SRC}
#	${MKPATH} ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}
#	cd ${SYSTEMDRIVE}/tmp/${SQLITE_ODBC_SRC}; tar --gunzip -xf ${CYG_AUBITDIR}/$^
	cd ${SYSTEMDRIVE}/tmp; tar --gunzip -xf ${CYG_AUBITDIR}/$^
	@echo "SQLite ODBC configure demands both 2.x and 3.x version to be installed"
	@echo " to make V3 - also wants standard odbc headers in UNIX locations"
	@echo " You will need to edit configure.in yourself"
#	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; ./configure"
#	@echo "Unpacked and configure SQLite source in /tmp/${SQLITE_SRC_NAME}/sqlite"	
#	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; make"
#	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; make dll"
#	@echo "Compiled SQLite source in /tmp/${SQLITE_SRC_NAME}/sqlite"
#	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${SQLITE_SRC_NAME}/sqlite; make install"
#	@echo "Installed SQLite ODBC to /usr/local"
endif
else
#UNIX-Compile from source code
install.sqlite.odbc: ${SQLITE_ODBC_TGZ_SRC}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${SQLITE_ODBC_SRC}; ./configure; make; 
	su -c "cd /tmp/${SQLITE_ODBC_SRC}; make install"
endif
	@echo " "
	@echo "Package info & manuals: ${SQLITE_ODBC_INFO}"
	@echo " "
	@echo "SQLite ODBC driver installed.  Please re-run 'configure' to detect changes."
	@echo " "

##################
# 27: libspopc
install.libspopc: ${SPOPC_TGZ_SRC}
ifdef COMSPEC
	cd /tmp; tar --gunzip -xf ${CYG_AUBITDIR}/$^
#examples/poptest1.c:13:24: sys/socket.h: No such file or directory
#examples/poptest1.c:14:19: netdb.h: No such file or directory
#examples/poptest1.c:15:24: netinet/in.h: No such file or directory

#if you are under windows, add: -lwsock32 and compile with -DWIN32
#if you want libspopc fully reentrant, compile with -D_REENTRANT


#make install will do:
#       cp libspopc-$(VERSION).a /usr/lib
#       ln -s /usr/lib/libspopc-$(VERSION).a /usr/lib/libspopc.a
#       cp libspopc.h /usr/include/
#Since native Windows executables do not understand CygWin symlinks, we 
#need to make phisical copy of the library:
	cp /lib/libspopc.a /lib/libspopc-tmp.a
	rm /lib/libspopc.a
	cp /lib/libspopc-tmp.a /lib/libspopc.a
	cd /tmp/${SPOPC_SRC}; make install
else
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
#No .configure
	cd /tmp/${SPOPC_SRC}; make; make install
endif	
	@echo " "
	@echo "Package info & manuals: ${SPOPC_INFO}"
	@echo " "
	@echo "POP library installed.  Please re-run 'configure' to detect changes."
	@echo " "

###################
# 28: Cint
#######################
#WARNING - Cint needs -ltermcap and -lbsd
#######################

install.cint: ${CINT_TAR_GZ_SRC}
ifdef COMSPEC
#------------------------------------------------
#WARNING: if you get something like :
#d:/cint/src/G__ci.a(CallFunc.o)(.text+0x5f6):CallFunc.cxx: undefined reference to `_Unwind_Resume'
#Then you have missmatch between GCC use to make cint and the one used to make
#Aubit cint support
#------------------------------------------------
#NOTE: must NOT be installed under cygwin tree, because makecint is Windows native
#	executable and knows nothing about CygWin path mapping (cygdrive)
#NOTE: Can't be compiled from CygWin because of path mangling (cygdrive)
#	So will need MinGW MSYS to compile it since .bat files provided work only
#	for MSVC and shell scripts need, well... shell!
#NOTE: If cint hangs on vecbool.h, just interuppt it - install will still work

	${MKPATH} /cygdrive/d/${CINT_SRC}-src
	cd /cygdrive/d/${CINT_SRC}-src; tar -xvzf ${CYG_AUBITDIR}/$^
	@echo "Unpacked to /cygdrive/d/${CINT_SRC}-src"
#Not sure about this comments, should work automatically:
#remove comments if it does.
	@echo "Open MSYS shell and execute following commands:"	
	@echo "cd D:\${CINT_SRC}-src"
	@echo "Edit platform/mingw, add -D_MAX_PATH=512 to SYSMACRO and OTHMACRO lines"
	@echo "Add -L/d/MinGW/lib to LDOPT in same file"
	@echo "copy gcc to cc in MinGW/bin"
	@echo "MAKE SURE YOU ARE USING MINGW GCC - AND NOT CYGWIN!!!!"	
	@echo "Then, execute:"
	@echo "bash ./setup platform/mingw"
	@echo "bash ./INSTALLBIN --bindir=/cygdrive/d/cint --libdir=/cygdrive/d/cint
#CygWin version (did not work):
#	cd /cygdrive/d/${CINT_SRC}-src; ${SH} ./setup platform/mingw
#	cd /cygdrive/d/${CINT_SRC}-src; ${SH} ./INSTALLBIN --bindir=/cygdrive/d/cint --libdir=/cygdrive/d/cint
#MSYS version:
#	cd /d/cint5.15/; sh ./setup platform/mingw
#	cd /d/cint5.15/; sh ./INSTALLBIN --bindir=/d/cint --libdir=/d/cint
else
	${MKPATH} /tmp/${CINT_SRC}
	cd /tmp/${CINT_SRC}; tar -xvzf ${AUBIT_SRC_ROOT}/$^
#NOTE: platforms gcc_max, linux2.0_ansi, gcc_min, linux2.0, linux_RH7.3_so 
#and linux_RH7.3_gcc3 fail on SuSE 9. Cannot use linux2.0_so_only_C becuse 
#generated makefile for Aubit NEEDS C++ too.
#linux_RH7.3_gcc3 works on SuSE (after installing -ltermcap and linking 
#libbsd-compat.a to libbsd.a)
	cd /tmp/${CINT_SRC}; ${SH} ./setup platform/linux_RH7.3_gcc3
#With GCC 2.96 (on Aptiva) use:	
#	cd /tmp/${CINT_SRC}; ${SH} ./setup platform/linux_RH7.3
#NOTE: bin and lib MUST be installed in same directory, since many scripts refer
#to $CINTSYSDIR and expect both executables AND libraries there.
#But Cint installation script will put cint and makecint executables into
#--bindir and EVERYTHING ELSE under --libdir, under lib and include sub-dirs.
	cd /tmp/${CINT_SRC}; ${SH} ./INSTALLBIN --bindir=/usr/local/cint --libdir=/usr/local/cint
endif	
	@echo " "
	@echo "Package info & manuals: ${CINT_INFO}"
	@echo " "
	@echo "CINT installed.  Please re-run 'configure' to detect changes."
	@echo "WARNING: you MUST use './configure --with-cint=/usr/local/cint'"
	@echo " "

##################
# 29: PDcurses
ifdef COMSPEC
install.pdcurses: ${PDCURSES_SRC_ZIP} ${PDCURSES_WIN_ZIP}
#	rm -rf ${PDCURSES_WIN_INSTALLDIR}
#First, install MSVC pre-compiled binaries, containing the .dll that we
#dont get when compiling from source code using MinGW GCC"
	${UNZIP} ${PDCURSES_WIN_ZIP} -d ${PDCURSES_WIN_INSTALLDIR}
#Now, compile it from source code so we get static libs too:
	-mkdir /tmp/${PDCURSES_SRC}
	cd /tmp/${PDCURSES_SRC}; ${UNZIP} ${CYG_AUBITDIR}/${PDCURSES_SRC_ZIP} -d /tmp/${PDCURSES_SRC}
	cd /tmp/${PDCURSES_SRC}/win32; ${MAKE} -f mingwin32.mak \
		PDCURSES_HOME=`cygpath -w /tmp/${PDCURSES_SRC}` CC_HOME=${GCC_HOME_WINPATH}
#There is no install target there, have to install it manually:
	-mkdir ${PDCURSES_WIN_INSTALLDIR}
	${CP} /tmp/${PDCURSES_SRC}/win32/panel.a \
		/tmp/${PDCURSES_SRC}/win32/pdcurses.a ${PDCURSES_WIN_INSTALLDIR}
	${CP} /tmp/${PDCURSES_SRC}/curses.h /tmp/${PDCURSES_SRC}/curspriv.h \
		/tmp/${PDCURSES_SRC}/panel.h ${PDCURSES_WIN_INSTALLDIR}
#Demos:
#newdemo.exe  testcurs.exe firework.exe tuidemo.exe xmas.exe
#Other files of possible interest:
#pdcurses.ico pdcurses.rc w95-bcc.rsp wccwin32.lrf bccwin32.lrf
#curses.def curses_lcc.def  
	@echo "Installed PDcurses in ${PDCURSES_WIN_INSTALLDIR}"
	@echo "use --with-pdcurses=${PDCURSES_WIN_INSTALLDIR}"
	@echo "flag to ./configure for Aubit to detect it."
else
install.pdcurses: ${PDCURSES_SRC_TAR_GZ} 
ifdef PCURSES_BIN
#	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	${UNZIP} $^ -d /tmp
	cd /tmp/${PDCURSES_SRC}; ./configure; make; make install
else
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${PDCURSES_SRC_UNIX}; ./configure --prefix=/usr/local/pdcurses
	cd /tmp/${PDCURSES_SRC_UNIX}; make
	cd /tmp/${PDCURSES_SRC_UNIX}; make install
endif
endif	
	@echo " "
	@echo "Package info & manuals: ${PDCURSES_INFO}"
	@echo " "
	@echo "PDcurses library installed.  Please re-run 'configure' to detect changes."
	@echo " "

	
##################
# 30: PCRE - Perl Compatible Regular Expressions 
ifdef COMSPEC
install.pcre: ${PCRE_WIN_INSTALLER}
	chmod a+x ${PCRE_WIN_INSTALLER}
	${PCRE_WIN_INSTALLER}
else
install.pcre: ${PCRE_SRC_GZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${PCRE_SRC}; ./configure; make; make install
endif
	@echo " "
	@echo "Package info & manuals: ${PCRE_INFO}"
	@echo " "
	@echo "PCRE installed.  Please re-run 'configure' to detect changes."
	@echo " "


##################
# 31: SXML  
install.sxml: ${SXML_SRC_GZ}
ifdef COMSPEC
	cd /tmp; tar --gunzip -xf ${CYG_AUBITDIR}/$^
	cd /tmp/${SXML_SRC}; ./configure; make
#install target fails on Windows because it has hard-coded username 'root'
#which does not exist on Windows, so we will intall neded files ourselves:
	cd /tmp/${SXML_SRC}; install -o ${USER} -m 0644 libsxml.a /usr/lib
	cd /tmp/${SXML_SRC}; install -o ${USER} -m 0755 libsxml.so /usr/lib/libsxml.dll
	cd /tmp/${SXML_SRC}; install -o ${USER} -m 0644 sxml.h /usr/include
	@echo " "
	@echo "Installed files to /usr/lib and /usr/include"
else
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${SXML_SRC}; ./configure; make; make install	
endif	


	@echo " "
	@echo "Package info & manuals: ${SXML_INFO}"
	@echo " "
	@echo "SXML installed.  Please re-run 'configure' to detect changes."
	@echo " "


	
	
##################
# 33: PostgreSQL with Informix compatibility patches
install.pgifx: install.pgifx.install ${PGIFX_CTL} install.pgifx.activate install.pgifx.start
	@echo " "
	@echo "Package info & manuals: ${PGIFX_INFO}"
	@echo " "
	@echo "PostgreSQL engine & ecpg compiler patched for Informix compatibility installed."
	@echo "Please re-run 'configure' to detect changes, with this ./configure flags:"
	@echo " --with-pgcompat --with-ecpg=${PGIFX_INSTPATH}"
	@echo " --with-pgsql=${PGIFX_INSTPATH} --with-pgsqleng=${PGIFX_INSTPATH}"
	@echo "You can now remove source code from /tmp/pghead and downloaded"
	@echo "archive ${AUBIT_SRC_ROOT}/$^	if you wish to save disk space."
	@echo "To change location where PG-IFX is installed, use:"
	@echo "make install.pgifx PGIFX_INSTPATH=/some/where/to/install"
	@echo "Add PGIFX_ACFLAGS='<configure flags>' to above command if you need to."
	@echo ""	

THIS_USER=${USER}
THIS_GROUPS=${GROUPS}

#-------------------------------
#Download, compile and install 
install.pgifx.install: ${PGIFX_SRC_GZ} 
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
#	cd /tmp/${PGIFX_SRC}/pghead; ./configure --prefix=${PGIFX_INSTPATH} ${PGIFX_ACFLAGS}	
	cd /tmp/pghead; ./configure --prefix=${PGIFX_INSTPATH} ${PGIFX_ACFLAGS}
	cd /tmp/pghead; make
#We dont need to be root as we are installing in our own dir, and actually we
#dont WANT to be root so we dont accidentaly overwrite any files on the system
#possibly allready installed by systems unpatched PostgreSQL
#	su -c "cd /tmp/pghead; make install"
	su -c "mkdir -p ${PGIFX_INSTPATH}; chown ${THIS_USER} ${PGIFX_INSTPATH}; chgrp ${THIS_GROUPS} ${PGIFX_INSTPATH}"
	cd /tmp/pghead; make install

#-------------------------------
#Intialise database
install.pgifx.activate:
	-su -c "/usr/sbin/useradd postgres"
	-su -c "mkdir -p ${PGIFX_INSTPATH}/data"
	su -c "chown postgres ${PGIFX_INSTPATH}/data"
	su -l postgres -s ${SH} -c "${PGIFX_INSTPATH}/bin/initdb -D ${PGIFX_INSTPATH}/data"
#add stuff to config file
	su -l postgres -s ${SH} -c "echo \"datestyle = 'informix, mdy'\" >> ${PGIFX_INSTPATH}/data/postgresql.conf"
	su -l postgres -s ${SH} -c "echo \"default_delim = '|'\" >> ${PGIFX_INSTPATH}/data/postgresql.conf"
#Default TCP/IP port for PG = (port = 5432) Usually this is commented out in default
#config file. WE NEED TO CHANGE THIS IF MORE THEN ONE INSTANCE OF PG WILL BE RUNNING
#ON THIS HOST!!! Any option can also be given as a command line switch to the
# postmaster, e.g. 'postmaster -c log_connections=on'.
	
	su -c "touch ${PGIFX_INSTPATH}/pg-ifx-${PGIFX_SRC}.log; chown postgres ${PGIFX_INSTPATH}/pg-ifx-${PGIFX_SRC}.log; chgrp postgres ${PGIFX_INSTPATH}/pg-ifx-${PGIFX_SRC}.log"
	
#-------------------------------
install.pgifx.start: ${PGIFX_CTL}
#	-${PGIFX_CTL} start
	-${PGIFX_CTL} status
#  	${PGIFX_INSTPATH}/bin/createdb test
#	${PGIFX_INSTPATH}/bin/psql test

#-------------------------------
#Create controll script
install.pgifx.ctl.force: install.pgifx.ctl.delete install.pgifx.ctl

install.pgifx.ctl.delete:
	-su -c "chmod a+rwx ${PGIFX_CTL}; ${RM} ${PGIFX_CTL}"
	
install.pgifx.ctl: ${PGIFX_CTL}
${PGIFX_CTL}: 
	@echo "PG_BIN='${PGIFX_INSTPATH}/bin'" > ${PGIFX_CTL}
	@echo "PG_DATA='${PGIFX_INSTPATH}/data'" >> ${PGIFX_CTL}
	@echo "PG_LOG='${PGIFX_INSTPATH}/pg-ifx-${PGIFX_SRC}.log'" >> ${PGIFX_CTL}
#Default TCP/IP port for PG = (port = 5432)
#Any option can also be given as a command line switch to the
# postmaster, e.g. 'postmaster -c log_connections=on'.
#pg_ctl -o OPTIONS              command line options to pass to the postmaster
	@echo "PG_PORT=15432" >> ${PGIFX_CTL}
	@echo 'case $$1 in' >> ${PGIFX_CTL}
	@echo "start)  su -l postgres -s ${SH} -c \"\$$PG_BIN/pg_ctl -D \$$PG_DATA -o ' -i -c port=\$$PG_PORT' start  > \$$PG_LOG 2>&1 & \" " >> ${PGIFX_CTL}
	@echo "        ;;" >> ${PGIFX_CTL}
	@echo "start-defaultport)  su -l postgres -s ${SH} -c \"\$$PG_BIN/pg_ctl -D \$$PG_DATA -o ' -i' start  > \$$PG_LOG 2>&1 & \" " >> ${PGIFX_CTL}
	@echo "        ;;" >> ${PGIFX_CTL}
	@echo "stop)   su -l postgres -s ${SH} -c \"\$$PG_BIN/pg_ctl -D \$$PG_DATA stop\"" >> ${PGIFX_CTL}
	@echo "        ;;" >> ${PGIFX_CTL}
	@echo "status) su -l postgres -s ${SH} -c \"\$$PG_BIN/pg_ctl -D \$$PG_DATA status\"" >> ${PGIFX_CTL}
	@echo "        ;;" >> ${PGIFX_CTL}	
	@echo "netstatus) su -c \"netstat -a | grep postgres; netstat -a | grep \$$PG_PORT; netstat -a | grep 5432\"" >> ${PGIFX_CTL}
	@echo "        ;;" >> ${PGIFX_CTL}
	@echo "*)      echo "Usage: start/start-defaultport/stop/status/netstatus"" >> ${PGIFX_CTL}
	@echo "        ;;" >> ${PGIFX_CTL}
	@echo "esac" >> ${PGIFX_CTL}
	chmod u+rwx ${PGIFX_CTL}
	chmod g+rwx ${PGIFX_CTL}
	chmod o+rx ${PGIFX_CTL}
	su -c "ln -s ${PGIFX_CTL} /usr/local/bin/pgifx_ctl; if test -f /etc/rc.d/postgresql ; then if ! test -f /usr/local/bin/pg_ctl; then ln -s /etc/rc.d/postgresql /usr/local/bin/pg_ctl; fi; fi"
	@echo "---------------------------------------------------------"
	@echo "Use script 'pgifx_ctl' to start/stop/status PG engine"
	@echo "---------------------------------------------------------"
	@echo " "
	
##############################
# 34: LibVNCserver:
	
##############################
# 35 : ORBit Corba:

#Find out location of pkg-config - we need to install there to use it
PKG_CONFIG_ROOT_CYGPATH:=${shell type pkg-config | sed -e 's/\/bin\// /g' | awk '{print $$3}' | sed -e 's/[()]//g'}
ifdef COMSPEC
	PKG_CONFIG_ROOT:=${shell cygpath -m "${PKG_CONFIG_ROOT_CYGPATH}"}
endif
PKG_CONFIG_ROOT_ESCAPED:=${shell echo "${PKG_CONFIG_ROOT}" | sed -e 's/\//\\\//g'}

install.orbit.bin: ${ORBIT_WIN_BIN_ZIP} ${ORBIT_IDL_WIN_BIN_ZIP}
#ORBIT_WIN_BIN_NAME ORBIT_IDL_WIN_BIN_NAME
	@echo "PKG_CONFIG_ROOT=${PKG_CONFIG_ROOT}"
	@echo "PKG_CONFIG_ROOT_ESCAPED=${PKG_CONFIG_ROOT_ESCAPED}"
	${UNZIP} ${ORBIT_WIN_BIN_ZIP} -d ${PKG_CONFIG_ROOT}
	${UNZIP} ${ORBIT_IDL_WIN_BIN_ZIP} -d ${PKG_CONFIG_ROOT}
#ORBit needs libpopt:
	http://optusnet.dl.sourceforge.net/sourceforge/gnuwin32/popt-1.8-1-bin.exe

ee:
#Fix info in pkg-config files: APPARENTLY NOT NEEDED - /target is automatically expanded?
	cat ${PKG_CONFIG_ROOT}/lib/pkgconfig/ORBit-2.0.pc | sed -e 's/prefix=\/target/prefix=${PKG_CONFIG_ROOT_ESCAPED}/'
	cat ${PKG_CONFIG_ROOT}/lib/pkgconfig/ORBit-CosNaming-2.0.pc
	cat ${PKG_CONFIG_ROOT}/lib/pkgconfig/ORBit-idl-2.0.pc
	cat ${PKG_CONFIG_ROOT}/lib/pkgconfig/ORBit-imodule-2.0.pc
	cat ${PKG_CONFIG_ROOT}/lib/pkgconfig/libIDL-2.0.pc

ifdef ORBIT_USE_TARBALL
install.orbit: ${ORBIT_SRC_TAR_GZ}
	cd ${SYSTEMDRIVE}/tmp; tar --gunzip -xf ${CYG_AUBITDIR}/$^	
else
install.orbit: ORBIT_SRC=ORBit2
install.orbit:
#fails because of uppercase/lowercase duplicate ORBit2/src/idl/interop/CONV_FRAME.idl
#	-cd ${SYSTEMDRIVE}/tmp; cvs -d :pserver:anonymous@anoncvs.gnome.org:/cvs/gnome -z3 co ORBit2
#	cd ${SYSTEMDRIVE}/tmp; cvs -d :pserver:anonymous@anoncvs.gnome.org:/cvs/gnome -z3 co gnome-common
	@echo "CVS check-out completed"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${ORBIT_SRC}; \
		export PATH=\"../gnome-common/macros2;$$PATH\"; echo $$PATH; \
		./autogen.sh --prefix=/opt"	
endif
ifdef COMSPEC
#Compile from source code (Windows)
#if installing to /opt set environment variables as follows:
#export PKG_CONFIG_PATH=/opt/lib/pkgconfig
#export GNOME2_DIR=/opt
#export LD_LIBRARY_PATH=/opt/lib:${LIBRARY_PATH}
#export PATH=/opt/bin:${PATH}
	@echo "Starting compilation..."
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${ORBIT_SRC}; ./configure"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${ORBIT_SRC}; make"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${ORBIT_SRC}; make install"
	@echo " "
	@echo "Package info & manuals: ${ORBIT_INFO}"
	@echo " "
	@echo "ORBit installed.  Please re-run 'configure' to detect changes."
	@echo " "
else
	@echo "You should allready have ORBit on UNIX?"
	@echo "I don't want to mess up your GNOME installation..."
endif

#ORBit - Cant find headers:
#linc-protocol.h:21:24: sys/socket.h /cygdrive/d/msys/1.0/xyz/include/socket.h
#linc-protocol.h:22:19: netdb.h: NOT IN MSYS OR MINGW 
#linc-connection.h:19:21: sys/uio.h: NOT IN MSYS OR MINGW


#libIDL is needed for ORBit on Windows
LIBIDL_INFO=http://andrewtv.org/libIDL/
LIBIDL_SRC_PATH=http://andrewtv.org/libIDL/
#WARNING: Minumum version required by ORBit is 0.7.4
#maybe use CVS? http://developer.gnome.org/tools/cvs.html
LIBIDL_SRC=	libIDL-0.6.8
LIBIDL_SRC_TAR_GZ=${LIBIDL_SRC}.tar.gz

${LIBIDL_SRC_TAR_GZ}:
	${WGET} ${LIBIDL_SRC_PATH}/$@ 

install.libidl: ${LIBIDL_SRC_TAR_GZ} install.libidl.pkg-config
ifdef COMSPEC
#Compile from source code (Windows)
	cd ${SYSTEMDRIVE}/tmp; tar --gunzip -xf ${CYG_AUBITDIR}/${LIBIDL_SRC_TAR_GZ}
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${LIBIDL_SRC}; \
		CFLAGS=\"`eval 'pkg-config glib-2.0 --cflags'`\"; \
		LDFLAGS=\"`eval 'pkg-config glib-2.0 --libs'`\"; \
		export CFLAGS; ./configure"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${LIBIDL_SRC}; make"
	${MSYS_SH} "${MSYS_CONF}; cd ${SYSTEMDRIVE}/tmp/${LIBIDL_SRC}; make install"
# /cygdrive/d/msys/1.0/local/bin/libIDL-config	
	@echo " "
	@echo "Package info & manuals: ${LIBIDL_INFO}"
	@echo " "
	@echo "libIDL installed.  Please re-run 'configure' to detect changes."
	@echo " "
endif

ifdef COMSPEC 
	LIBIDL_PREFIX_WINPATH=${shell cygpath -m /cygdrive/d/msys/1.0/local}
endif
LIBIDL_PC_PATH=F:/GTK/lib/pkgconfig/libIDL-2.0.pc
#Create pkg-config file for libIDL, which is missing, since ORBit 
#configure will use pkg-confing to check for libIDL:
install.libidl.pkg-config:
	@echo "prefix=${LIBIDL_PREFIX_WINPATH} LIBIDL_PC_PATH=${LIBIDL_PC_PATH}"
	@echo "prefix=${LIBIDL_PREFIX_WINPATH}" > ${LIBIDL_PC_PATH}
	@echo "exec_prefix=${LIBIDL_PREFIX_WINPATH}/bin" >> ${LIBIDL_PC_PATH}
	@echo "libdir=${LIBIDL_PREFIX_WINPATH}/lib" >> ${LIBIDL_PC_PATH}
	@echo "includedir=${LIBIDL_PREFIX_WINPATH}/include" >> ${LIBIDL_PC_PATH}
	@echo "" >> ${LIBIDL_PC_PATH}
	@echo "Name: libIDL-2.0" >> ${LIBIDL_PC_PATH}
	@echo "Description: libIDL". >> ${LIBIDL_PC_PATH}
#LIBIDL_REQUIRED=0.7.4
#and we have 0.6.8!!!!!
	@echo "Version: 0.7.4" >> ${LIBIDL_PC_PATH}
#	@echo "Version: 0.6.8" >> ${LIBIDL_PC_PATH}
#	@echo "Requires: glib-2.0 gmodule-2.0 gthread-2.0" >> ${LIBIDL_PC_PATH}
	@echo "Libs: -L${LIBIDL_PREFIX_WINPATH}/lib -lIDL" >> ${LIBIDL_PC_PATH}
	@echo "Cflags: -I${LIBIDL_PREFIX_WINPATH}/include/libIDL" >> ${LIBIDL_PC_PATH}
	@echo "" >> ${LIBIDL_PC_PATH}	

##########################################
# CORBA ORBit docs and examples (examples need ORBit2) :
install.orbit.example:
	${WGET} http://www.gnome.org/projects/ORBit2/orbit-docs.tar.gz

orbit.test:
	cd /tmp; gunzip -c ${AUBIT_SRC_ROOT}/orbit-docs.tar.gz | tar -xvf -
#This should build a documentation directory that contains this documentation 
#in both sgml (docbook) and html, and an examples directory. Move to the 
#examples directory, and go
#	cd /tmp/orbit-docs; ./configure
	cd /tmp/orbit-docs/examples/echo; make
#Proceed similarly for the calculator example.
#To actually run the echo example, open two windows up. Run echo-server in one 
#and echo-client in the other (echo-server writes out the file echo.ref which 
#echo-client reads). If you want to have fun now, compile orbit on a different 
#machine, make echo-client on the different machine, move echo.ref from the
#first machine to the second and run echo-client: eh voila - client/server 
#over tcp/ip with the same code that ran using unix sockets on a single machine. 	
#NOTE:
#From ORBit 0.5.3, IIOP communications over IP sockets are disabled by default for security reasons. You should create an  /etc/orbitrc  (for a system-wide settings), or an  ~/.orbitrc  (for one user's setting) containing something like :
#
#ORBIIOPUSock=1
#ORBIIOPIPv4=1
#ORBIIOPIPv6=0
#
#Alternatively, you can also use command line parameters.

change.log:
	@export CHANGE_LOG_NAME='Andrej Falout'; export CHANGE_LOG_EMAIL_ADDRESS='andrej_AT_falout_DOT_org'; \
		perl tools/prepare-ChangeLog.pl
		
###################
# 36: C and C++ Code Counter (CCCC) - source code metrics
install.cccc: ${CCCC_SRC_TAR_GZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${CCCC_SRC_NAME}; ./configure; make; make install	
	@echo " "
	@echo "Package info & manuals: ${CCCC_INFO}"
	@echo " "
	@echo "CCCC (C and C++ Code Counter) installed.  Please re-run 'configure' to detect changes."
	@echo " "

###################
# 37: SMTP lib
install.smtp: ${SMTP_SRC_TAR_BZ2}
	cd /tmp; cp ${AUBIT_SRC_ROOT}/$^ .; bunzip2 $^; tar -xf ${SMTP_SRC_NAME}.tar 
	cd /tmp/${SMTP_SRC_NAME}; ./configure; make; make install	
	@echo " "
	@echo "Package info & manuals: ${SMTP_INFO}"
	@echo " "
	@echo "SMTP installed.  Please re-run 'configure' to detect changes."
	@echo " "
	@echo " NOTE: libsmtp requires old-style gtk-config and libglib from GTK+ 1.2"
	@echo " You can use gtk1-compat-devel that emulates gtk-config for GTK+ 2.0"
	@echo " You can link libglib-2.0.so to libglib.so - it will work."
	@echo " "
	
#installs:
#/usr/local/lib/libsmtp.a
#/usr/local/lib/libsmtp_mime.a
#/usr/local/include/libsmtp.h
#/usr/local/include/libsmtp_mime.h
	
	
###################
# 38: Ingres
install.ingres: ${INGRES_BIN_TGZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
	cd /tmp/${INGRES_BIN_NAME};
#	as root:
#	ingres_express_install.sh [-tar] [Installation ID] [Install dir]
	
#II_SYSTEM: /opt/Ingres/IngresII
#II_INSTALLATION: II

#System user ingres has been created but no password has been set.
#Please set the password to enable login for this user.

#   1:ingres2006             ########################################### [ 11%]
#II_INSTALLATION configured as II.
#   2:ingres2006-dbms        ########################################### [ 22%]
#Setting up Ingres 2006 Intelligent DBMS, this may take some time...
#See /opt/Ingres/IngresII/ingres/files/install.log for more info.
#   3:ingres2006-net         ########################################### [ 33%]
#Building the password validation program 'ingvalidpw'.
#Executable successfully installed.
#   4:ingres2006-abf         ########################################### [ 44%]
#   5:ingres2006-ice         ########################################### [ 56%]
#Setting up Ingres 2006 Web Deployment Option, this may take some time...
#See /opt/Ingres/IngresII/ingres/files/install.log for more info
#Ingres/ICE stages
#
#    1 to 8

#have been set up in this installation.

#To use ICE
#  You must enable your ICE server (cbf)
#  You must configure your html home directory for your Web server
#  You must configure your Web server for ICE, please see the ICE documentation

#   6:ingres2006-jdbc        ########################################### [ 67%]
#   7:ingres2006-odbc        ########################################### [ 78%]
#   8:ingres2006-rep         ########################################### [ 89%]
#   9:ingres2006-star        ########################################### [100%]
#Ingres 9.0.4 has installed successfully.
#The instance will now be started...
#
#Starting Ingres, instance II

	
	
	@echo " "
	@echo "Package info & manuals: ${INGRES_INFO}"
	@echo " "
	@echo "Ingres installed.  Please re-run 'configure' to detect changes."
	@echo " "
	@echo " "


###################
# 39: SF-upload
install.sfdl: ${SFDL_TAR_GZ}
	cd /tmp; tar --gunzip -xf ${AUBIT_SRC_ROOT}/$^
ifneq "${COMSPEC}" ""
#ActivePerl on Windows
	su -c "cd /tmp/${SFDL_NAME}; perl prereqinst -ppm"
else
	su -c "cd /tmp/${SFDL_NAME}; perl prereqinst"
	wget ftp://archive.progeny.com/CPAN/authors/id/G/GA/GAAS/HTML-Parser-3.55.tar.gz
	wget ftp://archive.progeny.com/CPAN/authors/id/G/GA/GAAS/libwww-perl-5.803.tar.gz
	wget ftp://archive.progeny.com/CPAN/authors/id/C/CH/CHAMAS/Crypt-SSLeay-0.51.tar.gz
	wget ftp://archive.progeny.com/CPAN/authors/id/P/PE/PETEK/HTML-Tree-3.21.tar.gz
	wget ftp://archive.progeny.com/CPAN/authors/id/P/PE/PETDANCE/HTML-Tagset-3.10.tar.gz

	tar -xvzf HTML-Parser-3.55.tar.gz; cd HTML-Parser-3.55; perl Makefile.PL; make; make test; make install
	tar -xvzf libwww-perl-5.803.tar.gz; cd libwww-perl-5.803; perl Makefile.PL; make; make test; make install 
	tar -xvzf Crypt-SSLeay-0.51.tar.gz; cd Crypt-SSLeay-0.51; perl Makefile.PL; make; make test; make install
	tar -xvzf HTML-Tree-3.21.tar.gz; cd HTML-Tree-3.21;  perl Makefile.PL; make; make test; make install
	tar -xvzf HTML-Tagset-3.10.tar.gz; cd HTML-Tagset-3.10;  perl Makefile.PL; make; make test; make install

#perl -MCPAN -e "install LWP::UserAgent"
#cpan 'o conf init'
#perl -MCPAN -e'get "HTML-Parser-3.55"'
endif
	su -c "cd /tmp/${SFDL_NAME}; perl Makefile.PL; make all test install"
	@echo " "
	@echo "Package info & manuals: ${SFDL_INFO}"
	@echo " "
	@echo "SF-DL installed.  Please re-run 'configure' to detect changes."
	@echo " "




###########################################################################
#			Targets for downloading installation files:
###########################################################################
${IODBC_SRC_TAR_GZ}:
	${WGET} ${IODBC_PATH}/${IODBC_SRC_TAR_GZ}
${IODBC_RUNTIME_RPM}:
	${WGET} ${IODBC_PATH}/${IODBC_RUNTIME_RPM}
${IODBC_SDK_RPM}:
	${WGET} ${IODBC_PATH}/${IODBC_SDK_RPM}
${IODBC_GUI_RPM}:
	${WGET} ${IODBC_PATH}/${IODBC_GUI_RPM}
${PDFLIB_SRC_TGZ}:
	${WGET} ${PDFLIB_PATH}/${PDFLIB_SRC_TGZ}
${PDFLIB_WIN_ZIP}:
	${WGET} ${PDFLIB_WIN_PATH}/$@
${IKSEMEL_TGZ}:
	${WGET} ${IKSEMEL_PATH}/${IKSEMEL_TGZ}
${GRAPHVIZ_RPM}:
	${WGET} ${GRAPHVIZ_PATH}/${GRAPHVIZ_RPM}
${IFXESQLC_BIN_ZIP}:
	${WGET} ${IFXESQLC_PATH}/${IFXESQLC_BIN_ZIP}
${XMLRPC_RPM}:
	${WGET} ${XMLRPC_PATH}/${XMLRPC_RPM}
${XMLRPC_DEV_RPM}:
	${WGET} ${XMLRPC_PATH}/$@
${LIBWWW_RPM}:
	${WGET} ${LIBWWW_PATH}/${LIBWWW_RPM}
${SAPODBC_RPM}:
	${WGET}  ${SAPODBC_PATH}/${SAPODBC_RPM}
${UNIXODBCDEV_RPM}:
	${WGET} ${UNIXODBCDEV_PATH}/${UNIXODBCDEV_RPM}
${PGESQLC_RPM}:
	${WGET} ${PGESQLC_PATH}/${PGESQLC_RPM}
${PGODBC_RPM}:
	${WGET} ${PGODBC_PATH}/${PGODBC_RPM}
${MPZ_SRC_TGZ}:
	${WGET} ${MPZ_PATH}/${MPZ_SRC_TGZ}
${SWIG_RPM}:
	${WGET} ${SWIG_PATH}/${SWIG_RPM}
${DOXYGEN_RPM}:
	${WGET} ${DOXYGEN_PATH}/${DOXYGEN_RPM}
${CHECK_RPM}:
#NOTE: ?download
	${WGET} ${CHECK_PATH}/${CHECK_RPM}?download
${SAPDBESQL_RPM}:
	${WGET} ${SAPDBESQL_PATH}/${SAPDBESQL_RPM}
${SAPDBENV_RPM}:
	${WGET} ${SAPDBENV_PATH}/${SAPDBENV_RPM}
${GTK_GTK_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_GTK_DEV_RPM}
${GTK_GDK_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_GDK_DEV_RPM}
${GTK_GLIB_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_GLIB_DEV_RPM}
${PGODBC_SRC_TGZ}:
	${WGET} ${PGODBC_SRC_PATH}/$@
${GTK_PANGO_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_PANGO_DEV_RPM}
${GTK_ATK_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTK_ATK_DEV_RPM}
${XFREE86_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${XFREE86_DEV_RPM}
${GNOME_LIBS_DEVEL}:
	${WGET} ${GTK_DEV_PATH}/${GNOME_LIBS_DEVEL}
${FREETYPE_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${FREETYPE_DEV_RPM}
${FONTCONFIG_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${FONTCONFIG_DEV_RPM}
${XFT_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${XFT_DEV_RPM}
${GTKPLUS_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${GTKPLUS_DEV_RPM}
${ORBIT_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${ORBIT_DEV_RPM}
${IMLIB_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/${IMLIB_DEV_RPM}
${ESOUND_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${GLIB_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${LIBTIFF_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${LIBJPEG_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${LIBUNGIF_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${AUDIOFILE_DEV_RPM}:
	${WGET} ${GTK_DEV_PATH}/$@
${SQLITE_RPM_LIB}:
	${WGET} ${SQLITE_PATH}/$@
${SQLITE_RPM_DEV}:
	${WGET} ${SQLITE_PATH}/$@
${SQLITE_ODBC_TGZ_SRC}:
	${WGET} ${SQLITE_ODBC_PATH}/$@
${SQLITE_ODBC_WIN}:
	${WGET} ${SQLITE_ODBC_PATH}/$@
${SQLITE_WIN_LIB}:
	${WGET} ${SQLITE_WIN_PATH}/$@
${SQLITE_WIN_EXE}:
	${WGET} ${SQLITE_WIN_PATH}/$@
${SPOPC_TGZ_SRC}:
	${WGET} ${SPOPC_PATH}/$@
${CINT_TAR_GZ_SRC}:
	${WGET} ${CINT_PATH}/$@
${CINT_TAR_GZ_BIN_WIN}:
	${WGET} ${CINT_PATH}/$@
${PCRE_WIN_INSTALLER}:
	${WGET} ${PCRE_WIN_PATH}/${PCRE_WIN_INSTALLER}
${PCRE_SRC_GZ}:
	${WGET} ${PCRE_SRC_PATH}/$@
${SXML_SRC_GZ}:
	${WGET} ${SXML_SRC_PATH}/$@
${PDCURSES_SRC_ZIP}:
	${WGET} ${PDCURSES_WIN_PATH}/$@
${PGIFX_SRC_GZ}:
	${WGET} ${PGIFX_SRC_PATH}/$@
${PDCURSES_WIN_ZIP}:
	${WGET} ${PDCURSES_WIN_PATH}/$@
${GRAPHVIZ_WIN_EXE}:
	${WGET} ${GRAPHVIZ_WIN_PATH}/$@
${XMLRPC_SRC_TAR_GZ}:
	${WGET} ${XMLRPC_SRC_PATH}/$@
${LIBWWW_SRC_ZIP}:
	${WGET} ${LIBWWW_SRC_PATH}/$@
${PDCURSES_SRC_TAR_GZ}:
	${WGET} ${PDCURSES_WIN_PATH}/$@
${SQLITE_SRC_TAR_GZ}:
	${WGET} ${SQLITE_PATH}/$@
${ORBIT_SRC_TAR_GZ}:
	${WGET} ${ORBIT_SRC_PATH}/$@
${ORBIT_WIN_BIN_ZIP}:
	${WGET} ${ORBIT_WIN_PATH}/$@
${ORBIT_IDL_WIN_BIN_ZIP}:
	${WGET} ${ORBIT_WIN_PATH}/$@
${CCCC_SRC_TAR_GZ}:
	${WGET} ${CCCC_PATH}/$@
${UNIXODBC_RPM}:
	${WGET} ${UNIXODBC_PATH}/${UNIXODBC_RPM}
${UNIXODBC_GUI_RPM}:
	${WGET} ${UNIXODBC_PATH}/${UNIXODBC_GUI_RPM}
${SMTP_SRC_TAR_BZ2}:
	${WGET} ${SMTP_PATH}/${SMTP_SRC_TAR_BZ2}
${INGRES_BIN_TGZ}:
	${WGET} ${INGRES_PATH}/${INGRES_BIN_TGZ}
${SFDL_TAR_GZ}:
	${WGET} ${SFDL_PATH}/${SFDL_TAR_GZ}

	
#############################################
#       SQLite tests
#############################################

test.sqlite.odbc: test_sqlite_odbc test_sqlite
	export A4GL_LEXTYPE=C; aubit 4glc test_sqlite_odbc.4gl -o test_sqlite_odbc.4ae
	@echo "export A4GL_SQLTYPE=sqliteodbc; export A4GL_UI=TUI; export DEBUG=ALL; test_sqlite_odbc.4ae"
	@echo " "
	@export A4GL_SQLTYPE=sqliteodbc; export A4GL_UI=TUI; export DEBUG=ALL; xx=`test_sqlite_odbc.4ae | head -1`; if test "$$xx" = "        987"; then echo "Aubit connection to SQLite via ODBC successful."; rm test_sqlite_odbc.* ; else echo "Aubit connection to SQLite via ODBC FAILED...$$xx.."; fi

test.sqlite: test_sqlite_native test_sqlite
	export A4GL_LEXTYPE=C; aubit 4glc test_sqlite_odbc.4gl -o test_sqlite_odbc.4ae
	@echo "export A4GL_SQLTYPE=sqlite; export A4GL_UI=TUI; export DEBUG=ALL; test_sqlite_odbc.4ae"
	@echo " "
	@export A4GL_SQLTYPE=sqlite; export A4GL_UI=TUI; export DEBUG=ALL; xx=`test_sqlite_odbc.4ae | head -1`; if test "$$xx" = "        987"; then echo "Aubit native connection to SQLite successful."; rm test_sqlite_odbc.* ; else echo "Aubit native connection to SQLite FAILED...$$xx.."; fi

test_sqlite_odbc: clean.test.sqlite
	@echo "main" > test_sqlite_odbc.4gl
	@echo "define dummy integer" >> test_sqlite_odbc.4gl
	@echo "	database mysqlitedb " >> test_sqlite_odbc.4gl

test_sqlite_native: clean.test.sqlite
	@echo "main" > test_sqlite_odbc.4gl
	@echo "define dummy integer" >> test_sqlite_odbc.4gl
	@echo "	database '${AUBIT_SRC_ROOT}/tools/aubit.db' " >> test_sqlite_odbc.4gl

test_sqlite:
	@echo "	declare sc1 cursor for select test from testing" >> test_sqlite_odbc.4gl
	@echo "	foreach sc1 into dummy" >> test_sqlite_odbc.4gl
	@echo "		display dummy" >> test_sqlite_odbc.4gl
	@echo "	end foreach" >> test_sqlite_odbc.4gl
	@echo "end main" >> test_sqlite_odbc.4gl
	@echo " " >> test_sqlite_odbc.4gl

clean.test.sqlite:
	rm -f test_sqlite_odbc.*


	
# ============================== EOF ================================

