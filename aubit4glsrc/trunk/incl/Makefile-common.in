# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   common makefile include    |
# | This file should be included in ALL Aubit 4gl compiler make files    |
# | that are used to compile Aubit compiler itself                       |
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+
#
# $Id: Makefile-common.in,v 1.55 2002-08-13 11:56:47 afalout Exp $
#

#If we later need to know if this makefile was included or not:
MAKEFILE_COMMON_INCLUDED=1

#############
#this internal variable points to default location of Aubit config files
#Default=/etc/opt/aubit4gl
AUBITETC=/etc/opt/aubit4gl


#WARNING! configure is not creating this file when in binary tree,
#it is copied in state as configured for source code distribution,
#so in binary tree AUBIT_SRC_ROOT cannot be used since it's wrong,
#together with most other @xxx@ stuff - but we are using makefiles installed
#with binary distro inly to install/seinstall and compile stuff in tools/test
#so I guess it's OK - if not, we will have to pack Makefile-common.in with
#binary distro and modify configure to create it fo binary biold too.
AUBIT_SRC_ROOT=@aubitdir@
AUBIT_VERSION=@AUBIT_VERSION@
AUBIT_BUILD=@AUBIT_BUILD@
COMPILE_DATE=@COMPILE_DATE@
TARGET=@target@

## ==================================================================
##                    Read configuration file(s)
## ==================================================================

#All includes should become obsolete once autoconf is fully implemented
ifndef NOINCL
	NOINCL=0
endif

ifeq "$(NOINCL)" "0"

	NOERR=2>/dev/null

	AUBITRCFILE:=$(shell ls ${AUBITETC}/aubitrc ${NOERR})
	ifneq "${AUBITRCFILE}" ""
		include ${AUBITRCFILE}
		A1:=${AUBITRCFILE}
	endif

	#override AUBITDIR set in gloabal aubitrc, in case it is pointing
	#to some other location then this source code tree; there is no point
	#to have AUBITDIR set in any other way then by "configure", when
    #compiling Aibt compiler source code; it can cause bad combination of
    #libraries, and in this place, it may cause completely wron include
    #of aubitrc configured different then we want it while compiling

	#check if this file is included from make file in Aubit source tree or
	#not. If we are not, we should not override AUBITDIR
    ifneq "${AUBIT_BIN_INSTALL}" "1"
        AUBITDIR=${AUBIT_SRC_ROOT}
    else
		ifeq "${AUBITDIR}" ""
			#this should happen ONLY when initially installing binary build,
            #unless install of aubitrc to /etc/opt/aubit4gl/aubitrc fails:
			AUBITRCFILE:=$(shell ls ./etc/aubitrc-bin ${NOERR})
			ifneq "${AUBITRCFILE}" ""
				include ${AUBITRCFILE}
				A2:=${AUBITRCFILE}
			endif
        endif
	endif

	ifneq "${AUBITDIR}" ""
		AUBITRCFILE:=$(shell ls ${AUBITDIR}/etc/aubitrc ${NOERR})
		ifneq "${AUBITRCFILE}" ""
			include ${AUBITRCFILE}
			A2:=${AUBITRCFILE}
		endif
    endif

		#No longer needed, since we are sure AUBITDIR is OK now:

		#this is an attempt to locate aubitrc in absence of AUBITDIR,
        #or to override settings for aubitrc in case we are working
        #from different Aubit instrallation/source directory:
		#AUBITRCFILE:=$(shell ls ../etc/aubitrc ${NOERR})
		#ifneq "${AUBITRCFILE}" ""
		#	include ${AUBITRCFILE}
		#	A3:=${AUBITRCFILE}
		#endif
        #
		#AUBITRCFILE:=$(shell ls etc/aubitrc ${NOERR})
		#ifneq "${AUBITRCFILE}" ""
		#	include ${AUBITRCFILE}
		#	A4:=${AUBITRCFILE}
	    #endif

    #check if now AUBITDIR points to Aubit source tree or not. We will have
    #${AUBITDIR}/compilers directory only if it points to source code tree:
	TMP:=$(shell ls ${AUBITDIR}/compilers ${NOERR})
	ifeq "${TMP}" ""
        AUBITDIR_SRC=0
    else
        AUBITDIR_SRC=1
		C_DFLAGS        +=-DSRC_TREE
	endif

    export AUBITDIR_SRC

	#C_DFLAGS        +=xx${AUBITDIR}xx
	#C_DFLAGS        +=xx${AUBITDIR_SRC}xx

	AUBITRCFILE:=$(shell ls ~/.aubit4gl/aubitrc ${NOERR})
	ifneq "${AUBITRCFILE}" ""
		include ${AUBITRCFILE}
		A5:=${AUBITRCFILE}
    endif

	AUBITRCFILE:=$(shell ls ./.aubitrc ${NOERR})
	ifneq "${AUBITRCFILE}" ""
		include ${AUBITRCFILE}
		A6:=${AUBITRCFILE}
    endif

	ifdef A4GL_INIFILE
		include $(A4GL_INIFILE)
		A7:=$(A4GL_INIFILE)
	endif

endif

#in all cases, override AUBITDIR set in any other way then by "configure"
#for compiling Aubit compiler from source code
ifneq "${AUBIT_BIN_INSTALL}" "1"
	AUBITDIR=${AUBIT_SRC_ROOT}
endif

PATH:=${AUBITDIR}/bin:${PATH}
#PATH:=../bin:${PATH}

## ==================================================================
##                   Global Makefile variables
## ==================================================================

#######################################
#Lclint (Splint) C code checker flags:
#See http://www.splint.org/manual/manual.html

#LCLINTFLAGS		=-weak +posixlib
#When using -skipansiheaders:
#stddef.h needs -I/usr/include/linux
#stdarg.h needs -I/usr/lib/gcc-lib/i386-glibc21-linux/egcs-2.91.66/include
LCLINTFLAGS			=-f .splintrc -I/usr/include/linux -I/usr/lib/gcc-lib/i386-glibc21-linux/egcs-2.91.66/include
#name for log created for each module:
LCLINTLOG  			=lclint.log
#name for cumulative log created in AUBITDIR root:
LCLINT_GLOBAL_LOG	=lclint.log
#Command to use for log file creation:
LCLINTLOGCMD		=2>&1
#This will soon change to "splint":
LCLINTEXE           =@LCLINTEXE@
#Should we ignore if lclint checking fails, or stop:
LCLINTERR           =-

####################
#commands to use:
MAKE				=make
MKDIR 				=mkdir
CD 					=cd
CP 					=cp
CAT                 =cat
RM 					=rm -f
RMDIR				=rm -rf
SH 					=/bin/sh
#CC 					=c++
CC 					=@CC@
#LINK.c				=${CC}
LN_S 				=ln --symbolic --force
LN_H                =ln --force
AR 					=ar rc
#YACC 				=bison -y
YACC                =@YACC@ @DEBUG_BISON@
#FIXME: this should be set by configure:
LEX					=flex -i
NICE                =nice -20
INSTALL_USR			=nobody
INSTALL_GRP 		=nobody
INSTALL_CMD 		=install
INSTALL     		=${INSTALL_CMD} -c -o ${INSTALL_USR} -g ${INSTALL_GRP}
MKPATH      		=mkdir -p
CPPFLAGS 			=
#LDFLAGS 			=-s
LDFLAGS_SHARED		=@LDFLAGS_SHARED@

#FIXME: use gcc to do linking, not ld directly.  Instead of 'ld -shared', 
#use 'gcc -shared'.  If you MUST pass linker specific options to ld, use 
#'-Wl,--my-ld-option' in your gcc. On Cygwin, using 'ld' directly will not 
#automatically pick up the w32api libraries, even if they are installed.
#command line.
LD                  =ld
ALL_LIBS			=@LIBS@
AUTOCONF_CFLAGS     =@CFLAGS@
#tipycally set by autoconf: AUTOCONF_CFLAGS     =-g -O2
#fixme: set -DDEBUG and -g from configure:

#Total header files (.h) in Aubit: 102 (76 in lib/ incl/ and compilers/)


NON_PEDANTIC_OK		=1
#cannot use -pedantic, too much warnings
CWARN               =-Wall -Wredundant-decls -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes
C_IFLAGS            =-I/usr/local/include
C_DFLAGS			+=-DDEBUG -DHAVE_CONFIG_H

#This can be overriden from command line: "make OLD_INCL=0" to compile
#with new include files:
OLD_INCL=0
export OLD_INCL

ifeq "${OLD_INCL}" "1"
	C_IFLAGS        +=-I$(AUBITDIR)/incl -I$(AUBITDIR)/lib/libincl -I$(AUBITDIR)/compilers/fcompile
	C_DFLAGS        +=-DOLD_INCL
	C_DFLAGS        +=-DSRC_TREE
else
	C_IFLAGS        +=-I$(AUBITDIR)/incl
endif


CFLAGS				+=${CWARN} ${AUTOCONF_CFLAGS} ${C_DFLAGS} ${C_IFLAGS}
#we are overriding LD_LIBRARY_PATH that might existed in environment:
LD_LIBRARY_PATH		:=${AUBITDIR}/lib:/usr/local/lib:${LD_LIBRARY_PATH}

#To let know 4glpc we are in process of making compiler, and not
#compiling 4gl programs
MAKINGAUBIT			=1


#There are sutuations in which it's OK for some targets to fail to build.
#Under normal circumstances, we would leave FAIL_OK empty
FAIL_OK             =-

#  -fPIC  If supported for the target machine, emit position-
#         independent code,  suitable  for  dynamic  linking,
#         even if branches need large displacements.
#FIXME: is it OK to have -fPIC when creating executables, not libraries?
PIC					=@PIC@
#-rdynamic is needed when calling functions that are defineds in
#executable, from shared libraries that are dlopen at run-time,
#otherwise we get this function calls as undefined symbols. as in:
#4glc: relocation error: /opt/aubit/aubit4glsrc/lib/libLEX_C.so: undefined symbol: set_clobber
#-rdynamic basically makes all symbols in a program public to a dlopen() shared lib.
#thsi is a LINKER, not compiler option, and it's not in GCC documentation.
#The -rdynamic option seems to have been
#introduced as a high-level interface to the linker, to (a) force the
#allocation of a global symbol table in the final executable, even if it's
#not strictly needed, and (b) cause the inclusion of the global symbols in
#that symbol table.
#
#        o  Under linux, gcc interprets it by setting the
#           "-export-dynamic" option for ld, which has that effect, according
#           to the linux ld manpage.
#
#        o Under IRIX it's ignored, and the program's happy as a clam.
#
#        o Under SunOS-4.1, gcc interprets it by setting the -dc -dp
#          options for ld, which again forces the allocation of the symbol
#          table in the code produced (see ld(1) on a Sun).
RDYNAMIC            =-rdynamic


USE_RPCGEN			=@USE_RPCGEN@
HAVE_RPCLIB			=@HAVE_RPCLIB@

#How do we wanat compilers (4glc, mcompile, mkmess, fcompile) linked. this
#flag is forwarded to 4glpc:
#LINK_COMPILERS      =-static
LINK_COMPILERS      =-dynamic
#which Aubit library we want to link Aubit executables/compiler with. This
#flag is forwarded to C linker:
#AUBIT_LIB			=-laclall
#AUBIT_LIB			=-laclshared
AUBIT_LIB			=-laubit4gl

#got core dumps when trying this:
#LINK_COMPILERS      =-shared

#do not install static libraries on CygWin:
STATICLIB_INST=no

ifdef COMSPEC
	PATH		:=${AUBITDIR}/lib:/usr/local/lib:${PATH}
	#native-struct rewuired by GTK on Windows
	CFLAGS		+=-DWIN32 -fnative-struct
    EXEEXT		=.exe
	EXE			=${EXEEXT}
	SO_EXT      =.dll
    SH			=bash
	SO_LDFLAGS	=${RDYNAMIC} ${PIC}
	SO_GCCFLAGS =-Xlinker ${RDYNAMIC}
	DLL_EXPORTLIB_EXT=.dll.a
	#dll on Windows are loaded by standard Windows loader, that don't
	#understand CygWin symbolic links:
	SOEXP_EXT   =${SO_EXT}.a
	#if USE_RPCGEN is disabled, static files from /tools/cygwin will be used
    #this is no longer nececery on CygWin (with appropriate Sun RPC port for CygWin)
	#USE_RPCGEN  =0

	LN			=cp
	LN_S_LIB    =cp
	CPEXE		=cp

else
    #FIXME: add -g from configure
	#FIXME: verify that we need -fPIC in CFLAGS
	CFLAGS      +=${PIC}
    #flags to linker, when making shared libraries:
	SO_LDFLAGS	=-shared
    #flags to CC when making and linking executables:
	EXE_CFLAGS  =${RDYNAMIC}
	EXEEXT		=
	SO_EXT      =.so
    SH			=sh


	LN			=${LN_H}
	#we should not use hard links when we are installing, because this
    #can cause errors like "Invalid cross-device link" when source
    #and destination is on different deveices:
	#LN_S_LIB    =${LN_S}
	CPEXE		=${LN_H}
endif

####################### from aubitbuild-multi.mk ####################


## ==================================================================
##                              Options - UnixODBC
## ==================================================================

#name of library to link compiler with
#typically, "odbc" for unixODBC, "iodbc" for iODBC manager
#Affects: main makefile and 4glpc
#UNIXODBC_LIB_NAME=odbc

#where can we find ODBC header files for this ODBC manager/driver
#(odbc.h, sql.h ...etc.)
#fixme: rename this to ODBC_LIB_HEADERS
#Affects: main makefile, 4glpc and run-time encironment
#UNIXODBC_ODBCLIBDIR=/opt/unixODBC/include


#where can we find ODBC_LIB_NAME (libiodbc.so, libodbc.so...)
#Affects: main makefile
#UNIXODBC_ODBC_LIB_DIR=/opt/unixODBC/lib

## ==================================================================
##                              Options - iODBC
## ==================================================================


    #Which predefined version to use: Uncomment only one:
	#IODBCVER=Openlink
	#IODBCVER=2.5
	#IODBCVER=3
	#IODBCVER=3.0.5

	#IODBC_LIB_NAME=iodbc

	ifeq "$(IODBCVER)" "Openlink"
		USEPGHEADRERS=1
        #USELOCALHEADRERS=1
		IODBC_ODBC_LIB_DIR	=/usr/openlink/lib
    endif

	ifeq "$(IODBCVER)" "3"
	    #standalone iODBC manager V3
		IODBC_ODBCLIBDIR	=/opt/iODBC_3beta/iODBC/include
		IODBC_ODBC_LIB_DIR	=/opt/iODBC_3beta/iODBC/lib
    endif

	ifeq "$(IODBCVER)" "2.5"
		#standalone iODBC manager V2.5
	   	IODBC_ODBCLIBDIR	=/opt/iODBC_source_v2.5
		IODBC_ODBC_LIB_DIR	=/opt/iODBC_source_v2.5/.libs
    endif

	ifeq "$(IODBCVER)" "3.0.5"
	   	IODBC_ODBCLIBDIR	=/opt/iODBC_3.0.5/libiodbc-3.0.5/include
		IODBC_ODBC_LIB_DIR	=/opt/iODBC_3.0.5/libiodbc-3.0.5/iodbc/.libs
    endif

	######### For testing only ##################
	ifeq "$(USEPGHEADRERS)" "1"
		#PosgtgreSQL headers, also used by iODBC manager (standalone and OpenLink)
		IODBC_ODBCLIBDIR 	=/usr/include/pgsql/iodbc
    endif

	ifeq "$(USELOCALHEADRERS)" "1"
		IODBC_ODBCLIBDIR	=local_odbc_incl
    endif

## ==================================================================
##                      Assign defaults
## ==================================================================

#ifeq "$(ODBC)" "unix"
#	ODBC_LIB_NAME	=${UNIXODBC_LIB_NAME}
#	ODBCLIBDIR		=${UNIXODBC_ODBCLIBDIR}
#	ODBC_LIB_DIR	=${UNIXODBC_ODBC_LIB_DIR}
#endif

#ifeq "$(ODBC)" "iodbc"
#	ODBC_LIB_NAME	=${IODBC_LIB_NAME}
#	ODBC_LIB_DIR	=${IODBC_ODBC_LIB_DIR}
#	ODBCLIBDIR		=${IODBC_ODBCLIBDIR}
#endif



#<options needed also for binary disrto makefile========================>

ifneq "${AUBIT_BIN_INSTALL}" "1"
	FCOMPILE	=${AUBIT_SRC_ROOT}/bin/fcompile
#	../../../bin/fcompile
	MKMESS      =${AUBIT_SRC_ROOT}/bin/mkmess
	FGLPCEXEC	=${SH} ${AUBIT_SRC_ROOT}/bin/4glpc
else
	FCOMPILE	=aubit fcompile
	MKMESS      =aubit mkmess
	FGLPCEXEC	=aubit 4glpc
endif

PREFIX=@prefix@

#install location:
ifdef COMSPEC
	#on Windows, dll libraries need to be in the path
	LIB_INSTALL_LINK=/usr/local/bin
else
	#FSH and RPM rules say we should install binaries (links) in
	#${PREFIX}/aubit4gl and libraries (links) in ${PREFIX}/lib. But this will
	#in our case be /opt, and on 99% of the systems we will not have /opt/bin
	#already in the path, and /opt/lib will not be in libraries search path.
	#This conflicts with RPM rule that say that installed programs "must be
	#operational" after RPM install is finished. Therefore, we have to use
	#/usr/lib and /usr/bin:

	#/usr/local/lib is not in default lib load path on RedHat, so we MUST use
	#/usr/lib to get things working immediately after installation, without the
	#need to edit system files manualy

	LIB_INSTALL_LINK=/usr/lib
endif

BIN_INSTALL_LINK=/usr/bin

INSTALL_DIR=${PREFIX}/aubit4gl

#Set AUBITDIR in aubitrc settings:
	TOREPLACE=^AUBITDIR

	ifeq "${AUBIT_BIN_INSTALL}" "1"
		LOOKFOR_INFILE:=${AUBITDIR}/etc/aubitrc-bin
    else
		LOOKFOR_INFILE:=${AUBITDIR}/etc/aubitrc
    endif

	INFILE:=$(shell ls ${LOOKFOR_INFILE} ${NOERR})

	ifneq "${INFILE}" ""
		OLDVALUE:=$(shell grep "${TOREPLACE}" ${INFILE} | awk '{print $1}' | sed -e "s/\//\\\\\//g")
		NEWVALUE:=$(shell echo "AUBITDIR=$(INSTALL_DIR)" | sed -e "s/\//\\\\\//g")
		STARTWITH=^${OLDVALUE}
		REPLACEWITH=${NEWVALUE}
    endif

    #command line parameter to make : "make aubitrc=new"
    #this will force ${AUBITETC}/aubitrc to be overwriten with new one
	ifneq "${aubitrc}" "new"
		AUBITRCFILEEXISTS:=$(shell ls ${AUBITETC}/aubitrc 2>/dev/null)
    endif

LDCONFIG=@LDCONFIG@
ifneq "${LDCONFIG}" "no"
	LD_SO_CONF=/etc/ld.so.conf
	GREP_LD_SO_CONF:=$(shell grep ${INSTALL_DIR}/lib ${LD_SO_CONF})
	GREP_LD_SO_CONF_REMOVE:=$(shell echo "${GREP_LD_SO_CONF}" | sed -e "s/\//\\\\\//g")
endif

#All paths to libraries, that configure script detected outside standard
#library paths. We can use them when compiling, we can use them even in
#4glpc, but when user try to run compiled program, they will unlimately
#fail unless this paths are in LD_LIBRARY_PATH, or in Lunix, optionally in
#/etc/ld.so.conf (don't forget ro run "ldconfig" is you change ld.so.conf
#file manually!)
#We have 2 choices to make user's life easier:
#1) On linux only, we can stuff them in ld.so.conf, and re-run ldconfig.
#   this will be done with "make ldconfig". This will work immediately,
#   but it depenfd on user's rights to write to this file, and works only
#   on Linux.
#   NOTE: ld.so.conf apparently only applies to dynamic loader - but NOT
#   compiler linker ?
#
#2) On non-Linux systems, we can try to stuff them in /etc/profile, (depending
#	on user's rights) or $HOME/.bashrc (? $HOME/.profile), and source this
#	file as ".$HOME/.bashrc". This should also work immediately.
#
ADD_LD_LIBRARY_PATH=@ADD_LD_LIBRARY_PATH@
#ADD_LD_LIBRARY_PATH_SPACE=${ADD_LD_LIBRARY_PATH::/=--}
#ADD_LD_LIBRARY_PATH_SPACE:=$(shell echo ${ADD_LD_LIBRARY_PATH} | sed -e "s%:% %g")
ADD_LD_LIBRARY_PATH_SPACE:=$(shell echo ${ADD_LD_LIBRARY_PATH} |  sed -e "s/:/ /g")

#</options needed also for binary disrto makefile========================>




#All varibales needed in environment, primarily because 4glpc cannot
#read this file - all make files should include this file anyway:
export MAKINGAUBIT
ifneq "${AUBIT_BIN_INSTALL}" "1"
	export AUBIT_SRC_ROOT
endif
export AUBITDIR
#This one is needed to run Aubit compiled programs from build process:
export LD_LIBRARY_PATH
#AUBIT_BIN_INSTALL is needed for make files and 4glpc to know they are not
#in Aubit compiler source code tree; it is added to this file by "make install"
export AUBIT_BIN_INSTALL

## ==================================================================
##                      Moved from aubitrc:
## ==================================================================

##################
#PDF report library: yes or no (needs PDF libraries on system)
#Affects: main makefile
#Default: PDFBUILD=no
PDFBUILD=@PDFBUILD@

##################
#Jabber/XML libraries: yes or no (need iksemel libraries on system)
#Affects: main makefile
#Default: JABBERBUILD=no
JABBERBUILD=@JABBERBUILD@

##################
#If you want to build compiler that will generate Perl code, not only
#C code, set PERLBUILD to yes
#Default: PERLBUILD=no
PERLBUILD=@PERLBUILD@

##################
#defines how will SQL support be built into compiler: dynamic is default.
#if you enter "static", only SQL/ODBC library defined with "ODBC"
#parameter will be staticaly linked.
#Default: ODBC_LINK=dynamic
ODBC_LINK=dynamic

##################
#GTK GUI interface: yes or no (needs GTK libraries on system)
#Affects: main makefile
#Default: GTKBUILD=no
GTKBUILD=@GTKBUILD@

##################
#If linking SQL support dynamically, you can have more then one SQL
#manager/driver installed on your system, and compiled Aubit to use them
#selecting it ar run time with environment variable :
#A4GL_SQLTYPE=libSQL_<name>.so [name of library to use (defaults to nosql)]
#if you define more then one HAVE_xxxx variable here as "yes" you MUST use
#AUBITBUILDMKMULTI to define multiple libraries paths
#Defaults: HAVE_UNIXODBC=no HAVE_IODBC=no
HAVE_UNIXODBC=@HAVE_UNIXODBC@
HAVE_IODBC=@HAVE_IODBC@

#################
#If linking SQL support statically: ODBC manager: "unix" "iodbc" "odbc32"
#Affects: main makefile Options: unix, iodbc, so, no
#Default: ODBC=no
#we can use @A4GL_SQLTYPE@ here, but no is not no, it's "nosql"
ODBC=no

#################
#If linking SQL support statically: name of library to link compiler with
#typically, "odbc" for unixODBC, "iodbc" for iODBC manager
#Affects: main makefile and 4glpc
#Default: ODBC_LIB_NAME=noodbc
ODBC_LIB_NAME=@ODBC_LIB_NAME@

#where can we find ODBC header files for this ODBC manager/driver
#(odbc.h, sql.h ...etc.)
#fixme: rename this to ODBC_LIB_HEADERS
#Affects: main makefile, 4glpc and run-time encironment
#ODBCLIBDIR=/opt/unixODBC/include
#Default: ODBCLIBDIR=/usr/include
#Configure note: we cannot use includedir variable because it
#returns "${prefix}/include" and we cannot process variables here
ODBCLIBDIR=@oldincludedir@

#where can we find ODBC_LIB_NAME (libiodbc.so, libodbc.so...)
#Affects: main makefile
#ODBC_LIB_DIR=/opt/unixODBC/lib
#Default: ODBC_LIB_DIR=/usr/lib
#Configure note: we cannot use libdir variable here because it returns
#returns "${exec_prefix}/lib" and we cannot process variables here
ODBC_LIB_DIR=/usr/lib

#this is used in makefiles (typically -lrpcsvc or -lrpclib):
RPCLIB_NAME=@RPCLIB_NAME@

###############################
#GTK+ 2.0 configuration

#To use GTK "pkg-config" utility, set GLIBVER, GDKVER and GTKVER to
#version strings reported by "pkg-config --list-all"
#This will also be used in makefiles for
#GLIB_CFLAGS=`pkg-config --cflags ${GLIBVER}`
#GLIB_LIBS=`pkg-config --libs ${GLIBVER}`
#unless GLIBVER=old, when hard-coded flags and GTK libs will be used
#GTKVER is used in "4glpc" script

#GLIBVER=old
#GLIBVER=glib-2.0
#GDKVER=gdk-1.3-win32-production
#GTKVER=gtk+-1.3-win32-production

#Your GTK/GDK/GLIB installation path; don't forget to include
#$GTKPATH/bin and $GTKPATH/lib in yout PATH
#GTKPATH=/usr/src/gtk

#needed also in 4glpc:
GTK_CONFIG="@GTK_CONFIG@"
PKG_CONFIG="@PKG_CONFIG@"
#package names reported by gtk-config or pkg-config:
GTK_NAME="@GTK_NAME@"
GDK_NAME="@GDK_NAME@"
GLIB_NAME="@GLIB_NAME@"


MANUAL_GTK="@GTKLIBS@ @GTK_LIB_PATH@ @GTK_INC_PATH@"

DLL_CFLAGS="-shared  -Wl,--output-def=$*.def -Wl,--out-implib=$*.dll.a -Wl,--export-all-symbols"


#gcc -shared -o cyg${module}.dll -Wl,--out-implib=lib${module}.dll.a \
#                  -Wl,--export-all-symbols \
#                  -Wl,--enable-auto-import \
#                  -Wl,--whole-archive $old_lib \
#                  -Wl,--no-whole-archive ${dependency_libs}
#
#The last (-Wl,--no-whole-archive) is important, even if you have no
#dependency_libs.  Don't miss it!
#${module} is 'mylib' to stay with your example and $old_lib is libmylib.a,
#the static lib.  As an alternativ you can list all the objects here instead
#of a static lib which is in fact just a bundle of object files.




## ==================================================================
##                      Common rules
## ==================================================================

#Rule to make Windows-CyGwin .dll and export library:
%.dll %.def %.dll.a: $(DLLOBJS)
#	${CC} -shared  -Wl,--output-def=$*.def -Wl,--out-implib=$*.dll.a -o $*.dll $(DLLOBJS) -Wl,--export-all-symbols  $(DLL_LDFLAGS) $(DLL_LDLIBS)
	${CC} ${DLL_CFLAGS} -o $*.dll $(DLLOBJS) $(DLL_LDFLAGS) $(DLL_LDLIBS)

#	cp $*.def $*.def.bak

#make def file:
#$(DLL_EXP_DEF): $(DLL_OBJS)
xx%.def: $(DLLOBJS)
	dlltool --export-all --output-def $@ $^
#--no-delete
#	cp $@ $@.bak

#create export library only
xx%.dll.a: $(DLLOBJS)
	dlltool --export-all --output-exp $@ $^

#----------------------------- EOF -----------------------------
