# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   common makefile include    |
# | This file should be included in ALL Aubit 4gl compiler make files    |
# | that are used to compile Aubit compiler itself                       |
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+
#
# $Id: Makefile-common.in,v 1.95 2002-10-27 22:34:10 afalout Exp $
#

#Name we will use in many places, for consistency:
AUBITNAME=@SHORTNAME@

#If we later need to know if this makefile was included or not:
MAKEFILE_COMMON_INCLUDED=1

#############
#this internal variable points to default location of Aubit config files
#Default=/etc/opt/${AUBITNAME}
AUBITETC=/etc/opt/${AUBITNAME}


#WARNING! configure is not creating this file when in binary tree,
#it is copied in state as configured for source code distribution,
#so in binary tree AUBIT_SRC_ROOT cannot be used since it's wrong,
#together with most other @xxx@ stuff - but we are using makefiles installed
#with binary distro only to install/deinstall and compile stuff in tools/test
#so I guess it's OK - if not, we will have to pack Makefile-common.in with
#binary distro and modify configure to create it for binary build too.
AUBIT_SRC_ROOT=@aubitdir@
AUBIT_VERSION=@AUBIT_VERSION@
AUBIT_BUILD=@AUBIT_BUILD@
COMPILE_DATE=@COMPILE_DATE@
TARGET=@target@

ifeq "${TARGET_OS}" ""
	TARGET_OS=$(findstring solaris,${TARGET})
endif
ifeq "${TARGET_OS}" ""
	TARGET_OS=$(findstring linux,${TARGET})
endif
ifeq "${TARGET_OS}" ""
	TARGET_OS=$(findstring aix,${TARGET})
endif
ifeq "${TARGET_OS}" ""
	TARGET_OS=$(findstring cygwin,${TARGET})
endif
ifeq "${TARGET_OS}" ""
	TARGET_OS=$(findstring darwin,${TARGET})
endif

ifeq "${TARGET_OS}" ""
	TARGET_OS=unknown
endif

SUBDIR:=$(shell pwd)

## ==================================================================
##                    Read configuration file(s)
## ==================================================================

#All includes should become obsolete once autoconf is fully implemented
ifndef NOINCL
	NOINCL=0
endif

#    if expression ; \
#     then command ; \
#          ... ; \
#     else command ; \
#          ... ; \
#     fi


ifeq "$(NOINCL)" "0"

	NOERR=2>/dev/null

	AUBITRCFILE:=$(shell ls ${AUBITETC}/aubitrc ${NOERR})
	ifneq "${AUBITRCFILE}" ""
		include ${AUBITRCFILE}
		A1:=${AUBITRCFILE}
	endif

	#override AUBITDIR set in gloabal aubitrc, in case it is pointing
	#to some other location then this source code tree; there is no point
	#to have AUBITDIR set in any other way then by "configure", when
    #compiling Aibt compiler source code; it can cause bad combination of
    #libraries, and in this place, it may cause completely wron include
    #of aubitrc configured different then we want it while compiling

	#check if this file is included from make file in Aubit source tree or
	#not. If we are not, we should not override AUBITDIR
    ifneq "${AUBIT_BIN_INSTALL}" "1"
        AUBITDIR=${AUBIT_SRC_ROOT}
    else
		ifeq "${AUBITDIR}" ""
			#this should happen ONLY when initially installing binary build,
            #unless install of aubitrc to /etc/opt/${AUBITNAME}/aubitrc fails:
			AUBITRCFILE:=$(shell ls ./etc/aubitrc-bin ${NOERR})
			ifneq "${AUBITRCFILE}" ""
				include ${AUBITRCFILE}
				A2:=${AUBITRCFILE}
			endif
        endif
	endif

	ifneq "${AUBITDIR}" ""
		AUBITRCFILE:=$(shell ls ${AUBITDIR}/etc/aubitrc ${NOERR})
		ifneq "${AUBITRCFILE}" ""
			include ${AUBITRCFILE}
			A2:=${AUBITRCFILE}
		endif
    endif

    #check if now AUBITDIR points to Aubit source tree or not. We will have
    #${AUBITDIR}/compilers directory only if it points to source code tree:
	TMP:=$(shell ls ${AUBITDIR}/compilers ${NOERR})
	ifeq "${TMP}" ""
        AUBITDIR_SRC=0
    else
        AUBITDIR_SRC=1
		C_DFLAGS        +=-DSRC_TREE
	endif

    export AUBITDIR_SRC

	AUBITRCFILE:=$(shell ls ~/.${AUBITNAME}/aubitrc ${NOERR})
	ifneq "${AUBITRCFILE}" ""
		include ${AUBITRCFILE}
		A5:=${AUBITRCFILE}
    endif

	AUBITRCFILE:=$(shell ls ./.aubitrc ${NOERR})
	ifneq "${AUBITRCFILE}" ""
		include ${AUBITRCFILE}
		A6:=${AUBITRCFILE}
    endif

	ifdef A4GL_INIFILE
		include $(A4GL_INIFILE)
		A7:=$(A4GL_INIFILE)
	endif

endif

#in all cases, override AUBITDIR set in any other way then by "configure"
#for compiling Aubit compiler from source code
ifneq "${AUBIT_BIN_INSTALL}" "1"
	AUBITDIR=${AUBIT_SRC_ROOT}
endif

CYG_AUBITDIR	:=$(subst C:,/cygdrive/c,${AUBITDIR})
CYG_AUBITDIR	:=$(subst D:,/cygdrive/d,${CYG_AUBITDIR})


## ==================================================================
##                   Global Makefile variables
## ==================================================================

#ifeq "${TARGET_OS}" "cygwin"
	GCC_VER=@GCC_VERSION_MAJOR@.@GCC_VERSION_MINOR@
#endif

GCC_MINGW=@GCC_MINGW@

ifeq "${GCC_MINGW}" "yes"
    WIN_PATH	=1
	#Needed for fixing include paths in UI_GTK:
	WIN_CYGPATH	=D:/cygwin
    #AUBITDIR	:=${WIN_CYGPATH}${AUBITDIR}
	#this would incalidate all LINK_LIBS+=-laubit4gl that we need:
	#TARGET_OS	=mingw
endif


PATH:=${AUBITDIR}/bin:${PATH}


CONFIGURE_COMMAND=@CONFIGURE_COMMAND@

#######################################
#Lclint (Splint) C code checker flags:
#See http://www.splint.org/manual/manual.html

#LCLINTFLAGS		=-weak +posixlib
#When using -skipansiheaders:
#stddef.h needs -I/usr/include/linux
#stdarg.h needs -I/usr/lib/gcc-lib/i386-glibc21-linux/egcs-2.91.66/include
LCLINTFLAGS			=-f .splintrc -I/usr/include/linux -I/usr/lib/gcc-lib/i386-glibc21-linux/egcs-2.91.66/include
#name for log created for each module:
LCLINTLOG  			=lclint.log
#name for cumulative log created in AUBITDIR root:
LCLINT_GLOBAL_LOG	=lclint.log
#Command to use for log file creation:
LCLINTLOGCMD		=2>&1
#This will soon change to "splint":
LCLINTEXE           =@LCLINTEXE@
#Should we ignore if lclint checking fails, or stop:
LCLINTERR           =-

####################
#commands to use:
MAKE				=@MAKE@
MKDIR 				=mkdir
CD 					=cd
CP 					=cp
MV                  =mv
CAT                 =cat
RM 					=rm -f
RMDIR				=rm -rf
SH					=@SH@
#CC	 				=c++
CC 					=@CC@
#/bin/sh /usr/local/src/php/php-4.2.3/libtool --silent --mode=compile gcc
#LINK.c				=${CC}
#LN_S 				=ln --symbolic --force
LN_S 				=ln -s -f
LN_H                =ln -f
AR 					=ar rc
YACC                =@YACC@ @DEBUG_BISON@
#-i needed to create case insensitive scanner:
LEX					=@LEX@ -i
NICE                =nice -20
INSTALL_USR			=nobody
INSTALL_GRP 		=nobody
INSTALL_CMD 		=install
INSTALL     		=${INSTALL_CMD} -c -o ${INSTALL_USR} -g ${INSTALL_GRP}
MKPATH      		=mkdir -p
CPPFLAGS 			=
#LDFLAGS 			=-s
LDFLAGS             =@LDFLAGS@
LDFLAGS_SHARED		=@LDFLAGS_SHARED@
AWK                 =@AWK@

#-rdynamic is needed when calling functions that are defineds in
#executable, from shared libraries that are dlopen at run-time,
#otherwise we get this function calls as undefined symbols. as in:
#4glc: relocation error: /opt/aubit/${AUBITNAME}src/lib/libLEX_C.so: undefined symbol: set_clobber
#-rdynamic basically makes all symbols in a program public to a dlopen() shared lib.
#thsi is a LINKER, not compiler option, and it's not in GCC documentation.
#The -rdynamic option seems to have been
#introduced as a high-level interface to the linker, to (a) force the
#allocation of a global symbol table in the final executable, even if it's
#not strictly needed, and (b) cause the inclusion of the global symbols in
#that symbol table.
#
#        o  Under linux, gcc interprets it by setting the
#           "-export-dynamic" option for ld, which has that effect, according
#           to the linux ld manpage.
#
#        o Under IRIX it's ignored, and the program's happy as a clam.
#
#        o Under SunOS-4.1, gcc interprets it by setting the -dc -dp
#          options for ld, which again forces the allocation of the symbol
#          table in the code produced (see ld(1) on a Sun).

ifneq "${GCC_VER}" "3.2"
	#gcc: unrecognized option `-rdynamic'
	RDYNAMIC            =-rdynamic
endif

ifeq "${TARGET_OS}" "solaris"
	#On Solaris: gcc: unrecognized option `-rdynamic'
	RDYNAMIC		=
endif
ifeq "${TARGET_OS}" "darwin"
	#On Darwin:
	#cc: unrecognized option `-rdynamic'
	RDYNAMIC		=
endif

#Solaris ld:
#   In static mode, -dn, relocatable object files given as argu-
#     ments are combined to produce an executable object file.  If
#     the  -r  option  is  specified, relocatable object files are
#     combined to produce one relocatable object file
#


#FIXME: use gcc to do linking, not ld directly.  Instead of 'ld -shared',
#use 'gcc -shared'.  If you MUST pass linker specific options to ld, use
#'-Wl,--my-ld-option' in your gcc. On Cygwin, using 'ld' directly will not
#automatically pick up the w32api libraries, even if they are installed.
#command line.
#even better, use libtool (once it is working on CygWin)

#On Solaris:
#ld -shared nopdf.o -o libEXREPORT_NOPDF.so
#ld: fatal: option -h and building a dynamic executable are incompatible
#ld: fatal: Flags processing errors

#Solaris:
#ld -shared nopdf.o -o libEXREPORT_NOPDF.so
#ld: fatal: option -h and building a dynamic executable are incompatible
#ld: fatal: Flags processing errors

#LD Command to use for linking libraries:
ifeq "${TARGET_OS}" "darwin"
	#LD                  =ld
	LD                  =${CC}
else
	LD                  =${CC}
endif

#LD Command to use for linking executables:
LD_EXE              =${CC} ${RDYNAMIC}
ifeq "${TARGET_OS}" "solaris"
	#LD_EXE              =ld
	LD_EXE              =${CC} ${RDYNAMIC}
endif
ifeq "${TARGET_OS}" "darwin"
	LD_EXE              =${CC} ${LDFLAGS} -ldl ${RDYNAMIC}
endif

ALL_LIBS			=@LIBS@
AUTOCONF_CFLAGS     =@CFLAGS@
#tipycally set by autoconf: AUTOCONF_CFLAGS     =-g -O2
#fixme: set -DDEBUG and -g from configure:

NON_PEDANTIC_OK		=1
#cannot use -pedantic, too much warnings, using Splint instead

ifeq "${TARGET_OS}" "linux"
	CWARN    		=-Wall -Wredundant-decls -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes
else
	CWARN			=
endif

ifeq "${WIN_PATH}" "1"
	C_IFLAGS            =-I$(AUBITDIR)/incl
else
	C_IFLAGS            =-I/usr/local/include -I$(AUBITDIR)/incl
endif


ifeq "${TARGET_OS}" "darwin"
	C_IFLAGS 			+=-I$(AUBITDIR)/tools
endif
ifeq "@GETOPT_LONG@" "no"
	C_IFLAGS 			+=-I$(AUBITDIR)/tools/getopt
endif

YYDEBUG             =@YYDEBUG@
C_DFLAGS			+=-DDEBUG -DHAVE_CONFIG_H ${YYDEBUG}
CFLAGS				+=${CWARN} ${AUTOCONF_CFLAGS} ${C_DFLAGS} ${C_IFLAGS}
#we are overriding LD_LIBRARY_PATH that might existed in environment:
LD_LIBRARY_PATH		:=${AUBITDIR}/lib:/usr/local/lib:${LD_LIBRARY_PATH}

#To let know 4glpc we are in process of making compiler, and not
#compiling 4gl programs
MAKINGAUBIT			=1


#There are sutuations in which it's OK for some targets to fail to build.
#Under normal circumstances, we would leave FAIL_OK empty
FAIL_OK             =-

#  -fPIC  If supported for the target machine, emit position-
#         independent code,  suitable  for  dynamic  linking,
#         even if branches need large displacements.
#FIXME: is it OK to have -fPIC when creating executables, not libraries?

ifneq "${GCC_VER}" "3.2"
	#cc1: warning: -fPIC ignored for target (all code is position independent)
	PIC					=@PIC@
endif

ifeq "${TARGET_OS}" "darwin"
	#On Darwin Autoconf will set PIC = -fno-common
	#The generation of position-independent code (PIC) is the default is the
	#default on Darwin. Actually, PowerPC code is position-independent by design,
	#so there is no performance or space penalty involved. So, you don't need to
	#specify a PIC option when compiling code for a shared library or module.
	#However, the linker doesn't allow "common" symbols in shared libraries,
	#so you must use the -fno-common compiler option.
	#PIC				=@PIC@ -fPIC
endif
USE_RPCGEN			=@USE_RPCGEN@
HAVE_RPCLIB			=@HAVE_RPCLIB@

#How do we wanat compilers (4glc, mcompile, mkmess, fcompile) linked. this
#flag is forwarded to 4glpc:
#LINK_COMPILERS      =-static
LINK_COMPILERS      =-dynamic
#got core dumps when trying this:
#LINK_COMPILERS      =-shared
#which Aubit library we want to link Aubit executables/compiler with. This
#flag is forwarded to C linker:
#AUBIT_LIB			=-laclall
#AUBIT_LIB			=-laclshared
AUBIT_LIB			=-laubit4gl
ifeq "${TARGET_OS}" "solaris"
	AUBIT_LIB			+=-lc
endif

#do not install static libraries on CygWin:
#we no longer compile static libs on any platform - remove this
#STATICLIB_INST=no

#This is extension for LOADABLE libraries - using dlopen():
SO_EXT=@SO_EXT@
#This is extension for LINKABLE libraries - linked at compile time. In Aubit
#this is (or should be) onlu libaubit4gl:
SO_EXT_LINKABLE=@SO_EXT_LINKABLE@

	ARCHEXT			=@ARCHEXT@
    DIRSEP			=/
	#on unix, we expect to have WWW set in environment
	#WWW			=/data2/htdocs
	GTKCONFIGTEXT	=echo "----- gtk-config --version ---------"
	GTKCONFIGCMD	=gtk-config --version
    LDDCMD          =ldd

    #FIXME: add -g from configure
	#FIXME: verify that we need -fPIC in CFLAGS
	CFLAGS      +=${PIC}

	#flags to linker, when making shared libraries:
	SO_LDFLAGS	=-shared

	#flags to CC when making and linking executables:
	EXE_CFLAGS  =${RDYNAMIC}
	EXEEXT		=
	LN			=${LN_H}
	#we should not use hard links when we are installing, because this
    #can cause errors like "Invalid cross-device link" when source
    #and destination is on different deveices:
	LN_S_LIB    =${LN_S}
	CPEXE		=${LN_H}


## ==================================================================
##                    Platform dependent Settings
## ==================================================================

ifdef COMSPEC #############Windows platform - CygWin/MinGW related:################

	#dll on Windows are loaded by standard Windows loader, that don't
	#understand CygWin symbolic links:
	SOEXP_EXT   	=${SO_EXT}.a
    DLL_EXPORTLIB_EXT=${SOEXP_EXT}
	DIRSEP			=\\
	WWW				=\\\\APTIVA\\ROOT\\data2\\htdocs
	GTKCONFIGTEXT	=echo "----- gtk-version form makefile -------"
	GTKCONFIGCMD	=echo ${LIBVER}
    LDDCMD          =cygcheck
    #we need makefile for aubit binary build on CygWin to install dll/ and extralibs/
	
	PATH		:=${CYG_AUBITDIR}/lib:${CYG_AUBITDIR}/bin:${AUBITDIR}/lib:/usr/local/lib:${PATH}

	#native-struct rewuired by GTK on Windows, but causes cc1: unrecognized option `-fnative-struct'
    #error with GCC 3.2 on CygWin
	ifneq "${GCC_VER}" "3.2"
		CFLAGS		+=-fnative-struct
    else
		CFLAGS		+=-mms-bitfields
	endif
	#GCC sets this allready
	#CFLAGS		+=-DWIN32
    EXEEXT		=.exe
	EXE			=${EXEEXT}
	#SO_LDFLAGS	=${RDYNAMIC} ${PIC}
	

	#The complete syntax is:
	#
	#gcc -shared -o cyg${module}.dll \
	#    -Wl,--out-implib=lib${module}.dll.a \
	#    -Wl,--export-all-symbols \
	#    -Wl,--enable-auto-import \
	#    -Wl,--whole-archive ${old_lib} \
	#    -Wl,--no-whole-archive ${dependency_libs}
	#
	#Where ${module} is the name of your DLL, ${old_lib} are all
	#objectfiles, bundled together in a static lib or single object
	#files and the ${dependency_libs} are importlibs you need to
	#link against, e.g '-lpng -lz -L/usr/local/special -lmyspeciallib'
	#
	#All symbols are exported then because you tell the linker to do so:
	#-Wl,--export-all-symbols


	#an alternative way to EXPORT and --export-all-symbols is to create a
	#.def file with all the functionnames you want to expose to your users
	#and link this .def file as the very first file before any .o and .a;
	#see the ld-docu for command line option 'shared' for more details.
	#
	#The only thing I can't figure out is how to prevent ld from
	#additionaly exporting all global variables in the .o an .a files.  Can
	#anyone more knowledgable give me a hint?

	#DLL_CFLAGS=-shared -Wl,--output-def=$*.def -Wl,--out-implib=$*${SOEXP_EXT} -Wl,--export-all-symbols
	DLL_CFLAGS=-shared -Wl,--out-implib=TMP${SOEXP_EXT} -Wl,--export-all-symbols

	SO_LDFLAGS	=${DLL_CFLAGS}
	SO_GCCFLAGS =-Xlinker ${RDYNAMIC}
	#if USE_RPCGEN is disabled, static files from /tools/cygwin will be used
    #this is no longer nececery on CygWin (with appropriate Sun RPC port for CygWin)
	#USE_RPCGEN  =0

	LN			=cp
	LN_S_LIB    =cp
	CPEXE		=cp


endif

ifeq "${TARGET_OS}" "darwin"
		#SO_LDFLAGS	=-r ${LDFLAGS}
		#This is to make ONLY dlopen() loadable library, not a standard
        #shared one, ("bundle") so we will need separate setting for
		#libaubit4gl.dynlib
		SO_LDFLAGS	=-flat_namespace -bundle -undefined suppress ${LDFLAGS}

        #Darwin
		#-Wl,-force_flat_namespace is needed to get all the programs
		#to link correctly. (huh?)
endif

## ==================================================================
##                              Libtool configuration
## ==================================================================


#/bin/sh ../../libtool --mode=link gcc  -g -O2  -o mkmess  mkmess.o -laubit4gl -lcheck -lpanel -lform -ldl -lcurses -lc -lgmp

#From Makefie:
#LIBTOOL = $(SHELL) $(top_builddir)/libtool
#LIBTOOL_DEPS = etc/config/ltmain.sh
#...
#LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
#CCLD = $(CC)
#LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@

LIBTOOL = @LIBTOOL@
LIBTOOL_DEPS = @LIBTOOL_DEPS@
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@


####################### from aubitbuild-multi.mk ####################

## ==================================================================
##                              Options - iODBC
## ==================================================================


    #Which predefined version to use: Uncomment only one:
	#IODBCVER=Openlink
	#IODBCVER=2.5
	#IODBCVER=3
	#IODBCVER=3.0.5

	#IODBC_LIB_NAME=iodbc

#	ifeq "$(IODBCVER)" "Openlink"
#		USEPGHEADRERS=1
#        #USELOCALHEADRERS=1
#		IODBC_ODBC_LIB_DIR	=/usr/openlink/lib
#    endif

#	ifeq "$(IODBCVER)" "3"
#	    #standalone iODBC manager V3
#		IODBC_ODBCLIBDIR	=/opt/iODBC_3beta/iODBC/include
#		IODBC_ODBC_LIB_DIR	=/opt/iODBC_3beta/iODBC/lib
#    endif

#	ifeq "$(IODBCVER)" "2.5"
#		#standalone iODBC manager V2.5
#	   	IODBC_ODBCLIBDIR	=/opt/iODBC_source_v2.5
#		IODBC_ODBC_LIB_DIR	=/opt/iODBC_source_v2.5/.libs
#    endif

#	ifeq "$(IODBCVER)" "3.0.5"
#	   	IODBC_ODBCLIBDIR	=/opt/iODBC_3.0.5/libiodbc-3.0.5/include
#		IODBC_ODBC_LIB_DIR	=/opt/iODBC_3.0.5/libiodbc-3.0.5/iodbc/.libs
#    endif

	######### For testing only ##################
#	ifeq "$(USEPGHEADRERS)" "1"
#		#PosgtgreSQL headers, also used by iODBC manager (standalone and OpenLink)
#		IODBC_ODBCLIBDIR 	=/usr/include/pgsql/iodbc
#    endif

#	ifeq "$(USELOCALHEADRERS)" "1"
#		IODBC_ODBCLIBDIR	=local_odbc_incl
#    endif

#<options needed also for binary distro makefile========================>

ifneq "${AUBIT_BIN_INSTALL}" "1"
	FCOMPILE	=${AUBIT_SRC_ROOT}/bin/fcompile
	MKMESS      =${AUBIT_SRC_ROOT}/bin/mkmess
	FGLPCEXEC	=${SH} ${AUBIT_SRC_ROOT}/bin/4glpc
	MCOMPILE	=${AUBIT_SRC_ROOT}/bin/mcompile
else
	FCOMPILE	=aubit fcompile
	MKMESS      =aubit mkmess
	#4glpc needs bash to run - old sh will not do. We need to fix this in "aubit" script
	FGLPCEXEC	=aubit ${SH} 4glpc
	MCOMPILE	=aubit mcompile
endif


#install location:
ifdef COMSPEC
	#on Windows, dll libraries need to be in the path
	LIB_INSTALL_LINK=/usr/local/bin
else
	#FSH and RPM rules say we should install binaries (links) in
	#${PREFIX}/${AUBITNAME} and libraries (links) in ${PREFIX}/lib. But this will
	#in our case be /opt, and on 99% of the systems we will not have /opt/bin
	#already in the path, and /opt/lib will not be in libraries search path.
	#This conflicts with RPM rule that say that installed programs "must be
	#operational" after RPM install is finished. Therefore, we have to use
	#/usr/lib and /usr/bin:

	#/usr/local/lib is not in default lib load path on RedHat, so we MUST use
	#/usr/lib to get things working immediately after installation, without the
	#need to edit system files manualy

	LIB_INSTALL_LINK=/usr/lib
endif

PREFIX=@prefix@
BIN_INSTALL_LINK=/usr/bin
INSTALL_DIR=${PREFIX}/${AUBITNAME}

#Set AUBITDIR in aubitrc settings:
	TOREPLACE=^AUBITDIR

	ifeq "${AUBIT_BIN_INSTALL}" "1"
		LOOKFOR_INFILE:=${AUBITDIR}/etc/aubitrc-bin
    else
		LOOKFOR_INFILE:=${AUBITDIR}/etc/aubitrc
    endif

	INFILE:=$(shell ls ${LOOKFOR_INFILE} ${NOERR})

	ifneq "${INFILE}" ""
		OLDVALUE:=$(shell grep "${TOREPLACE}" ${INFILE} | awk '{print $1}' | sed -e "s/\//\\\\\//g")
		NEWVALUE:=$(shell echo "AUBITDIR=$(INSTALL_DIR)" | sed -e "s/\//\\\\\//g")
		STARTWITH=^${OLDVALUE}
		REPLACEWITH=${NEWVALUE}
    endif

    #command line parameter to make : "make aubitrc=new"
    #this will force ${AUBITETC}/aubitrc to be overwriten with new one
	ifneq "${aubitrc}" "new"
		AUBITRCFILEEXISTS:=$(shell ls ${AUBITETC}/aubitrc 2>/dev/null)
    endif

LDCONFIG=@LDCONFIG@
ifneq "${LDCONFIG}" "no"
	LD_SO_CONF=/etc/ld.so.conf
	GREP_LD_SO_CONF:=$(shell grep ${INSTALL_DIR}/lib ${LD_SO_CONF})
	GREP_LD_SO_CONF_REMOVE:=$(shell echo "${GREP_LD_SO_CONF}" | sed -e "s/\//\\\\\//g")
endif

#All paths to libraries, that configure script detected outside standard
#library paths. We can use them when compiling, we can use them even in
#4glpc, but when user try to run compiled program, they will unlimately
#fail unless this paths are in LD_LIBRARY_PATH, or in Lunix, optionally in
#/etc/ld.so.conf (don't forget ro run "ldconfig" is you change ld.so.conf
#file manually!)
#We have 2 choices to make user's life easier:
#1) On linux only, we can stuff them in ld.so.conf, and re-run ldconfig.
#   this will be done with "make ldconfig". This will work immediately,
#   but it depenfd on user's rights to write to this file, and works only
#   on Linux.
#   NOTE: ld.so.conf apparently only applies to dynamic loader - but NOT
#   compiler linker ?
#
#2) On non-Linux systems, we can try to stuff them in /etc/profile, (depending
#	on user's rights) or $HOME/.bashrc (? $HOME/.profile), and source this
#	file as ".$HOME/.bashrc". This should also work immediately.
#
ADD_LD_LIBRARY_PATH=@ADD_LD_LIBRARY_PATH@
#ADD_LD_LIBRARY_PATH_SPACE=${ADD_LD_LIBRARY_PATH::/=--}
#ADD_LD_LIBRARY_PATH_SPACE:=$(shell echo ${ADD_LD_LIBRARY_PATH} | sed -e "s%:% %g")
ADD_LD_LIBRARY_PATH_SPACE:=$(shell echo ${ADD_LD_LIBRARY_PATH} |  sed -e "s/:/ /g")

#</options needed also for binary disrto makefile========================>




#All varibales needed in environment, primarily because 4glpc cannot
#read this file - all make files should include this file anyway:
export MAKINGAUBIT
ifneq "${AUBIT_BIN_INSTALL}" "1"
	export AUBIT_SRC_ROOT
endif
export AUBITDIR
#This one is needed to run Aubit compiled programs from build process:
export LD_LIBRARY_PATH
#AUBIT_BIN_INSTALL is needed for make files and 4glpc to know they are not
#in Aubit compiler source code tree; it is added to this file by "make install"
export AUBIT_BIN_INSTALL
#Must be exported on MinGW, but don't seem to be working (put it in profile):
export PATH

## ==================================================================
##                      Moved from aubitrc:
## ==================================================================

##################
#PDF report library: yes or no (needs PDF libraries on system)
#Affects: main makefile
#Default: PDFBUILD=no
PDFBUILD=@PDFBUILD@

##################
#Jabber/XML libraries: yes or no (need iksemel libraries on system)
#Affects: main makefile
#Default: JABBERBUILD=no
JABBERBUILD=@JABBERBUILD@

##################
#If you want to build compiler that will generate Perl code, not only
#C code, set PERLBUILD to yes
#Default: PERLBUILD=no
PERLBUILD=@PERLBUILD@

##################
#defines how will SQL support be built into compiler: dynamic is default.
#if you enter "static", only SQL/ODBC library defined with "ODBC"
#parameter will be staticaly linked.
#Default: ODBC_LINK=dynamic
#ODBC_LINK=dynamic

##################
#GTK GUI interface: yes or no (needs GTK libraries on system)
#Affects: main makefile
#Default: GTKBUILD=no
GTKBUILD=@GTKBUILD@

##################
#If linking SQL support dynamically, you can have more then one SQL
#manager/driver installed on your system, and compiled Aubit to use them
#selecting it ar run time with environment variable :
#A4GL_SQLTYPE=libSQL_<name>.so [name of library to use (defaults to nosql)]
#if you define more then one HAVE_xxxx variable here as "yes" you MUST use
#AUBITBUILDMKMULTI to define multiple libraries paths
#Defaults: HAVE_UNIXODBC=no HAVE_IODBC=no
HAVE_UNIXODBC=@HAVE_UNIXODBC@
HAVE_IODBC=@HAVE_IODBC@

#################
#If linking SQL support statically: ODBC manager: "unix" "iodbc" "odbc32"
#Affects: main makefile Options: unix, iodbc, so, no
#Default: ODBC=no
#we can use @A4GL_SQLTYPE@ here, but no is not no, it's "nosql"
#ODBC=no

#################
#If linking SQL support statically: name of library to link compiler with
#typically, "odbc" for unixODBC, "iodbc" for iODBC manager
#Affects: main makefile and 4glpc
#Default: ODBC_LIB_NAME=noodbc
#ODBC_LIB_NAME=@ODBC_LIB_NAME@

#where can we find ODBC header files for this ODBC manager/driver
#(odbc.h, sql.h ...etc.)
#fixme: rename this to ODBC_LIB_HEADERS
#Affects: main makefile, 4glpc and run-time encironment
#ODBCLIBDIR=/opt/unixODBC/include
#Default: ODBCLIBDIR=/usr/include
#Configure note: we cannot use includedir variable because it
#returns "${prefix}/include" and we cannot process variables here
#ODBCLIBDIR=@oldincludedir@

#where can we find ODBC_LIB_NAME (libiodbc.so, libodbc.so...)
#Affects: main makefile
#ODBC_LIB_DIR=/opt/unixODBC/lib
#Default: ODBC_LIB_DIR=/usr/lib
#Configure note: we cannot use libdir variable here because it returns
#returns "${exec_prefix}/lib" and we cannot process variables here
#ODBC_LIB_DIR=/usr/lib

#this is used in makefiles (typically -lrpcsvc or -lrpclib):
RPCLIB_NAME=@RPCLIB_NAME@

###############################
#GTK+ 2.0 configuration

#To use GTK "pkg-config" utility, set GLIBVER, GDKVER and GTKVER to
#version strings reported by "pkg-config --list-all"
#This will also be used in makefiles for
#GLIB_CFLAGS=`pkg-config --cflags ${GLIBVER}`
#GLIB_LIBS=`pkg-config --libs ${GLIBVER}`
#unless GLIBVER=old, when hard-coded flags and GTK libs will be used
#GTKVER is used in "4glpc" script

#GLIBVER=old
#GLIBVER=glib-2.0
#GDKVER=gdk-1.3-win32-production
#GTKVER=gtk+-1.3-win32-production

#Your GTK/GDK/GLIB installation path; don't forget to include
#$GTKPATH/bin and $GTKPATH/lib in yout PATH
#GTKPATH=/usr/src/gtk

#needed also in 4glpc:
GTK_CONFIG="@GTK_CONFIG@"
PKG_CONFIG="@PKG_CONFIG@"
#package names reported by gtk-config or pkg-config:
GTK_NAME="@GTK_NAME@"
GDK_NAME="@GDK_NAME@"
GLIB_NAME="@GLIB_NAME@"


MANUAL_GTK="@GTKLIBS@ @GTK_LIB_PATH@ @GTK_INC_PATH@"

#gcc -shared -o cyg${module}.dll -Wl,--out-implib=lib${module}.dll.a \
#                  -Wl,--export-all-symbols \
#                  -Wl,--enable-auto-import \
#                  -Wl,--whole-archive $old_lib \
#                  -Wl,--no-whole-archive ${dependency_libs}
#
#The last (-Wl,--no-whole-archive) is important, even if you have no
#dependency_libs.  Don't miss it!
#${module} is 'mylib' to stay with your example and $old_lib is libmylib.a,
#the static lib.  As an alternativ you can list all the objects here instead
#of a static lib which is in fact just a bundle of object files.




## ==================================================================
##                      Common rules
## ==================================================================

#Rule to make Windows-CyGwin .dll and export library:
zz%.dll zz%.def zz%.dll.a: $(DLLOBJS)
#	${CC} -shared  -Wl,--output-def=$*.def -Wl,--out-implib=$*.dll.a -o $*.dll $(DLLOBJS) -Wl,--export-all-symbols  $(DLL_LDFLAGS) $(DLL_LDLIBS)
	${CC} ${DLL_CFLAGS} -o $*.dll $(DLLOBJS) $(DLL_LDFLAGS) $(DLL_LDLIBS)

#	cp $*.def $*.def.bak

#make def file:
#$(DLL_EXP_DEF): $(DLL_OBJS)
xx%.def: $(DLLOBJS)
	dlltool --export-all --output-def $@ $^
#--no-delete
#	cp $@ $@.bak

#create export library only
xx%.dll.a: $(DLLOBJS)
	dlltool --export-all --output-exp $@ $^

%mak: Makefile.in
	cd ${AUBITDIR} && CONFIG_FILES=$(SUBDIR)/Makefile CONFIG_HEADERS= $(SH) ./config.status


#Cannot be here because it's a targer - not a rule
#allmk: all.Makefile
#all.Makefile:
#	cd ${AUBITDIR} && $(SH) ./config.status

## ==================================================================
##                    Install/deinstall
## ==================================================================

## ==================================================================
##                    Install Settings
## ==================================================================

#FIXME: determine this from configure script:
#RPM setup:
#redhat 6:
#RPMBUILDROOT=/root/redhat
#redhat 7.2
RPMBUILDROOT=/usr/src/redhat

BIN_PATH    =bin
LIB_PATH    =lib
DOC_PATH    =docs
TEST_PATH   =tools/test
ETC_PATH    =etc
INCL_PATH   =incl
IDE_PATH  	=tools/ide


#installation files sourcing paths. This is generally the same as destination
#paths, but with different SOURCE path.
SOURCE 		=${AUBIT_SRC_ROOT}
BIN_DIR     =$(SOURCE)/${BIN_PATH}
LIB_DIR     =$(SOURCE)/${LIB_PATH}
DOC_DIR    	=$(SOURCE)/${DOC_PATH}
TEST_DIR    =$(SOURCE)/${TEST_PATH}
TEST_DIR_STD=$(TEST_DIR)
TEST_DIR_GUI=$(TEST_DIR)/gui
ETC_DIR    	=$(SOURCE)/${ETC_PATH}
HOME_DIR    =$(SOURCE)
ROOT_DIR    =$(SOURCE)
INCL_DIR    =$(SOURCE)/${INCL_PATH}
IDE_DIR    	=$(SOURCE)/${IDE_PATH}

#Paths to install to:
BIN_DEST	=$(INSTALL_DIR)/${BIN_PATH}
LIB_DEST	=$(INSTALL_DIR)/${LIB_PATH}
DOC_DEST   	=$(INSTALL_DIR)/${DOC_PATH}
TEST_DEST   =$(INSTALL_DIR)/${TEST_PATH}
TEST_DEST_STD =$(TEST_DEST)
TEST_DEST_GUI =$(TEST_DEST)/gui
ETC_DEST   	=$(INSTALL_DIR)/${ETC_PATH}
HOME_DEST   =$(HOME)
ROOT_DEST	=$(INSTALL_DIR)
INCL_DEST	=$(INSTALL_DIR)/${INCL_PATH}
IDE_DEST   	=$(INSTALL_DIR)/${IDE_PATH}

##################################################
#definitions of names for binary distro file name:
#This is also set in makefile-common by configure, but can change after
#last configure run
AUBITVERSION:=$(shell cat $(SOURCE)/tools/project/version)
AUBITBUILD	:=$(shell cat $(SOURCE)/tools/project/build)
COMPILEDATE	:=$(shell date +%d-%m-%Y)



## ==================================================================
##                    To bin directory
## ==================================================================

BIN_SCRIPTS =amake amakeallo amakeallf 4glpc aubit prepmake genmake
BIN_EXE		=4glc${EXEEXT} fcompile${EXEEXT} xgen${EXEEXT} \
			mcompile${EXEEXT} mkmess${EXEEXT} \
			aubit-config${EXEEXT} mdecompile${EXEEXT} fdecompile${EXEEXT}


#This two can fail to compile, when 4glc is not working:
ifneq "$(shell ls $(SOURCE)/bin/loadmap${EXEEXT} 2> /dev/null)" ""
	BIN_EXE		+=loadmap${EXEEXT}
endif
ifneq "$(shell ls $(SOURCE)/bin/fshow${EXEEXT} 2> /dev/null)" ""
	BIN_EXE		+=fshow${EXEEXT}
endif


#Building this is optional
#FIXME: move this to configure
#Cannot make ace without rpclib:
ifneq "$(shell ls $(SOURCE)/bin/aace${EXEEXT} 2> /dev/null)" ""
	BIN_EXE		+=aace${EXEEXT}
endif
#Cannot make ace without rpclib:
ifneq "$(shell ls $(SOURCE)/bin/adecompile${EXEEXT} 2> /dev/null)" ""
	BIN_EXE		+=adecompile${EXEEXT}
endif
#needs missing source code
ifneq "$(shell ls $(SOURCE)/bin/fdecompile-j${EXEEXT} 2> /dev/null)" ""
	BIN_EXE		+=fdecompile-j${EXEEXT}
endif
#user's manual choice:
ifneq "$(shell ls $(SOURCE)/bin/odbctest-unixODBC${EXE} 2> /dev/null)" ""
	BIN_EXE		+=odbctest-unixODBC${EXE}
endif
ifneq "$(shell ls $(SOURCE)/bin/odbctest-iodbc3${EXE} 2> /dev/null)" ""
	BIN_EXE		+=odbctest-iodbc3${EXE}
endif
ifneq "$(shell ls $(SOURCE)/bin/odbctest-iodbc2${EXE} 2> /dev/null)" ""
	BIN_EXE		+=odbctest-iodbc2${EXE}
endif

BIN_FILES   =${BIN_SCRIPTS} ${BIN_EXE}


## ==================================================================
##                    To lib directory
## ==================================================================

#Lib files we build allways
TMP_LIBFILES= \
	@LIBFILE_1@ @LIBFILE_2@ @LIBFILE_3@ @LIBFILE_4@ @LIBFILE_5@ @LIBFILE_6@ \
	@LIBFILE_7@ @LIBFILE_8@ @LIBFILE_9@ @LIBFILE_10@ @LIBFILE_11@ @LIBFILE_12@ \
	@LIBFILE_13@ @LIBFILE_14@ @LIBFILE_15@ @LIBFILE_16@ @LIBFILE_17@ \
	@LIBFILE_18@ @LIBFILE_19@ @LIBFILE_20@ @LIBFILE_21@ @LIBFILE_22@ \
	@LIBFILE_23@ @LIBFILE_24@ @LIBFILE_25@ @LIBFILE_26@ @LIBFILE_27@ \
	@LIBFILE_28@ @LIBFILE_29@ @LIBFILE_30@

LIB_DEFAULT =$(notdir ${TMP_LIBFILES})

#libFORM_GENERIC.dll': No such fi
#libMENU_XDR.dll': No such file o
#libRPC_XDR.dll': No such file or
#libFORM_XDR.dll': No such file o

#libXDRPACKER_menu_list.dll': No
#libXDRPACKER_report.dll': No suc
#libXDRPACKER_struct_form.dll': N

#libPACKER_XDR.dll': No such file

LIB_SO		=${LIB_DEFAULT}

#Only DLL wr will actually link against - everything else is loaded at run-time:
LIB_EXPORTLIB 	+=libaubit4gl${SOEXP_EXT}

#Lib files we build depending on available 3rd party support:
TMP_RPMFILES = \
	@RPMFILE_1@ @RPMFILE_2@ @RPMFILE_3@ @RPMFILE_4@ @RPMFILE_5@ @RPMFILE_6@ \
	@RPMFILE_7@ @RPMFILE_8@ @RPMFILE_9@ @RPMFILE_10@ @RPMFILE_11@ @RPMFILE_12@ \
	@RPMFILE_13@ @RPMFILE_14@ @RPMFILE_15@ @RPMFILE_16@ @RPMFILE_17@ \
	@RPMFILE_18@ @RPMFILE_19@ @RPMFILE_20@ @RPMFILE_21@ @RPMFILE_22@ \
	@RPMFILE_23@ @RPMFILE_24@ @RPMFILE_25@ @RPMFILE_26@ @RPMFILE_27@ \
	@RPMFILE_28@ @RPMFILE_29@ @RPMFILE_30@

LIB_OPTIONAL =$(notdir ${TMP_RPMFILES})

ifneq "$(shell ls $(SOURCE)/lib/libA4GL_file${SO_EXT} 2> /dev/null)" ""
	LIB_SO			+=libA4GL_file${SO_EXT}
endif

ifneq "$(shell ls $(SOURCE)/lib/libA4GL_string${SO_EXT} 2> /dev/null)" ""
	LIB_SO			+=libA4GL_string${SO_EXT}
endif

ifneq "$(shell ls $(SOURCE)/lib/libIM_JABBER${SO_EXT} 2> /dev/null)" ""
	LIB_SO			+=libIM_JABBER${SO_EXT}
endif

LIB_FILES   		=${LIB_SO} ${LIB_OPTIONAL}

ifneq "${COMSPEC}" ""
	LIB_FILES +=${LIB_EXPORTLIB} lib4glc${SO_EXT}
endif

## ==================================================================
##                    To docs directory
## ==================================================================

DOC_FILES		=changelog.txt COPYING CREDITS LICENSE aubit4gl.ico

## ==================================================================
##                    To test directory
## ==================================================================

TEST_STD= \
		assoc2.4gl  form.per    hello_db.4gl  pdf_report.4gl  testmpz.4gl \
		hello2.4gl  helpfile.msg  test_build.4gl  test_select.4gl \
		file.4gl    hello.4gl   Makefile      testmenu.4gl testmenu.menu
ifneq "${COMSPEC}" ""
	TEST_STD+=make.bat
endif

TEST_GUI= \
		calc.4gl  form-gui.per  gui.per        Makefile   radio.per \
		calc.per  gui.4gl       hello-gui.4gl  multi.per  widget.per

TEST_FILES=$(addprefix gui/,$(TEST_GUI)) $(TEST_STD)

## ==================================================================
##                    To etc directory
## ==================================================================

ETC_FILES		=odbc.ini.example

#This file is installed by ciopying etc/aubitrc.in to aubitrc-bin.in
#but we still need to de-install it:
ETC_DEINST      =aubitrc-bin.in

## ==================================================================
##                    To user's HOME directory
## ==================================================================

HOME_FILES		=etc/aubitrc

## ==================================================================
##                    To Aubit binary installation root directory
## ==================================================================

ROOT_FILES		=README.txt install.sh

## ==================================================================
##                    To incl directory
## ==================================================================


INCL_FILES	= \
		a4gl_incl_4glhdr.h a4gl_incl_4gldef.h Makefile-common \
		a4gl.mk header.mki maximise.mki a4gl-rules.mki footer-c.mki i4gl.mk \
		q4gl.mk d4gl.mk footer.mki Makefile-install.mki

#FIXME: what about this:
#		$(SOURCE)/common/dataio/form_x.x.h  $(SOURCE)/common/dataio/form_x.xs.h

#do we want this or not in binary installation?

INCL_FILES_LEGACY=a4gl_API_form.h a4gl_API_menu.h a4gl_API_sql.h form_x.x.h \
		a4gl_API_lex.h a4gl_API_msg.h a4gl_libaubit4gl.h form_x.xs.h



## ==================================================================
##                    To ide directory
## ==================================================================

#FIXME: replace this with binary executables:
#IDE_files       =$(IDEDIR)/*.4gl $(IDEDIR)/*.c $(IDEDIR)/*.sh $(IDEDIR)/*.msg $(IDEDIR)/*.per $(IDEDIR)/Makefile

#IDE installs:
#/usr/local/bin/ide
#/usr/local/4glide/ide.4ae
#/usr/local/4glide/d4glinpt.afr d4glopts.afr
#/usr/local/4glide/d4glhelp.iem


## ==================================================================
##                    Derived files lists with paths
## ==================================================================

#installation files with paths:
TOBIN		=$(addprefix $(BIN_DIR)/,	$(BIN_FILES))
TOLIB		=$(addprefix $(LIB_DIR)/,	$(LIB_FILES))
TODOCS		=$(addprefix $(DOC_DIR)/,	$(DOC_FILES))
#TOTEST		=$(addprefix $(TEST_DIR)/,	$(TEST_FILES))
TOTEST_STD  =$(addprefix $(TEST_DIR_STD)/,	$(TEST_STD))
TOTEST_GUI	=$(addprefix $(TEST_DIR_GUI)/,	$(TEST_GUI))
TOETC		=$(addprefix $(ETC_DIR)/,	$(ETC_FILES))
TOHOME		=$(addprefix $(HOME_DIR)/,	$(HOME_FILES))
TOROOT		=$(addprefix $(ROOT_DIR)/,	$(ROOT_FILES))
TOINCL		=$(addprefix $(INCL_DIR)/,	$(INCL_FILES))
TOIDE       =$(addprefix $(IDE_DIR)/,	$(IDE_FILES))


#deinstallation files with paths:
FROMBIN		=$(addprefix $(BIN_DEST)/,	$(BIN_FILES))
FROMLIB		=$(addprefix $(LIB_DEST)/,	$(LIB_FILES))
FROMDOCS	=$(addprefix $(DOC_DEST)/,	$(DOC_FILES))
FROMTEST	=$(addprefix $(TEST_DEST)/,	$(TEST_FILES))
FROMETC		=$(addprefix $(ETC_DEST)/,	$(ETC_FILES)) $(addprefix $(ETC_DEST)/,	$(ETC_FILES_LEGACY)) $(addprefix $(ETC_DEST)/,	$(ETC_DEINST))
FROMHOME	=$(addprefix $(HOME_DEST)/,	$(HOME_FILES))
FROMROOT	=$(addprefix $(ROOT_DEST)/,	$(ROOT_FILES))
FROMINCL	=$(addprefix $(INCL_DEST)/,	$(INCL_FILES))  $(addprefix $(INCL_DEST)/,	$(INCL_FILES_LEGACY))
FROMIDE     =$(addprefix $(IDE_DEST)/,	$(IDE_FILES))


## ==================================================================
##                    Automatic build Settings
## ==================================================================

AUBITCVSSFNAME		=${AUBITNAME}src
NAMEVERBLD			=${AUBITCVSSFNAME}-${AUBITVERSION}-${AUBITBUILD}
PLATFORMINFO		=${NAMEVERBLD}.txt
SOURCETARBASENAME	=${NAMEVERBLD}.${ARCHEXT}
BINTARBASENAME      =${AUBITNAME}bin-${TARGET}-${AUBITVERSION}-${AUBITBUILD}.${ARCHEXT}
SOURCETARNAME		=$(SOURCE)/$(SOURCETARBASENAME)

#Path under your web server HTDOCS dir, where to put Doxy generated files:
DOXY_WWWPATH        =projects/Aubit4GL/doxy




#=================================== EOF ================================

