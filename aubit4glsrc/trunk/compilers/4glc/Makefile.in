# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   lib/libgui makefile        |
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+

#
# $Id: Makefile.in,v 1.40 2002-09-22 23:08:17 afalout Exp $
#

ROOT		=../..

#All stuff common to more then one Aubit compiler make file is there:
include ${ROOT}/incl/Makefile-common
override NOINCL=0

## ==================================================================
##                   Source files
## ==================================================================

GENRULES        =rules/generated

ifeq "@YACC@" "no"
	CFLAGS		+=-I${ROOT}/tools/no_yacc/cygwin/compilers/4glc
	Y_TAB_C		=${ROOT}/tools/no_yacc/cygwin/compilers/4glc/${GENRULES}/y.tab.c
else
	Y_TAB_C		=${GENRULES}/y.tab.c
endif

CMODS           = \
				4glc.c \
				dim.c \
				list.c lexer.c \
				mod.c map.c \
				${GENRULES}/states.c \
				${GENRULES}/kw.c \
                ${Y_TAB_C}

GETOPT_LONG		=@GETOPT_LONG@

ifneq "${GETOPT_LONG}" "yes"
	ifeq "${GETOPT_LONG}" "iberty"
		AUBIT_LIB+=-liberty
    else
        CMODS   +=${ROOT}/tools/getopt/getopt.c ${ROOT}/tools/getopt/getopt1.c
    endif
endif

4GLCAOBJ		=${CMODS:.c=.o}

## ==================================================================
##                    Options
## ==================================================================

ALL				=rules.t ${ROOT}/bin/4glc

C_LOCAL_IFLAGS  =-I${ROOT}/lib -I${ROOT}/lib/libincl -I${ROOT}/lib/liblex/lex_c -I. -I../fcompile -Irules -I${GENRULES}
CFLAGS			+=${C_LOCAL_IFLAGS} @RPCLIB_INCLUDE@ @CURSES_INC_PATH@
LCLINT_CFLAGS   =${C_IFLAGS} ${C_LOCAL_IFLAGS}

## ==================================================================
##                              Targets
## ==================================================================

all: ${ALL}
	@echo "Default targets (${ALL}) successfully compiled."

#4glc: ${4GLCAOBJ} ${LIB_C}
${ROOT}/bin/4glc: ${4GLCAOBJ}
#	${CC} ${EXE_CFLAGS} -L${ROOT}/lib -o $@ $^ ${AUBIT_LIB}
#	${LD_EXE} ${EXE_CFLAGS} -L${ROOT}/lib -o $@ $^ ${AUBIT_LIB}
	${LD_EXE} -L${ROOT}/lib -o $@ $^ ${AUBIT_LIB}
#	${CPEXE} $@${EXEEXT} ${ROOT}/bin/$@${EXEEXT}

#4glp: ${4GLCAOBJ} ${LIB_PERL}
#	${CC} ${CFLAGS} -L${ROOT}/lib -o $@ ${4GLCAOBJ} ${AUBIT_LIB} ${LIB_PERL_L}
#	${CPEXE} $@${EXEEXT} ${ROOT}/bin/$@${EXEEXT}


## ==================================================================
##                            Windows Targets
## ==================================================================

exportlib4glcomp: ${4GLCAOBJ} ${4GLCOBJ_C}
#	${MAKE} libexportlib4glcomp.dll DLLOBJS="$^" DLL_LDLIBS="${AUBIT_LIB}" DLL_LDFLAGS="-L${ROOT}/lib"
#	dlltool --export-all --output-def $@ $^
#	dlltool --export-all --output-exp libexportlib4glcomp.dll.a $^
	${CC} -shared -Wl,--output-def=exportlib4glcomp.def -Wl,--out-implib=exportlib4glcomp.dll.a $^ -Wl,--export-all-symbols ${AUBIT_LIB} -L${ROOT}/lib
#	${CC} -shared  -Wl,--output-def=libA4GLLEX_C.def -Wl,--out-implib=libA4GLLEX_C.dll.a $^ -Wl,--export-all-symbols

## ==================================================================
##                            Sub Targets
## ==================================================================

rules.t :
	${MAKE} -C rules $(MKNAME)

${GENRULES}/y.tab.o: ${Y_TAB_C}
	$(CC) ${CFLAGS} -c -o $@ ${Y_TAB_C} @YYDEBUG@ -I${ROOT}/lib/liblex/lex_c -I.

${Y_TAB_C}:
#	make -C rules generated/y.tab.c $(MKNAME)
	${MAKE} -C rules

../fcompile/form_x.h:
	${MAKE} -C ../fcompile rpc

## ==================================================================
##                            Dependencies
## ==================================================================

${GENRULES}/kw.c: 				rules.t
${GENRULES}/single_words.rule: 	rules.t
${GENRULES}/y.tab.c: 			rules.t
${GENRULES}/states.c: 			rules.t
mod.o: 							mod.c ${Y_TAB_C}
${GENRULES}/y.tab.o: 			../fcompile/form_x.h
lexer.o: 						${GENRULES}/kw.h
lexer.o: 						${GENRULES}/y.tab.h




splint: lclint
lclint: $(CMODS)
	${LCLINTERR}${LCLINTEXE} ${LCLINTFLAGS} $(LCLINT_CFLAGS) $(CMODS) > ${LCLINTLOG} ${LCLINTLOGCMD}
	${CAT} ${LCLINTLOG} >> ${ROOT}/${LCLINT_GLOBAL_LOG}
	@echo "see ${LCLINTLOG} for results"

## ==================================================================
##                            Clean Targets
## ==================================================================

clean: clean.rules.generated clean.rules
	${RM} *.so *.o *.err 4glc 4glc-noodbc *.a *.exe *.bak .*.bak .\#* 4glp *.log *.dll *.dll.a

clean.rules.generated:
	(cd ${GENRULES}; ${RM} *.yacc *.c *.h single_words *.o *.yh *.rule *.output *.bak .*.bak)

clean.rules:
	(cd rules; ${RM} .\#* *.bak .*.bak)
	(cd rules/data; ${RM} .\#* *.bak .*.bak)

#--------------------------------- EOF -----------------------------
