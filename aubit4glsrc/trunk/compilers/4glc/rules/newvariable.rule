/*
=====================================================================
                        Source: newvariable.rule
=====================================================================
*/


variable: var_int
{
char buff[256];
char buff2[256];
int n;

if (strcmp($<str>1,"status")==0) { strcpy($<str>1,"a4gl_status"); }
if (strncmp($<str>1,"sqlca.",6)==0) { 
	char xbuff[256];
	char xbuff2[256];
	strcpy(xbuff,"a4gl_sqlca.");
	strcpy(xbuff2,$<str>1);
	strcat(xbuff,&xbuff2[6]);
	strcpy($<str>1,xbuff);
}
strcpy(buff,$<str>1);
A4GL_lex_printcomment("/* .. var %s*/",buff);
if (buff[0]!=' ') ADDMAP("Use Variable",buff);

if (strncmp(buff," ASSOCIATE_",11)!=0) {
 A4GL_convlower(buff);
}

strcpy($<str>$,buff);
A4GL_debug("Checking variable '%s'",buff);
strcpy(buff2,buff);
n=scan_variable(buff2);

  A4GL_debug("scan variable returns -> %d\n",n);

  if (n == -1&&buff[0]!=' ') {
           sprintf(buff2,"'%s' does not represent a defined variable (1)",buff);
           a4gl_yyerror(buff2);
  }

  strcpy(buff2,$<str>1);


  if (strstr(buff,".*") && n!=-2) {
		char *ptr;
		strcpy(buff,$<str>1);
		printf("WARNING : Using a .* on a non-record - %s\n",$<str>1);
		ptr=strstr(buff,".*");
		*ptr=0;
                
		sprintf($<str>$,"%s",fgl_add_scope(buff,0));
  } else {
                	sprintf($<str>$,"%s",fgl_add_scope($<str>1,0));
  }

 
}
;


var_int :
	var | DOLLAR var {strcpy($<str>$,$<str>2);}
;

varsetidentdot : var DOT
;

var: 
 varsetidentdot dot_part_var { 
         sprintf ($<str>$, "%s.%s", $<str>1, $<str>2); 
         A4GL_lex_printcomment("/* record building -> %s */\n",$<str>$);
         }
| varsetidentdot identifier OPEN_SQUARE num_list CLOSE_SQUARE {

         int type,arrsize,size,level;
         char buff[256];
         char buff2[256];
         char arrbuff[256];

         A4GL_lex_printcomment("/* OPEN_SQUARE.. */\n");

	if (strcmp($<str>1,"sqlca")==0) {
		strcpy($<str>1,"a4gl_sqlca");
	}
         sprintf(buff,"%s.%s",$<str>1,$<str>2);
         if (scan_variable(buff)==-1) {
	
           sprintf(buff2,"'%s' does not represent a defined variable (2)",buff);
           a4gl_yyerror(buff2);
           YYERROR;
         }

         A4GL_lex_printcomment("/*variable with [...]*/");
         get_variable_dets (buff,&type,&arrsize,&size,&level,arrbuff);
         A4GL_lex_printcomment("/* Arrsize = %d size = %d*/",arrsize,size);
	 
         if (arrsize>0)
         {
             A4GL_debug("Is array...");
             sprintf ($<str>$, "%s[%s]", buff, change_arr_elem($<str>4));
             A4GL_lex_printcomment ("/* array variable %s num_arr_elem=%d arrbuff=%d*/\n", $<str>$,num_arr_elem($<str>4),num_arr_elem(arrbuff));
         }
         else
         {
             A4GL_debug ("Is string...");
             sprintf ($<str>$, " a4gl_substr(%s , %d , %s , 0 ) /*1*/", fgl_add_scope(buff,0), (int)scan_variable (buff), $<str>4);
             ADDMAP("Use Variable",buff);
             A4GL_lex_printcomment ("/*character variable %s*/\n", $<str>$);
         }

}

| varsetidentdot identifier OPEN_SQUARE num_list CLOSE_SQUARE OPEN_SQUARE num_list CLOSE_SQUARE {

         int type,arrsize,size,level;
         char buff[256];
         char buff2[256];
         char arrbuff[256];

         A4GL_lex_printcomment("/* OPEN_SQUARE.. */\n");

	if (strcmp($<str>1,"sqlca")==0) {
		strcpy($<str>1,"a4gl_sqlca");
	}
         sprintf(buff,"%s.%s",$<str>1,$<str>2);
         if (scan_variable(buff)==-1) {
           sprintf(buff2,"'%s' does not represent a defined variable (2)",buff);
           a4gl_yyerror(buff2);
           YYERROR;
         }

         A4GL_lex_printcomment("/*variable with [...]*/");
         get_variable_dets (buff,&type,&arrsize,&size,&level,arrbuff);
         A4GL_lex_printcomment("/* Arrsize = %d size = %d*/",arrsize,size);
	 
         if (arrsize>0)
         {
		char buff2[256];
             A4GL_debug("Is array...");
             sprintf (buff2, "%s[%s]", buff, change_arr_elem($<str>4));
             sprintf ($<str>$, " a4gl_substr(%s , %d , %s , 0 ) /*1*/", fgl_add_scope(buff2,0), (int)scan_variable (buff2), $<str>4);
             A4GL_lex_printcomment ("/* array variable %s num_arr_elem=%d arrbuff=%d*/\n", $<str>$,num_arr_elem($<str>4),num_arr_elem(arrbuff));
         }
         else
         {
		a4gl_yyerror("Expecting an array of chars...");
		YYERROR;

         }

}

| array_r_variable
| identifier
| assoc_var_read
;

assoc_var_read  : identifier OPEN_SHEV assoc_sub CLOSE_SHEV
{
char buff2[256];
         if (scan_variable($<str>1)==-1) {
           sprintf(buff2,"'%s' does not represent a defined variable (3)",$<str>1);
           a4gl_yyerror(buff2); 
           YYERROR;
         }

A4GL_lex_printcomment("/*Associative Variable : %s*/\n",$<str>3);
sprintf($<str>$," ASSOCIATE_%s(%s,1)",upshift($<str>1),$<str>3);
};


assoc_var_write  : identifier OPEN_SHEV assoc_sub CLOSE_SHEV
{
char buff2[256];
         if (scan_variable($<str>1)==-1) {
           sprintf(buff2,"'%s' does not represent a defined variable (4)",$<str>1);
           a4gl_yyerror(buff2); 
           YYERROR;
         }
A4GL_lex_printcomment("/*Associative Variable : %s*/\n",$<str>3);
sprintf($<str>$," ASSOCIATE_%s(%s,0)",upshift($<str>1),$<str>3);
};

assoc_sub : variable | CHAR_VALUE
;


dot_part_var:
 MULTIPLY | 
 identifier 
;



array_r_variable:
identifier arr_subscripts
{
int type,arrsize,size,level;
char buff2[256];
char arrbuff[256];

  A4GL_debug("ARRAY (array_r_variable) : %s %s",$<str>1,$<str>2);
  A4GL_lex_printcomment("/*array variable nnn */");
  get_variable_dets ($<str>1,&type,&arrsize,&size,&level,arrbuff);
  A4GL_lex_printcomment("/*here %s %x */",$<str>1,type);
  if (scan_variable($<str>1)==-1) {
           sprintf(buff2,"'%s' does not represent a defined variable (7)",$<str>1);
           a4gl_yyerror(buff2); 
           YYERROR;

	}


  A4GL_debug("Type=%d (%d) arrsize=%d",type,type&0xffff,arrsize);

  if (strchr($<str>2,':'))  {
	char lbuff[256];
	char rbuff[256];
	char tmpbuff[256];
	char *ptr;
	strcpy(lbuff,$<str>2);
	strcpy(rbuff,strchr($<str>2,':')+1);
	ptr=strchr(lbuff,':');
	*ptr=0;
        sprintf (tmpbuff, "%s[%s]", $<str>1, change_arr_elem(lbuff));
        sprintf ($<str>$, " a4gl_substr(%s , 0x%x , %s , 0 ) /*1.1*/", fgl_add_scope(tmpbuff,0), (int)scan_variable (tmpbuff), rbuff);
  } else {
 
  if ( ( (type & 0xffff) != DTYPE_CHAR &&  (type & 0xffff) != DTYPE_VCHAR) || (arrsize>0))
    {
		A4GL_debug("MJA Path 1");
      A4GL_lex_printcomment("/* changing optbase for array: %s */\n",$<str>2);
      sprintf ($<str>$, "%s[%s]", $<str>1, change_arr_elem($<str>2));
      A4GL_lex_printcomment ("/* array variable %s*/\n", $<str>$);
    }
  else
    {
             sprintf ($<str>$, " a4gl_substr(%s , %d , %s , 0 ) /*1.2*/", fgl_add_scope($<str>1,0), (int)scan_variable ($<str>1), $<str>2);
             ADDMAP("Use Variable",$<str>1);
      A4GL_lex_printcomment ("/*character variable %s*/\n", $<str>$);
    }
}

}
;









arr_subscripts : 
	OPEN_SQUARE num_list CLOSE_SQUARE {
	 A4GL_debug("---> Subscript or substring");
		strcpy($<str>$,$<str>2);
	}
|
	OPEN_SQUARE num_list CLOSE_SQUARE OPEN_SQUARE num_list CLOSE_SQUARE {
	 A4GL_debug("---> Subscript & substring");
		sprintf($<str>$,"%s:%s",$<str>2,$<str>5);
	}
;


num_list: num_list_element
{
A4GL_debug("List element");
  sprintf ($<str>$, "%s", $<str>1);
}
|num_list KW_COMMA num_list_element
{
A4GL_debug("List element continues");
  sprintf ($<str>$, "%s,%s", $<str>1, $<str>3); 
}

;

num_list_element: arr_expr
{
  sprintf ($<str>$, "%s", $<str>1);
};


let_variable: let_var
{
char buff[256];
if (strcmp($<str>1,"status")==0) { strcpy($<str>1,"a4gl_status"); }
if (strncmp($<str>1,"sqlca.",6)==0) {
        char xbuff[256];
        char xbuff2[256];
        strcpy(xbuff,"a4gl_sqlca.");
        strcpy(xbuff2,$<str>1);
        strcat(xbuff,&xbuff2[6]);
        strcpy($<str>1,xbuff);
}
strcpy(buff,$<str>1);
ADDMAP("Let Variable",buff);
if (strncmp(buff," ASSOCIATE_",11)!=0) {
A4GL_convlower(buff);
}
strcpy($<str>$,buff);
A4GL_lex_printcomment("/* %s */\n",$<str>1);


  if (scan_variable (buff) == -1&&buff[0]!=' ')
    {
      A4GL_lex_printcomment ("/*NOt a variable*/");
      sprintf(buff,"%s is not a variable",$<str>1);
      a4gl_yyerror(buff);
    }


  sprintf($<str>$,"%s",fgl_add_scope($<str>1,0));
};

let_var: let_array_r_variable {
	 A4GL_debug("Array..");
}
| let_var DOT let_var_dot { sprintf ($<str>$, "%s.%s", $<str>1, $<str>3); }
| let_var DOT identifier OPEN_SQUARE num_list CLOSE_SQUARE
{
  int a;
  int b;
  char buff[256];
  char buff2[256];
  A4GL_lex_printcomment("/*array variable .let. */");
  if (strcmp($<str>1,"status")==0) { strcpy($<str>1,"a4gl_status"); }
  if (strcmp($<str>1,"sqlca")==0) {
        strcpy($<str>1,"a4gl_sqlca");
  }
  sprintf($<str>$,"%s.%s",$<str>1,$<str>3);

         if (scan_variable($<str>$)==-1) {
           sprintf(buff2,"'%s' does not represent a defined variable (5)",$<str>$);
           a4gl_yyerror(buff2); 
           YYERROR;
         }

  A4GL_debug("?1arrvar=%s",$<str>$);
  b = isarrvariable ($<str>$);
  a = scan_variable ($<str>$);

  A4GL_lex_printcomment("/*a=%x b=%x */\n",a,b);

  if (b != 0)
    {
      sprintf ($<str>$, "%s.%s[%s-1] ", $<str>1, $<str>3,$<str>5);
      A4GL_lex_printcomment ("/* array variable %s*/\n", $<str>$);
    }
  else
    {
      sprintf(buff,"%s.%s",$<str>1,$<str>3);
      sprintf ($<str>$, " a4gl_let_substr(%s,%d,%s,0) /* M4 */", fgl_add_scope(buff,0), a, $<str>5);
      ADDMAP("Let Variable",buff);
      A4GL_lex_printcomment ("/*character variable %s*/\n", $<str>$);
    }


}
| let_var DOT identifier OPEN_SQUARE num_list CLOSE_SQUARE OPEN_SQUARE num_list CLOSE_SQUARE
{
  int a;
  int b;
  char buff[256];
  char buff2[256];
  A4GL_lex_printcomment("/*array variable .let. */");
  if (strcmp($<str>1,"status")==0) { strcpy($<str>1,"a4gl_status"); }
  if (strcmp($<str>1,"sqlca")==0) {
        strcpy($<str>1,"a4gl_sqlca");
  }
  sprintf($<str>$,"%s.%s",$<str>1,$<str>3);

         if (scan_variable($<str>$)==-1) {
           sprintf(buff2,"'%s' does not represent a defined variable (5)",$<str>$);
           a4gl_yyerror(buff2); 
           YYERROR;
         }

  A4GL_debug("?1arrvar=%s",$<str>$);
  b = isarrvariable ($<str>$);
  a = scan_variable ($<str>$);

  A4GL_lex_printcomment("/*a=%x b=%x */\n",a,b);

  if (b != 0)
    {
      sprintf (buff, "%s.%s[%s-1] ", $<str>1, $<str>3,$<str>5);
      sprintf ($<str>$, " a4gl_let_substr(%s,%x,%s,0) /* M1 */", fgl_add_scope(buff,0), a, $<str>8);
      A4GL_lex_printcomment ("/* subscript on array variable %s*/\n", $<str>$);
    }
  else
    {
		a4gl_yyerror("I was really hoping for an array");
		YYERROR;

    }


}


| identifier
| assoc_var_write
;

let_var_dot :
MULTIPLY 
| identifier 
;

let_array_r_variable:
identifier arr_subscripts
{
  int a;
  int b;
  char buff2[256];
  A4GL_lex_printcomment("/*.let. array variable */");

  A4GL_debug("?2 arrvar=%s",$<str>1);
  if (strchr($<str>2,':'))  {
	char lbuff[256];
	char rbuff[256];
	char tmpbuff[256];
	char *ptr;
	strcpy(lbuff,$<str>2);
	strcpy(rbuff,strchr($<str>2,':')+1);
	ptr=strchr(lbuff,':');
	*ptr=0;
        sprintf (tmpbuff, "%s[%s]", $<str>1, change_arr_elem(lbuff));
        sprintf ($<str>$, " a4gl_let_substr(%s,%d,%s,0) /* M2 */", fgl_add_scope(tmpbuff,0), (int)scan_variable (tmpbuff), rbuff);
  } else {
  	b = isarrvariable ($<str>1);
  	a = scan_variable ($<str>1);

         if (a==-1) {
           sprintf(buff2,"'%s' does not represent a defined variable (6)",$<str>1);
           a4gl_yyerror(buff2); 
           YYERROR;
         }


  A4GL_debug("/*a=%d b=%d*/\n",a,b);

  if (b != 0)
    {
      sprintf ($<str>$, "%s[%s]", $<str>1, A4GL_decode_array_string($<str>2));
      A4GL_debug ("/* array variable %s*/\n", $<str>$);
    }
  else
    {
      sprintf ($<str>$, " a4gl_let_substr(%s,%d,%s,0) /* M3 */", fgl_add_scope($<str>1,0), (int)scan_variable ($<str>1), $<str>2);

      ADDMAP("Let Variable",$<str>1);
      A4GL_debug ("/*character variable %s*/\n", $<str>$);
    }
 }

}
;



op_param_var_list: {
		start_bind('f',0);
		/*start_bind('O',0);*/
		strcpy($<str>$,"0");
		}
		| fparam_var_list
;


fparam_var_list:	func_def_var {
				start_bind('f',$<str>1);
				start_bind('O',0);
				sprintf($<str>$,"1");
			}
			| fparam_var_list KW_COMMA func_def_var {
				int c;
				c=add_bind('f',$<str>3);
				/*c=add_bind('O',$<str>3); */
				sprintf($<str>$,"%d",c); 
			}
;




ibind_var_list:	ibind_var {
A4GL_lex_printcomment("/*STarted bind %s*/\n",$<str>1);
start_bind('i',$<str>1);
A4GL_lex_printcomment("/*STarted bind 2*/\n");
strcpy($<str>$,"");
}
	|	
ibind_var_list KW_COMMA ibind_var {
A4GL_lex_printcomment("/* Added */\n");
add_bind('i',$<str>3);
strcpy($<str>$,"");
}
;


func_def_var : identifier | identifier DOT identifier {sprintf($<str>$,"%s.%s",$<str>1,$<str>2);}
;

ibind_var : variable  {A4GL_lex_printcomment("/* Variable */\n");}
	| variable THRU variable { A4GL_debug("Got an ibind thru..."); sprintf($<str>$,"%s\n%s",$<str>1,$<str>3); }
	| CHAR_VALUE 
	| real_number {sprintf($<str>$,"\"%s\"",$<str>1);}
	| INT_VALUE {sprintf($<str>$,"\"%s\"",$<str>1);}
;

obind_var_list:	obind_var  { start_bind('o',$<str>1); } 
	|	obind_var_list KW_COMMA obind_var { add_bind('o',$<str>3); strcpy($<str>$,""); }
;

obind_var : variable   { ADDMAP("OBIND",$<str>1); }
	| variable THRU variable { A4GL_debug("Got an obind thru..."); sprintf($<str>$,"%s\n%s",$<str>1,$<str>3); }
;

ebind_var_list:	ebind_var  { start_bind('e',$<str>1); } 
	|	ebind_var_list KW_COMMA ebind_var { add_bind('e',$<str>3); strcpy($<str>$,""); }
;

ebind_var : variable   { ADDMAP("EBIND",$<str>1); }
	| variable THRU variable { A4GL_debug("Got an ebind thru..."); sprintf($<str>$,"%s\n%s",$<str>1,$<str>3); }
;


obind_var_let_list:	obind_let_var  {
A4GL_lex_printcomment("/* start obind with  %s*/\n",$<str>1);
A4GL_debug("obind_var_let_list ---> %s\n",$<str>1);
start_bind('o',$<str>1);
} 
	|	obind_var_let_list KW_COMMA obind_let_var {
A4GL_lex_printcomment("/* add to obind %s */\n",$<str>3);
add_bind('o',$<str>3);
A4GL_debug("obind_var_let_list ---> %s\n",$<str>3);
strcpy($<str>$,"");
}
;

obind_let_var : let_variable   {
A4GL_lex_printcomment("/* Read variable %s*/\n",$<str>1);
}
;

use_arr_var : variable {
    A4GL_lex_printcomment("/* use_arr_var */\n");
    start_arr_bind('o',$<str>1);
    A4GL_lex_printcomment("/* use_arr_var complete */\n");
}
;

obind_var_list_ord: obind_var_ord  {
		start_bind('O',$<str>1);
	} | obind_var_list_ord KW_COMMA obind_var_ord {
               add_bind('O',$<str>3);
               strcpy($<str>$,"");
	}
;

obind_var_ord : variable optional_asc_desc;

optional_asc_desc: | ASC | DESC;


init_bind_var_list:	init_bind_var {
A4GL_lex_printcomment("/*STarted bind %s*/\n",$<str>1);
start_bind('N',$<str>1);
A4GL_lex_printcomment("/*STarted bind 2*/\n");
strcpy($<str>$,"");
}
	|	
init_bind_var_list KW_COMMA init_bind_var {
A4GL_lex_printcomment("/* Added */\n");
add_bind('N',$<str>3);
strcpy($<str>$,"");
}
;

init_bind_var : variable  {
		strcpy($<str>$,$<str>1);
	}
	| variable THRU variable {
			sprintf($<str>$,"%s\n%s",$<str>1,$<str>3);
		}
;

/* ========================= newvariable.rule ======================= */

