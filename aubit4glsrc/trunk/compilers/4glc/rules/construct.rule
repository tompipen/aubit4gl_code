/*
=====================================================================
                        Source: construct.rule
=====================================================================
*/

construct_cmd	:	CONSTRUCT
{
push_blockcommand("CONSTRUCT");
} 
constr_rest 
{
	print_construct_1();
} 
end_constr {
	print_construct_2($<str>3);
}
;


constr_rest:
BY_NAME variable ON constr_col_list opt_defs op_help opt_attributes
{
	print_construct_3(1,$<str>2,$<str>7);
	sprintf($<str>$,"form_loop(&_inp_io)"); /* FIXME */
	reset_constr();
}
| variable ON constr_col_list opt_defs FROM fld_list op_help opt_attributes
{
	print_construct_3(0,$<str>1,$<str>8);
	sprintf($<str>$,"form_loop(&_inp_io)"); /* FIXME */
	reset_constr();
}
;

end_constr : 
| constr_extra_commands END_CONSTRUCT 
;

constr_col_list : constr_col | constr_col_list COMMA constr_col
;

constr_col : identifier 
             {
                push_construct("",$<str>$);
             }
|            identifier DOT identifier 
             {
                sprintf($<str>$,"%s.%s",$<str>1,$<str>3);
                push_construct($<str>1,$<str>3); 
             }
| identifier DOT MULTIPLY 
             {
                push_construct($<str>1,"*");
             }
;


constr_extra_commands : constr_extra_command | constr_extra_commands constr_extra_command
;

constr_extra_command :  
	  BEFFIELD bef_c_field_list  {
		print_befaft_field_1($<str>2);
	} 
	commands {
		print_befaft_field_2();

	}
	| AFTFIELD aft_c_field_list {
		print_befaft_field_1($<str>2);
	} commands {
		print_befaft_field_2();
	}
	| on_key_command {
		print_onkey_1($<str>1);
	} commands {
		print_onkey_2();
	}
	| AFTCONSTRUCT {
		print_befaft_field_1("AFTER_INP");
	} commands {
		print_befaft_field_2();
	}
	| BEFCONSTRUCT {
		print_befaft_field_1("BEFORE_INP");
		} 
	commands {
		print_befaft_field_2();
	}
;





bef_c_field_list :
	field_name2 {sprintf($<str>$,"BEF_FIELD_CHK(%s)",$<str>1);}
	| bef_c_field_list COMMA field_name2 {
	  char buff[80];
	  sprintf(buff,"BEF_FIELD_CHK(%s)",$<str>3);
	  generate_or($<str>$,$<str>1,buff);
	}
;

aft_c_field_list :
	field_name2 {sprintf($<str>$,"AFT_FIELD_CHK(%s)",$<str>1);}
	|aft_c_field_list COMMA field_name2 {
	  char buff[80];
	  sprintf(buff,"AFT_FIELD_CHK(%s)",$<str>3);
	  generate_or($<str>$,$<str>1,buff);
	}
;


/* ========================== construct.rule ====================== */

