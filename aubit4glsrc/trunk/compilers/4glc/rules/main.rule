
module	:	op_code op_template globals_section op_code 
{
int a;
modlevel=-1;
//read_glob_var = 1; 
print_variables(1);
//read_glob_var = 0; 
set_mod_level(varcnt);set_4gl_vars();set_mod_level(0);
strcpy(curr_func,"[Module]");
} define_section op_code {inmod();} func_main_def
	;

func_main_def	: /* could be empty file */
                 {strcpy($<str>$,"");}
                | func_or_main2
;
func_or_main2 : func_or_main
	| func_or_main2 func_or_main
	;

at_term_cmd :
        AT_TERMINATION_CALL  identifier {
		print_at_termination($<str>2);
	}
;

func_or_main	:	func_def
		|	main_def
		|	mem_func_def
		|	report_def
		|	pdf_report_def
                |       menu_def
		| whenever_cmd 
                |       formhandler_def
		|	code_cmd
		| 	import_m
		|	comment_cmd
		;

op_code : |code_cmd | whenever_cmd  ;


ldeffunction :  FUNCTION {strcpy($<str>$,"");} | LOCAL FUNCTION
{
strcpy($<str>$,"static ");
} ;

/*
 * Function definition 
 */
func_def	: ldeffunction
{
  clr_variable(); lastlineno=yylineno;
  clr_function_constants (); 
}
identifier  OPEN_BRACKET  
{ 
  sprintf(curr_func,"%s",$<str>3);
  addmap("Declare Function",curr_func,"MODULE",yylineno,infilename);
  print_func_start($<str>1,$<str>3,0);
  printDeclareFunctionStack($<str>3);
  cnt=0;
}
op_param_var_list CLOSE_BRACKET 
{
  printcomment("/* new function %s parameters*/\n",$<str>6); 
  push_blockcommand("FUNC");
  printcomment("/* define section */\n");
}
define_section 
{
  int c;
  printcomment("/*end of define section */\n");
  c=print_param('f');
  printPushFunction();
  print_func_args(c);
}
op_code commands end_func_command;

/*
 * The end of the function rule 
 */
end_func_command : 
  END_FUNCTION 
  {
    printPopFunction();
    print_func_defret0();
    pop_blockcommand("FUNC");
    print_func_end();
    clr_function_constants ();
    printcomment("/*end function*/\n");
  }
;

arg_list	: {strcpy($<str>$,"0");cnt=0;} 
| identifier {strcpy($<str>$,"1");cnt=1;} 
	|arg_list COMMA identifier {sprintf($<str>$,"%d",++cnt);}
	;

main_def:	
  MAIN 
  { 
    lastlineno=yylineno;
    sprintf(curr_func,"MAIN");
    clr_variable(); 
    push_blockcommand("MAIN"); 
    addmap("MAIN",curr_func,"MODULE",yylineno,infilename);
    print_main_1();
  } 
  define_section
  {
    printDeclareFunctionStack("MAIN");
    print_fgllib_start(hdr_dbname);
    printInitFunctionStack();
    printPushFunction();
  }
commands END_MAIN {
pop_blockcommand("MAIN");
print_main_end();
printcomment("/*end main */\n");} ;

return_cmd : 
  RETURN reset_cnt op_fgl_expr_ret_list 
  {
    printPopFunction();
    print_return(atoi($<str>3));
  };

op_fgl_expr_list : {strcpy($<str>$,"0");} | fgl_expr_list {
printcomment("/* Got expr list */");
sprintf($<str>$,"%s",$<str>1);}
;

db_section	:	  DATABASE dbase_name {open_db($<str>2);
			strcpy(hdr_dbname,$<str>2);
			lastlineno=yylineno;}
;

globals_section : /* empty */ {strcpy($<str>$,"");lastlineno=yylineno;}
| actual_globals_section {
	if (glob_only==1) {
       	debug("Read globals section so Im done\n");
       	YYACCEPT;
	}

  	//read_glob_var = 1;
  	//print_variables (1);
  	//read_glob_var = 0;
	set_mod_level(varcnt);
}
;

actual_globals_section : 
	xglobals_entry
	| actual_globals_section xglobals_entry
;

xglobals_entry : globals_entry | code_cmd |  whenever_cmd  | db_section
;

globals_entry: GLOBALS {
strcpy(curr_func,"[Globals]");
push_blockcommand("GLOBALS");
printcomment("/* start of globals */\n");
} 
glob_section 
{
pop_blockcommand("GLOBALS");
}
;

glob_section : define_section END_GLOBALS {
printcomment("/* end of globals */");
debug("end of globals\n");
lastlineno=yylineno;
}
| file_name {
int a;
char b[256];
lastlineno=yylineno;

strcpy(b,$<str>1);

tr_glob_fname(b);

debug("Reading globals file %s\n",b);
rm_quote(b);
read_glob(b);
/*
if (glob_only==0) {
         debug("Opening globals file\n");
         a=read_globals($<str>1);
         debug("Done globals file\n");
         }
*/
}
;

mem_func_def : MEMBER_FUNCTION identifier MEMBER_OF identifier OPEN_BRACKET
{
  addmap("Define Member Function",curr_func,"MODULE",yylineno,infilename);
}
op_param_var_list CLOSE_BRACKET
{
  char buff[80];
  sprintf(buff,"%s_%s_%d",$<str>4,$<str>2,atoi($<str>7));
  sprintf(curr_func,"%s",buff);
  print_func_start("",buff,1);
  printDeclareFunctionStack(buff);

  cnt=0;
  printcomment("/* new function %s parameters*/\n",$<str>7);
  push_blockcommand("FUNC");
  printcomment("/* define section */\n");
}
define_section
{
  printcomment("/*end of define section */\n");
  print_param('f');
  printPushFunction();
  print_func_args(atoi($<str>7));
}
op_code commands end_func_command;




