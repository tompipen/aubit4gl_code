
define_section	:	 {strcpy($<str>$,"");if (modlevel>=0) print_variables();}
	|	define_multiple {strcpy($<str>$,"");if (modlevel>=0) print_variables();lastlineno=yylineno;};

	
define_multiple	:
	define_set | define_multiple define_set
;

define_set :
	DEFINE {dtypelist[0]=0;printcomment("/* define */\n");} def_part  {printcomment("/*end def */\n");}
	| dim_section
;

def_part : def_part2 |  def_part COMMA def_part2
;

def_part2:	 
CONSTANT identifier op_equal CHAR_VALUE   { add_constant('c',$<str>4,$<str>2); addmap('c',$<str>2,curr_func,yylineno,infilename); }
| CONSTANT identifier op_equal real_number { add_constant('f',$<str>4,$<str>2);
addmap('c',$<str>2,curr_func,yylineno,infilename);
 }
| CONSTANT identifier op_equal INT_VALUE    { add_constant('i',$<str>4,$<str>2);
addmap('c',$<str>2,curr_func,yylineno,infilename);
 }
| var_def_list  dtype_ident 

;

var_def_name	:	identifier {
/*AF CygWin FIX */
push_name($<str>$,0);
addmap('d',$<str>1,curr_func,yylineno,infilename);
}
;

var_def_list	: var_def_name
	| var_def_list COMMA var_def_name 
	;

op_char : | CHAR;

array_variable	: 
ARRAY OPEN_SQUARE number_arr_list CLOSE_SQUARE {
debug("defines array %s",$<str>3);
push_type(0,0,$<str>3);
}
OF dtype_ident
|
ASSOCIATE op_char assoc_open_bracket INT_VALUE assoc_close_bracket
WITH_ARRAY OPEN_SQUARE number_arr_assoc 
CLOSE_SQUARE 
{
push_associate($<str>4,$<str>8);
push_type(0,0,$<str>8);
}
OF dtype_ident  {
pop_associate();

}
;



assoc_open_bracket: OPEN_BRACKET | OPEN_SHEV ;

assoc_close_bracket: CLOSE_BRACKET | CLOSE_SHEV ;

number_arr_assoc: INT_VALUE;

number_arr_list	:number_value_arr COMMA number_value_arr COMMA number_value_arr 
	 {sprintf($<str>$,"%s][%s][%s",$<str>1,$<str>3,$<str>5);}
		| number_value_arr COMMA number_value_arr 
	 {sprintf($<str>$,"%s][%s",$<str>1,$<str>3);}
		| number_value_arr
	;

number_value_arr: INT_VALUE 
;
/*{push_type(0,0,$<str>1); }*/

record_variable	: RECORD {push_record();in_record++;} def_part END_RECORD {pop_record();in_record--;}
| 	RECORD_LIKE {in_record++;push_record();debug("Like\n");} identifier DOT MULTIPLY
                  {debug("Link Table : %s\n",$<str>3);
                  push_rectab($<str>3);
                  pop_record();in_record--;} 
| 	LINKED_TO {
		push_record();debug("Like\n");} identifier PRIMARY_KEY OPEN_BRACKET link_to_pk_list CLOSE_BRACKET
               {
		  debug("Table:%s\n",$<str>3);
		  add_link_to($<str>3,$<str>6);
	          debug("Push record...\n");
                  push_rectab($<str>3);
                  pop_record();
} 

;

link_to_pk_list : link_to_pk | link_to_pk_list COMMA link_to_pk {
	sprintf($<str>$,"%s,%s",$<str>1,$<str>3);
}
;

link_to_pk : identifier
;


dtype_ident : dtype2 ;

dtype2: {start_state("dtype",1);} dtype {start_state("dtype",0);}
;

dtype	: 
			array_variable 
		|	record_variable 
		|	CHAR {push_type("char","1",0);}
		|	CHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET {push_type("char",$<str>3,0);}
		|	VARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET {push_type("char",$<str>3,0);}
		|	VARCHAR OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET {push_type("char",$<str>3,0);}
		|	INTEGER {push_type("long",0,0);}
		| 	AS identifier {push_dim($<str>2);}
		|	SMALLINT {push_type("int",0,0);}
		|	DECIMAL { char buff[256];
				sprintf(buff,"%d",16*256+2);
				push_type("fgldecimal",buff,0);
				}
		|	DECIMAL OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
				char buff[256];
				sprintf(buff,"%d",atoi($<str>3)*256+2);
				push_type("fgldecimal",buff,0);
}
		|	DECIMAL OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET {
char buff[256];
sprintf(buff,"%d",atoi($<str>3)*256+atoi($<str>5));
push_type("fgldecimal",buff,0);
}
		|	MONEY {
			char buff[256];
			sprintf(buff,"%d",16*256+2);
			push_type("fglmoney",buff,0);}
		|	MONEY OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
		char buff[256];sprintf(buff,"%d",atoi($<str>3)*256+2);
			push_type("fglmoney",buff,0);}
		|	MONEY OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET {
char buff[256];
sprintf(buff,"%d",atoi($<str>3)*256+atoi($<str>5));
push_type("fglmoney",buff,0);}
		|	FLOAT {push_type("double",0,0);}
		|	SMALLFLOAT {push_type("float",0,0);}
		|	DATE {push_type("fgldate",0,0);}
		|	BYTE {push_type("fglbyte",0,0);}
		|	TEXT {push_type("fgltext",0,0);}
		| 	DATETIME datetime_qual {
push_type("struct_dtime ",$<str>2,0);
}
		| 	INTERVAL interval_qual {push_type("struct_ival ",$<str>2,0);}
		|  like_var {push_like($<str>1);fflush(stdout);printcomment("/*added(XXXXX)\n */");} 


	;



like_var 	: 
LIKE  tab_name  DOT col_name  {
printcomment("/*column like(ZZZ)\n*/"); sprintf($<str>$,"%s.%s",$<str>2,$<str>4); printcomment ("/*set col...(ZZZ)\n*/");}
;

tab_name : identifier {debug("--->%s\n",$<str>1);strcpy($<str>$,$<str>1);} ;

col_name : identifier {debug("--->%s\n",$<str>1);strcpy($<str>$,$<str>1);} ;

datetime_qual :  {strcpy($<str>$,"0");} | dtime_start
TO 
dtime_end {
debug("Real datetime %s to %s\n",$<str>1,$<str>3);
sprintf($<str>$,"%d",(atoi($<str>1)*16)+atoi($<str>3)); }
;

interval_qual :  int_start TO int_end  {
sprintf($<str>$,"%d",(atoi($<str>1)*16)+atoi($<str>3)); 
};

dtime_start : {start_state("dtime_val",1);} dtime_val {start_state("dtime_val",0); strcpy($<str>$,$<str>2);}
;

dtime_val : YEAR {strcpy($<str>$,"1");}
| MONTH {strcpy($<str>$,"2");}
| DAY {strcpy($<str>$,"3");}
| HOUR {strcpy($<str>$,"4");}
| MINUTE {strcpy($<str>$,"5");}
| SECOND{strcpy($<str>$,"6");}
| FRACTION opt_frac
  {
debug("opt_frac returns %s",$<str>2);
sprintf($<str>$,"%d",atoi($<str>2)+6); }
;

dtime_end : {start_state("dtime_val",1);} dtime_val { debug ("Got end");start_state("dtime_val",0);  strcpy($<str>$,$<str>2);}
;

opt_frac: {
debug("Nothing in fraction - assume 2");
strcpy($<str>$,"2");} |  OPEN_BRACKET dtfrac CLOSE_BRACKET {
debug("Read fraction .. ");
debug("    %s",$<str>2);
strcpy($<str>$,$<str>2);
};

dtfrac: INT_VALUE {
if (atoi($<str>1)>5) {
yyerror("Fraction values are between 0 and 5");
YYERROR;
}
}
;

int_start : {start_state("interval_val",1);} int_start_unit opt_frac {start_state("interval_val",0); sprintf($<str>$,"%d",atoi($<str>3)*16+atoi($<str>2));}
;

int_start_unit : YEAR {strcpy($<str>$,"1");}
| MONTH {strcpy($<str>$,"2");}
| DAY {strcpy($<str>$,"3");}
| HOUR {strcpy($<str>$,"4");}
| MINUTE {strcpy($<str>$,"5");}
| SECOND{strcpy($<str>$,"6");}
| FRACTION opt_frac
  {
debug("opt_frac returns %s",$<str>2);
sprintf($<str>$,"%d",atoi($<str>2)+6); }
;

int_end : int_start_unit;


op_equal : | EQUAL 
;

