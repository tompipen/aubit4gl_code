/*
=====================================================================
                        Source: arr_expr.rule
=====================================================================
*/


arr_expr :
OPEN_BRACKET arr_expr CLOSE_BRACKET  {SPRINTF1($<str>$,"(%s)",$<str>2);}
| arr_expr arr_next_math arr_expr { SPRINTF3($<str>$,"(%s%s%s)",$<str>1,$<str>2,$<str>3);}
| INT_VALUE {SPRINTF1($<str>$,"%d",atoi($<str>1));}
| arr_int_sign INT_VALUE {SPRINTF2($<str>$,"(%s%s)",$<str>1,$<str>2);}
| variable {
  int a;
  a=scan_variable($<str>1)&15;
  if (a!=1&&a!=2) {
    
    a4gl_yyerror("Only INTEGER/SMALLINT variables may be used as subscripts");
    YYERROR;
    /* error processing */;
  }
  if (A4GL_isyes(acl_getenv("DOING_CM")) && (A4GL_lextype(),"CM")==0) {
	char buff[20000];
	SPRINTF1(buff,"%s",fgl_add_scope($<str>1,0));
	if (buff[0]=='M' || buff[0]=='G' || buff[0]=='R') {
		SPRINTF1($<str>$,"(this.%s) As Int32",fgl_add_scope($<str>1,0));
	} else {
		SPRINTF1($<str>$,"(%s) As Int32",fgl_add_scope($<str>1,0));
	}
  } else {
  	SPRINTF1($<str>$,"%s",fgl_add_scope($<str>1,0));
  }
}
| function_call_expr {
	SPRINTF1($<str>$,"%s",print_arr_expr_fcall($<ptr>1));
}
;

arr_next_math:
	KW_PLUS {strcpy($<str>$,"+");}
|       KW_MINUS {strcpy($<str>$,"-");}
|       KW_MULTIPLY {strcpy($<str>$,"*");}
|       KW_DIVIDE {strcpy($<str>$,"/");}
|       KW_MOD {strcpy($<str>$,"%");}
;



arr_int_sign	: KW_PLUS {strcpy($<str>$,"+");}
		| KW_MINUS {strcpy($<str>$,"-");}
;


