/*
=====================================================================
                        Source: expr.rule
=====================================================================
*/

fgl_expr_c :
 	boolean_expr
	| function_call_expr
	| fgl_expr_c fgl_next { $<ptr>$=A4GL_append_expr_expr($<ptr>1,$<ptr>2); }
	| fgl_expr_c SPACES 	{ $<ptr>$=A4GL_new_expr("A4GL_add_spaces();"); add_feature("ET_EXPR_SPACES"); }
	| fgl_expr_c CONCAT_PIPES fgl_expr_c { 
			add_feature("ET_EXPR_CONCAT_PIPES"); 
			$<ptr>$=A4GL_append_expr_expr($<ptr>1,$<ptr>3);
			$<ptr>$=A4GL_append_expr($<ptr>$,"A4GL_pushop(OP_CONCAT);"); 
		}
	| report_only_expr
	| builtin_expr
	| pdf_expr
	| literal_expr 
	| MINUS fgl_expr_c {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_NEG);
		/*  
	 	    $<ptr>$=A4GL_new_expr("A4GL_push_int(0);");
		    $<ptr>$=A4GL_append_expr_expr($<ptr>$,$<ptr>2);
		    $<ptr>$=A4GL_append_expr($<ptr>$,"A4GL_pushop(OP_SUB);");
		*/
	}
	| PLUS fgl_expr_c {
		$<ptr>$=$<ptr>2;
	}

;

fgl_next:
  and_or_expr
| comparison_expr
| in_expr
| interval_expr 
| null_expr
| string_match_expr
| clip_expr 
| using_expr 
| math_expr
;



op_fgl_expr_ret_list_v2: {$<ptr_list>$=0;} | fgl_expr_ret_list { $<ptr_list>$=$<ptr_list>1;}
;


fgl_expr_ret : fgl_expr_c | KW_NULL {$<ptr>$=A4GL_new_expr_simple(ET_EXPR_NULL);}
;

fgl_expr_ret_list 	: fgl_expr_ret { $<ptr_list>$=A4GL_new_ptr_list($<ptr>1); }
		| 	fgl_expr_ret_list KW_COMMA fgl_expr_ret { $<ptr_list>$=A4GL_new_append_ptr_list($<ptr_list>1,$<ptr>3); }
;


fgl_expr_list_ptr: fgl_expr_c { 
			$<ptr_list>$=A4GL_new_ptr_list($<ptr>1);
			}
		| 	fgl_expr_list_ptr KW_COMMA fgl_expr_c { $<ptr_list>$=A4GL_new_append_ptr_list($<ptr_list>1,$<ptr>3); }
;

fgl_expr_concat : fgl_expr_list_ptr 
;

fgl_expr_x:  fgl_expr_c {
	A4GL_debug("Print expr (2)");
	print_expr($<ptr>1);
}
;


/* This is a bad fixup for report expressions 
   they should be handled properly - but until they are this 
   will have to to. The issue is because a report expression can have a 'wordwrap'
   attached - and that we print the expressions as we are parsing rather than after we've
   parsed the print statements...
*/

fgl_expr_y:  fgl_expr_c { 
	struct expr_str *p;
	int a;
	p=$<ptr>1;
	if (p) {
		if (p->expr_type==ET_EXPR_EXPR_LIST) {
			struct expr_str_list *pl;
			pl=p->u_data.expr_list;
			for (a=0;a<pl->nlist;a++) {
				print_expr(pl->list[a]);
			}
		} else {
			print_expr($<ptr>1);
		}
	}
}
;

/*
int_sign	: PLUS
{
	strcpy($<str>$,"+");
}
		| MINUS
{
	strcpy($<str>$,"-");
}
;
*/

/****************************************************************/

boolean_expr:
NOT fgl_expr_c {
	$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_NOT);
}
| KW_TRUE  
{
	$<ptr>$=A4GL_new_expr_simple(ET_EXPR_TRUE);
}
| KW_FALSE 
{
	$<ptr>$=A4GL_new_expr_simple(ET_EXPR_FALSE);
}
| OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  { $<ptr>$=$<ptr>2; }
| EXISTS OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
	add_feature("ET_EXPR_EXISTS");
	$<ptr>$=get_in_exists_sql($<sql_string>3,'E');
}
| NOT_EXISTS OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
	add_feature("ET_EXPR_NOT_EXISTS");
	$<ptr>$=get_in_exists_sql($<sql_string>3,'e');
}
;	



literal_expr: 
CHAR_VALUE  {
	if (strcmp($<str>1,"\"\"")==0) {
		sprintf($<str>$,"%s",A4GL_get_push_literal('N',$<str>1));
		$<ptr>$=A4GL_new_expr($<str>$);
	} else {
		sprintf($<str>$,"%s",A4GL_get_push_literal('S',$<str>1));
		$<ptr>$=A4GL_new_expr($<str>$);
	}
	
}
| real_number {
	sprintf($<str>$,"%s",A4GL_get_push_literal('D',$<str>1));
	$<ptr>$=A4GL_new_expr($<str>$);
	
}
| INT_VALUE
{
	sprintf($<str>$,"%s",A4GL_get_push_literal('L',$<str>1));
	$<ptr>$=A4GL_new_expr($<str>$);
	
} | variable_entry {$<ptr>$=$<ptr>1;}
;


variable_entry_2 :
	variable 
	| variable THRU variable {
		sprintf($<str>$,"%s\n%s",$<str>1,$<str>3);
	}
;

variable_entry : variable_entry_2 { $<ptr>$=A4GL_generate_variable_expr ($<str>1); }
;



report_only_expr:
	COLUMN fgl_expr_c { 
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_COLUMN); 
	}
	| COLUMNS fgl_expr_c {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_COLUMN);
	}
	| rep_agg  {
   		if (!isin_command("REPORT")) {
   			a4gl_yyerror("This can only be done in a report!");
   			YYERROR;
		} 
		insql=0;
		$<ptr>$=A4GL_new_expr($<str>1);
	}  
| KW_GROUP {insql=1;set_ingroup();} rep_agg  {
	char buff[256];
      if (!isin_command("REPORT")) {
        a4gl_yyerror("This can only be done in a report!");YYERROR;
      } insql=0; 
	A4GL_lex_printcomment("/* rep_Agg = %s\n*/",$<str>3);
        strcpy(buff,$<str>3);
	A4GL_debug("report aggregate :  %s",buff);
	$<ptr>$=A4GL_new_expr(buff);
      }


;

and_or_expr: 
KW_AND fgl_expr_c 
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_AND);");
}
| KW_OR fgl_expr_c 
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_OR);");
}
;


inexpr_list : fgl_expr_c  {
	$<ptr>$=$<ptr>1;
	}
	| inexpr_list KW_COMMA fgl_expr_c {
		A4GL_debug("Adding to list...");
		$<ptr>$=A4GL_append_expr_expr($<ptr>1,$<ptr>3);
	}
;


in_expr:
 KW_IN OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
	$<ptr>$=get_in_exists_sql($<sql_string>3,'I');
	add_feature("ET_EXPR_IN_SELECT");
}
	
 | NOT_IN OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
	$<ptr>$=get_in_exists_sql($<sql_string>3,'i');
	add_feature("ET_EXPR_NOT_IN_SELECT");
}
 |KW_IN OPEN_BRACKET inexpr_list CLOSE_BRACKET {
	char buff[256];
	sprintf(buff,"A4GL_push_int(%d);",A4GL_length_expr($<ptr>3));
	$<ptr>$=A4GL_append_expr($<ptr>3,buff);
	A4GL_append_expr($<ptr>$,"A4GL_pushop(OP_IN);");
	add_feature("ET_EXPR_IN");
}
| NOT_IN OPEN_BRACKET inexpr_list CLOSE_BRACKET {
	char buff[256];
	sprintf(buff,"A4GL_push_int(%d);",A4GL_length_expr($<ptr>3));
	$<ptr>$=A4GL_append_expr($<ptr>3,buff);
	A4GL_append_expr($<ptr>$,"A4GL_pushop(OP_NOTIN);");
	add_feature("ET_EXPR_NOT_IN");
}
;

null_expr:
IS_NULL  
{ 
	strcpy($<str>$,"A4GL_pushop(OP_ISNULL);");
	$<ptr>$=A4GL_new_expr($<str>$);
}
| IS_NOT_NULL
{
	strcpy($<str>$,"A4GL_pushop(OP_ISNOTNULL);");
	$<ptr>$=A4GL_new_expr($<str>$);
}
;

string_match_expr:
 MATCHES fgl_expr_c {
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_push_char(\"\\\\\");A4GL_pushop(OP_MATCHES);");
	add_feature("ET_EXPR_MATCHES");
 }
 | NOT_MATCHES fgl_expr_c {
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_push_char(\"\\\\\");A4GL_pushop(OP_MATCHES);A4GL_pushop(OP_NOT);");
	add_feature("ET_EXPR_NOT_MATCHES");
}
 | MATCHES fgl_expr_c KW_ESCAPE CHAR_VALUE {
	char buff[40];
	sprintf(buff,"A4GL_push_char(%s);A4GL_pushop(OP_MATCHES);",$<str>4);
	$<ptr>$=A4GL_append_expr($<ptr>2,buff);
	add_feature("ET_EXPR_MATCHES_ESCAPE");
 }
 | NOT_MATCHES fgl_expr_c KW_ESCAPE CHAR_VALUE {
	char buff[40];
	sprintf(buff,"A4GL_push_char(%s);A4GL_pushop(OP_MATCHES);A4GL_pushop(OP_NOT);",$<str>4);
	$<ptr>$=A4GL_append_expr($<ptr>2,buff);
	add_feature("ET_EXPR_NOT_MATCHES_ESCAPE");
}


| LIKE fgl_expr_c {
	char buff[40];
	sprintf(buff,"A4GL_push_char(\"\\\\\");A4GL_pushop(OP_LIKE);");
	$<ptr>$=A4GL_append_expr($<ptr>2,buff);
}
| NOT_LIKE fgl_expr_c {
	char buff[40];
	sprintf(buff,"A4GL_push_char(\"\\\\\");A4GL_pushop(OP_LIKE);A4GL_pushop(OP_NOT);");
	$<ptr>$=A4GL_append_expr($<ptr>2,buff);
}
| LIKE fgl_expr_c KW_ESCAPE CHAR_VALUE {
	char buff[40];
	sprintf(buff,"A4GL_push_char(%s);A4GL_pushop(OP_LIKE);",$<str>4);
	$<ptr>$=A4GL_append_expr($<ptr>2,buff);
}
| NOT_LIKE fgl_expr_c KW_ESCAPE CHAR_VALUE {
	char buff[40];
	sprintf(buff,"A4GL_push_char(%s);A4GL_pushop(OP_LIKE);A4GL_pushop(OP_NOT);",$<str>4);
	$<ptr>$=A4GL_append_expr($<ptr>2,buff);
}


;

clip_expr: 
CLIPPED 
{
	strcpy($<str>$,"A4GL_pushop(OP_CLIP);");
	$<ptr>$=A4GL_new_expr($<str>$);
}
;
using_expr:
KW_USING fgl_expr_c 
{
	sprintf($<str>$,"%s A4GL_pushop(OP_USING);",$<str>2);
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_USING);");
	add_feature("ET_EXPR_USING");
}
;

math_expr:
PLUS fgl_expr_c 
{
	A4GL_debug("PLUS in math_expr $<ptr>2 = %p",$<ptr>2);
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_ADD);");
}
| MINUS fgl_expr_c
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_SUB);");
}
| MULTIPLY fgl_expr_c 
{
      sprintf($<str>$,"%s A4GL_A4GL_pushop(OP_MULT);",$<str>2);
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_MULT);");
}
| DIVIDE  fgl_expr_c 
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_DIV);");
}
| MOD fgl_expr_c 
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_MOD);");
}
| POWER fgl_expr_c 
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_POWER);");
}
;

comparison_expr:
EQUAL           fgl_expr_c {
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_EQUAL);");
}
| EQUAL_EQUAL   fgl_expr_c {
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_EQUAL);");
}
| LESS_THAN       fgl_expr_c
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_LESS_THAN);");
}
| GREATER_THAN    fgl_expr_c
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_GREATER_THAN);");
}
| NOT_EQUAL       fgl_expr_c
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_NOT_EQUAL);");
}
| LESS_THAN_EQ    fgl_expr_c
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_LESS_THAN_EQ);");
}
| GREATER_THAN_EQ fgl_expr_c
{
	$<ptr>$=A4GL_append_expr($<ptr>2,"A4GL_pushop(OP_GREATER_THAN_EQ);");
}

;





function_call_expr2: identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET 
		{
		ADDMAP("Call",$<str>1);
		$<ptr>$=A4GL_new_expr_fcall($<str>1,$<ptr_list>3,infilename,lastlineno);
		}
   | KW_CHANNEL_READ OPEN_BRACKET char_or_var KW_COMMA OPEN_SQUARE ebind_var_list CLOSE_SQUARE CLOSE_BRACKET {
		start_bind('i',$<str>3);
                $<ptr>$=get_call_shared_bound_expr("\"channel\"","\"read\"");
        }
   | KW_CHANNEL_READ OPEN_BRACKET char_or_var KW_COMMA ebind_var_list CLOSE_BRACKET  {
		start_bind('i',$<str>3);
                $<ptr>$=get_call_shared_bound_expr("\"channel\"","\"read\"");
        }
| identifier DOUBLE_COLON identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
	$<ptr>$=A4GL_new_expr_shared_fcall($<str>1,$<str>3,$<ptr_list>5,infilename,lastlineno); }
| identifier MEMBER_FUNCTION identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET  {
	$<ptr>$=A4GL_new_expr_member_fcall($<str>1,$<str>3,$<ptr_list>5,infilename,lastlineno); 
}





;

function_callb:
KW_DATE OPEN_BRACKET {chk4var=1;} fgl_expr_c {chk4var=0;} CLOSE_BRACKET {
	$<ptr>$=A4GL_append_expr($<ptr>4,"aclfgl_date(1);");
}
| TIME OPEN_BRACKET {chk4var=1;} fgl_expr_c {chk4var=0;} CLOSE_BRACKET {
	$<ptr>$=A4GL_append_expr($<ptr>4,"aclfgl_time(1);");
}
| MONTH OPEN_BRACKET {chk4var=1;} fgl_expr_c {chk4var=0;} CLOSE_BRACKET {
	$<ptr>$=A4GL_append_expr($<ptr>4,"aclfgl_month(1);");
} 
| DAY OPEN_BRACKET {chk4var=1;} fgl_expr_c {chk4var=0;} CLOSE_BRACKET {
	$<ptr>$=A4GL_append_expr($<ptr>4,"aclfgl_day(1);");
} 
| YEAR OPEN_BRACKET {chk4var=1;} fgl_expr_c {chk4var=0;} CLOSE_BRACKET {
	$<ptr>$=A4GL_append_expr($<ptr>4,"aclfgl_year(1);");
} 
| INTERVAL OPEN_BRACKET interval_func_params CLOSE_BRACKET op_extend_i {
	char buff[256];
	sprintf(buff,"acli_interval(%s,%s);",$<str>3,$<str>5);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET CHAR_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(%s,%s);",$<str>3,$<str>5);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s\",%s);",$<str>3,$<str>5);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET NUMBER_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s\",%s);",$<str>3,$<str>5);
	$<ptr>$=A4GL_new_expr(buff);
}


| DATETIME OPEN_BRACKET INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s:%s\",%s);",$<str>3,$<str>5,$<str>7);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s:%s\",%s);",$<str>3,$<str>5,$<str>7);
	$<ptr>$=A4GL_new_expr(buff);
}


| DATETIME OPEN_BRACKET INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s:%s:%s\",%s);",$<str>3,$<str>5,$<str>7,$<str>9);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s:%s:%s\",%s);",$<str>3,$<str>5,$<str>7,$<str>9);
	$<ptr>$=A4GL_new_expr(buff);
}



| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s %s\",%s);",$<str>3,$<str>4,$<str>6);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s %s:%s\",%s);",$<str>3,$<str>4,$<str>6,$<str>8);
	$<ptr>$=A4GL_new_expr(buff);
}

| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s %s:%s%s\",%s);",$<str>3,$<str>4,$<str>6,$<str>8,$<str>10);
	$<ptr>$=A4GL_new_expr(buff);
}

| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s %s:%s%s\",%s);",$<str>3,$<str>4,$<str>6,$<str>8,$<str>10);
	$<ptr>$=A4GL_new_expr(buff);
}



| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s\",%s);",$<str>3,$<str>5,$<str>7);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE MINUS INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s-%s\",%s);",$<str>3,$<str>5,$<str>7,$<str>9);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE  INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s %s\",%s);",$<str>3,$<str>5,$<str>6,$<str>8);
	$<ptr>$=A4GL_new_expr(buff);
}

| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE MINUS INT_VALUE INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s-%s %s\",%s);",$<str>3,$<str>5,$<str>7,$<str>8,$<str>10);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE MINUS INT_VALUE INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s-%s %s:%s\",%s);",$<str>3,$<str>5,$<str>7,$<str>8,$<str>10,$<str>12);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s-%s %s:%s:%s\",%s);",$<str>3,$<str>5,$<str>7,$<str>8,$<str>10,$<str>12,$<str>14);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s-%s %s:%s:%s\",%s);",$<str>3,$<str>5,$<str>7,$<str>8,$<str>10,$<str>12,$<str>14);
	$<ptr>$=A4GL_new_expr(buff);
}


| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s %s:%s\",%s);",$<str>3,$<str>5,$<str>6,$<str>8,$<str>10);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s %s:%s:%s\",%s);",$<str>3,$<str>5,$<str>6,$<str>8,$<str>10,$<str>12);
	$<ptr>$=A4GL_new_expr(buff);
}
| DATETIME OPEN_BRACKET INT_VALUE MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_d {
	char buff[256];
	sprintf(buff,"acli_datetime(\"%s-%s %s:%s:%s\",%s);",$<str>3,$<str>5,$<str>6,$<str>8,$<str>10,$<str>12);
	$<ptr>$=A4GL_new_expr(buff);
}



| FGL_SIZEOF OPEN_BRACKET variable CLOSE_BRACKET {
	char buff[256];
	sprintf(buff,"A4GL_push_long(sizeof(%s));",$<str>3);
        $<ptr>$=A4GL_new_expr(buff);
}
| FGL_ADDRESSOF OPEN_BRACKET variable CLOSE_BRACKET {
	char buff[256];
	sprintf(buff,"A4GL_push_long(&(%s));",$<str>3);
        $<ptr>$=A4GL_new_expr(buff);
}
| FGL_ISDYNARR_ALLOCATED OPEN_BRACKET variable CLOSE_BRACKET {
	char buff[256];
	sprintf(buff,"A4GL_isdynarr_allocated(&%s);",$<str>3);
        $<ptr>$=A4GL_new_expr(buff);
}
| FGL_DYNARR_EXTENTSIZE OPEN_BRACKET variable KW_COMMA INT_VALUE CLOSE_BRACKET { 
        char buff[256];
        sprintf(buff,"A4GL_dynarr_extent(&%s,%d);",$<str>3,atoi($<str>5));
        $<ptr>$=A4GL_new_expr(buff);
}
;



op_extend_d: {strcpy($<str>$,"-1");} | dtime_val TO dtime_val
	{sprintf($<str>$,"%d",atoi($<str>1)*16+atoi($<str>3));}
;

op_extend_i: interval_qual
;

function_call_expr:
	function_callb
	| GET_FLDBUF OPEN_BRACKET field_name_list_as_struct CLOSE_BRACKET {
		add_feature("ET_EXPR_GET_FLDBUF");
		if (!isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
   			a4gl_yyerror("get_fldbuf can only be used in an input or construct");
   			YYERROR;
		}
		sprintf($<str>$,"{int _retvars;\n_retvars=A4GL_fgl_getfldbuf(_sio_%d,_inp_io_type,%s,0,0);\nif (_retvars != 1 ) {A4GLSQL_set_status(-3001,0);A4GL_chk_err(%d,\"%s\");}\n}\n",get_sio_id("ALL"),
		field_name_list_as_char($<field_list>3), lastlineno,infilename); 
		$<ptr>$=A4GL_new_expr($<str>$);	

	} 
	| FIELDTOWIDGET OPEN_BRACKET field_name_as_struct CLOSE_BRACKET {sprintf($<str>$,"A4GL_push_int(A4GL_fgl_fieldnametoid(\"\",%s));",field_name_as_char($<field_entry>3)); $<ptr>$=A4GL_new_expr($<str>$); }
	| ID_TO_INT OPEN_BRACKET field_name_as_struct CLOSE_BRACKET {
		sprintf($<str>$,"A4GL_push_int(A4GL_fgl_fieldnametoid(\"\",%s));",field_name_as_char($<field_entry>3)); $<ptr>$=A4GL_new_expr($<str>$); 
		ADDMAP("Get Field",field_name_as_char($<field_entry>3));
	}

	| INFIELD OPEN_BRACKET field_name_list_or_char_as_struct CLOSE_BRACKET {
		add_feature("ET_EXPR_INFIELD");
		/* Informix allows this outside of a input/construct... */
		if (isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
			sprintf($<str>$,"A4GL_push_int(A4GL_fgl_infield(_sio_%d,_inp_io_type,%s,0,0));",get_sio_id("ALL"),field_name_list_as_char($<field_list>3)); 
		} else {
			sprintf($<str>$,"A4GL_push_int(A4GL_fgl_infield(0,0,%s,0,0));",field_name_list_as_char($<field_list>3)); 
		}
		$<ptr>$=A4GL_new_expr($<str>$);
	}
	| FIELD_TOUCHED OPEN_BRACKET field_name_list_as_struct CLOSE_BRACKET 
		{ 
		add_feature("ET_EXPR_FIELD_TOUCHED");
			if (!isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
   			a4gl_yyerror("field_touched can only be used in an input or construct");
   			YYERROR;
		}
		sprintf($<str>$,"A4GL_push_int(A4GL_fgl_fieldtouched(_sio_%d,_inp_io_type,%s,0,0));",get_sio_id("ALL"),field_name_list_as_char($<field_list>3)); 
		$<ptr>$=A4GL_new_expr($<str>$);
	}
	| NOT_FIELD_TOUCHED OPEN_BRACKET field_name_list_as_struct CLOSE_BRACKET 
		{ 
		add_feature("ET_EXPR_NOT_FIELD_TOUCHED");
		if (!isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
   			a4gl_yyerror("field_touched can only be used in an input or construct");
   			YYERROR;
		}
		sprintf($<str>$,"A4GL_push_int(!A4GL_fgl_fieldtouched(_sio_%d,_inp_io_type,%s,0,0));",get_sio_id("ALL"),field_name_list_as_char($<field_list>3)); 
		$<ptr>$=A4GL_new_expr($<str>$);
	}
	| builtin_funcs
	| function_call_expr2 { $<ptr>$=$<ptr>1;}
;

builtin_funcs : UPSHIFT OPEN_BRACKET fgl_expr_c CLOSE_BRACKET { 
			add_feature("ET_EXPR_UPSHIFT");
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_UPSHIFT);
	}
	|	DOWNSHIFT OPEN_BRACKET fgl_expr_c CLOSE_BRACKET { 
			add_feature("ET_EXPR_DOWNSHIFT");
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_DOWNSHIFT);
	}
	| 	ASCII fgl_expr_c  { 
			add_feature("ET_EXPR_ASCII");
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_ASCII);
	}
	| 	EXTEND extend_parameters { 
			add_feature("ET_EXPR_EXTEND");
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_EXTEND);
	}
	;



pdf_expr : fgl_expr_c KW_POINTS  {
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_POINTS);
	}
		|  fgl_expr_c  MM     {
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_MM);
	}
		|  fgl_expr_c INCHES     {
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_INCHES);
	}
	;



builtin_expr : curr_v_clause {
                sprintf($<str>$,"A4GL_push_current(%s);",$<str>1);
		$<ptr>$=A4GL_new_expr($<str>$);
          	}
       | KW_DATE  { 
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_DATE_EXPR);
	}
       | TIME  { 
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_TIME_EXPR);
	}

;



interval_func_params :
	CHAR_VALUE {
		strcpy($<str>$,$<str>1);
	}
	|  numeric_time_interval {
		strcpy($<str>$,$<str>1);
	}
	;

numeric_time_interval:
		MINUS numeric_time_interval {sprintf($<str>$,"-%s",$<str>2);}
		| numeric_time_unit_big	{sprintf($<str>$,"\"%s\"",$<str>1);}
		| numeric_time_unit_small	{sprintf($<str>$,"\"%s\"",$<str>1);}
	;

numeric_time_unit_small : 
		INT_VALUE INT_VALUE 			{sprintf($<str>$,"%s %s",$<str>1,$<str>2);}		/* DD HH */
		| INT_VALUE INT_VALUE COLON INT_VALUE 	{sprintf($<str>$,"%s %s:%s",$<str>1,$<str>2,$<str>4);}		/* DD HH:MM */
		| INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE 	 {sprintf($<str>$,"%s %s:%s:%s",$<str>1,$<str>2,$<str>4,$<str>6);} /* DD HH:MM:SS*/
		| INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE	{sprintf($<str>$,"%s %s:%s:%s",$<str>1,$<str>2,$<str>4,$<str>6);} /* DD HH MM SS.FFFF*/

		| INT_VALUE COLON INT_VALUE 			{sprintf($<str>$,"%s:%s",$<str>1,$<str>3);} /* HH MM */
		| INT_VALUE COLON INT_VALUE COLON INT_VALUE 	{sprintf($<str>$,"%s:%s:%s",$<str>1,$<str>3,$<str>5);} /* HH MM SS*/
		| INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE	{sprintf($<str>$,"%s:%s:%s",$<str>1,$<str>3,$<str>5);} /* HH MM SS.FFFF*/

		| INT_VALUE COLON NUMBER_VALUE			{sprintf($<str>$,"%s:%s",$<str>1,$<str>3);}	/* MM SS.FFFF*/
		| NUMBER_VALUE					{sprintf($<str>$,"%s",$<str>1);}		/* SS.FFFF*/
		| DOT INT_VALUE {sprintf($<str>$,"0.%s",$<str>2);}
	;

numeric_time_unit_big:
		INT_VALUE
		| INT_VALUE MINUS INT_VALUE 
			{sprintf($<str>$,"%s-%s",$<str>1,$<str>3);}
	;


field_name_list_as_struct : field_name_as_struct {
				$<field_list>$=new_field_list();
				$<field_list>$=append_field_to_list($<field_list>$,$<field_entry>1);
			} |
		field_name_list_as_struct KW_COMMA field_name_as_struct {
				$<field_list>$=append_field_to_list($<field_list>1,$<field_entry>3);
		}
	;

field_name_list_or_char_as_struct : field_name_or_char_as_struct {
				$<field_list>$=new_field_list();
				$<field_list>$=append_field_to_list($<field_list>$,$<field_entry>1);
			} |
		field_name_list_or_char_as_struct KW_COMMA field_name_or_char_as_struct {
				$<field_list>$=append_field_to_list($<field_list>1,$<field_entry>3);
		}
	;



curr_v_clause : KW_CURRENT  cur_v_part 
{strcpy($<str>$,$<str>2);}
;


cur_v_part: {strcpy($<str>$,"1,10");}
| s_curr_v TO s_curr_v
{sprintf($<str>$," %s ,%s",$<str>1,$<str>3);}
;

s_curr_v: YEAR {strcpy($<str>$,"1");} | MONTH  {strcpy($<str>$,"2");}| DAY  {strcpy($<str>$,"3");}| HOUR  {strcpy($<str>$,"4");}| MINUTE  {strcpy($<str>$,"5");}| SECOND  {strcpy($<str>$,"6");}| 
FRACTION {
sprintf($<str>$,"%d",6+2);
}
| FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
sprintf($<str>$,"%d",atoi($<str>3)+6);
}
;



opt_cw_func_call_args : opt_func_call_args {$<ptr_list>$=$<ptr_list>1;} |
	OPEN_SQUARE opt_func_call_args CLOSE_SQUARE { $<ptr_list>$=$<ptr_list>2;}
;

/* ============================ expr.rule =========================== */
