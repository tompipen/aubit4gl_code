/*
=====================================================================
                        Source: expr.rule
=====================================================================
*/

fgl_expr_c :
 	boolean_expr
	| function_call_expr
	| fgl_expr_c KW_AND fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_AND,0); }
	| fgl_expr_c KW_OR fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_OR,0); }
	| fgl_expr_c KW_SPACES 			{ 
			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_SPACES);
			add_feature("ET_EXPR_SPACES"); 
	}
	| fgl_expr_c CONCAT_PIPES fgl_expr_c 	{ 
			$<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_CONCAT,0);
	}
	| report_only_expr
	| builtin_expr
	| pdf_expr
	| literal_expr 
	| variable_entry {$<ptr>$=$<ptr>1;}
	| KW_MINUS fgl_expr_c %prec UMINUS	{ 
		$<ptr>$=A4GL_new_expr_neg($<ptr>2); 
	}
	| KW_PLUS fgl_expr_c 			{ $<ptr>$=$<ptr>2; }
  	| fgl_expr_c MATCHES fgl_expr_c expr_escape {
		$<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_MATCHES,$<ptr>4);
		add_feature("ET_EXPR_MATCHES");
 	}
 	| fgl_expr_c NOT_MATCHES fgl_expr_c expr_escape {
		$<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_NOT_MATCHES,$<ptr>4);
		add_feature("ET_EXPR_NOT_MATCHES");
	}
 	| fgl_expr_c LIKE fgl_expr_c expr_escape {
		$<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_LIKE,0);
	}
	| fgl_expr_c NOT_LIKE fgl_expr_c expr_escape {
		$<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_NOT_LIKE,$<ptr>4);
	}
  	| fgl_expr_c MATCHES fgl_expr_c  {
		$<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_MATCHES,0);
		add_feature("ET_EXPR_MATCHES");
 	}
 	| fgl_expr_c NOT_MATCHES fgl_expr_c  { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_NOT_MATCHES,0); add_feature("ET_EXPR_NOT_MATCHES"); }
 	| fgl_expr_c LIKE fgl_expr_c  { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_LIKE,0); }
	| fgl_expr_c NOT_LIKE fgl_expr_c  { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_NOT_LIKE,0); }
	| fgl_expr_c KW_USING fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_USING,0); }
 	| fgl_expr_c KW_PLUS fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_ADD,0); }
	| fgl_expr_c KW_MINUS fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_SUB,0); }
	| fgl_expr_c KW_MULTIPLY fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_MULT,0); }
	| fgl_expr_c KW_DIVIDE  fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_DIV,0); }
	| fgl_expr_c KW_MOD fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_MOD,0); }
	| fgl_expr_c KW_POWER fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_POWER,0); }
	| fgl_expr_c KW_CLIPPED { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_CLIP); }
        | fgl_expr_c IS_NULL { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_ISNULL); }
        | fgl_expr_c IS_NOT_NULL { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_ISNOTNULL); }
	| fgl_expr_c EQUAL           fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_EQUAL,0); }
	| fgl_expr_c LESS_THAN       fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_LESS_THAN,0); }
	| fgl_expr_c GREATER_THAN    fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_GREATER_THAN,0); }
	| fgl_expr_c NOT_EQUAL       fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_NOT_EQUAL,0); }
	| fgl_expr_c LESS_THAN_EQ    fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_LESS_THAN_EQ,0); }
	| fgl_expr_c GREATER_THAN_EQ fgl_expr_c { $<ptr>$=A4GL_new_op_expr($<ptr>1,$<ptr>3,ET_EXPR_OP_GREATER_THAN_EQ,0); }
	| fgl_expr_c UNITS_YEAR { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_YEAR); }
	| fgl_expr_c UNITS_MONTH { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_MONTH); }
	| fgl_expr_c UNITS_DAY { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_DAY); }
	| fgl_expr_c UNITS_HOUR { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_HOUR); }
	| fgl_expr_c UNITS_MINUTE { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_MINUTE); }
	| fgl_expr_c UNITS_SECOND { $<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_OP_SECOND); }
 	| fgl_expr_c KW_IN OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
		add_feature("ET_EXPR_IN_SELECT");
		$<ptr>$=A4GL_expr_in_sq($<ptr>1,1,$<sql_string>4,ibind,ibindcnt);
	}
 	| fgl_expr_c NOT_IN OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
		add_feature("ET_EXPR_NOT_IN_SELECT");
		add_feature("ET_EXPR_IN_SELECT");
		$<ptr>$=A4GL_expr_in_sq($<ptr>1,0,$<sql_string>4,ibind,ibindcnt);
	}
 	| fgl_expr_c KW_IN OPEN_BRACKET inexpr_list CLOSE_BRACKET {
		$<ptr>$=A4GL_expr_in($<ptr>1,1,$<ptr_list>4);
		add_feature("ET_EXPR_IN");
	}
	| fgl_expr_c NOT_IN OPEN_BRACKET inexpr_list CLOSE_BRACKET {
		$<ptr>$=A4GL_expr_in($<ptr>1,0,$<ptr_list>4);
		add_feature("ET_EXPR_NOT_IN");
	}
;



expr_escape : KW_ESCAPE CHAR_VALUE { 
	$<ptr>$=A4GL_new_literal_string(A4GL_strip_quotes($<str>2));
}

;



op_fgl_expr_ret_list_v2: {$<ptr_list>$=0;} 
	| fgl_expr_ret_list { $<ptr_list>$=$<ptr_list>1; }
;


fgl_expr_ret : fgl_expr_c 
	| KW_NULL {$<ptr>$=A4GL_new_expr_simple(ET_EXPR_NULL);}
;

fgl_expr_ret_list 	: fgl_expr_ret { $<ptr_list>$=A4GL_new_ptr_list($<ptr>1); }
		| 	fgl_expr_ret_list KW_COMMA fgl_expr_ret { $<ptr_list>$=A4GL_new_append_ptr_list($<ptr_list>1,$<ptr>3); }
;


fgl_expr_list_ptr: fgl_expr_c { 
			$<ptr_list>$=A4GL_new_ptr_list($<ptr>1);
			}
		| 	fgl_expr_list_ptr KW_COMMA fgl_expr_c { $<ptr_list>$=A4GL_new_append_ptr_list($<ptr_list>1,$<ptr>3); }
;

fgl_expr_concat : fgl_expr_list_ptr 
;

fgl_expr_x:  fgl_expr_c {
	A4GL_debug("Print expr (2)");
	print_expr($<ptr>1);
}
;



/****************************************************************/

boolean_expr:
	KW_NOT fgl_expr_c {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_NOT);
	}
	| KW_TRUE  
	{
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_TRUE);
	}
	| KW_FALSE 
	{
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_FALSE);
	}
	| OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  { $<ptr>$=$<ptr>2; }
	| EXISTS OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
		add_feature("ET_EXPR_EXISTS");
		$<ptr>$=A4GL_expr_exists_sq(1,$<sql_string>3,ibind,ibindcnt);
	}
	| NOT_EXISTS OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET {
		add_feature("ET_EXPR_NOT_EXISTS");
		$<ptr>$=A4GL_expr_exists_sq(0,$<sql_string>3,ibind,ibindcnt);
	}
;	



literal_expr: 
	CHAR_VALUE  {
		if (strcmp($<str>1,"\"\"")==0) {
			$<ptr>$=A4GL_new_literal_empty_str ();
		} else {
			$<ptr>$=A4GL_new_literal_string(A4GL_strip_quotes($<str>1));
		}
	}
	| real_number {
		$<ptr>$=A4GL_new_literal_double_str($<str>1);
	}
	| INT_VALUE {
		$<ptr>$=A4GL_new_literal_long_str($<str>1);
	} 
;


/*
variable_entry_2 :
	variable 
	| variable THRU variable {
		sprintf($<str>$,"%s\n%s",$<str>1,$<str>3);
	}
;
*/

variable_entry : 
	variable {
			 $<ptr>$=A4GL_generate_variable_expr ($<str>1); 
		}
	| variable OPEN_BRACKET opt_func_call_args CLOSE_BRACKET  {
		char *p;
		p=strrchr($<str>1,'.');
		if (!p) {
   			a4gl_yyerror("Not a member function");
   			YYERROR;
			$<ptr>$=0;
		}
		*p=0;
		p++;
		$<ptr>$=A4GL_new_expr_member_fcall($<str>1,p,$<ptr_list>3,infilename,lastlineno); 
	}
	| variable THRU variable {
		char buff[2560];
		sprintf(buff,"%s\n%s",$<str>1,$<str>3);
		 $<ptr>$=A4GL_generate_variable_expr (buff); 
	}
;



report_only_expr:
	COLUMN fgl_expr_c { 
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_COLUMN); 
	}
	| COLUMNS fgl_expr_c {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_COLUMN);
	}
	| rep_agg  {
   		if (!isin_command("REPORT")) {
   			a4gl_yyerror("This can only be done in a report!");
   			YYERROR;
		} 
		insql=0;
		$<ptr>$=$<ptr>1;
	}  
	| KW_GROUP {insql=1;set_ingroup();} rep_agg  {
      		if (!isin_command("REPORT")) {
        		a4gl_yyerror("This can only be done in a report!");YYERROR;
      		} 
		insql=0; 
		$<ptr>$=$<ptr>3;
      	}


;


inexpr_list : fgl_expr_c  {
			$<ptr_list>$=A4GL_new_ptr_list($<ptr>1);
		}
	| inexpr_list KW_COMMA fgl_expr_c {
			$<ptr_list>$=A4GL_new_append_ptr_list($<ptr_list>1,$<ptr>3);
	}
;





op_extend_di: {$<integer_val>$=-1;} | dtime_val KW_TO dtime_val
	{$<integer_val>$=atoi($<str>1)*16+atoi($<str>3);}
;


op_extend_ii: interval_qual_i { $<integer_val>$=$<integer_val>1;}
;

function_call_expr:
	KW_DATE OPEN_BRACKET fgl_expr_c CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_DATE_FUNC);
	}
	| TIME OPEN_BRACKET fgl_expr_c CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_TIME_FUNC);
	}
	| MONTH OPEN_BRACKET fgl_expr_c CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_MONTH_FUNC);
	} 
	| DAY OPEN_BRACKET  fgl_expr_c  CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_DAY_FUNC);
	} 
	| YEAR OPEN_BRACKET  fgl_expr_c  CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_YEAR_FUNC);
	} 
	| INTERVAL OPEN_BRACKET interval_func_params CLOSE_BRACKET op_extend_ii {
		$<ptr>$=A4GL_new_interval_expr($<str>3,$<integer_val>5);
	}



	| DATETIME OPEN_BRACKET CHAR_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"%s",$<str>3);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>5);
	}
	| DATETIME OPEN_BRACKET INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s\"",$<str>3);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>5);
	}
	| DATETIME OPEN_BRACKET NUMBER_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s\"",$<str>3);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>5);
	}
	| DATETIME OPEN_BRACKET INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s:%s\"",$<str>3,$<str>5);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>7);
	}
	| DATETIME OPEN_BRACKET INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s:%s\"",$<str>3,$<str>5);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>7);
	}
	| DATETIME OPEN_BRACKET INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s:%s:%s\"",$<str>3,$<str>5,$<str>7);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>9);
	}
	| DATETIME OPEN_BRACKET INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s:%s:%s\"",$<str>3,$<str>5,$<str>7);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>9);
	}
	| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s:%s\"",$<str>3,$<str>4);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>6);
	}
	| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s %s:%s\"",$<str>3,$<str>4,$<str>6);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>8);
	}
	| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s %s:%s:%s\"",$<str>3,$<str>4,$<str>6,$<str>8);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>10);
	}
	| DATETIME OPEN_BRACKET INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s %s:%s:%s\"",$<str>3,$<str>4,$<str>6,$<str>8);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>10);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s\"",$<str>3,$<str>5);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>7);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE KW_MINUS INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s-%s\"",$<str>3,$<str>5,$<str>7);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>9);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE  INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s %s\"",$<str>3,$<str>5,$<str>6);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>8);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE KW_MINUS INT_VALUE INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s-%s %s\"",$<str>3,$<str>5,$<str>7,$<str>8);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>10);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE KW_MINUS INT_VALUE INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s-%s %s:%s\"",$<str>3,$<str>5,$<str>7,$<str>8,$<str>10);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>12);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE KW_MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s-%s %s:%s:%s\"",$<str>3,$<str>5,$<str>7,$<str>8,$<str>10,$<str>12);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>14);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE KW_MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s-%s %s:%s:%s\"",$<str>3,$<str>5,$<str>7,$<str>8,$<str>10,$<str>12);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>14);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s %s:%s\"",$<str>3,$<str>5,$<str>6,$<str>8);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>10);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s %s:%s:%s\"",$<str>3,$<str>5,$<str>6,$<str>8,$<str>10);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>12);
	}
	| DATETIME OPEN_BRACKET INT_VALUE KW_MINUS INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE CLOSE_BRACKET op_extend_di {
		char buff[256];
		sprintf(buff,"\"%s-%s %s:%s:%s\"",$<str>3,$<str>5,$<str>6,$<str>8,$<str>10);
		$<ptr>$=A4GL_new_datetime_expr(buff,$<integer_val>12);
	}
	| FGL_SIZEOF OPEN_BRACKET variable CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_string($<str>3,ET_EXPR_FGL_SIZEOF);
	}
	| FGL_ADDRESSOF OPEN_BRACKET variable CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_string($<str>3,ET_EXPR_FGL_ADDRESSOF);
	}
	| FGL_ISDYNARR_ALLOCATED OPEN_BRACKET variable CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple_string($<str>3,ET_EXPR_FGL_ISDYNARR_ALLOCATED);
	}
	| FGL_DYNARR_EXTENTSIZE OPEN_BRACKET variable KW_COMMA INT_VALUE CLOSE_BRACKET { 
			$<ptr>$=A4GL_new_expr_simple(ET_EXPR_FGL_DYNARR_EXTENTSIZE);
			$<ptr>$->u_data.expr_dynarr_extent=malloc(sizeof(struct expr_dynarr_extent));
			$<ptr>$->u_data.expr_dynarr_extent->var=strdup($<str>3);
			$<ptr>$->u_data.expr_dynarr_extent->n=atoi($<str>5);
	}
	| FIELDTOWIDGET OPEN_BRACKET field_name_as_struct CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_FIELDTOWIDGET);
		$<ptr>$->u_data.expr_field_entry=$<field_entry>3;
	}
	| ID_TO_INT OPEN_BRACKET field_name_as_struct CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_ID_TO_INT);
		$<ptr>$->u_data.expr_field_entry=$<field_entry>3;
	}
	| INFIELD OPEN_BRACKET field_name_list_or_char_as_struct CLOSE_BRACKET {

		add_feature("ET_EXPR_INFIELD");

		/* Informix allows this outside of a input/construct... */

		if (isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
			$<ptr>$=A4GL_new_expr_infield(get_sio_ids("ALL"),$<field_list>3,infilename,lastlineno);
		} else {
			$<ptr>$=A4GL_new_expr_infield(-1,$<field_list>3,infilename,lastlineno);
		}
	}
	| FIELD_TOUCHED OPEN_BRACKET field_name_list_as_struct CLOSE_BRACKET 
		{ 
		add_feature("ET_EXPR_FIELD_TOUCHED");
			if (!isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
   			a4gl_yyerror("field_touched can only be used in an input or construct");
   			YYERROR;
		}

			$<ptr>$=A4GL_new_expr_field_touched(get_sio_ids("ALL"),$<field_list>3,infilename,lastlineno);

	}
	| NOT_FIELD_TOUCHED OPEN_BRACKET field_name_list_as_struct CLOSE_BRACKET 
		{ 
		add_feature("ET_EXPR_NOT_FIELD_TOUCHED");
		if (!isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
   			a4gl_yyerror("field_touched can only be used in an input or construct");
   			YYERROR;
		}
			$<ptr>$=A4GL_new_expr_not_field_touched(get_sio_ids("ALL"),$<field_list>3,infilename,lastlineno);
	}
	| UPSHIFT OPEN_BRACKET fgl_expr_c CLOSE_BRACKET { 
			add_feature("ET_EXPR_UPSHIFT");
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_UPSHIFT);
	}
	|	DOWNSHIFT OPEN_BRACKET fgl_expr_c CLOSE_BRACKET { 
			add_feature("ET_EXPR_DOWNSHIFT");
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>3,ET_EXPR_DOWNSHIFT);
	}
	| 	KW_ASCII fgl_expr_c  { 
			add_feature("ET_EXPR_ASCII");
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>2,ET_EXPR_ASCII);
	}
	| 	EXTEND OPEN_BRACKET fgl_expr_c op_datetime_qual_i CLOSE_BRACKET {
 			$<ptr>$=A4GL_new_expr_extend($<ptr>3,$<integer_val>4);
	}

/*************************************************************************/
/*                                                                       */
/* These can potentially return more than one value...                   */
/*                                                                       */
/*************************************************************************/
	| UI_INTERFACE_DOT identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		char buff[256];
		sprintf(buff,"aclfgl_ui_interface_%s",downshift($<str>2));
		if (!A4GL_is_internal_class_function("ui_interface",$<str>2)) {
			char buff[256];
			sprintf(buff,"%s is not a member of the UI.Interface class",$<str>2);
   			a4gl_yyerror(buff);
   			YYERROR;
		}
		$<ptr>$=A4GL_new_expr_fcall(buff,$<ptr_list>4,infilename,lastlineno);
	}
	| UI_WINDOW_DOT identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		char buff[256];
		sprintf(buff,"aclfgl_ui_window_%s",downshift($<str>2));
		if (!A4GL_is_internal_class_function("ui_window",$<str>2)) {
			char buff[256];
			sprintf(buff,"%s is not a member of the UI.Window class",$<str>2);
   			a4gl_yyerror(buff);
   			YYERROR;
		}
		$<ptr>$=A4GL_new_expr_fcall(buff,$<ptr_list>4,infilename,lastlineno);
	}
	| UI_DOT_FORM_DOT identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		char buff[256];
		
		sprintf(buff,"aclfgl_ui_form_%s",downshift($<str>2));
		if (!A4GL_is_internal_class_function("ui_form",$<str>2)) {
			char buff[256];
			sprintf(buff,"%s is not a member of the UI.Form class",$<str>2);
   			a4gl_yyerror(buff);
   			YYERROR;
		}
		$<ptr>$=A4GL_new_expr_fcall(buff,$<ptr_list>4,infilename,lastlineno);
	}
 	| identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		ADDMAP("Call",$<str>1);
		map_call($<str>1);
		$<ptr>$=A4GL_new_expr_fcall($<str>1,$<ptr_list>3,infilename,lastlineno);
		}
   	| KW_CHANNEL_READ OPEN_BRACKET char_or_var KW_COMMA OPEN_SQUARE ebind_var_list CLOSE_SQUARE CLOSE_BRACKET {
		start_bind('i',$<str>3);
                //$<ptr>$=get_call_shared_bound_expr("\"channel\"","\"read\"");

		$<ptr>$=A4GL_new_expr_bound_fcall("\"channel\"", "\"read\"",infilename,lastlineno,ibindcnt,ibind,ibindcnt*sizeof(struct binding_comp),
			ebindcnt,ebind,ebindcnt*sizeof(struct binding_comp));
        }
   	| KW_CHANNEL_READ OPEN_BRACKET char_or_var KW_COMMA ebind_var_list CLOSE_BRACKET  {
		start_bind('i',$<str>3);
		$<ptr>$=A4GL_new_expr_bound_fcall("\"channel\"", "\"read\"",infilename,lastlineno,ibindcnt,ibind,ibindcnt*sizeof(struct binding_comp),
			ebindcnt,ebind,ebindcnt*sizeof(struct binding_comp));

                //$<ptr>$=get_call_shared_bound_expr("\"channel\"","\"read\"");
        }

   	| identifier DOUBLE_COLON identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_shared_fcall($<str>1,$<str>3,$<ptr_list>5,infilename,lastlineno); 
	}

   	| SHARED identifier KW_IN identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_shared_fcall($<str>2,$<str>4,$<ptr_list>6,infilename,lastlineno); 
	}

/*
   	| identifier USE_MEMBER_FUNCTION identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET  {
		$<ptr>$=A4GL_new_expr_member_fcall($<str>1,$<str>3,$<ptr_list>5,infilename,lastlineno); 
        }
*/

/*
   	| MEMBER_FUNCTION_OPEN_BRACKET opt_func_call_args CLOSE_BRACKET  {
		$<ptr>$=A4GL_new_expr_member_fcall(get_idents(0),get_idents(1),$<ptr_list>2,infilename,lastlineno); 
        }
*/
	| GET_FLDBUF OPEN_BRACKET field_name_list_as_struct CLOSE_BRACKET {
		add_feature("ET_EXPR_GET_FLDBUF");
		if (!isin_command("INPUT")&&!isin_command("CONSTRUCT")) { 
   			a4gl_yyerror("get_fldbuf can only be used in an input or construct");
   			YYERROR;
		}
		if (isin_command("INPUT")) {
			$<ptr>$=A4GL_new_expr_get_fldbuf(get_sio_ids("INPUT"),$<field_list>3,infilename,lastlineno);
		} 
		if (isin_command("CONSTRUCT")) {
			
			$<ptr>$=A4GL_new_expr_get_fldbuf(get_sio_ids("CONSTRUCT"),$<field_list>3,infilename,lastlineno);
		} 

	} 
        | EXTERNAL remote_host_name COLON remote_func_name OPEN_SQUARE valid_port CLOSE_SQUARE OPEN_BRACKET opt_func_call_args CLOSE_BRACKET opt_without_waiting {
                        char fname[64];
                char buff[256];
                        sprintf(buff,"%s:%s(%p)",$<str>2,$<str>4,$<str>6);
                        ADDMAP("External",buff);

                        if (strcmp($<str>11,"WITHOUT WAITING")==0) {
                                strcpy(fname,"1,");
                                strcat(fname,$<str>4);
                        } else {
                                strcpy(fname,"0,");
                                strcat(fname,$<str>4);
                        }

                        $<ptr>$=A4GL_new_expr_call_external($<str>2,$<str>4,$<str>6,$<ptr_list>9,$<integer_val>11,infilename,lastlineno);

                }


;



pdf_expr : fgl_expr_c KW_POINTS  {
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_POINTS);
	}
		|  fgl_expr_c  MM     {
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_MM);
	}
		|  fgl_expr_c INCHES     {
 			$<ptr>$=A4GL_new_expr_simple_expr($<ptr>1,ET_EXPR_INCHES);
	}
	;



builtin_expr : curr_v_clause {
		$<ptr>$=$<ptr>1;
          	}
       | KW_DATE  { 
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_DATE_EXPR);
	}
       | TIME  { 
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_TIME_EXPR);
	}
	| FGL_MODULE {
		$<ptr>$=A4GL_new_expr_simple(ET_EXPR_MODULE_FUNC);
	}

;



interval_func_params :
	CHAR_VALUE {
		strcpy($<str>$,$<str>1);
	}
	|  numeric_time_interval {
		strcpy($<str>$,$<str>1);
	}
	;

numeric_time_interval:
		KW_MINUS numeric_time_interval {sprintf($<str>$,"-%s",$<str>2);}
		| numeric_time_unit_big	{sprintf($<str>$,"\"%s\"",$<str>1);}
		| numeric_time_unit_small	{sprintf($<str>$,"\"%s\"",$<str>1);}
	;

numeric_time_unit_small : 
		INT_VALUE INT_VALUE 			{sprintf($<str>$,"%s %s",$<str>1,$<str>2);}		/* DD HH */
		| INT_VALUE INT_VALUE COLON INT_VALUE 	{sprintf($<str>$,"%s %s:%s",$<str>1,$<str>2,$<str>4);}		/* DD HH:MM */
		| INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE 	 {sprintf($<str>$,"%s %s:%s:%s",$<str>1,$<str>2,$<str>4,$<str>6);} /* DD HH:MM:SS*/
		| INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE	{sprintf($<str>$,"%s %s:%s:%s",$<str>1,$<str>2,$<str>4,$<str>6);} /* DD HH MM SS.FFFF*/
		| INT_VALUE COLON INT_VALUE 			{sprintf($<str>$,"%s:%s",$<str>1,$<str>3);} /* HH MM */
		| INT_VALUE COLON INT_VALUE COLON INT_VALUE 	{sprintf($<str>$,"%s:%s:%s",$<str>1,$<str>3,$<str>5);} /* HH MM SS*/
		| INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE	{sprintf($<str>$,"%s:%s:%s",$<str>1,$<str>3,$<str>5);} /* HH MM SS.FFFF*/
		| INT_VALUE COLON NUMBER_VALUE			{sprintf($<str>$,"%s:%s",$<str>1,$<str>3);}	/* MM SS.FFFF*/
		| NUMBER_VALUE					{sprintf($<str>$,"%s",$<str>1);}		/* SS.FFFF*/
		| KW_DOT INT_VALUE {sprintf($<str>$,"0.%s",$<str>2);}
	;

numeric_time_unit_big:
		INT_VALUE
		| INT_VALUE KW_MINUS INT_VALUE {
			sprintf($<str>$,"%s-%s",$<str>1,$<str>3);
		}
	;


field_name_list_as_struct : field_name_as_struct {
				$<field_list>$=new_field_list();
				$<field_list>$=append_field_to_list($<field_list>$,$<field_entry>1);
			} 
		| field_name_list_as_struct KW_COMMA field_name_as_struct {
				$<field_list>$=append_field_to_list($<field_list>1,$<field_entry>3);
		}
	;

field_name_list_or_char_as_struct : field_name_or_char_as_struct {
				$<field_list>$=new_field_list();
				$<field_list>$=append_field_to_list($<field_list>$,$<field_entry>1);
			} 
		| field_name_list_or_char_as_struct KW_COMMA field_name_or_char_as_struct {
				$<field_list>$=append_field_to_list($<field_list>1,$<field_entry>3);
		}
	;



curr_v_clause : KW_CURRENT { $<ptr>$=A4GL_new_expr_current(1, 10);}
	| KW_CURRENT s_curr_v KW_TO s_curr_v {$<ptr>$=A4GL_new_expr_current($<integer_val>2, $<integer_val>4);}
;

s_curr_v: YEAR 		{$<integer_val>$=1;} 
	| MONTH  	{$<integer_val>$=2;}
	| DAY  		{$<integer_val>$=3;}
	| HOUR  	{$<integer_val>$=4;}
	| MINUTE  	{$<integer_val>$=5;}
	| SECOND  	{$<integer_val>$=6;}
	| FRACTION 	{$<integer_val>$=6+2; }
	| FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET {$<integer_val>$=atoi($<str>3)+6;}
;



opt_cw_func_call_args : opt_func_call_args {$<ptr_list>$=$<ptr_list>1;} |
	OPEN_SQUARE opt_func_call_args CLOSE_SQUARE { $<ptr_list>$=$<ptr_list>2;}
;

/* ============================ expr.rule =========================== */
