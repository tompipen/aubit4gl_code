/*
=====================================================================
                        Source: call.rule
=====================================================================
*/


call_cmd	: FCALL call_ext {strcpy($<str>$,"CALL");}
;




call_ext: function_call_expr opt_return {
   		print_func_call_g($<ptr>1,$<binding_comp_list>2);
		start_bind('i',0);
	}
   | DIALOGKEYSETLABEL OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_fcall("fgl_dialog_setkeylabel",$<ptr_list>3,infilename,lastlineno);
   		print_func_call_g($<ptr>$,NULL);
		start_bind('i',0);
	}
   | DIALOGSETCURRLINE OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		$<ptr>$=A4GL_new_expr_fcall("fgl_dialog_setcurrline",$<ptr_list>3,infilename,lastlineno);
   		print_func_call_g($<ptr>$,NULL);
		start_bind('i',0);
	}
   | DIALOG_DOT NAMED OPEN_BRACKET opt_func_call_args CLOSE_BRACKET {
		char buff[256];
		sprintf(buff,"fgl_dialog_%s",downshift($<str>2));
		$<ptr>$=A4GL_new_expr_fcall(buff,$<ptr_list>4,infilename,lastlineno);
   		print_func_call_g($<ptr>$,NULL);
		start_bind('i',0);
	}
   | FORM_IS_COMPILED OPEN_BRACKET identifier KW_COMMA CHAR_VALUE KW_COMMA CHAR_VALUE CLOSE_BRACKET {
		print_form_is_compiled($<str>3,$<str>5,$<str>7);
	}
   | KW_CHANNEL_WRITE OPEN_BRACKET  fgl_expr_c KW_COMMA opt_cw_func_call_args CLOSE_BRACKET opt_return {
		struct expr_str_list *p1;
		p1=A4GL_new_prepend_ptr_list($<ptr_list>5,$<ptr>3);
		print_call_shared_g(p1, "\"channel\"","\"write\"",$<binding_comp_list>7);
		start_bind('i',0);
 	} 
	
   | pdf_functions
   | variable OPEN_BRACKET opt_func_call_args CLOSE_BRACKET  opt_return {
                char *p;
		struct expr_str *ptr;
                p=strrchr($<str>1,'.');
                if (!p) {
                        a4gl_yyerror("Not a member function");
                        YYERROR;
                        $<ptr>$=0;
                }
                *p=0;
                p++;
                ptr=A4GL_new_expr_member_fcall($<str>1,p,$<ptr_list>3,infilename,lastlineno);
   		print_func_call_g(ptr,$<binding_comp_list>5);
		start_bind('i',0);
        }

;






opt_return 	: {start_bind('i',0);$<binding_comp_list>$=copy_togenbind('i');} 
		| RETURNING ibind_var_list {$<binding_comp_list>$=copy_togenbind('i'); }
;



opt_without_waiting: {$<integer_val>$=0;} | WITHOUT_WAITING {$<integer_val>$=1;}
;


opt_func_call_args : { $<ptr_list>$=0; }
		|  func_expr_call_args { $<ptr_list>$=$<ptr_list>1; }
;

func_expr_call_args	: func_arg { $<ptr_list>$=A4GL_new_ptr_list($<ptr>1); }
	| func_expr_call_args KW_COMMA func_arg { $<ptr_list>$=A4GL_new_append_ptr_list($<ptr_list>1,$<ptr>3); }

;



func_arg :	fgl_expr_c  {$<ptr>$=$<ptr>1;}
	| KW_NULL 		{$<ptr>$=A4GL_new_expr_simple(ET_EXPR_NULL);}
;

remote_host_name : CHAR_VALUE | identifier { sprintf($<str>$,"\"%s\"",$<str>1); }
;

remote_func_name : identifier 			{ sprintf($<str>$,"\"%s\"",$<str>1); } 
		|  identifier KW_DOT identifier 	{ sprintf($<str>$,"\"%s.%s\"",$<str>1,$<str>3); }
;


/* ============================= call.rule ========================== */
