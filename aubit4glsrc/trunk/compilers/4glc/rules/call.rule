call_cmd	: FCALL call_ext {strcpy($<str>$,"CALL");}
;

call_ext :
    function_callb RETURNING variable { debug("print_expr (3)"); 
		print_expr($<ptr>1);
		print_pop_variable($<str>3);
	}
   | GET_FLDBUF OPEN_BRACKET fld_list CLOSE_BRACKET RETURNING  {
	print_getfldbuf($<str>3);
	}
ibind_var_list {
	print_returning();
}

   | FORM_IS_COMPILED OPEN_BRACKET identifier CLOSE_BRACKET {
	print_form_is_compiled($<str>3);
	}
   | INFIELD OPEN_BRACKET field_name CLOSE_BRACKET RETURNING variable 
   { 
	print_field_func('I',$<str>3,$<str>6);
   }
   | pdf_functions 
   | FIELD_TOUCHED OPEN_BRACKET field_name CLOSE_BRACKET RETURNING variable 
   { 
	print_field_func('T',$<str>3,$<str>6);
 }
   | identifier OPEN_BRACKET {
	new_counter();
   addmap("Call",$<str>1,curr_func,yylineno,infilename);
   } 
   opt_func_call_args 
   {
	debug("Got args");
   }
   CLOSE_BRACKET 
   {
	int a;
	dump_expr($<ptr>4);
	a=get_counter_val();
	drop_counter();
  	print_func_call($<str>1,$<ptr>4,a);
   }
   opt_return 
   {
	print_returning();
	strcpy($<str>$,$<str>5);
	}
   | SHARED char_or_var IN char_or_var OPEN_BRACKET {
	A4GLSQL_set_status(0);
	new_counter();
	}
opt_func_call_args {
   sprintf($<str>$,"%d",get_counter_val());drop_counter();
}
CLOSE_BRACKET opt_return {
	print_call_shared($<str>4,$<str>2,atoi($<str>8));
	print_returning();
	print_end_call_shared();
}
   | EXTERNAL remote_host_name COLON remote_func_name OPEN_SQUARE valid_port CLOSE_SQUARE OPEN_BRACKET
   {
   char buff[256];
   new_counter();
   sprintf(buff,"%s:%s(%d)",$<str>2,$<str>4,$<str>6);
   addmap("External",buff,curr_func,yylineno,infilename);
   } 
   opt_func_call_args 
   {
   sprintf($<str>$,"%d",get_counter_val());drop_counter();
   }
   CLOSE_BRACKET 
   {
	 debug("print_expr (6)");print_expr($<ptr>10);
   }
   opt_return_remote
   { int cnt;
	char fname[64];
	
   if (strcmp($<str>14,"WITHOUT WAITING")==0) {	
	strcpy(fname,"1,");
	strcat(fname,$<str>4);
   } else {
	strcpy(fname,"0,");
	strcat(fname,$<str>4);
   }
	
   print_call_external($<str>2,fname,$<str>6,atoi($<str>11));

   if (strcmp($<str>14,"WITHOUT WAITING")!=0) {	
	print_returning();
   }
   print_end_call_external();
  }
   
;

opt_return 	: {start_bind('i',0);strcpy($<str>$,"0");} | RETURNING ibind_var_list {strcpy($<str>$,$<str>2);
}
;

opt_return_remote 	: {start_bind('i',0);strcpy($<str>$,"0");} 
                  | RETURNING ibind_var_list {strcpy($<str>$,$<str>2);}
                  | WITHOUT_WAITING {strcpy($<str>$,"WITHOUT WAITING"); }
;


opt_func_call_args : 
		/*empty*/ {
			$<ptr>$=new_expr("");
		}
		| func_call_args  {
			$<ptr>$=$<ptr>1;
		}
;

func_call_args	: func_arg
		{
	$<ptr>$=$<ptr>1;
}
		| func_call_args COMMA func_arg {
		$<ptr>$=append_expr_expr($<ptr>1,$<ptr>3);
}

;

rcvd_variables	:	variable {
print_pop_variable($<str>1);
cnt=1;sprintf($<str>$,"%d",cnt);
}
		| rcvd_variables COMMA variable {
print_pop_variable($<str>1);
cnt++;sprintf($<str>$,"%d",cnt);
}
;

func_arg 	:	fgl_expr_c 
;

remote_host_name : CHAR_VALUE | identifier
{
sprintf($<str>$,"\"%s\"",$<str>1);
}
;

remote_func_name : identifier 
{
sprintf($<str>$,"\"%s\"",$<str>1);
}
;



