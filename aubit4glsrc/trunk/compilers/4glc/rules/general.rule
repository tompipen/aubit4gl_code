/*
=====================================================================
                        Source: general.rule
=====================================================================
*/

line_no		:
	KW_LAST KW_MINUS INT_VALUE {sprintf($<str>$,"%d",-1-(atoi($<str>3)));}
	| KW_LAST {strcpy($<str>$,"-1");}
	| KW_FIRST KW_PLUS INT_VALUE {sprintf ($<str>$,"%d",atoi($<str>3)+1);}
	| KW_FIRST {strcpy($<str>$,"1");}
	| INT_VALUE {strcpy($<str>$,$<str>1);}
	| variable {strcpy($<str>$,$<str>1);}
	| KW_OFF {strcpy($<str>$,"0");}
;

file_name	:	CHAR_VALUE | cvariable 
;

/*
a_number	:	fgl_expr_c;

coords_pl	:	a_number KW_COMMA a_number {
				struct expr_str_list *l;
				l=A4GL_new_ptr_list($<ptr>1);
				l=A4GL_new_append_ptr_list(l,A4GL_new_ptr_list($<ptr>2);
				$<ptr_list>$=l;
			}
;

display_coords_pl	:	coords_pl;
*/

field_name_as_struct	:	
		identifier { 
			$<field_entry>$=new_field_entry($<str>1,"1",1);
		}
		| INT_TO_ID OPEN_BRACKET identifier CLOSE_BRACKET { 
				char buff[256];
				sprintf(buff,"int_to_id(%s)",$<str>3);
				$<field_entry>$=new_field_entry(buff,"1",0); 
		}
		| identifier KW_DOT INT_TO_ID OPEN_BRACKET identifier CLOSE_BRACKET { 
				char buff[256];
				sprintf(buff,"int_to_id(%s.%s)",$<str>1,$<str>5); 
				$<field_entry>$=new_field_entry(buff,"1",0); 
		}
		| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE {
				$<field_entry>$=new_field_entry($<str>1,$<str>3,1);
		}
		| identifier KW_DOT KW_MULTIPLY {
				char buff[256];
				sprintf(buff,"%s.*",$<str>1);
				$<field_entry>$=new_field_entry(buff,"1",1);
				add_feature("SRECDOTSTAR");
		}
		| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE KW_DOT KW_MULTIPLY {
				char buff[256];
				sprintf(buff,"%s.*",$<str>1);
				$<field_entry>$=new_field_entry(buff,$<str>3,1);
				add_feature("SRECDOTSTAR");
		}
		| identifier KW_DOT identifier 	{
				char buff[256];
				sprintf(buff,"%s.%s",$<str>1,$<str>3);
				$<field_entry>$=new_field_entry(buff,"1",1);
		}
		| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE KW_DOT identifier {
				char buff[256];
				sprintf(buff,"%s.%s",$<str>1,$<str>6);
				$<field_entry>$=new_field_entry(buff,$<str>3,1);
		}
		| VARIABLE OPEN_BRACKET var_or_string CLOSE_BRACKET {
				$<field_entry>$=new_field_entry($<str>3,"1",0);
		}
		| VARIABLE OPEN_BRACKET var_or_string KW_COMMA arr_expr CLOSE_BRACKET {
				char buff[256];
				strcpy(buff,$<str>5);
				$<field_entry>$=new_field_entry($<str>3,buff,0);
		}
;

field_name_or_char_as_struct: field_name_as_struct {$<field_entry>$=$<field_entry>1;}
	| CHAR_VALUE { 
                 char buff[256];
                 sprintf(buff,"%s",$<str>1);
                 $<field_entry>$=new_field_entry(buff,"1",0);
	}
;

cursor_name	:	ident_or_var_sql {
				print_pushchar($<str>1);
				ADDMAP("Cursor",last_var);
			}
;

put_cursor_name	:	ident_or_var_sql {sprintf($<str>$,"%s",$<str>1);};

fetch_cursor_name	:	ident_or_var_sql {sprintf($<str>$,"%s",$<str>1);};

win_name	:	ident_or_var {sprintf($<str>$,"%s",$<str>1);
ADDMAP("Window",last_var);
}

;

open_win_name	:	ident_or_var {sprintf($<str>$,"%s",$<str>1);
ADDMAP("Open Window",last_var);
}
;

form_name	: ident_or_var {sprintf($<str>$,"%s",$<str>1);
ADDMAP("Form",last_var);
}
;

open_form_name	: ident_or_var {sprintf($<str>$,"%s",$<str>1);
			ADDMAP("Open Form",last_var);
			}
;

opt_help_no		:	{strcpy($<str>$,"0");} | KW_HELP INT_VALUE {strcpy($<str>$,$<str>2);};


identifier	:  NAMED  { 
			strcpy($<str>$,downshift($<str>1)) ;
}
;


ident_or_var	: ident_p2  {
			sprintf($<str>$,"%s",downshift($<str>1)) ;
			}  
;

ident_or_var_sql: ident_p2_sql  {
			sprintf($<str>$,"%s",downshift($<str>1)) ;
			}  
;


ident_p2 : NAMED {
	strcpy($<str>$,do_clobbering(clobber,downshift($<str>1))) ;
	strcpy(last_var,downshift($<str>1));
} | VARIABLE OPEN_BRACKET var_or_string CLOSE_BRACKET
	{
		if (strcmp(acl_getenv("A4GL_LEXTYPE"),"EC")==0) {
			char buff[256];
			strcpy(buff,$<str>3);
			if (buff[0]=='"') {
				sprintf($<str>$,"aclfgli_str_to_id(%s)",$<str>3);
			} else {

				sprintf($<str>$,"aclfgli_str_to_id(%s)",$<str>3);
			}
			sprintf(last_var,"->%s",$<str>3);
		} else {
			sprintf($<str>$,"aclfgli_str_to_id(%s)",$<str>3);
			sprintf(last_var,"->%s",$<str>3);
		}
	}
;



ident_p2_sql : NAMED {
	strcpy($<str>$,do_clobbering_sql(clobber,downshift($<str>1))) ;
	strcpy(last_var,downshift($<str>1));
} | VARIABLE OPEN_BRACKET var_or_string CLOSE_BRACKET
	{
		if (strcmp(acl_getenv("A4GL_LEXTYPE"),"EC")==0) {
			char buff[256];
			strcpy(buff,$<str>3);
			if (buff[0]=='"') {
				sprintf($<str>$,"aclfgli_str_to_id(%s)",$<str>3);
			} else {

				sprintf($<str>$,"aclfgli_str_to_id(%s)",$<str>3);
			}
			sprintf(last_var,"->%s",$<str>3);
		} else {
			sprintf($<str>$,"aclfgli_str_to_id(%s)",$<str>3);
			sprintf(last_var,"->%s",$<str>3);
		}
	}
;


var_or_string : var | CHAR_VALUE;

field_name2_as_struct	:	identifier {
					$<field_entry>$=new_field_entry($<str>1,"1",1); 
				}
				| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE {
					$<field_entry>$=new_field_entry($<str>1,$<str>3,1); 
				}
				| identifier KW_DOT KW_MULTIPLY {
					char buff[256];
					sprintf(buff,"%s.*",$<str>1);
					$<field_entry>$=new_field_entry(buff,"1",1); 
				}
				| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE KW_DOT KW_MULTIPLY {
					char buff[256];
					sprintf(buff,"%s.*",$<str>1);
					$<field_entry>$=new_field_entry(buff,$<str>3,1); 
				}
				| identifier KW_DOT identifier {
					char buff[256];
					sprintf(buff,"%s.%s",$<str>1,$<str>3);
					$<field_entry>$=new_field_entry(buff,"1",1); 
				}
				| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE KW_DOT identifier {
					char buff[256];
					sprintf(buff,"%s.%s",$<str>1,$<str>6);
					$<field_entry>$=new_field_entry(buff,$<str>3,1); 
				}
;

cvariable : variable {
int dtype;
A4GL_debug("Scanvar=%d",scan_variable($<str>1)&15);
dtype=scan_variable($<str>1)&15;
if (dtype!=DTYPE_CHAR && dtype!=DTYPE_VCHAR) {
a4gl_yyerror("Only a character variable can be used for this");
YYERROR;
}
};


conn_id : ident_or_var_sql;


real_number : NUMBER_VALUE | KW_DOT INT_VALUE {
		sprintf($<str>$,".%s",$<str>2);
};

char_or_var : CHAR_VALUE | variable {
		int dtype;
		dtype=scan_variable($<str>1)&15;
                if (dtype!=DTYPE_CHAR&&dtype!=DTYPE_VCHAR) {a4gl_yyerror("Variable must be of type charr..");YYERROR;}
}
;

opt_use : {strcpy($<str>$,"");} | USE_SESSION conn_id KW_FOR {
	print_use_session($<str>2);
	strcpy($<str>$,A4GL_get_undo_use());
}
;



/*
reserved_word :
	PASSWORD
	|CHECK
	|CLEAR
	|CLIPPED
	|CLOSE
	|CONSTANT
	|CONSTRUCT
	|COUNT
	|OPTION
	|CYAN
	|HEADER
	|DBA
	|DBYNAME
	|AUDIT
	|KWLINE
	|MODE
	|DEFAULT
	|DEFAULTS
	|DEFER
	|DELIMITER
	|DESC
	|DESCENDING
	|DIM
	|DISABLE
	|KWDOWN
	|DOWNSHIFT
	|DROP
	|FOREIGN
	|EXISTS
	|YEAR
	|MONTH
	|DAY
	|KW_SPACES
	|RESOURCE
	|COMMENT
	|DELETE
	|VALIDATE
	|KW_ESCAPE
	|UPSHIFT
	|AVERAGE
	|UNDERLINE
	|MENU
	|KW_DATE
;
*/


/* ============================ general.rule ====================== */
