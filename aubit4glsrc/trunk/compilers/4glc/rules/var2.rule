/*
=====================================================================
                        Source: var2.rule
=====================================================================
*/


var_ident :  var2_vu
{
	if (scan_variable(variable_usage_as_string($<var_usg>1,VAR_USG_ANY))!=-1) {
		char buff[1024];
		sprintf(buff,"%s",fgl_add_scope(variable_usage_as_string($<var_usg>1,VAR_USG_VARIABLE),0));
		print_push_variable(buff);
		strcpy($<str>$,"?");
	} else {
		strcpy($<str>$,variable_usage_as_string($<var_usg>1,VAR_USG_IDENT));
	}

}
;


var2_as_string : var2_vu {
		strcpy($<str>$,variable_usage_as_string($<var_usg>1,VAR_USG_ANY));
	}
;

var2_vu :
	DOLLAR  var3_vu {
		$<var_usg>$=$<var_usg>2;
	} | var3_vu {
		$<var_usg>$=$<var_usg>1;
	}
;



var3_vu:
	var4_vu
	| CHAR_VALUE DOT var4_vu
;

var4_vu:
	var4_item_vu
	| var4_vu DOT var4_item_vu {
		$<var_usg>$=append_variable_usage($<var_usg>1,$<var_usg>3);
	}
	| var4_vu DOT MULTIPLY {
		$<var_usg>$=new_variable_usage($<var_usg>1,"*",0);
	}
;


var4_item_vu:
        array_r_variable_or_ident_vu {
			$<var_usg>$=$<var_usg>1;
	} 
	| identifier { $<var_usg>$=new_variable_usage(0,$<str>1,0); }
;


/*

	| var3_vu DOT MULTIPLY {
		$<var_usg>$=new_variable_usage($<var_usg>1,$<str>3,0);
	}
	| var3_vu DOT array_r_varid_vu {
		$<var_usg>$=new_variable_usage($<var_usg>1,$<str>3,0);
	}
	| var3_vu DOT identifier {
		$<var_usg>$=new_variable_usage($<var_usg>1,$<str>3,0);
	}

	| CHAR_VALUE DOT var3_vu {
		char buff[2048];
		if (A4GL_escape_quote_owner()) {
			sprintf(buff,"\\\"%s\\\"", A4GL_strip_quotes ($<str>1));
		} else {
			sprintf(buff,"\"%s\"", A4GL_strip_quotes ($<str>1));
		}
		$<var_usg>$=new_variable_usage($<var_usg>3,buff,1);
	}
;
*/


var_ident_ibind_ss :  var2_as_string
{
	int sv_val;
	//printf("var_ident_ibind_ss : %s\n",$<str>1);
	sv_val=scan_variable($<str>1);

	if (strncmp($<str>1," a4gl_sub",9)==0) {
		// Its a substring of a variable
		sv_val=1;
	}

	if (sv_val!=-1&&(!system_var($<str>1)))
	{
		// Its a variable
		int z = 0,a = 0;
		//printf("add as bind\n");
		a=get_bind_cnt('i');
		z=add_bind('i',$<str>1);
		z-=a;
		$<sql_string>$=strdup(A4GL_set_var_sql(doing_declare,z));

	} else { 
		// Its a column
		$<sql_string>$=strdup(get_column_transform($<str>1));
	}
}
| var2_as_string THRU var2_as_string {
char buff[256];
char was_str[40000];
int z = 0,a = 0;
strcpy(was_str,"");
printf("THRU : %s %s\n",$<str>1,$<str>3);

A4GL_debug("Starting THRU");

sprintf(buff,"%s\n%s",$<str>1,$<str>3);
a=get_bind_cnt('i');
printf("get_bind_cnt=%d\n",a);
z=add_bind('i',buff);
z-=a;
for (a=0;a<z;a++)  {
         if (strlen(was_str)) {strcat(was_str,",");}
         strcat(was_str,"?");
}


	/* split_record(buff,&v_r,&v_1,&v_2);

	v_loop=v_1;

	while (1) {
                //strcpy(kp,was_str);
                sprintf(buff,"%s.%s",r1,v_loop->names.name);

		if (scan_variable(buff)!=-1&&(!system_var(buff))) {
			a=get_bind_cnt('i');
			z=add_bind('i',buff);
			z-=a;
        	}

		for (a=0;a<z;a++)  {
			if (strlen(was_str)) {strcat(was_str,",");}
         		strcat(was_str,"?");
		}
		v_loop=get_next_variable(v_r,v_loop,v_2);
	}
*/
	$<sql_string>$=strdup(was_str);
}
;


array_r_variable_or_ident_vu: identifier arr_subscripts_al
{
  int type,arrsize,size,level;
  char arrbuff[256];
  struct num_list *array;
  struct num_list *substr;
  struct array_list *al;

  $<var_usg>$=new_variable_usage(0,$<str>1,0);
  al=$<array_list>2;
  array=al->array;
  substr=al->substr;

  if (array) {
	int cnt;
	cnt=0;
	while (array) {
		set_variable_usage_subscript($<var_usg>$,cnt,array->num);
		cnt++;
		array=array->next;
	}
  }

  if (substr) {
	int cnt;
	cnt=0;
	while (substr) {
		set_variable_usage_substr($<var_usg>$,cnt,substr->num);
		cnt++;
		substr=substr->next;
	}
  }
}
;

arr_subscripts_al :
        OPEN_SQUARE num_list_nl CLOSE_SQUARE {
		struct array_list *al;
         	A4GL_debug("---> Subscript or substring");
		al=malloc(sizeof(struct array_list));
		al->array=$<num_list>2;
		al->substr=0;
		$<array_list>$=al;

        } 
	| OPEN_SQUARE num_list_nl CLOSE_SQUARE OPEN_SQUARE num_list_nl CLOSE_SQUARE {
		struct array_list *al;
         	A4GL_debug("---> Subscript & substring");
		al=malloc(sizeof(struct array_list));
		al->array=$<num_list>2;
		al->substr=$<num_list>5;
		$<array_list>$=al;
        }
;


num_list_nl:	num_list_element_nl { 
			$<num_list>$=$<num_list>1; 
		}
		| num_list_nl COMMA num_list_element_nl { 
			$<num_list>$=append_num_list_items($<num_list>1,$<num_list>3); 
		}
;

num_list_element_nl: arr_expr
{
  $<num_list>$=new_num_list_item($<str>1);
};


/* ================================ var2.rule ===================== */
