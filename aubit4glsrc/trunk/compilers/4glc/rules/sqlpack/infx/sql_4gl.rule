/*
=====================================================================
                        Source: sql_4gl.rule
=====================================================================
*/


fetch_cmd : opt_use2_p FETCH fetch_part_f opt_into_fetch_part {
			$<cmd>$=new_fetch_cmd($<ptr>1, $<s_fetch>3, $<ptr_list>4);

    	}
;

declare_cursor_name_and_clr_p  :       ident_or_var_sql_p {
			$<ptr>$=$<ptr>1;
			doing_declare=1; 
			A4GL_cursor_defined($<ptr>1,0); 
			//start_bind('i',0);
			//start_bind('o',0);
}
;

fetch_part_f: 
	fetch_place_fp  fetch_cursor_name_p {
		A4GL_cursor_fetch($<ptr>2,$<s_fetch_place>1);
		ADDMAP_P("Fetch Cursor",$<ptr>2);
		$<s_fetch>$=acl_malloc2(sizeof(struct s_fetch));
		$<s_fetch>$->cname=$<ptr>2;
		$<s_fetch>$->fp=$<s_fetch_place>1;
	}
        | fetch_cursor_name_p {
		struct s_fetch_place *fp;
		fp=acl_malloc2(sizeof(struct s_fetch_place));
		fp->ab_rel=FETCH_RELATIVE;
		fp->fetch_expr=chk_expr(A4GL_new_literal_long_long(1));
		A4GL_cursor_fetch($<ptr>1,fp);
		ADDMAP_P("Fetch Cursor",$<ptr>1);
		$<s_fetch>$=acl_malloc2(sizeof(struct s_fetch));
		$<s_fetch>$->cname=$<ptr>1;
		$<s_fetch>$->fp=fp;
	}
;

opt_into_fetch_part: { $<ptr_list>$=0;} | INTO expanded_obind_var_list {
						$<ptr_list>$=$<ptr_list>2;
			}
;

opt_foreach_into_fetch_part: {
		A4GL_debug("no into\n");
		$<ptr_list>$=0;
		} | INTO expanded_obind_var_list {
			$<ptr_list>$=$<ptr_list>2;
		}
;

fetch_place_fp : 
	KW_FIRST {
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_ABSOLUTE;
		$<s_fetch_place>$->fetch_expr=chk_expr(A4GL_new_literal_long_long(1));
		add_feature("FETCH_FIRST");
		}
	| KW_LAST {
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_ABSOLUTE;
		$<s_fetch_place>$->fetch_expr=chk_expr(A4GL_new_literal_long_long(-1));
		add_feature("FETCH_LAST");
		}
	| KW_NEXT
		{
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_RELATIVE;
		$<s_fetch_place>$->fetch_expr=chk_expr(A4GL_new_literal_long_long(1));
		add_feature("FETCH_NEXT");
		}

	| KW_PREVIOUS
		{
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_RELATIVE;
		$<s_fetch_place>$->fetch_expr=chk_expr(A4GL_new_literal_long_long(-1));
		add_feature("FETCH_PREVIOUS");
		}
	| KW_PRIOR
		{
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_RELATIVE;
		$<s_fetch_place>$->fetch_expr=chk_expr(A4GL_new_literal_long_long(-1));
		add_feature("FETCH_PREVIOUS");
		}
	| KW_CURRENT
		{
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_RELATIVE;
		$<s_fetch_place>$->fetch_expr=chk_expr(A4GL_new_literal_long_long(0));
		add_feature("FETCH_CURRENT");
		}
	| KW_RELATIVE fgl_expr_c
		{
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_RELATIVE;
		$<s_fetch_place>$->fetch_expr=chk_expr($<ptr>2);
		add_feature("FETCH_RELATIVE");
		}
	| KW_ABSOLUTE fgl_expr_c
		{
		$<s_fetch_place>$=acl_malloc2(sizeof(struct s_fetch_place));
		$<s_fetch_place>$->ab_rel=FETCH_ABSOLUTE;
		$<s_fetch_place>$->fetch_expr=chk_expr($<ptr>2);
		add_feature("FETCH_ABSOLUTE");
		}
;


sql_cmd : opt_use2_p {insql=1;} sql_commands { 
		$<cmd>$=new_sql_cmd($<ptr>1,$<sql_string>3);
		insql=0;
	}
;

sql_bound_cmd : opt_use2_p insert_statement_c {
			$<cmd>$=new_command (E_CMD_INSERT_CMD);
			memcpy(&$<cmd>$->cmd_data.command_data_u.insert_cmd, $<insert_cmd>2, sizeof($<cmd>$->cmd_data.command_data_u.insert_cmd));
			$<cmd>$->cmd_data.command_data_u.insert_cmd.connid=$<ptr>1;
		}
		| opt_use2_p update_statement_c {
			$<cmd>$=new_command (E_CMD_UPDATE_CMD);
			memcpy(&$<cmd>$->cmd_data.command_data_u.update_cmd, $<update_cmd>2, sizeof($<cmd>$->cmd_data.command_data_u.update_cmd));
			$<cmd>$->cmd_data.command_data_u.update_cmd.connid=$<ptr>1;
		}
		| opt_use2_p delete_statement_c {	
			$<cmd>$=new_command (E_CMD_DELETE_CMD);
			memcpy(&$<cmd>$->cmd_data.command_data_u.delete_cmd, $<delete_cmd>2, sizeof($<cmd>$->cmd_data.command_data_u.delete_cmd));
			$<cmd>$->cmd_data.command_data_u.delete_cmd.connid=$<ptr>1;
		}
;

sql_transact_cmd : opt_use2_p {insql=1;} sql_transact_commands { 
			$<cmd>$=new_sql_transact_cmd($<ptr>1, $<integer_val>3);
			insql=0;
	}
;


flush_cmd : opt_use2_p FLUSH fetch_cursor_name_p  {
		$<cmd>$=new_flush_cmd($<ptr>1,$<ptr>3);
		A4GL_cursor_flush($<ptr>3);
		ADDMAP_P("Flush Cursor",$<ptr>3);
		add_feature("FLUSH");
		}

;

declare_cmd :
	 opt_use2_p DECLARE declare_cursor_name_and_clr_p CURSOR KW_FOR cursor_specification1_all_ss {insql=0;chk4var=0;}  {
		add_feature("CURSOR_SELECT");
		check_cursor_name($<ptr>3);
		$<cmd>$=new_declare_cmd($<ptr>1,$<ptr>3,&$<curDef>6, 0,0,EB_TRUE);

		ADDMAP("Declare Cursor",$<str>3);
		doing_declare=0;
	}
	| opt_use2_p DECLARE declare_cursor_name_and_clr_p CURSOR KW_FOR cursor_specification1_ins_ss {insql=0;chk4var=0;}  {
		add_feature("CURSOR_SELECT");

		check_cursor_name($<ptr>3);
		$<cmd>$=new_declare_cmd($<ptr>1,$<ptr>3,&$<curDef>6, 0,0,EB_FALSE);

		ADDMAP("Declare Cursor",$<str>3);
		doing_declare=0;
	}
	| opt_use2_p DECLARE declare_cursor_name_and_clr_p CURSOR WITH_HOLD KW_FOR cursor_specification1_ins_ss {insql=0;chk4var=0;}  {
		add_feature("CURSOR_SELECT");
		check_cursor_name($<ptr>3);

		$<cmd>$=new_declare_cmd($<ptr>1,$<ptr>3,&$<curDef>7, 1,0,EB_FALSE);

		ADDMAP("Declare Cursor",$<str>3);
		doing_declare=0;
	}
	| opt_use2_p DECLARE declare_cursor_name_and_clr_p CURSOR WITH_HOLD KW_FOR cursor_specification1_all_ss {insql=0;chk4var=0;}  {
		add_feature("CURSOR_SELECT");
		add_feature("HOLD_CURSOR");
		check_cursor_name($<ptr>3);
		$<cmd>$=new_declare_cmd($<ptr>1,$<ptr>3,  &$<curDef>7,1,0,EB_TRUE); 
		ADDMAP("Declare Cursor",$<str>3);
		doing_declare=0;
	}

        | opt_use2_p DECLARE declare_cursor_name_and_clr_p SCROLL_CURSOR_FOR cursor_specification_sel_ss {insql=0;chk4var=0;}  {
		add_feature("CURSOR_SELECT");
		add_feature("SCROLL_CURSOR");
		check_cursor_name($<ptr>3);
		$<cmd>$=new_declare_cmd($<ptr>1,$<ptr>3, &$<curDef>5, 0,1,EB_FALSE); 
	
		ADDMAP("Declare Cursor",$<str>3);
		doing_declare=0;
	}
       	| opt_use2_p DECLARE declare_cursor_name_and_clr_p SCROLL_CURSOR WITH_HOLD KW_FOR cursor_specification_sel_ss {insql=0;chk4var=0;}  {
		add_feature("CURSOR_SELECT");
		add_feature("SCROLL_CURSOR");
		add_feature("HOLD_CURSOR");
		check_cursor_name($<ptr>3);
		$<cmd>$=new_declare_cmd($<ptr>1,$<ptr>3, &$<curDef>7, 1,1,EB_FALSE); 
		ADDMAP("Declare Cursor",$<str>3);
		doing_declare=0;
	}
;
 
curs_forupdate : {strcpy($<str>$,"");} 
		| FOR_UPDATE {
			if ( A4GLSQLCV_check_requirement("NO_FOR_UPDATE") || A4GLSQLCV_check_requirement("EMULATE_FOR_UPDATE")) {
				strcpy($<str>$,"");
			} else {
				strcpy($<str>$," FOR UPDATE"); 
			}
			add_feature("CURSOR_SELECT_FOR_UPDATE");
		} 
		| FOR_UPDATE_OF cur_update_list {
			if ( A4GLSQLCV_check_requirement("NO_FOR_UPDATE") ||A4GLSQLCV_check_requirement("EMULATE_FOR_UPDATE")) {
				strcpy($<str>$,"");
			} else {
				SPRINTF1($<str>$," FOR UPDATE OF %s",$<str>2); 
			}
			add_feature("CURSOR_SELECT_FOR_UPDATE"); } 
		;


cursor_specification1_all_ss:
	cursor_specification_sel_ss {
		memcpy(&$<curDef>$, &$<curDef>1,sizeof($<curDef>1));
	}

;



cursor_specification1_ins_ss: insert_statement_c { 
		A4GL_cursor_is_insert();
		if (A4GLSQLCV_check_requirement("NO_INSERT_CURSOR")) {
			a4gl_yyerror("Insert cursors are not supported for this rdbms");
		}
		$<curDef>$.insert_cmd=$<insert_cmd>1;
		$<curDef>$.select=NULL;
		$<curDef>$.ident=NULL;
		$<curDef>$.forUpdate=0;
		//start_bind('i',0);
		//start_bind('o',0);
	}
;

cursor_specification_sel_ss:
	 stmt_id_p {
		$<curDef>$.insert_cmd=NULL;
		$<curDef>$.ident=$<ptr>1;
		$<curDef>$.select=NULL;
		$<curDef>$.forUpdate=0;
	}
	| select_statement_ss_select curs_forupdate { 
		char *ptr;
		A4GL_set_sql_lineno(yylineno);
		A4GL_cursor_is_select();
	 	$<curDef>$.insert_cmd=NULL; 
	 	$<curDef>$.ident=NULL; 
		$<curDef>$.select=$<s_select>1; /* acl_strdup(A4GL_CV_print_select_all(ptr,$<curDef>$.inbind, $<curDef>$.outbind,1));  */
		$<curDef>$.forUpdate=strdup($<str>2);
		map_select_stmt("SELECT",$<s_select>1);
	}
;



value_expression_initial_sli :
	value_expression_complex_sli 	{ $<s_select_list_item>1=$<s_select_list_item>1; }
	| var_ident_ibind_sli 		{ $<s_select_list_item>1=$<s_select_list_item>1; }
	| subquery_sli       		{ $<s_select_list_item>$=new_select_list_item_sq(E_SQE_DONT_CARE,$<s_select_list_item>1); }
	| ALL subquery_sli   		{ $<s_select_list_item>$=new_select_list_item_sq(E_SQE_ALL,$<s_select_list_item>2); }
	| ANY subquery_sli   		{ $<s_select_list_item>$=new_select_list_item_sq(E_SQE_ANY,$<s_select_list_item>2); }
	| SOME subquery_sli  		{ $<s_select_list_item>$=new_select_list_item_sq(E_SQE_SOME,$<s_select_list_item>2); }
	| ATSIGN identifier op_col_arr 		{ $<s_select_list_item>$=new_select_list_item_col(0,$<str>2,&$<int_list>3); }
	| ATSIGN identifier KW_DOT identifier op_col_arr { $<s_select_list_item>$=new_select_list_item_col($<str>2,$<str>4,&$<int_list>5); }
        | identifier COLON identifier KW_DOT identifier op_col_arr { char buff[2000];SPRINTF2(buff,"%s:%s",$<str>1,$<str>3); $<s_select_list_item>$=new_select_list_item_col(buff,$<str>5,&$<int_list>6); }

;


select_cmd : 
	 opt_use2_p select_statement_ss_select curs_forupdate { /* SQL HAS ALREADY BEEN CONVERTED */
		//char *ptr;
		//lo=copy_togenbind('o');
		//li=copy_togenbind('i');

        	if (strstr($<str>3,"FOR UPDATE")) {
                   	PRINTF("Warning SELECT ... FOR UPDATE when not declaring a cursor currently has no locking effect\n");
        	}

		//ptr=make_select_stmt(current_upd_table, $<s_select>2);
		$<cmd>$=new_select_cmd($<ptr>1,$<s_select>2,$<str>3);
		map_select_stmt("SELECT",$<s_select>2);
		//free(ptr);
		//start_bind('i',0);
		//start_bind('o',0);
        }
;


dbase_name      :       identifier {strcpy($<str>$,$<str>1);}
                |       identifier ATSIGN identifier {SPRINTF2($<str>$,"%s@%s",$<str>1,$<str>3);}
                |       CHAR_VALUE {strcpy($<str>$, A4GL_strip_quotes ($<str>1));}
;

cur_update_list : colident {strcpy($<str>$,$<str>1);}
        | cur_update_list KW_COMMA colident {SPRINTF2($<str>$,"%s,%s",$<str>1,$<str>3);}
;

colident: identifier
        | identifier KW_DOT identifier {SPRINTF2($<str>$,"%s.%s",$<str>1,$<str>3);}
        | CHAR_VALUE KW_DOT identifier KW_DOT identifier {
            SPRINTF2($<str>$,"%s.%s", A4GLSQLCV_ownerize_tablename($<str>1, $<str>3), $<str>5);
        }
;


in_select_statement: select_statement_ss_select {
	$<s_select>$=$<s_select>1;
}

/*
        KW_SELECT op_ad select_list_slil table_expression_2_select sel_p2_select  {
		 struct s_select *s1;
		s1=new_empty_select();
                s1->modifier=acl_strdup($<str>2);
                s1->into=0;
                s1->select_list=$<s_select_list_item_list>3;
                s1->next=$<s_select>5;
                A4GL_set_sql_lineno(yylineno);
                $<s_select>$=s1;
}
;
*/


set_database_cmd :
       DATABASE var_ident_qchar_e op_db_exclusive {
        add_feature("DATABASE_USED");
        $<cmd>$=new_set_database_cmd(chk_expr($<ptr>2),$<e_boolean>3);
}
;



load_cmd :  opt_use2_p LOAD_FROM ufile opt_delim INSERT_INTO table_name_not_for_column_prefix opt_col_list {
        //A4GL_add_crud("INSERT",$<str>6);
        add_feature("LOAD_FROM_INSERT_INTO");
        $<cmd>$=new_load_cmd($<ptr>1,$<ptr>3, $<ptr>4,NULL,$<str>6,$<str_list>7);
}
| opt_use2_p LOAD_FROM ufile opt_delim ensured_variable_usage_expression {
        add_feature("LOAD_FROM_VARIABLE");
        $<cmd>$=new_load_cmd($<ptr>1,$<ptr>3, $<ptr>4,$<ptr>5,NULL,NULL);
}

;

unload_cmd :  opt_use2_p UNLOAD_TO ufile opt_delim uselect_statement2_p  {
        add_feature("UNLOAD_TO");
	/* if (strcasecmp($<sql_string>5," WHERE ")==0) { add_feature("UNLOAD_TO_SELECT_WHERE"); } */ /* @FIXME - add this back in... */
        add_feature("UNLOAD_TO");
        $<cmd>$=new_unload_cmd($<ptr>1,$<ptr>5, $<ptr>3, $<ptr>4);
}
;



opt_col_list: {
                        $<str_list>$=0;
                }
        | OPEN_BRACKET col_list CLOSE_BRACKET { $<str_list>$=$<str_list>2;}
;

col_list : simple_column_name  {
		$<str_list>$=acl_malloc2(sizeof(struct str_list));
                $<str_list>$->str_list_entry.str_list_entry_len=1;
                $<str_list>$->str_list_entry.str_list_entry_val=acl_malloc2(sizeof($<str_list>$->str_list_entry.str_list_entry_val[0]) * $<str_list>$->str_list_entry.str_list_entry_len);
                $<str_list>$->str_list_entry.str_list_entry_val[$<str_list>$->str_list_entry.str_list_entry_len-1]=strdup($<str>1);
                }

        | col_list KW_COMMA simple_column_name {
		 $<str_list>$= $<str_list>1;
                $<str_list>$->str_list_entry.str_list_entry_len=$<str_list>1->str_list_entry.str_list_entry_len+1;
                $<str_list>$->str_list_entry.str_list_entry_val=realloc($<str_list>1->str_list_entry.str_list_entry_val, sizeof($<str_list>$->str_list_entry.str_list_entry_val[0]) * $<str_list>$->str_list_entry.str_list_entry_len);
                $<str_list>$->str_list_entry.str_list_entry_val[$<str_list>$->str_list_entry.str_list_entry_len-1]=strdup($<str>3);
        }
;




ufile :  char_or_var_vl { $<ptr>$=$<ptr>1; }
;


uselect_statement2_p:
        uu_select_statement21_select  {
                $<ptr>$=$<ptr>1;
         }
        | char_or_var_vl {
                $<ptr>$=$<ptr>1;
        }
;


opt_into_sel :  {
                //start_bind('o',0);
                $<ptr_list>$=0; }
        | INTO  expanded_obind_var_list {
                $<ptr_list>$=$<ptr_list>2;
        }
;


opt_delim :     { $<ptr>$=0; }
                | DELIMITER char_or_var_vl { $<ptr>$=$<ptr>2; }
;

/* ========================= sql_4gl.rule ================================ */
