/*
=====================================================================
                        Source: sql1.rule
=====================================================================
*/

rollback_statement:
	ROLLBACK_W  {  add_feature("ROLLBACK_WORK"); }
;



insert_statement_c:
	INSERT_INTO { insql=1;} table_name_not_for_column_prefix  op_insert_column_list_sl  ins_2_ic {
		$<insert_cmd>$=$<insert_cmd>5;
		$<insert_cmd>$->connid=0;
		$<insert_cmd>$->table=acl_strdup($<str>3);
		$<insert_cmd>$->column_list=$<str_list>4;
	}
;

ins_2_ic : VALUES {insql=1;} OPEN_BRACKET insert_value_list_slil CLOSE_BRACKET { 
		$<insert_cmd>$=malloc(sizeof(struct_insert_cmd));
		$<insert_cmd>$->connid=0;
		$<insert_cmd>$->column_list=0;
		$<insert_cmd>$->table=0;
		$<insert_cmd>$->value_list=0;
		$<insert_cmd>$->subselect=0;
		$<insert_cmd>$->value_list= expand_slil($<s_select_list_item_list>4);
	}
	| query_specification_select {
				if ($<s_select>1->sf==0) {
				        $<s_select>1->sf=acl_malloc2(sizeof(struct s_select_finish));
					$<s_select>1->sf->order_by=0;
					$<s_select>1->sf->into_temp=0;
					$<s_select>1->sf->nolog=0;
					$<s_select>1->sf->insert_into=0;
				}
				$<s_select>1->sf->insert_into=0;
        			map_select_stmt("SELECT",$<s_select>1);
				add_feature("INSERT_INTO_SELECT_FROM");
	        $<insert_cmd>$=malloc(sizeof(struct_insert_cmd));
                $<insert_cmd>$->connid=0;
                $<insert_cmd>$->column_list=0;
                $<insert_cmd>$->table=0;
                $<insert_cmd>$->value_list=0;
                $<insert_cmd>$->subselect=$<s_select>1;
	}
;




op_insert_column_list_sl: {
			$<str_list>$=0;
	}
	| OPEN_BRACKET insert_column_list_sl CLOSE_BRACKET {
			$<str_list>$=$<str_list>2;
			 add_feature("INSERT_COLUMNLIST_EQ_VALUELIST");
	}
;


insert_column_list_sl:
	ins_column_name {
                        $<str_list>$=new_str_list($<str>1);
	}
	| insert_column_list_sl KW_COMMA ins_column_name {
                        $<str_list>$=add_str_list($<str_list>1, $<str>3);
	}
;


ins_column_name : 
		identifier {	
			strcpy($<str>$,$<str>1);
	}
	| identifier KW_DOT identifier { 
			/* with a table prefix - on an insert ? We'll just silently drop it... */
			strcpy($<str>$,$<str>3);
			A4GL_warn("Dropped table prefix from INSERT column name");
	}
;

insert_value_list_slil:
	insert_value_sli { $<s_select_list_item_list>$=local_new_select_list_item_list($<s_select_list_item>1);}
	| insert_value_list_slil  KW_COMMA insert_value_sli {
		$<s_select_list_item_list>$=local_add_select_list_item_list($<s_select_list_item_list>1,$<s_select_list_item>3);
	}
;

insert_value_sli:
        value_expression_sli  {$<s_select_list_item>$=$<s_select_list_item>1;}
        | KW_NULL  {$<s_select_list_item>$=new_select_list_item_builtin_const(E_SLI_BUILTIN_CONST_NULL); }

;




delete_statement_c:
	DELETE_FROM table_name_not_for_column_prefix where_del_p {
			//A4GL_add_crud("DELETE",$<str>2);

			if ($<ptr>3==0) { A4GL_warn("DELETE with no WHERE clause"); }
			add_feature("ANSI_DELETE");

			/* if (strstr($<sql_string>4," EXISTS ")) { add_feature("DELETE_FROM_WHERE_EXISTS_SUBSELECT"); } */ /* @FIXME - add back in */

			$<delete_cmd>$=malloc(sizeof(struct struct_delete_cmd));
			$<delete_cmd>$->connid=NULL;
			$<delete_cmd>$->table=acl_strdup($<str>2);
			$<delete_cmd>$->where_clause=$<ptr>3;
			
		}
;


begin_statement: BEGIN_WORK  { add_feature("BEGIN_WORK"); }
;

commit_statement:
	COMMIT_W  { add_feature("COMMIT_WORK"); }
;


op_db_exclusive :
		{$<e_boolean>$=EB_FALSE;}
	|	EXCLUSIVE {
		add_feature("DATABASE_EXCLUSIVE");
		{$<e_boolean>$=EB_TRUE;}
	}

;




misc_infx_stmt: misc_infx_stmt_str {
	char buff[256];
	$<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1),NULL);
	SPRINTF1(buff,"Warning: Informix specific SQL @ line %d\n",yylineno);
	ansi_violation(buff,1);
	}
;

misc_infx_stmt_str: 
	START_DATABASE identifier WITH_LOG_IN CHAR_VALUE MODE_ANSI {
			add_feature("START_DATABASE_WITH_LOG_MODE_ANSI");
			sprintf($<str>$,"START DATABASE %s WITH LOG IN %s MODE ANSI", $<str>2,$<str>4);
	}
	| START_DATABASE identifier WITH_LOG_IN CHAR_VALUE {
			add_feature("START_DATABASE_WITH_LOG");
			sprintf($<str>$,"START DATABASE %s WITH LOG IN %s", $<str>2,$<str>4);
	}
	| SET_CONSTRAINTS_ALL_IMMEDIATE
	{
			add_feature("SET_CONSTRAINTS_ALL_IMMEDIATE");
			SPRINTF1($<str>$,"%s",$<str>1); 
	}
	| SET_BUFFERED_LOG {
		add_feature("SET_BUFFERED_LOG");
			SPRINTF1($<str>$,"%s",$<str>1); 
	}
	| SET_LOG {
		add_feature("SET_LOG");
			SPRINTF1($<str>$,"%s",$<str>1); 
	}
        | UPDATESTATS_T  identifier {
			SPRINTF2($<str>$,"%s %s",$<str>1,$<str>2); add_feature("UPDATE_STATISTICS_TABLE");
	}
        | UPDATESTATS 		{
		add_feature("UPDATE_STATISTICS");
			SPRINTF1($<str>$,"%s",$<str>1); 
	}
;

sql_transact_commands:
         commit_statement       { $<integer_val>$=1; }
        | begin_statement       { $<integer_val>$=-1; }
        | rollback_statement    { $<integer_val>$=0; }
;

sql_commands :
        misc_infx_stmt          { $<sql_string>$=$<sql_string>1; }
        | schema_ss             { $<sql_string>$=$<sql_string>1; }
        | schema_element_ss     { $<sql_string>$=$<sql_string>1; }
        | misc_sql              { $<sql_string>$=$<sql_string>1; }
        | drops_statement       { $<sql_string>$=$<sql_string>1; }
        | create_statement_ss   { $<sql_string>$=$<sql_string>1; }
        | alter_statement_ss    { $<sql_string>$=$<sql_string>1; }
;





privilege_definition:
	GRANT privileges KW_ON table_name_not_for_column_prefix KW_TO grantee_list op_with_grant_option {SPRINTF7($<str>$,"%s %s %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7);  add_feature("GRANT"); }
	| REVOKE privileges KW_ON table_name_not_for_column_prefix FROM grantee_list  {SPRINTF6($<str>$,"%s %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5,$<str>6);  add_feature("REVOKE"); }
	| GRANT db_priv KW_TO grantee_list {SPRINTF4($<str>$,"%s %s %s %s ",$<str>1,$<str>2,$<str>3,$<str>4); add_feature("GRANT"); }
	| REVOKE db_priv FROM grantee_list {SPRINTF4($<str>$,"%s %s %s %s ",$<str>1,$<str>2,$<str>3,$<str>4);  add_feature("REVOKE"); }
;


db_priv:
	CONNECT
	| RESOURCE
	| DBA
;

op_with_grant_option: {strcpy($<str>$,"");}
	| WITH_GRANT_OPTION {SPRINTF1($<str>$," %s ",$<str>1);}
	| KW_AS authorization_identifier {SPRINTF2($<str>$," %s %s",$<str>1,$<str>2);}
;

privileges:
	ALL_PRIVILEGES {SPRINTF1($<str>$," %s ",$<str>1);}
	| ALL {SPRINTF1($<str>$," %s ",$<str>1);}
	| action_list
;

action_list:
	action
	| action_list KW_COMMA action
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

action: KW_SELECT op_grant_column_list {
		if (A4GLSQLCV_check_requirement("SIMPLE_GRANT_SELECT"))  {
			SPRINTF0($<str>$," SELECT");
		} else {
			SPRINTF2($<str>$," %s %s",$<str>1,$<str>2);
		}
	}
	| KW_INSERT
	| KW_DELETE
	| KW_UPDATE op_grant_column_list {
		if (A4GLSQLCV_check_requirement("SIMPLE_GRANT_UPDATE"))  {
			SPRINTF0($<str>$," UPDATE");
		} else {
			SPRINTF2($<str>$," %s %s",$<str>1,$<str>2);
		}
	}
	| ALTER
	| INDEX
;

op_grant_column_list: {strcpy($<str>$,"");}
	| OPEN_BRACKET grant_column_list CLOSE_BRACKET
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

grant_column_list:
	  column_name
	| grant_column_list KW_COMMA column_name
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

grantee_list:
	  grantee
	| grantee_list KW_COMMA grantee
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

grantee:
	PUBLIC
	| authorization_identifier
;


view_definition_ss:
	CREATE_VIEW table_name_not_for_column_prefix op_view_column_list KW_AS query_specification_ss_converted op_with_check_option {
		add_feature("CREATE_VIEW_AS_SELECT");
		$<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1),kw_space,acl_strdup($<str>2),kw_space,acl_strdup($<str>3),kw_space,acl_strdup($<str>4),kw_space,$<sql_string>5,kw_space,acl_strdup($<str>6),NULL);
	
}
;

op_view_column_list: {strcpy($<str>$,"");}
	| OPEN_BRACKET view_column_list CLOSE_BRACKET
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

view_column_list:
	column_name
	| view_column_list KW_COMMA column_name
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

op_with_check_option: {strcpy($<str>$,"");}
	| WITH_CHECK_OPTION {
		add_feature("CREATE_VIEW_SELECT_WITH_CHECK");
	}
;


check_constraint_definition_ss:
	CHECK OPEN_BRACKET search_condition_sli_as_string CLOSE_BRACKET {
		$<sql_string>$=make_sql_string_and_free(strdup("CHECK ("),$<sql_string>3,kw_cb,NULL);
		add_feature("DDL_CHECK");
	}
;


referential_constraint_definition:
	FOREIGN_KEY OPEN_BRACKET references_columns CLOSE_BRACKET references_specification
{SPRINTF5($<str>$," %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5);
	add_feature("DDL_FOREIGN_KEY");
}
;

references_specification:
	REFERENCES referenced_table_and_columns
{SPRINTF2($<str>$," %s %s",$<str>1,$<str>2);
add_feature("DDL_REFERENCES");
}
;

references_columns:
	references_column_list
;

referenced_table_and_columns:
	  table_name_not_for_column_prefix
	| table_name_not_for_column_prefix OPEN_BRACKET references_column_list CLOSE_BRACKET
{SPRINTF4($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
;

references_column_list:
	  column_name
	| references_column_list KW_COMMA column_name
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;


unique_constraint_definition:
	  UNIQUE OPEN_BRACKET unique_column_list CLOSE_BRACKET {
		SPRINTF3($<str>$," UNIQUE %s %s %s",$<str>2,$<str>3,$<str>4);
add_feature("DDL_UNIQUE");
	}
	  | DISTINCT OPEN_BRACKET unique_column_list CLOSE_BRACKET {
		ansi_violation("Use UNIQUE not DISTINCT",0);
		SPRINTF3($<str>$," UNIQUE %s %s %s",$<str>2,$<str>3,$<str>4);
add_feature("DDL_DISTINCT");
	}
	| PRIMARY_KEY OPEN_BRACKET unique_column_list CLOSE_BRACKET
{SPRINTF4($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);
add_feature("DDL_PRIMARY_KEY");
}
;

unique_column_list:
	  column_name
	| unique_column_list KW_COMMA column_name
{SPRINTF3($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;
	

table_constraint_definition_ss:
	unique_constraint_definition {
		$<sql_string>$=acl_strdup($<str>1);
	}
	| referential_constraint_definition {
		$<sql_string>$=acl_strdup($<str>1);
	}
	| check_constraint_definition_ss  {
		$<sql_string>$=$<sql_string>1;
	}
;


default_clause:
	  DEFAULT literal {SPRINTF2($<str>$," %s %s",$<str>1,$<str>2); add_feature("DDL_DEFAULT_VALUE"); }
	  | DEFAULT_USER {SPRINTF1($<str>$," DEFAULT %s", A4GLSQLCV_get_sqlconst("USER")); add_feature("DDL_DEFAULT_VALUE"); }
	  | DEFAULT_TODAY {SPRINTF1($<str>$," DEFAULT %s", A4GLSQLCV_get_sqlconst("TODAY")); add_feature("DDL_DEFAULT_VALUE"); }
	  | DEFAULT_NULL { SPRINTF1($<str>$," %s",$<str>1); add_feature("DDL_DEFAULT_VALUE"); }
;



ct_column_definiton_ss:
	identifier data_type op_default_clause op_column_constraint_list_ss {

			A4GL_debug("Str1:%s",$<str>1);
			A4GL_debug("Str2:%s",$<str>2);
			A4GL_debug("Str3:%s",$<str>3);
			A4GL_debug("Str4:%s",$<sql_string>4);

                $<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1),kw_space,acl_strdup($<str>2),NULL);
                if (strlen($<str>3)) {
                        $<sql_string>$=make_sql_string_and_free($<sql_string>$, kw_space,acl_strdup($<str>3),NULL);
                }
                if (strlen($<sql_string>4)) {
                        $<sql_string>$=make_sql_string_and_free($<sql_string>$, kw_space,acl_strdup($<sql_string>4),NULL);
                } else {
			free($<sql_string>4);
		}


	}
;

op_default_clause: {strcpy($<str>$,"");}
	|default_clause
;

op_column_constraint_list_ss: {
		$<sql_string>$=acl_strdup("");
	} | column_constraint_list_ss {
		$<sql_string>$=$<sql_string>1;
	}
;


column_constraint_list_ss :
	column_constraint_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| column_constraint_list_ss column_constraint_ss {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,kw_space,$<sql_string>2,NULL);
	}
;

column_constraint_ss : 
	column_constraint_ss_1 opt_constraint_name {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,acl_strdup($<str>2),NULL);
	}
;



column_constraint_ss_1:
	  NOT_NULL {
		SPRINTF1($<str>$," %s ",$<str>1);
		$<sql_string>$=acl_strdup($<str>$);
		add_feature("DDL_NOT_NULL");
	}
	| NOT_NULL_UNIQUE {
		SPRINTF0($<str>$," NOT NULL UNIQUE ");
		$<sql_string>$=acl_strdup($<str>$);
		add_feature("DDL_NOT_NULL");
		add_feature("DDL_UNIQUE");
	}
	| UNIQUE {
		SPRINTF0($<str>$," UNIQUE ");
		$<sql_string>$=acl_strdup($<str>$);
		add_feature("DDL_UNIQUE");
	}
	| DISTINCT {
		ansi_violation("Use UNIQUE not DISTINCT",0);
		SPRINTF0($<str>$," UNIQUE ");
		$<sql_string>$=acl_strdup($<str>$);
		add_feature("DDL_DISTINCT");
	}
	| references_specification {
		$<sql_string>$=acl_strdup($<str>1);
	}
	| CHECK OPEN_BRACKET search_condition_sli_as_string CLOSE_BRACKET {
		$<sql_string>$=make_sql_string_and_free(acl_strdup("CHECK ("),$<sql_string>3,kw_cb,NULL);
		add_feature("DDL_CHECK");
		
	}
	| PRIMARY_KEY {
		$<sql_string>$=make_sql_string_and_free(acl_strdup(" PRIMARY KEY "),NULL);
		add_feature("DDL_PRIMARY_KEY");
	}
;


schema_ss:
	CREATE_SCHEMA schema_authorization_clause schema_element_list_ss
{
		add_feature("CREATE_SCHEMA");

$<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1),kw_space,acl_strdup($<str>2),kw_space,acl_strdup($<str>3),NULL);
}
;

schema_authorization_clause:
	schema_authorization_identifier
{SPRINTF1($<str>$," %s",$<str>1);}
;

schema_authorization_identifier:
	authorization_identifier
;

schema_element_list_ss:
	  schema_element_ss
	| schema_element_list_ss schema_element_ss {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,kw_space,$<sql_string>2,NULL);
	}
;

schema_element_ss:
	view_definition_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| privilege_definition {
		$<sql_string>$=acl_strdup($<str>1);
	}
;






having_clause_sli:
	HAVING search_condition_sli {
		 add_feature("HAVING"); 
		$<s_select_list_item>$=$<s_select_list_item>2;
	}
;



where_clause_sli:
	WHERE search_condition_sli {
		 $<s_select_list_item>$=$<s_select_list_item>2;
	}
;


from_clause_ts:
	FROM table_reference_list {
		$<u_table>$=$<u_table>2;
	}
;

table_reference_list:
	  tname {$<u_table>$=$<u_table>1;}
	| table_reference_list KW_COMMA tname {
		$<u_table>$=A4GLSQLPARSE_append_tablename($<u_table>1,$<u_table>3,E_OUTER_NONE,NULL);
	}
	| table_reference_list KW_COMMA OUTER tname {
		$<u_table>$=A4GLSQLPARSE_append_tablename($<u_table>1,$<u_table>4,E_OUTER_NORMAL,NULL);
		A4GL_warn("OUTER join *may* not be portable to non-informix database");
		add_feature("SELECT_OUTER");
	}
	| table_reference_list KW_COMMA OUTER OPEN_BRACKET table_reference_list CLOSE_BRACKET {
		$<u_table>$=A4GLSQLPARSE_append_tablename($<u_table>1,$<u_table>5,E_OUTER_NORMAL,NULL);
		A4GL_warn("OUTER join *may* not be portable to non-informix database");
		add_feature("SELECT_OUTER");
	}
/*
	| table_reference_list LEFT_JOIN tname KW_ON OPEN_BRACKET search_condition_sli CLOSE_BRACKET  {
		$<u_table>$=A4GLSQLPARSE_append_tablename($<u_table>1,$<u_table>3,E_OUTER_LEFT_OUTER, $<s_select_list_item>6);
		add_feature("SELECT_OUTER");
	}
*/
	| table_reference_list LEFT_JOIN op_bracket_table_reference_list KW_ON search_condition_sli   {
		$<u_table>$=A4GLSQLPARSE_append_tablename($<u_table>1,$<u_table>3,E_OUTER_LEFT_OUTER, $<s_select_list_item>5);
		add_feature("SELECT_OUTER");
	}
	| table_reference_list INNER_JOIN op_bracket_table_reference_list KW_ON search_condition_sli   {
		$<u_table>$=A4GLSQLPARSE_append_tablename($<u_table>1,$<u_table>3,E_INNER, $<s_select_list_item>5);
		add_feature("SELECT_INNER");
	}

;

op_bracket_table_reference_list: table_reference_list
	| OPEN_BRACKET table_reference_list CLOSE_BRACKET {$<u_table>$=$<u_table>2;}
;


tname: table_name_not_for_column_prefix  { 
			//A4GL_add_crud("SELECT",$<str>1);
			$<u_table>$=A4GLSQLPARSE_new_tablename($<str>1,NULL);
	}
	| table_name_not_for_column_prefix correlation_name { 
			//A4GL_add_crud("SELECT",$<str>1);
			$<u_table>$=A4GLSQLPARSE_new_tablename($<str>1,$<str>2);
	}
	| table_name_not_for_column_prefix KW_AS correlation_name { 
			//A4GL_add_crud("SELECT",$<str>1);
			$<u_table>$=A4GLSQLPARSE_new_tablename($<str>1,$<str>3);
	}
;

table_expression_2_select: 
		{
			/* No from or where etc.. */
			/* eg.. select user ; */
			$<s_select>$=new_empty_select();
		}
		| from_clause_ts  op_where_clause_2_select {
		$<s_select>$=$<s_select>2;
		$<s_select>$->first=$<u_table>1;
}
;

op_where_clause_2_select:
	op_group_by_clause_2_select {
		$<s_select>$=$<s_select>1;
	}
	| where_clause_sli op_group_by_clause_2_select {
		$<s_select>$=$<s_select>2;
		$<s_select>$->where_clause=$<s_select_list_item>1;
	}
;

op_group_by_clause_2_select: {
		$<s_select>$=new_empty_select();
	}
	| group_by_clause_slil  {
		$<s_select>$=new_empty_select();
		$<s_select>$->group_by=$<s_select_list_item_list>1;
		$<s_select>$->having=0;
	}
	| group_by_clause_slil having_clause_sli {
		$<s_select>$=new_empty_select();
		$<s_select>$->group_by=$<s_select_list_item_list>1;
		$<s_select>$->having=$<s_select_list_item>2;
	}
	| having_clause_sli {
		$<s_select>$=new_empty_select();
		$<s_select>$->group_by=0;
		$<s_select>$->having=$<s_select_list_item>1;

	}
;





search_condition_sli:
	boolean_term_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
	}
	| search_condition_sli KW_OR boolean_term_sli {
		$<s_select_list_item>$=new_select_list_item_op_expr($<s_select_list_item>1,$<s_select_list_item>3," OR ");
	}
;

boolean_term_sli:
	boolean_factor_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
	}
	| boolean_term_sli KW_AND boolean_factor_sli {
		$<s_select_list_item>$=new_select_list_item_op_expr($<s_select_list_item>1,$<s_select_list_item>3," AND ");
	}
;

boolean_factor_sli:
	boolean_primary_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
	}
	| KW_NOT boolean_primary_sli {
		$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_NOT,$<s_select_list_item>2);
	}
;

boolean_primary_sli:
	  predicate_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
	}
	| OPEN_BRACKET search_condition_sli CLOSE_BRACKET {
		$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_BRACKET_EXPR,$<s_select_list_item>2);
	}
;


exists_predicate_sli:
	EXISTS subquery_sli 		{
		$<s_select_list_item>$=new_select_list_item_sq(E_SQE_EXISTS, $<s_select_list_item>2);
		add_feature("WHERE_EXISTS");
	}
	| NOT_EXISTS subquery_sli 	{
		$<s_select_list_item>$=new_select_list_item_sq(E_SQE_NOT_EXISTS, $<s_select_list_item>2);
		add_feature("WHERE_EXISTS");
	}
;






op_matches_escape: {strcpy($<str>$,"");} | KW_ESCAPE escape_character {SPRINTF2($<str>$," %s %s",$<str>1,$<str>2);add_feature("WHERE_MATCHES_ESCAPE");} ;
op_ilike_escape: {strcpy($<str>$,"");} 	 | KW_ESCAPE escape_character {SPRINTF2($<str>$," %s %s",$<str>1,$<str>2);add_feature("WHERE_ILIKE_ESCAPE");} ;
op_like_escape: {strcpy($<str>$,"");} 	 | KW_ESCAPE escape_character {SPRINTF2($<str>$," %s %s",$<str>1,$<str>2);add_feature("WHERE_LIKE_ESCAPE");} ;

pattern_sli:
	value_expression_initial_sli {
		 $<s_select_list_item>$=$<s_select_list_item>1;
	}
;

escape_character: literal
;



op_not: {strcpy($<str>$,"");}
	| KW_NOT {strcpy($<str>$," NOT ");}
;


comparison_predicate_sli:
	value_expression_sli op_not IS_NULL { 
		if (strlen($<str>2)==0) {
			$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_ISNULL,$<s_select_list_item>1);
		} else {
			$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_ISNOTNULL,$<s_select_list_item>1);
		}

		add_feature("WHERE_NULL");
	}
	| value_expression_sli op_not IS_NOT_NULL { 
		if (strlen($<str>2)==0) {
			$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_ISNOTNULL,$<s_select_list_item>1);
		} else {
			$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_ISNULL,$<s_select_list_item>1);
		}
		add_feature("WHERE_NULL");
	}
	| value_expression_sli comp_op value_expression_sli { 
			$<s_select_list_item>$=new_select_list_item_op_expr($<s_select_list_item>1,$<s_select_list_item>3,$<str>2);
	}
	| value_expression_sli EQUAL value_expression_sli { 
			$<s_select_list_item>$=new_select_list_item_op_expr($<s_select_list_item>1,$<s_select_list_item>3,"=");
	}
	| value_expression_sli EQUAL KW_NULL { 
			FPRINTF(stderr,"Warning: Corrected =NULL to IS NULL line %d\n",yylineno);
			$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_ISNULL,$<s_select_list_item>1);
	}
	| value_expression_sli op_not BETWEEN value_expression_sli KW_AND value_expression_sli { 
		if (strlen($<str>2)) {
			$<s_select_list_item>$=new_select_list_item_op_between($<str>2,$<s_select_list_item>1,$<s_select_list_item>4,$<s_select_list_item>6,1);
		} else {
			$<s_select_list_item>$=new_select_list_item_op_between($<str>2,$<s_select_list_item>1,$<s_select_list_item>4,$<s_select_list_item>6,0);
		}
	}
	| value_expression_sli LIKE pattern_sli op_like_escape { 
			$<s_select_list_item>$=new_select_list_item_regex(E_SLI_REGEX_LIKE,$<s_select_list_item>1,$<s_select_list_item>3,$<str>4);
	}
	| value_expression_sli NOT_LIKE pattern_sli op_like_escape { 
			$<s_select_list_item>$=new_select_list_item_regex(E_SLI_REGEX_NOT_LIKE,$<s_select_list_item>1,$<s_select_list_item>3,$<str>4);

	}
	| value_expression_sli ILIKE pattern_sli op_ilike_escape { 
			$<s_select_list_item>$=new_select_list_item_regex(E_SLI_REGEX_ILIKE,$<s_select_list_item>1,$<s_select_list_item>3,$<str>4);
	}
	| value_expression_sli NOT_ILIKE pattern_sli op_ilike_escape { 
			$<s_select_list_item>$=new_select_list_item_regex(E_SLI_REGEX_NOT_ILIKE,$<s_select_list_item>1,$<s_select_list_item>3,$<str>4);
	}
	| value_expression_sli MATCHES pattern_sli op_matches_escape { 
			$<s_select_list_item>$=new_select_list_item_regex(E_SLI_REGEX_MATCHES,$<s_select_list_item>1,$<s_select_list_item>3,$<str>4);
	}
	| value_expression_sli NOT_MATCHES pattern_sli op_matches_escape { 
			$<s_select_list_item>$=new_select_list_item_regex(E_SLI_REGEX_NOT_MATCHES,$<s_select_list_item>1,$<s_select_list_item>3,$<str>4);
	}
;

comp_op:
	NOT_EQUAL {
			if (A4GLSQLCV_check_requirement("NOT_EQUAL_AS_LESS_GREATER_THAN"))  {
				strcpy($<str>$," <> ");
			} else {
				strcpy($<str>$," != ");
			}
	}
	| LESS_THAN {
			strcpy($<str>$," < ");
	}
	| GREATER_THAN  {
			strcpy($<str>$," > ");
	}
	| TILDE {
			strcpy($<str>$," ~ ");
	}
	| LESS_THAN_EQ {strcpy($<str>$," <= ");}
	| GREATER_THAN_EQ {strcpy($<str>$," >= ");}
;


predicate_sli:
	comparison_predicate_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
	}
	| in_predicate_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
	}
	| exists_predicate_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
	}
;


op_all: {strcpy($<str>$,"");}
	| ALL {strcpy($<str>$," ALL "); add_feature("AGG_ALL");}
	| DISTINCT {
		strcpy($<str>$," DISTINCT ");
		add_feature("AGG_DISTINCT");
	}
	| UNIQUE {
		ansi_violation("Use DISTINCT not UNIQUE",0);
		strcpy($<str>$," DISTINCT ");
		add_feature("AGG_DISTINCT");
	}
;

op_u_all: {strcpy($<str>$,"");}
	| ALL {strcpy($<str>$," ALL "); add_feature("UNION_ALL");}
	| DISTINCT {
		strcpy($<str>$," DISTINCT ");
		add_feature("UNION_DISTINCT");
	}
	| UNIQUE {
		ansi_violation("Use DISTINCT not UNIQUE",0);
		add_feature("UNION_DISTINCT");
		strcpy($<str>$," DISTINCT ");
	}
;







data_type :
	data_type_i {
		strcpy($<str>$,A4GLSQLCV_dtype_alias($<str>1));
	}
;


data_type_i:
	  char_string_type
	| exact_numeric_type
	| approx_numeric_type
;

char_string_type:
	  KW_CHAR
	| KW_CHAR OPEN_BRACKET length CLOSE_BRACKET
{SPRINTF4($<str>$," %s %s%s%s",$<str>1,$<str>2,$<str>3,$<str>4);}
;

exact_numeric_type:
	SERIAL  {strcpy($<str>$,"SERIAL"); add_feature("DDL_SERIAL"); }
	| SERIAL OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
			add_feature("DDL_SERIAL");
			if (A4GLSQLCV_check_requirement("NO_SERIAL_START_VALUE"))  {
				SPRINTF0($<str>$,"SERIAL");
			} else {
				SPRINTF1($<str>$,"SERIAL(%s)",$<str>3);
			}
	}

	| SERIAL8  {strcpy($<str>$,"SERIAL8"); add_feature("DDL_SERIAL8"); }

	| SERIAL8 OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
			add_feature("DDL_SERIAL8");
			if (A4GLSQLCV_check_requirement("NO_SERIAL_START_VALUE"))  {
				SPRINTF0($<str>$,"SERIAL8");
			} else {
				SPRINTF1($<str>$,"SERIAL8(%s)",$<str>3);
			}
	}

	| KW_DECIMAL  {
 			add_feature("DDL_DECIMAL");
	}
	| KW_DECIMAL OPEN_BRACKET precision op_scale CLOSE_BRACKET {
 			add_feature("DDL_DECIMAL");
		if (strlen($<str>4)) {
			SPRINTF2($<str>$,"DECIMAL(%s%s)",$<str>3,$<str>4);
		} else {
			SPRINTF1($<str>$,"DECIMAL(%s)",$<str>3);
		}
	}
	| MONEY OPEN_BRACKET precision op_scale CLOSE_BRACKET {
 			add_feature("DDL_MONEY");
		if (A4GLSQLCV_check_requirement("MONEY_AS_DECIMAL")) {
			SPRINTF2($<str>$," DECIMAL(%s%s)",$<str>3,$<str>4);
		} else {
			SPRINTF2($<str>$," MONEY(%s%s)",$<str>3,$<str>4);
		}
	}


	| MONEY  {
 			add_feature("DDL_MONEY");
		if (A4GLSQLCV_check_requirement ("MONEY_AS_DECIMAL")) {
			strcpy($<str>$,"DECIMAL");
		} else {
			strcpy($<str>$,"MONEY");
		}
	}
        | KW_DATE {strcpy($<str>$,"DATE");
 			add_feature("DDL_DATE"); }
	| INTEGER {strcpy($<str>$,"INTEGER");}
	| SMALLINT {strcpy($<str>$,"SMALLINT");}
	| NCHAR {strcpy($<str>$,"NCHAR"); add_feature("DDL_NCHAR");}
	| NCHAR OPEN_BRACKET length CLOSE_BRACKET {SPRINTF1($<str>$,"NCHAR(%s)",$<str>3); add_feature("DDL_NCHAR");}
	| NVARCHAR {add_feature("DDL_NVARCHAR");}
	| NVARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET {SPRINTF1($<str>$,"NVARCHAR(%s)",$<str>3); add_feature("DDL_NVARCHAR");}
	| NVARCHAR OPEN_BRACKET INT_VALUE KW_COMMA INT_VALUE CLOSE_BRACKET {
			add_feature("DDL_NVARCHAR");
			if (A4GLSQLCV_check_requirement("IGNORE_DTYPE_VARCHAR_MIN"))  {
				SPRINTF1($<str>$,"NVARCHAR(%s)",$<str>3);
			} else {
				SPRINTF2($<str>$,"NVARCHAR(%s,%s)",$<str>3,$<str>5);
			}
	}
	| DATETIME s_curr KW_TO e_curr {SPRINTF2($<str>$,"DATETIME %s TO %s",$<str>2,$<str>4); add_feature("DDL_DATETIME");}
	| DATETIME  {add_feature("DDL_DATETIME");}
	| INTERVAL s_curr KW_TO e_curr {SPRINTF2($<str>$,"INTERVAL %s TO %s",$<str>2,$<str>4); add_feature("DDL_INTERVAL");}
	| sql_time_dtypes {strcpy($<str>$,$<str>1);}
	| INTERVAL {add_feature("DDL_INTERVAL");}
	| INTERVAL s_curr OPEN_BRACKET INT_VALUE CLOSE_BRACKET KW_TO e_curr {SPRINTF3($<str>$,"INTERVAL %s(%s) TO %s",$<str>2,$<str>4,$<str>7); add_feature("DDL_INTERVAL");}
	| KW_TEXT {add_feature("DDL_TEXT");}
	| KW_BYTE {add_feature("DDL_BYTE");}
	| VARCHAR {add_feature("DDL_VARCHAR");}
	| VARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET {SPRINTF1($<str>$,"VARCHAR(%s)",$<str>3);add_feature("DDL_VARCHAR");}
	| VARCHAR OPEN_BRACKET INT_VALUE KW_COMMA INT_VALUE CLOSE_BRACKET {
			add_feature("DDL_VARCHAR");
			if (A4GLSQLCV_check_requirement("IGNORE_DTYPE_VARCHAR_MIN"))  {
				SPRINTF1($<str>$,"VARCHAR(%s)",$<str>3);
			} else {
				SPRINTF2($<str>$,"VARCHAR(%s,%s)",$<str>3,$<str>5);
			}
		}
;

op_scale: {strcpy($<str>$,"");}
	| KW_COMMA scale {
		SPRINTF1($<str>$,",%s",$<str>2);
}
;

approx_numeric_type:
	KW_FLOAT OPEN_BRACKET precision CLOSE_BRACKET
{SPRINTF4($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	| REAL
	| SMALLFLOAT
	| KW_FLOAT
	| DOUBLE_PRECISION {add_feature("DDL_DOUBLE_PRECISION"); SPRINTF1($<str>$," %s",$<str>1);}
;

length:
	INT_VALUE
;

precision:
	INT_VALUE
;

scale:
	INT_VALUE
;




authorization_identifier:
	identifier
	| CHAR_VALUE
;



op_col_arr : {$<int_list.i0>$=0;}
	| OPEN_SQUARE INT_VALUE CLOSE_SQUARE {
		$<int_list.i0>$=1;
		$<int_list.i1>$=atoi($<str>2);
	}
	| OPEN_SQUARE INT_VALUE KW_COMMA INT_VALUE CLOSE_SQUARE {
		$<int_list.i0>$=2;
		$<int_list.i1>$=atoi($<str>2);
		$<int_list.i2>$=atoi($<str>4);
	}
;

column_name : 
	column_name_specific {
		strcpy($<str>$,$<str>1);
	}
	| ATSIGN column_name_specific {
		strcpy($<str>$,$<str>2);
	}
;


column_name_sli : 
	column_name_sli_specific {
		$<s_select_list_item>$= $<s_select_list_item>1;
	}
	| ATSIGN column_name_sli_specific {
		$<s_select_list_item>$= $<s_select_list_item>2;
	}
;






column_name_sli_specific: identifier op_col_arr { 
		$<s_select_list_item>$=new_select_list_item_col(0,$<str>1,&$<int_list>2);
	}
	| table_name KW_DOT identifier op_col_arr {
		$<s_select_list_item>$=new_select_list_item_col($<str>1,$<str>3,&$<int_list>4);
	}
	| table_name  KW_DOT KW_MULTIPLY {
		$<s_select_list_item>$=new_select_list_item_col($<str>1,"*",0);
	}
;



column_name_specific: identifier op_col_arr { 
		struct ilist *i;
		i=&$<int_list>2;
		if (strcmp($<str>1,"rowid")==0) { strcpy($<str>1, A4GLSQLCV_get_sqlconst ("rowid")); add_feature("ROWID"); }
		ADDMAP("Use Column",$<str>1);
		strcpy($<str>$,A4GLSQLCV_make_substr(A4GLSQLCV_check_colname(0,$<str>1), i->i0,i->i1,i->i2));
	}
	| table_name KW_DOT identifier op_col_arr {
		struct ilist *i;
		if (strcmp($<str>3,"rowid")==0) { strcpy($<str>3, A4GLSQLCV_get_sqlconst ("rowid"));  add_feature("ROWID");}
		SPRINTF1($<str>$,"%s",A4GLSQLCV_check_colname($<str>1,$<str>3));
		ADDMAP("Use Column",$<str>$);
		i=&$<int_list>4;
		strcpy($<str>$,A4GLSQLCV_make_substr($<str>$,i->i0,i->i1,i->i2));
	}
	| identifier KW_DOT identifier KW_DOT identifier op_col_arr {
		struct ilist *i;
		if (strcmp($<str>3,"rowid")==0) { strcpy($<str>3, A4GLSQLCV_get_sqlconst ("rowid")); add_feature("ROWID"); }
		// First identifier is the owner...
		SPRINTF1($<str>$,"%s",A4GLSQLCV_check_colname(A4GLSQLCV_ownerize_tablename($<str>1,$<str>3),$<str>5));
		ADDMAP("Use Column",$<str>$);
		i=&$<int_list>4;
		strcpy($<str>$,A4GLSQLCV_make_substr($<str>$,i->i0,i->i1,i->i2));
	}
	| table_name  KW_DOT KW_MULTIPLY {
		SPRINTF1($<str>$,"%s",A4GLSQLCV_check_colname($<str>1,"*"));
		ADDMAP("Use Column",$<str>$);
	}
;

correlation_name:
	identifier
;


literal: CHAR_VALUE { strcpy($<str>$,$<str>1); A4GL_debug("Set $<str>$ to %s\n",$<str>$); }
	| real_number
	| INT_VALUE
        | curr_clause 
		
;


cur_part: { strcpy($<str>$,A4GLSQLCV_generate_current(0,0)); 
}
	| s_curr KW_TO e_curr {
		strcpy($<str>$,A4GLSQLCV_generate_current($<str>1,$<str>3));
	}
;





s_curr: YEAR | MONTH | DAY | HOUR | MINUTE | SECOND | FRACTION;
e_curr: YEAR | MONTH | DAY | HOUR | MINUTE | SECOND | FRACTION | FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET {SPRINTF1($<str>$,"FRACTION(%s)",$<str>3);}
;




simple_column_name : identifier {
	strcpy($<str>$,$<str>1);
     // SPRINTF1($<str>$,"\"%s\"",$<str>1);
}
;



execute_procedure:
	EXECUTE_PROCEDURE identifier OPEN_BRACKET CLOSE_BRACKET {
		add_sql_function($<str>2);
		if (A4GLSQLCV_check_requirement("EXECUTE_PROCEDURE_AS_EXEC")) {
			SPRINTF1($<str>$,"EXEC %s",$<str>2);
		} else {
			SPRINTF1($<str>$,"EXECUTE PROCEDURE %s ()",$<str>2);
		}
	}
	| EXECUTE_PROCEDURE identifier OPEN_BRACKET value_expr_list_slil CLOSE_BRACKET {
		add_sql_function($<str>2);
		if (A4GLSQLCV_check_requirement("EXECUTE_PROCEDURE_AS_EXEC")) {
			SPRINTF2($<str>$,"EXEC %s %s",$<str>2, get_select_list_item_list(0, $<s_select_list_item_list>4));
		} else {
			SPRINTF2($<str>$,"EXECUTE PROCEDURE %s (%s)",$<str>2, get_select_list_item_list(0, $<s_select_list_item_list>4));
		}
	}
;


misc_sql :
	lock_stmt 		{ $<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1), NULL);}
	| unlock_stmt  		{ $<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1), NULL);}
	| rename_stmt  		{ $<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1), NULL);}
	| execute_procedure  	{ $<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1), NULL);}

;

rename_stmt :
	RENTAB rentabname KW_TO rentabname { add_feature("RENAME_TABLE"); strcpy($<str>$,A4GLSQLCV_rentab($<str>2,$<str>4)); }
	| RENCOL table_name KW_DOT rencolname KW_TO rencolname { add_feature("RENAME_COLUMN"); strcpy($<str>$,A4GLSQLCV_rencol($<str>2,$<str>4,$<str>6) ); }
;

rentabname : identifier;
rencolname : identifier;

unlock_stmt:

	UNLOCK_TABLE table_name_not_for_column_prefix {
		add_feature("UNLOCK_TABLE");
		SPRINTF2($<str>$,"%s %s",$<str>1,$<str>2);
	}
;

lock_stmt :
	LOCK_TABLE table_name_not_for_column_prefix share_or_exclusive  {
		add_feature("LOCK_TABLE");
		SPRINTF3($<str>$,"%s %s %s",
					$<str>1,
					$<str>2,
					$<str>3
					);
		}
;

share_or_exclusive :
	INSHARE { add_feature("LOCK_TABLE_SHARED");}
	| INEXCLUSIVE {add_feature("LOCK_TABLE_EXCLUSIVE");}
;










datetime_value_qualified :
	datetime_value {strcpy($<str>$,A4GLSQLCV_datetime_value($<str>1));}
	| datetime_value s_curr KW_TO e_curr {strcpy($<str>$,A4GLSQLCV_make_dtime_extend($<str>1,$<str>2,$<str>4,0));}
;

datetime_value:
	DATETIME_VALUE  {strcpy($<str>$,$<str>1);}
;

interval_value_qualified :
	interval_value {strcpy($<str>$,A4GLSQLCV_interval_value($<str>1));}
	| interval_value s_curr OPEN_BRACKET INT_VALUE CLOSE_BRACKET KW_TO e_curr {
			strcpy($<str>$,A4GLSQLCV_make_ival_extend($<str>1,$<str>2,$<str>4,$<str>7,0));
		}
	| interval_value s_curr KW_TO e_curr {
		strcpy($<str>$,A4GLSQLCV_make_ival_extend($<str>1,$<str>2,(char *)0, $<str>4,0));
	}
;

interval_value:
	INTERVAL_VALUE  {SPRINTF1($<str>$,"%s",$<str>1);}
;


curr_clause : KW_CURRENT  cur_part {
	strcpy($<str>$,$<str>2);
}
;


















order_by_clause_slil:
	ORDER KW_BY sort_specification_list_slil {
		$<s_select_list_item_list>$=$<s_select_list_item_list>3;
		add_feature("ORDER_BY");
	}
;




sort_specification_list_slil:
	sort_specification_sli {
			$<s_select_list_item_list>$=local_new_select_list_item_list($<s_select_list_item>1);
	}
	| sort_specification_list_slil KW_COMMA sort_specification_sli {
			$<s_select_list_item_list>$=local_add_select_list_item_list($<s_select_list_item_list>1,$<s_select_list_item>3);
	}

;

sort_specification_sli : sort_spec_sli op_asc_desc {
		if (strcmp($<str>2,"DESC")!=0) {
			$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_ASC,$<s_select_list_item>1);
		} else {
			$<s_select_list_item>$=new_select_list_item_simple_expr(E_SLI_DESC,$<s_select_list_item>1);
		}
	}
;

sort_spec_sli: INT_VALUE  { 
		add_feature("ORDER_BY_NUMBER");
		$<s_select_list_item>$=new_select_list_item_literal($<str>1);
	}
	| column_name_sli {
		$<s_select_list_item>$=$<s_select_list_item>1;
		$<s_select_list_item>$->data.type=E_SLI_COLUMN_ORDERBY;
	}
;

op_asc_desc: {strcpy($<str>$,"");}
	| ASC 
		{add_feature("ORDER_BY_ASC"); strcpy($<str>$,"ASC");}
	| DESC
		{add_feature("ORDER_BY_DESC"); strcpy($<str>$,"DESC");}
;

group_by_clause_slil:
	GROUP_BY gr_column_specification_list_slil {
		$<s_select_list_item_list>$=$<s_select_list_item_list>2;
	}
;

gr_column_specification_list_slil:
	  gr_column_specification_sli {
			$<s_select_list_item_list>$=local_new_select_list_item_list($<s_select_list_item>1);
	}
	| gr_column_specification_list_slil KW_COMMA gr_column_specification_sli {
			$<s_select_list_item_list>$=local_add_select_list_item_list($<s_select_list_item_list>1,$<s_select_list_item>3);
	}
;


gr_column_specification_sli: column_name_sli { $<s_select_list_item>$=$<s_select_list_item>1; } 
	|  INT_VALUE  { $<s_select_list_item>$=new_select_list_item_literal($<str>1); }
;





search_condition_sli_as_string: search_condition_sli {
	$<sql_string>$=get_select_list_item(0,$<s_select_list_item>1);
}
;









query_specification_ss_converted:  query_specification_select {
		A4GL_set_sql_lineno(yylineno);
		$<sql_string>$=make_select_stmt_v2(current_upd_table, $<s_select>1,"");
		map_select_stmt("SELECT",$<s_select>1);
		A4GL_free_select_stmt($<s_select>1);
}
;


sql_time_dtypes: 
 TIME     { 
	if (A4GLSQLCV_check_requirement("ALLOW_TIME_DATATYPE")) {
       		strcpy($<str>$,"TIME"); break;
	} else {
       		strcpy($<str>$,"DATETIME HOUR TO FRACTION(2)"); break;
	}
 }
 | TIME OPEN_BRACKET INT_VALUE CLOSE_BRACKET   {
	int n;
       	n=atoi($<str>3);
	if (A4GLSQLCV_check_requirement("ALLOW_TIME_DATATYPE")){ 
		sprintf($<str>$,"TIME(%d)",n);
	} else {
        	switch (n) {
                	case 0: strcpy($<str>$,"DATETIME HOUR TO SECOND"); break; 
                	case 1: strcpy($<str>$,"DATETIME HOUR TO FRACTION(1)"); break;
                	case 2: strcpy($<str>$,"DATETIME HOUR TO FRACTION(2)"); break;
                	case 3: strcpy($<str>$,"DATETIME HOUR TO FRACTION(3)"); break;
                	case 4: strcpy($<str>$,"DATETIME HOUR TO FRACTION(4)"); break;
                	case 5: strcpy($<str>$,"DATETIME HOUR TO FRACTION(5)"); break;
                	default: a4gl_yyerror("Invalid time"); YYERROR;
        	}
	}
    }
 | TIMESTAMP {
	if (A4GLSQLCV_check_requirement("ALLOW_TIMESTAMP_DATATYPE")) {
		strcpy($<str>$,"TIMESTAMP");
	} else {
                strcpy($<str>$,"DATETIME YEAR TO FRACTION(2)"); 
	}
 }
 | TIMESTAMP OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
        int n;
       	n=atoi($<str>3);
	if (A4GLSQLCV_check_requirement("ALLOW_TIMESTAMP_DATATYPE")) {
		sprintf($<str>$,"TIMESTAMP(%d)",n);
	} else {
        	switch (n) {
                	case 0: strcpy($<str>$,"DATETIME YEAR TO SECOND"); break; 
                	case 1: strcpy($<str>$,"DATETIME YEAR TO FRACTION(1)"); break;
                	case 2: strcpy($<str>$,"DATETIME YEAR TO FRACTION(2)"); break;
                	case 3: strcpy($<str>$,"DATETIME YEAR TO FRACTION(3)"); break;
                	case 4: strcpy($<str>$,"DATETIME YEAR TO FRACTION(4)"); break;
                	case 5: strcpy($<str>$,"DATETIME YEAR TO FRACTION(5)"); break;
                	default: a4gl_yyerror("Invalid time"); YYERROR;
        	}
	}
 }
;

/* ========================= sql1.rule ================================ */
