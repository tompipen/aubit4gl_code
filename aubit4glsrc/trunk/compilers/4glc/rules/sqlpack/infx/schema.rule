/* ================= schema.rule ============== */


drops_statement : drops_c ;

drops_c : DROP_TABLE table_name {
			if (A4GLSQLCV_check_requirement("ADD_CASCADE")) {
				sprintf($<str>$, "DROP TABLE %s CASCADE",$<str>2);
			} else {
				sprintf($<str>$, "DROP TABLE %s",$<str>2);
			}
			add_feature("DROP_TABLE");
		}
	| DROP_VIEW table_name 		{sprintf($<str>$,"%s %s ",$<str>1,$<str>2);
			add_feature("DROP_VIEW");
}
	| DROP_INDEX idx_name 		{sprintf($<str>$,"%s %s",$<str>1,$<str>2);
		if (strchr($<str>2,'@') || strchr($<str>2,':')) add_feature("DROP_INDEX_QUALIFIED_PATH");
			add_feature("DROP_INDEX");
}
	| DROP_TRIGGER identifier 	{sprintf($<str>$,"%s %s",$<str>1,$<str>2);
			add_feature("DROP_TRIGGER");
}
;


create_statement_ss : create_c_1  {$<sql_string>$=acl_strdup($<str>1);}
	| create_c_2_ss  {$<sql_string>$=$<sql_string>1;}
;

create_c_2_ss  : 
	CREATE_TABLE table_name OPEN_BRACKET table_element_list_ss CLOSE_BRACKET opt_cr_table_extra {
		$<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1),kw_space,acl_strdup($<str>2),kw_space,kw_ob,$<sql_string>4,kw_cb,acl_strdup($<str>6),0);
		add_feature("CREATE_TABLE");
	} 

	| CREATE_TEMP_TABLE table_name OPEN_BRACKET table_element_list_ss CLOSE_BRACKET op_no_log opt_cr_table_extra op_no_log {
		char *tstr;
		tstr="";
		if (strlen($<str>6)) tstr=$<str>6;
		if (strlen($<str>8)) tstr=$<str>8;
		$<sql_string>$=A4GLSQLCV_create_temp_table($<str>2,$<sql_string>4,tstr,$<str>7);
		add_feature("CREATE_TEMP_TABLE");
	}

;


opt_cr_table_extra : {strcpy($<str>$,"");} |
	cr_table_extra {strcpy($<str>$,$<str>1);}
;

cr_table_extra :
	cr_table_extra_entry |
	cr_table_extra cr_table_extra_entry {sprintf($<str>$,"%s%s",$<str>1,$<str>2); }
;


cr_table_extra_entry : 
	KW_IN space_name {sprintf($<str>$," IN %s",$<str>2);add_feature("CREATE_TABLE_IN");}
	| EXTENT_SIZE INT_VALUE {sprintf($<str>$," EXTENT SIZE %s",$<str>2); add_feature("CREATE_TABLE_EXTENT_SIZE");}
	| NEXT_SIZE INT_VALUE {sprintf($<str>$," NEXT SIZE %s",$<str>2); add_feature("CREATE_TABLE_NEXT_SIZE"); }
	| LOCK_MODE_PAGE {sprintf($<str>$," LOCK MODE PAGE"); add_feature("CREATE_TABLE_LOCK_MODE"); }
	| LOCK_MODE_ROW {sprintf($<str>$," LOCK MODE ROW"); add_feature("CREATE_TABLE_LOCK_MODE");}
;

space_name : NAMED;

op_cr_index_extra: {strcpy($<str>$,"");} | cr_index_extra {strcpy($<str>$,$<str>1);}
;

cr_index_extra : cr_index_extra_entry 
	| cr_index_extra cr_index_extra_entry {sprintf($<str>$,"%s%s",$<str>1,$<str>2);}
;

cr_index_extra_entry :
	KW_IN space_name {sprintf($<str>$," IN %s",$<str>2); add_feature("INDEX_IN");}
	| FILLFACTOR INT_VALUE {sprintf($<str>$,"FILLFACTOR %s",$<str>2); add_feature("INDEX_FILLFACTOR");}
;

cr_table_name: table_name { strcpy(last_tmp_name,$<str>1); } ;


create_c_1  : 
	CREATE_U_IDX idx_name KW_ON cr_table_name OPEN_BRACKET idx_column_list CLOSE_BRACKET op_cr_index_extra {sprintf($<str>$,"CREATE UNIQUE INDEX %s %s %s %s %s %s %s",$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7,$<str>8);
		add_feature("CREATE_INDEX");
		add_feature("CREATE_INDEX_UNIQUE");
		if (strchr($<str>2,'@') || strchr($<str>2,':')) add_feature("CREATE_INDEX_QUALIFIED_PATH");
		if (strchr($<str>6,',')) { add_feature("CREATE_INDEX_COMPOSITE"); }
	
} 
	| CREATE_UC_IDX idx_name KW_ON cr_table_name OPEN_BRACKET idx_column_list CLOSE_BRACKET op_cr_index_extra {
		add_feature("CREATE_INDEX");
		add_feature("CREATE_INDEX_UNIQUE");
		add_feature("CLUSTER_INDEX");
		if (strchr($<str>2,'@') || strchr($<str>2,':')) add_feature("CREATE_INDEX_QUALIFIED_PATH");
		if (strchr($<str>6,',')) { add_feature("CREATE_INDEX_COMPOSITE"); }
		if (A4GLSQLCV_check_requirement("OMIT_INDEX_CLUSTER")) {
		sprintf($<str>$,"CREATE UNIQUE INDEX %s %s %s %s %s %s %s",$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7,$<str>8);
		} else {
		sprintf($<str>$,"CREATE UNIQUE CLUSTER INDEX %s %s %s %s %s %s %s",$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7,$<str>8);
		}
	} 
	| CREATE_C_IDX idx_name KW_ON cr_table_name OPEN_BRACKET idx_column_list CLOSE_BRACKET op_cr_index_extra {
		add_feature("CREATE_INDEX");
		add_feature("CLUSTER_INDEX");
		if (strchr($<str>2,'@') || strchr($<str>2,':')) add_feature("CREATE_INDEX_QUALIFIED_PATH");
		if (strchr($<str>6,',')) { add_feature("CREATE_INDEX_COMPOSITE"); }
		if (A4GLSQLCV_check_requirement("OMIT_INDEX_CLUSTER")) {
			sprintf($<str>$,"CREATE INDEX %s %s %s %s %s %s %s",$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7,$<str>8);
		} else {
			sprintf($<str>$,"CREATE CLUSTER INDEX %s %s %s %s %s %s %s",$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7,$<str>8);
		}
	} 
	| CREATE_IDX idx_name KW_ON cr_table_name OPEN_BRACKET idx_column_list CLOSE_BRACKET op_cr_index_extra {
		if (strchr($<str>2,'@') || strchr($<str>2,':')) add_feature("CREATE_INDEX_QUALIFIED_PATH");
		if (strchr($<str>6,',')) { add_feature("CREATE_INDEX_COMPOSITE"); }
			add_feature("CREATE_INDEX");
			sprintf($<str>$," CREATE INDEX %s %s %s %s %s %s %s",$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7,$<str>8);
	} 
	| CREATE_DATABASE ident_or_var {
		add_feature("CREATE_DATABASE");
		a4gl_yyerror("You cannot create a database from within Aubit4gl - if the target database allows - prepare and execute it manually");
	}
	| DROP_DATABASE ident_or_var {
		add_feature("DROP_DATABASE");
		a4gl_yyerror("You cannot drop a database from within Aubit4gl - if the target database allows - prepare and execute it manually");
	}
	| CREATE_SYNONYM table_name FOR table_name { 
		if (strchr($<str>2,'@') || strchr($<str>2,':')) add_feature("CREATE_SYNONYM_QUALIFIED_PATH");
			add_feature("CREATE_SYNONYM");
			sprintf($<str>$,"%s %s FOR %s",$<str>1,$<str>2,$<str>4); 
	}
	| CREATE_AUDIT_FOR table_name KW_IN CHAR_VALUE { 
		add_feature("CREATE_AUDIT");
		sprintf($<str>$,"CREATE AUDIT FOR %s IN '%s'",$<str>2,A4GL_strip_quotes($<str>4)); 
	}
	| DROP_AUDIT_FOR table_name  { 
		add_feature("DROP_AUDIT");
		sprintf($<str>$,"DROP AUDIT FOR %s",$<str>2); }
	| DROP_SYNONYM table_name { 
		if (strchr($<str>2,'@') || strchr($<str>2,':')) add_feature("DROP_SYNONYM_QUALIFIED_PATH");
		add_feature("DROP_SYNONYM");
		sprintf($<str>$,"%s %s",$<str>1,$<str>2); }
	| RECOVER_TABLE table_name { 
		add_feature("RECOVER_TABLE");
		sprintf($<str>$,"RECOVER TABLE %s",$<str>2); }
	| ROLLFORWARD_DATABASE var_ident_qchar { 
		add_feature("ROLLFORWARD_DATABASE");
		sprintf($<str>$,"ROLLFORWARD DATABASE %s",$<str>2); }
;



op_no_log : {strcpy($<str>$,"");} 
	| WITH_NO_LOG {
		add_feature("SELECT_INTO_TEMP_WITH_NO_LOG");
		if (A4GLSQLCV_check_requirement("OMIT_NO_LOG")) {
			strcpy($<str>$,"");
		} else {
			sprintf($<str>$," %s ",$<str>1);
		}
	}
;

op_no_log_i : {$<integer_val>$=0;}
	| WITH_NO_LOG { $<integer_val>$=1;}
;

idx_column_list : 
		idx_column 
		| idx_column_list KW_COMMA idx_column {sprintf($<str>$,"%s,%s",$<str>1,$<str>3);}
;

idx_column : 
 identifier ASC {
		add_feature("CREATE_INDEX_ASC");
		strcpy($<str>$,A4GL_confirm_colname(last_tmp_name,$<str>1));
		if (A4GLSQLCV_check_requirement("OMIT_INDEX_ORDER")) {
			sprintf($<str>$,"%s",$<str>1);
		} else {
			sprintf($<str>$,"%s ASC",$<str>1);
		}
}
| identifier DESC {
		add_feature("CREATE_INDEX_DESC");
		strcpy($<str>$,A4GL_confirm_colname(last_tmp_name,$<str>1));
		if (A4GLSQLCV_check_requirement("OMIT_INDEX_ORDER")) {
			sprintf($<str>$,"%s",$<str>1);
		} else {
			sprintf($<str>$,"%s DESC",$<str>1);
		}
}
| identifier {
		strcpy($<str>$,A4GL_confirm_colname(last_tmp_name,$<str>1));
}
;


table_element_list_ss:
  	table_element_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| table_element_list_ss KW_COMMA table_element_ss {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,kw_comma,$<sql_string>3,0);
	}
;
	
table_element_ss:
	  ct_column_definiton_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| table_constraint_definition_ss {
		$<sql_string>$=$<sql_string>1;
	}
	;
	






alter_statement_ss : ALTER_TABLE identifier alter_clauses_ss {
		add_feature("ALTER_TABLE");
	$<sql_string>$=make_sql_string_and_free(acl_strdup($<str>1),kw_space,acl_strdup($<str>2),kw_space,$<sql_string>3,0);
	}
	| ALTER_INDEX idx_name TO_CLUSTER {
		add_feature("CLUSTER_INDEX");
		add_feature("ALTER_INDEX_CLUSTER");
		$<sql_string>$=make_sql_string_and_free(acl_strdup("ALTER INDEX "),acl_strdup($<str>2),acl_strdup(" TO CLUSTER"),0);
		}
	| ALTER_INDEX idx_name TO_NOT_CLUSTER {
		add_feature("ALTER_INDEX_NOT_CLUSTER");
		$<sql_string>$=make_sql_string_and_free(acl_strdup("ALTER INDEX "),acl_strdup($<str>2),acl_strdup(" TO NOT CLUSTER"),0);
		}
;

alter_clauses_ss:
	alter_clause_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| alter_clauses_ss KW_COMMA alter_clause_ss {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,kw_comma,$<sql_string>3,0);
	}


;


alter_clause_ss:
	alter_add_clause_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| alter_drop_clause {
	add_feature("ALTER_TABLE_DROP");
		$<sql_string>$=acl_strdup($<str>1);
	}
	| alter_modify_clause_ss {
	add_feature("ALTER_TABLE_MODIFY");
		$<sql_string>$=$<sql_string>1;
	}
	| alter_add_constraint_clause {
		add_feature("ALTER_TABLE_ADD_CONSTRAINT");
		$<sql_string>$=acl_strdup($<str>1);
	}
	| alter_drop_constraint_clause {
		add_feature("ALTER_TABLE_DROP_CONSTRAINT");
		$<sql_string>$=acl_strdup($<str>1);
	}
	| alter_modify_next {
		add_feature("ALTER_TABLE_MODIFY_NEXT");
		$<sql_string>$=acl_strdup($<str>1);
	}
	| alter_lock_mode {
		add_feature("ALTER_TABLE_LOCK_MODE");
		$<sql_string>$=acl_strdup($<str>1);
	}
;


alter_add_clause_ss:
	ADD add_column_clause_ss  {
		add_feature("ALTER_TABLE_ADD");
		$<sql_string>$=make_sql_string_and_free(acl_strdup("ADD "),$<sql_string>2,0);
	}
	| ADD OPEN_BRACKET add_column_clauses_ss CLOSE_BRACKET {
		add_feature("ALTER_TABLE_ADD");
		$<sql_string>$=make_sql_string_and_free(acl_strdup("ADD "),kw_ob,$<sql_string>3,kw_cb,0);
	}
;


add_column_clause_ss:
	table_element_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| table_element_ss BEFORE identifier {
		add_feature("ALTER_TABLE_ADD_BEFORE");
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,acl_strdup(" BEFORE "),acl_strdup($<str>3),0);
	}
;

add_column_clauses_ss:
	add_column_clause_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| add_column_clauses_ss KW_COMMA add_column_clause_ss {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,kw_comma,$<sql_string>3,0);
	}
;


alter_drop_clause:
	DROP drop_column {
		sprintf($<str>$,"DROP %s",$<str>2);
	}
	| DROP OPEN_BRACKET drop_column_list CLOSE_BRACKET {
		sprintf($<str>$,"DROP (%s)",$<str>3);
	}
;


drop_column_list:
	drop_column 
	| drop_column_list KW_COMMA drop_column {
		sprintf($<str>$,"%s,%s",$<str>1,$<str>3);
	}
;

drop_column : identifier
;

alter_modify_clause_ss :
	MODIFY modify_column_clause_ss {
		$<sql_string>$=make_sql_string_and_free(acl_strdup("MODIFY "),$<sql_string>2,0);
	}
	| MODIFY OPEN_BRACKET modify_column_clauses_ss CLOSE_BRACKET {
		$<sql_string>$=make_sql_string_and_free(acl_strdup("MODIFY "),kw_ob,$<sql_string>3,kw_cb,0);
	}
;

modify_column_clauses_ss :
	modify_column_clause_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| modify_column_clauses_ss KW_COMMA modify_column_clause_ss {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,kw_comma,$<sql_string>3,0);
	}
;

modify_column_clause_ss :
	table_element_ss {
		$<sql_string>$=$<sql_string>1;
	}
;


alter_lock_mode :
	LOCK_MODE_PAGE {strcpy($<str>$,"LOCK MODE (PAGE)");}
	| LOCK_MODE_ROW {strcpy($<str>$,"LOCK MODE (ROW)");}
;

alter_modify_next :
	MODIFY_NEXT_SIZE INT_VALUE {
		add_feature("DDL_NEXT_SIZE");
		sprintf($<str>$,"MODIFY NEXT SIZE %d",atoi($<str>2));
	}
;

alter_add_constraint_clause:

	ADD_CONSTRAINT table_constraint_definition_ss opt_constraint_name {
		add_feature("DDL_CONSTRAINT");
		sprintf($<str>$,"ADD CONSTRAINT %s%s",$<sql_string>2,$<str>3);
	}
	| ADD_CONSTRAINT OPEN_BRACKET table_constraint_definition_list_ss CLOSE_BRACKET {
		add_feature("ADD_CONSTRAINT");
		sprintf($<str>$,"ADD CONSTRAINT (%s)",$<sql_string>3);
	}
;


table_constraint_definition_list_ss: table_constraint_definition_ss opt_constraint_name {
		$<sql_string>$=make_sql_string_and_free($<sql_string>1,acl_strdup($<str>2),0);
} | table_constraint_definition_list_ss KW_COMMA table_constraint_definition_ss opt_constraint_name {
	$<sql_string>$=make_sql_string_and_free($<sql_string>1,kw_comma,$<sql_string>3,acl_strdup($<str>4), 0);
}
;

opt_constraint_name : {strcpy($<str>$,"");} 
		| CONSTRAINT identifier {sprintf($<str>$," %s %s",$<str>1,$<str>2); add_feature("DDL_CONSTRAINT");}
;

alter_drop_constraint_clause:
	DROP_CONSTRAINT constraint_names
		{ sprintf($<str>$,"DROP CONSTRAINT %s",$<str>2); add_feature("DROP_CONSTRAINT"); }
	| DROP_CONSTRAINT OPEN_BRACKET constraint_names CLOSE_BRACKET {add_feature("DROP_CONSTRAINT");
		sprintf($<str>$,"DROP CONSTRAINT (%s)",$<str>3);
	}
;

constraint_names :
	constraint_name {strcpy($<str>$,$<str>1);}
	| constraint_names KW_COMMA constraint_name {sprintf($<str>$,"%s,%s",$<str>1,$<str>3);}
;

constraint_name: identifier
;


