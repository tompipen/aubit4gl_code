/*
=====================================================================
                        Source: input.rule
=====================================================================
*/

end_input :
| field_commands END_INPUT ;

opt_defs : {
sprintf($<str>$,"0");
} | WITHOUT_DEFAULTS {
sprintf($<str>$,"1");
}
;

field_commands : field_command | field_commands field_command;

field_command :  
	  BEFFIELD bef_field_list 
		{
		print_befaft_field_1($<str>2);
} commands {
	print_befaft_field_2();
}
	| AFTFIELD aft_field_list
		{
		print_befaft_field_1($<str>2);
} commands {
	print_befaft_field_2();
}
	| AFTROW {
		print_befaft_field_1("AFT_ROW");
} commands {
	print_befaft_field_2();
}
	| BEFROW {
		A4GL_lex_printcomment("/* before row */ \n");
		print_befaft_field_1("BEF_ROW");
} commands {
	print_befaft_field_2();
		}
	| on_key_command {
	print_onkey_1($<str>1);
} commands {
	print_onkey_2();
}
	| AFTINP {
		print_befaft_field_1("AFTER_INP");
} commands {
	print_befaft_field_2();
}
	| BEFINP {
		print_befaft_field_1("BEFORE_INP");
} commands {
	print_befaft_field_2();
}
	| BEFORE_DELETE  {
		print_befaft_field_1("DO_BEFORE_DELETE");
	} commands { print_befaft_field_2(); }
	| BEFORE_INSERT  {
		print_befaft_field_1("DO_BEFORE_INSERT");
	} commands { print_befaft_field_2(); }
	| AFTER_DELETE  {
		print_befaft_field_1("DO_AFTER_DELETE");
	} commands { print_befaft_field_2(); }
	| AFTER_INSERT  {
		print_befaft_field_1("DO_AFTER_INSERT");
	} commands { print_befaft_field_2(); }


;
/*
a_ins_or_delete_row :
	a_ins_or_delete {sprintf($<str>$,"(%s)",$<str>1);} 
	| a_ins_or_delete_row COMMA a_ins_or_delete {
	char buff[256];
	sprintf(buff,"(%s)",$<str>3);
	A4GL_generate_or($<str>$,$<str>1,buff);
	}
;

a_ins_or_delete:
	INSERT {strcpy($<str>$,"AFT_INSERT");}
	| DELETE {strcpy($<str>$,"AFT_DELETE");}
;


b_ins_or_delete_row :
	b_ins_or_delete {sprintf($<str>$,"(%s)",$<str>1);} 
	| b_ins_or_delete_row COMMA b_ins_or_delete {
	char buff[80];
		sprintf(buff,"(%s)",$<str>3);
		A4GL_generate_or($<str>$,$<str>1,$<str>3);
 }

;

b_ins_or_delete:
	INSERT {strcpy($<str>$,"BEF_INSERT");}
	| DELETE {strcpy($<str>$,"BEF_DELETE");}
;
*/




bef_field_list :
	field_name {sprintf($<str>$,"BEF_FIELD_CHK(%s)",$<str>1);}
	| bef_field_list COMMA field_name {
	char buff[80];
	sprintf(buff,"BEF_FIELD_CHK(%s)",$<str>3);
	A4GL_generate_or($<str>$,$<str>1,buff);
	}
;

aft_field_list :
	field_name {sprintf($<str>$,"AFT_FIELD_CHK(%s)",$<str>1);}
	|aft_field_list COMMA field_name {
	char buff[80];
	sprintf(buff,"AFT_FIELD_CHK(%s)",$<str>3);
	A4GL_generate_or($<str>$,$<str>1,buff);
	}
;



next_field_cmd : NEXTFIELD next_field {
print_next_field($<str>2);
}
;

next_form_cmd : NEXTFORM identifier KWFIELD next_field {
print_next_form_field($<str>2,$<str>4);
}
;

next_field	:	NEXT {sprintf($<str>$,"\"+\",0");}
		| 	PREVIOUS {sprintf($<str>$,"\"-\",0");}
		| 	field_name 
;

input_cmd	:	INPUT inp_rest
{
print_input_1();
} end_input 
{
print_input_2($<str>2);
}
;


inp_rest:
BY_NAME ibind_var_list opt_defs opt_help_no opt_attributes 
{
print_input(1,$<str>3,$<str>4,0);
strcpy($<str>$,A4GL_get_formloop_str(0));
}
| ibind_var_list opt_defs FROM fld_list  opt_help_no opt_attributes 
{
print_input(0,$<str>2,$<str>5,$<str>4);
strcpy($<str>$,A4GL_get_formloop_str(0));
}
| ARRAY use_arr_var opt_defs FROM identifier DOT MULTIPLY opt_help_no {
inp_flags=0;} opt_attributes
{
strcpy($<str>$,print_input_array($<str>2,$<str>8,$<str>3,$<str>5,$<str>10));
}
;




scroll_cmd : 
	SCROLL fld_list up_or_down {
		print_scroll($<str>2,$<str>3);
	}
;

up_or_down : UP {strcpy($<str>$,"1");} 
	| DOWN {strcpy($<str>$,"-1");}
	| UP_BY INT_VALUE {sprintf($<str>$,"%s",$<str>2);}
	| DOWN_BY INT_VALUE {sprintf($<str>$,"-%s",$<str>2);}
;

op_help : {strcpy($<str>$,"");} | HELP INT_VALUE
;

input_array_attributes: input_array_attributes_int {
	strcpy($<str>$,"");
}
;


input_array_attributes_int : 
	CURRENT_ROW_DISPLAY_EQUAL CHAR_VALUE
	| COUNT EQUAL INT_VALUE
	| COUNT EQUAL variable
	| MAXCOUNT EQUAL INT_VALUE
	| MAXCOUNT EQUAL variable
	| INSERT_ROW_EQUAL_TRUE
	| INSERT_ROW_EQUAL_FALSE
	| DELETE_ROW_EQUAL_TRUE
	| DELETE_ROW_EQUAL_FALSE
;

/* ========================= input.rule ============================= */
