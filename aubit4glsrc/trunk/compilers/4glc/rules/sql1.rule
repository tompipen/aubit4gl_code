/*
=====================================================================
                        Source: sql1.rule
=====================================================================
*/

rollback_statement:
	ROLLBACK_W 
		{
		print_sql_commit(0);
		}
	;




insert_statement_ss:
INSERT_INTO { insql=1;start_bind('i',0);} table_name op_insert_column_list ins_2_ss {
	$<sql_string>$=make_sql_string($<str>1," ",$<str>3," ",$<str>4," ",$<sql_string>5,0);
}
;

ins_2_ss : VALUES {insql=1;} OPEN_BRACKET insert_value_list_ss CLOSE_BRACKET {
insql=0;
	//printf("Value = %s\n",$<sql_string>4);
$<sql_string>$=make_sql_string($<str>1," (",$<sql_string>4,")",0);}
	| query_specification_ss
		{$<sql_string>$=$<sql_string>1;}
	;

op_insert_column_list: {strcpy($<str>$,"");}
	| OPEN_BRACKET insert_column_list CLOSE_BRACKET
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;


insert_column_list:
	column_name
	| insert_column_list COMMA column_name
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

insert_value_list_ss:
	insert_value_ss {
		$<sql_string>$=$<sql_string>1;
	//printf(" 1. Value = %s\n",$<sql_string>$);
	}
	| insert_value_list_ss COMMA insert_value_ss {
		$<sql_string>$=make_sql_string($<sql_string>1,",", $<sql_string>3,0);
	//printf(" 2. Value = %s\n",$<sql_string>$);
	}
;

insert_value_ss:
	value_expression_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| KW_NULL {
		$<sql_string>$=strdup("NULL");
	}
	;

fetch_statement:
	FETCH 
    {
      print_fetch_1();
    } 
  fetch_part 
    {
      print_fetch_2();
    } 
	opt_into_fetch_part
    {
      print_fetch_3($<str>3,$<str>5);
    }
;



fetch_part: 
	fetch_place  fetch_cursor_name
{sprintf($<str>$,"%s, %s",$<str>2,$<str>1);
addmap("Fetch Cursor",$<str>2,curr_func,yylineno,infilename);
}
        | fetch_cursor_name
{sprintf($<str>$,"%s, %d, 1",$<str>1,FETCH_RELATIVE);

addmap("Fetch Cursor",$<str>1,curr_func,yylineno,infilename);
}
;

opt_into_fetch_part: {
debug("no into\n");
strcpy($<str>$,"0,0");
} | 
	INTO {
	debug("FETCH INTO  ...");
	/* start_bind('i',0,-1); */
    start_bind('o',0);
}
    obind_var_list 
{
	int no;
	no=print_bind('o');
	sprintf($<str>$,"%d,obind",no);
}
;

opt_foreach_into_fetch_part: {
debug("no into\n");
strcpy($<str>$,"0,0");
} | 
	INTO {
	debug("FETCH INTO  ...");
	/* start_bind('i',0,-1); */
    start_bind('o',0);
}
        obind_var_list {
/*
int ni;
ni=print_bind('i');
sprintf($<str>$,"%d,ibind",ni);
*/
}
;

fetch_place : 
	FIRST {
		sprintf($<str>$,"%d,1",FETCH_ABSOLUTE);}
	| LAST
		{sprintf($<str>$,"%d,-1",FETCH_ABSOLUTE);}
	| NEXT
		{sprintf($<str>$,"%d,1",FETCH_RELATIVE);}
	| PREVIOUS
		{sprintf($<str>$,"%d,-1",FETCH_RELATIVE);}
	| PRIOR
		{sprintf($<str>$,"%d,-1",FETCH_RELATIVE);}
	| CURRENT
		{sprintf($<str>$,"%d,0",FETCH_RELATIVE);}
	| RELATIVE fgl_expr
		{sprintf($<str>$,"%d,pop_int()",FETCH_RELATIVE);}
	| ABSOLUTE fgl_expr
		{sprintf($<str>$,"%d,pop_int()",FETCH_ABSOLUTE);}
;


delete_statement_position:
	DELETE_FROM table_name WHERE_CURRENT_OF fetch_cursor_name
{
 
rm_quotes($<str>4);
sprintf($<str>$," %s %s %s %s ",$<str>1,$<str>2,$<str>3,$<str>4
);}
	;


delete_statement_search_ss:
	DELETE_FROM table_name op_where_clause_ss
              {
		$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<sql_string>3,0);
		}
	;

order_by_clause:
	ORDER BY sort_specification_list
	{sprintf($<str>$,"%s %s %s",$<str>1,$<str>2,$<str>3);}
	;

sort_specification_list:
	sort_specification
	| sort_specification_list COMMA sort_specification
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

sort_specification: sort_spec op_asc_desc;

sort_spec: INT_VALUE 
	| column_name 
	;

op_asc_desc: {strcpy($<str>$,"");}
	| ASC
	| DESC
	;

begin_statement: BEGIN_WORK {
print_sql_commit(-1);
};

commit_statement:
	COMMIT_W {
		print_sql_commit(1);
	}
	;


op_exclusive :
		{strcpy($<str>$,"");}
	|	EXCLUSIVE {
		strcpy($<str>$,"EXCLUSIVE");
	}
;

set_database_cmd : 
       DATABASE var_ident_qchar op_exclusive
{
if (strcmp($<str>2,"?")==0) {
	print_init_conn(0);
} else {
	print_init_conn($<str>2);
}
}

;


var_ident_qchar: var_ident {strcpy($<str>$,$<str>1);}
	| CHAR_VALUE {strcpy($<str>$,strip_quotes($<str>1));}
;

sql_cmd : opt_use {insql=1;} sql_commands {
print_undo_use($<str>1);
insql=0;strcpy($<str>$,$<str>3);}
;

sql_commands :  schema_ss {
			lex_printcomment("/*  schema */\n");
			print_exec_sql($<sql_string>1);
			strcpy($<str>$,"Schema");
	} 
	| schema_element_ss {
		lex_printcomment("/*  schema  2*/\n");
		print_exec_sql($<sql_string>1);
		strcpy($<str>$,"Schema Element");
	} 
	| commit_statement 
	| misc_sql {
		print_exec_sql($<str>1);
 	}
	| begin_statement 
	| delete_statement_position {
		lex_printcomment("/*  delete 1 */\n");
		print_exec_sql_bound($<str>1);
		strcpy($<str>$,"Delete where current...");
	} 
	| delete_statement_search_ss {
		lex_printcomment("/*  delete 2 */\n");
		print_exec_sql_bound($<sql_string>1);
		strcpy($<str>$,"Delete where ...");
	} 
	| fetch_statement {
		strcpy($<str>$,"Fetch");
		lex_printcomment("/*  fetch */\n");
	} 
	| insert_statement_ss {
		lex_printcomment("/*  insert */\n");
		print_exec_sql_bound($<sql_string>1);
		strcpy($<str>$,"insert");
	} 
	| rollback_statement 
	| select_statement_full_ss {
		print_do_select($<sql_string>1);
		strcpy($<str>$,"select");
	} 
	| update_statement_ss {
		print_exec_sql_bound($<sql_string>1);
		strcpy($<str>$,"update");
	} 
	;

privilege_definition:
	GRANT privileges ON table_name TO grantee_list op_with_grant_option
{sprintf($<str>$," %s %s %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7);}
	;

op_with_grant_option: {strcpy($<str>$,"");}
	| WITH_GRANT_OPTION
{sprintf($<str>$," %s ",$<str>1);}
	;

privileges:
	ALL_PRIVILEGES
{sprintf($<str>$," %s ",$<str>1);}
	| action_list
	;

action_list:
	action
	| action_list COMMA action
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

action: SELECT
	| INSERT
	| DELETE
	| UPDATE op_grant_column_list
{sprintf($<str>$," %s %s",$<str>1,$<str>2);}
	;

op_grant_column_list: {strcpy($<str>$,"");}
	| OPEN_BRACKET grant_column_list CLOSE_BRACKET
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

grant_column_list:
	  column_name
	| grant_column_list COMMA column_name
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

grantee_list:
	  grantee
	| grantee_list COMMA grantee
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

grantee:
	PUBLIC
	| authorization_identifier
	;


view_definition_ss:
	CREATE_VIEW table_name op_view_column_list AS query_specification_ss op_with_check_option {
$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<str>3," ",$<str>4," ",$<sql_string>5," ",$<str>6,0);
}
;

op_view_column_list: {strcpy($<str>$,"");}
	| OPEN_BRACKET view_column_list CLOSE_BRACKET
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

view_column_list:
	column_name
	| view_column_list COMMA column_name
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

op_with_check_option: {strcpy($<str>$,"");}
	| WITH_CHECK_OPTION
	;


check_constraint_definition_ss:
	CHECK OPEN_BRACKET search_condition_ss CLOSE_BRACKET {
		$<sql_string>$=make_sql_string("CHECK(",$<sql_string>3,")",0);
	}
	;


referential_constraint_definition:
	FOREIGN_KEY OPEN_BRACKET references_columns CLOSE_BRACKET references_specification
{sprintf($<str>$," %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5);}
	;

references_specification:
	REFERENCES referenced_table_and_columns
{sprintf($<str>$," %s %s",$<str>1,$<str>2);}
	;

references_columns:
	references_column_list
	;

referenced_table_and_columns:
	  table_name
	| table_name OPEN_BRACKET references_column_list CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	;

references_column_list:
	  column_name
	| references_column_list COMMA column_name
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;


unique_constraint_definition:
	  UNIQUE OPEN_BRACKET unique_column_list CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	| PRIMARY_KEY OPEN_BRACKET unique_column_list CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	;

unique_column_list:
	  column_name
	| unique_column_list COMMA column_name
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;
	

table_constraint_definition_ss:
	unique_constraint_definition {
		$<sql_string>$=strdup($<str>1);
	}
	| referential_constraint_definition {
		$<sql_string>$=strdup($<str>1);
	}
	| check_constraint_definition_ss  {
		$<sql_string>$=$<sql_string>1;
	}
	;


default_clause:
	  DEFAULT literal
{sprintf($<str>$," %s %s",$<str>1,$<str>2);}
	| DEFAULT_NULL
{sprintf($<str>$," %s",$<str>1);}
	;


column_definiton_ss:
	column_name data_type op_default_clause op_column_constraint_list_ss {
		$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<str>3," ",$<sql_string>4,0);
	}
	;

ct_column_definiton_ss:
	identifier data_type op_default_clause op_column_constraint_list_ss {
		$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<str>3," ",$<sql_string>4,0);
	}
;

op_default_clause: {strcpy($<str>$,"");}
	|default_clause
;

op_column_constraint_list_ss: {
		$<sql_string>$=strdup("");
	} | column_constraint_list_ss {
		$<sql_string>$=$<sql_string>1;
	}
;


column_constraint_list_ss :
	column_constraint_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| column_constraint_list_ss column_constraint_ss {
		$<sql_string>$=make_sql_string($<sql_string>1,$<sql_string>2,0);
	}
;

column_constraint_ss:
	  NOT_NULL {
		sprintf($<str>$," %s ",$<str>1);
		$<sql_string>$=strdup($<str>$);
	}
	| NOT_NULL_UNIQUE {
		sprintf($<str>$," %s ",$<str>1);
		$<sql_string>$=strdup($<str>$);
	}
	| references_specification {
		$<sql_string>$=strdup($<str>1);
	}
	| CHECK OPEN_BRACKET search_condition_ss CLOSE_BRACKET {
		$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<sql_string>3," ",$<str>4,0);
	}
	;


schema_ss:
	CREATE_SCHEMA schema_authorization_clause schema_element_list_ss
{
$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<str>3,0);
}
	;

schema_authorization_clause:
	schema_authorization_identifier
{sprintf($<str>$," %s",$<str>1);}
	;

schema_authorization_identifier:
	authorization_identifier
	;

schema_element_list_ss:
	  schema_element_ss
	| schema_element_list_ss schema_element_ss {
		$<sql_string>$=make_sql_string($<sql_string>1," ",$<sql_string>2,0);
	}
	;

schema_element_ss:
	view_definition_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| privilege_definition {
		$<sql_string>$=strdup($<str>1);
	}
	;






having_clause_ss:
	HAVING search_condition_ss {
		$<sql_string>$=make_sql_string($<str>1," ",$<sql_string>2,0);
	}
;


group_by_clause_ss:
	GROUP_BY column_specification_list_ss {
		$<sql_string>$=make_sql_string("GROUP BY ",$<sql_string>2,0);
	}
;

column_specification_list_ss:
	  column_specification_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| column_specification_list_ss COMMA column_specification_ss {
		$<sql_string>$=make_sql_string($<sql_string>1,",",$<sql_string>3,0);
	}
;


where_clause_ss:
	WHERE search_condition_ss {
		$<sql_string>$=make_sql_string("WHERE ",$<sql_string>2,0);
	}
;


from_clause:
	FROM table_reference_list {
		sprintf($<str>$,"%s %s",$<str>1,$<str>2);
	}
;

table_reference_list:
	  table_reference
	| table_reference_list COMMA table_reference {
		sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);
	}
	;

table_reference:
	  tname {sprintf($<str>$," %s ", $<str>1);}
	| OUTER tname {sprintf($<str>$," %s %s ",$<str>1,$<str>2);}
	| OUTER OPEN_BRACKET tname_list  CLOSE_BRACKET {sprintf($<str>$," %s (%s) ",$<str>1,$<str>3);}
	;

tname: table_name
	| table_name correlation_name {sprintf($<str>$,"%s %s",$<str>1,$<str>2);}
;


/* Was tname instead of table_reference */
tname_list : table_reference | tname_list COMMA table_reference { sprintf($<str>$," %s,%s ",$<str>1,$<str>3);  }
;

table_expression_ss:
	from_clause  
	op_where_clause_ss
	op_group_by_clause_ss
	op_having_clause_ss {
		$<sql_string>$=make_sql_string($<str>1," ",$<sql_string>2," ",$<sql_string>3," ",$<sql_string>4,0);
	}
	;

op_where_clause_ss: /* empty */ { $<sql_string>$=strdup("");}
	| where_clause_ss {$<sql_string>$=$<sql_string>1;}
	;

op_group_by_clause_ss: /*empty */ {
	$<sql_string>$=strdup("");
}
	| group_by_clause_ss {
		$<sql_string>$=$<sql_string>1;
}
	;

op_having_clause_ss: {$<sql_string>$=strdup("");}
	| having_clause_ss {$<sql_string>$=$<sql_string>1;}
	;


search_condition_ss:
	boolean_term_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| search_condition_ss KW_OR boolean_term_ss {
		$<sql_string>$=make_sql_string($<sql_string>1," OR ",$<sql_string>3,0);
	}
	;

boolean_term_ss:
	boolean_factor_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| boolean_term_ss KW_AND boolean_factor_ss {
		$<sql_string>$=make_sql_string($<sql_string>1," AND ",$<sql_string>3,0);
	}
	;

boolean_factor_ss:
	boolean_primary_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| NOT boolean_primary_ss {
		$<sql_string>$=make_sql_string($<str>1," ",$<sql_string>2,0);
	}
;

boolean_primary_ss:
	  predicate_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| OPEN_BRACKET search_condition_ss CLOSE_BRACKET {
		$<sql_string>$=make_sql_string($<str>1,$<sql_string>2,$<str>3,0);
	}
;


exists_predicate_ss:
	EXISTS subquery_ss 		{$<sql_string>$=make_sql_string($<str>1," ",$<sql_string>2,0);}
	| NOT_EXISTS subquery_ss 	{$<sql_string>$=make_sql_string($<str>1," ",$<sql_string>2,0);}
	;


//quantified_predicate_ss:
	//value_expression comp_op quantifier subquery_ss
//{$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<str>3," ",$<sql_string>4,0);}
	//| subquery_ss comp_op value_expression {$<sql_string>$=make_sql_string($<sql_string>1," ",$<str>2," ",$<str>3,0);}
	//;

quantifier:
	{strcpy($<str>$," ALL ");}
	| all
	| some
	;
all:
	ALL
	;

some:
	  SOME
	| ANY
	;





op_escape:
		{strcpy($<str>$,"");}
	| ESCAPE escape_character
	{sprintf($<str>$," %s %s",$<str>1,$<str>2);}
	;

pattern:
	  value_specification
	| identifier
	;

escape_character:
	  value_specification
	;


in_predicate_ss:
	value_expression_ss IN OPEN_BRACKET in_value_list CLOSE_BRACKET {
		$<sql_string>$=make_sql_string($<sql_string>1," IN (",$<str>4,")",0);
	}
	| value_expression_ss IN subquery_ss {
		$<sql_string>$=make_sql_string($<sql_string>1," ",$<str>2," ",$<sql_string>3,0);
	}
	| value_expression_ss NOT_IN OPEN_BRACKET in_value_list CLOSE_BRACKET {
		$<sql_string>$=make_sql_string($<sql_string>1," NOT IN (",$<str>4,")",0);
	}
	| value_expression_ss NOT_IN subquery_ss {
		$<sql_string>$=make_sql_string($<sql_string>1," ",$<str>2," ",$<sql_string>3,0);
	}
;

in_value_list:
	  in_value_specification
	| in_value_list COMMA in_value_specification
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
	;

in_value_specification : var_ident_ibind_ss {
		strcpy($<str>$,$<sql_string>1);
	}
	 | literal
;

op_not: {strcpy($<str>$,"");}
	| NOT
	;


comparison_predicate_ss:
	value_expression_ss op_not IS_NULL {
		$<sql_string>$=make_sql_string($<sql_string>1,$<str>2," IS NULL",0);
	}
	| value_expression_ss op_not IS_NOT_NULL {
		$<sql_string>$=make_sql_string($<sql_string>1,$<str>2," IS NOT NULL",0);
	}
	| value_expression_ss comp_op value_expression_ss {
		$<sql_string>$=make_sql_string($<sql_string>1," ",$<str>2," ",$<sql_string>3,0);
	}
	| value_expression_ss op_not BETWEEN value_expression_ss KW_AND value_expression_ss {
		$<sql_string>$=make_sql_string($<sql_string>1,$<str>2," BETWEEN ",$<sql_string>4," AND ",$<sql_string>6,0);
	}
	| value_expression_ss LIKE pattern op_escape {
		$<sql_string>$=make_sql_string($<sql_string>1," ",$<str>2," ",$<str>3,$<str>4,0);
	}
	| value_expression_ss NOT_LIKE pattern op_escape {
		$<sql_string>$=make_sql_string($<sql_string>1," ",$<str>2," ",$<str>3,$<str>4,0);
	}
	| value_expression_ss op_not MATCHES pattern op_escape {
		$<sql_string>$=make_sql_string($<sql_string>1,$<str>2," MATCHES ",$<str>4,$<str>5,0);
	}
	;

comp_op:
	  EQUAL
	| NOT_EQUAL {strcpy($<str>$,"!=");}
	| LESS_THAN
	| GREATER_THAN 
        | NOT_MATCHES
        //| NOT_LIKE
	| MATCHES
	//| LIKE {strcpy($<str>$,"likE");}
	| LESS_THAN_EQ {strcpy($<str>$,"<=");}
	| GREATER_THAN_EQ {strcpy($<str>$,">=");}
	;


predicate_ss:
	  comparison_predicate_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| in_predicate_ss {
		$<sql_string>$=$<sql_string>1;
	}
	//| quantified_predicate_ss { $<sql_string>$=$<sql_string>1; }
	| exists_predicate_ss {
		$<sql_string>$=$<sql_string>1;
	}
	;


op_all: {strcpy($<str>$,"");}
	| ALL {strcpy($<str>$," ALL ");}
	| DISTINCT {strcpy($<str>$," DISTINCT ");}
	| UNIQUE {
		ansi_violation("Use DISTINCT not UNIQUE",0);
		strcpy($<str>$," DISTINCT ");
	}
	;






data_type:
	  char_string_type
	| exact_numeric_type
	| approx_numeric_type
	;

char_string_type:
	  CHAR
	| CHAR OPEN_BRACKET length CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	;

exact_numeric_type:
	NUMERIC OPEN_BRACKET precision op_scale CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5);}
	| SERIAL  {strcpy($<str>$,"SERIAL");}
	| DECIMAL OPEN_BRACKET precision op_scale CLOSE_BRACKET
	| MONEY OPEN_BRACKET precision op_scale CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5);}
        | DATE
	| INTEGER
	| SMALLINT
	| DATETIME s_curr TO e_curr
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	| DATETIME 
	| INTERVAL s_curr TO e_curr
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	| INTERVAL
	| INTERVAL s_curr OPEN_BRACKET INT_VALUE CLOSE_BRACKET TO e_curr
{sprintf($<str>$," %s %s %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5,$<str>6,$<str>7);}
	| TEXT
	| BYTE
	| VARCHAR
	| VARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	| VARCHAR OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5,$<str>6);}
	;

op_scale: {strcpy($<str>$,"");}
	| COMMA scale {
		sprintf($<str>$,",%s",$<str>2);
}
	;

approx_numeric_type:
	FLOAT OPEN_BRACKET precision CLOSE_BRACKET
{sprintf($<str>$," %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
	| REAL
	| SMALLFLOAT
	| FLOAT
	| DOUBLE_PRECISION
{sprintf($<str>$," %s",$<str>1);}
	;

length:
	INT_VALUE
	;

precision:
	INT_VALUE
	;

scale:
	INT_VALUE
	;

table_name:
	 CHAR_VALUE DOT identifier { sprintf($<str>$,"\\\"%s\\\"%s%s",strip_quotes($<str>1),$<str>2,$<str>3); addmap("Use Table",$<str>$,curr_func,yylineno,infilename); }
	| CHAR_VALUE {
		sprintf($<str>$," %s",strip_quotes($<str>1));
		addmap("Use Table",$<str>$,curr_func,yylineno,infilename);
	}
	| identifier {strcpy($<str>$,$<str>1); addmap("Use Table",$<str>1,curr_func,yylineno,infilename); }
	| identifier COLON identifier { sprintf($<str>$," %s%s%s",$<str>1,$<str>2,$<str>3); addmap("Use Table",$<str>$,curr_func,yylineno,infilename); }
/*
	| identifier DOT identifier { sprintf($<str>$," %s%s%s",$<str>1,$<str>2,$<str>3); addmap("Use Table",$<str>$,curr_func,yylineno,infilename); }
*/

	;

db_name : identifier;

authorization_identifier:
	identifier
	;

table_identifier:
	identifier {strcpy($<str>$,$<str>1);}
	;


col_arr : {strcpy($<str>$,"");} 
	| OPEN_SQUARE INT_VALUE CLOSE_SQUARE {sprintf($<str>$,"[%s]",$<str>2);}
	| OPEN_SQUARE INT_VALUE COMMA INT_VALUE CLOSE_SQUARE {sprintf($<str>$,"[%s,%s]",$<str>2,$<str>4);}
;

column_name : 
	column_name_specific {
		strcpy($<str>$,$<str>1);
	}
	| ATSIGN column_name_specific {
		strcpy($<str>$,$<str>2);
	}
;

column_name_specific: identifier col_arr
{ 
addmap("Use Column",$<str>1,curr_func,yylineno,infilename);
sprintf($<str>$,"%s%s",$<str>1,$<str>2);
}
	| table_name DOT identifier col_arr
{
sprintf($<str>$,"%s.%s%s",$<str>1,$<str>3,$<str>4);
addmap("Use Column",$<str>$,curr_func,yylineno,infilename);
}
	| table_name  DOT MULTIPLY
 {
sprintf($<str>$,"%s.%s",$<str>1,$<str>3);
addmap("Use Column",$<str>$,curr_func,yylineno,infilename);
}
	;

correlation_name:
	identifier
	;


literal: CHAR_VALUE {
	strcpy($<str>$,convstrsql($<str>1));
	debug("Set $<str>$ to %s\n",$<str>$);
}
	| NUMERIC
	| real_number
	| INT_VALUE
	//| PLUS real_number {sprintf($<str>$," %s %s",$<str>1,$<str>2);}
	//| PLUS INT_VALUE {sprintf($<str>$," %s %s",$<str>1,$<str>2);}
	//| MINUS real_number {sprintf($<str>$," %s %s",$<str>1,$<str>2);}
	//| MINUS INT_VALUE {sprintf($<str>$," %s %s",$<str>1,$<str>2);}
        | curr_clause
	;

curr_v_clause : CURRENT  cur_v_part 
{strcpy($<str>$,$<str>2);}
;
curr_clause : CURRENT  cur_part 
{sprintf($<str>$," %s %s ",$<str>1,$<str>2);}
;

cur_part: {strcpy($<str>$," YEAR TO SECOND ");}
| s_curr TO e_curr
{sprintf($<str>$," %s %s %s",$<str>1,$<str>2,$<str>3);}
;

cur_v_part: {strcpy($<str>$,"1,10");}
| s_curr_v TO s_curr_v
{sprintf($<str>$," %s ,%s",$<str>1,$<str>3);}
;

s_curr_v: YEAR {strcpy($<str>$,"1");} | MONTH  {strcpy($<str>$,"2");}| DAY  {strcpy($<str>$,"3");}| HOUR  {strcpy($<str>$,"4");}| MINUTE  {strcpy($<str>$,"5");}| SECOND  {strcpy($<str>$,"6");}| 
FRACTION {
sprintf($<str>$,"%d",6+2);
}
| FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
sprintf($<str>$,"%d",atoi($<str>3)+6);
}
;

e_curr_v: YEAR {strcpy($<str>$,"4");} | MONTH  {strcpy($<str>$,"7");}| DAY  {strcpy($<str>$,"10");}| HOUR  {strcpy($<str>$,"13");}| MINUTE  {strcpy($<str>$,"16");}| SECOND  {strcpy($<str>$,"19");} 
| 
FRACTION {
strcpy($<str>$,"25");
} 
| FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET {
strcpy($<str>$,"25");
}
;


s_curr: YEAR | MONTH | DAY | HOUR | MINUTE | SECOND | FRACTION;
e_curr: YEAR | MONTH | DAY | HOUR | MINUTE | SECOND | FRACTION;

dbase_name	:	identifier {strcpy($<str>$,$<str>1);}
		|	CHAR_VALUE {strcpy($<str>$,strip_quotes($<str>1));}
		;

flush_cmd : opt_use
	FLUSH fetch_cursor_name  {
	print_flush_cursor($<str>3);
		addmap("Flush Cursor",$<str>3,curr_func,yylineno,infilename);
print_undo_use($<str>1);
		}

;

declare_cmd : opt_use DECLARE fetch_cursor_name CURSOR FOR cursor_specification_all_ss {insql=0;chk4var=0;} curs_forupdate {
		print_declare($<str>8,$<sql_string>6,$<str>3,0,0);
		addmap("Declare Cursor",$<str>3,curr_func,yylineno,infilename);
		print_undo_use($<str>1);
	}
	| opt_use DECLARE fetch_cursor_name CURSOR WITH_HOLD FOR cursor_specification_sel_ss {insql=0;chk4var=0;} curs_forupdate {
		print_declare($<str>9,$<sql_string>7,$<str>3,2,0); 
		addmap("Declare Cursor",$<str>3,curr_func,yylineno,infilename);
		print_undo_use($<str>1);
	}

        | opt_use DECLARE fetch_cursor_name SCROLL_CURSOR_FOR cursor_specification_sel_ss {insql=0;chk4var=0;} curs_forupdate {
		print_declare($<str>7,$<sql_string>5,$<str>3,0,1); 
		addmap("Declare Cursor",$<str>3,curr_func,yylineno,infilename);
		print_undo_use($<str>1);
	}
       	| opt_use DECLARE fetch_cursor_name SCROLL_CURSOR WITH_HOLD FOR cursor_specification_sel_ss {insql=0;chk4var=0;} curs_forupdate {
		print_declare($<str>9,$<sql_string>7,$<str>3,2,1); 
		addmap("Declare Cursor",$<str>3,curr_func,yylineno,infilename);
		print_undo_use($<str>1);
	}
;

curs_forupdate : {strcpy($<str>$,"0");} 
		| FOR_UPDATE {strcpy($<str>$,"1");} 
		| FOR_UPDATE_OF cur_update_list {strcpy($<str>$,"1");} 
		;

cur_update_list : colident | cur_update_list COMMA colident
;

colident: identifier
	| identifier DOT identifier {sprintf($<str>$,"%s.%s",$<str>1,$<str>3);}
	| CHAR_VALUE DOT identifier DOT identifier {sprintf($<str>$,"\\\"%s\\\".%s.%s",strip_quotes($<str>1),$<str>3,$<str>5);}
;
	

cursor_specification_all_ss:
	cursor_specification_sel_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| insert_statement_ss { 
		$<sql_string>$=make_sql_string(print_curr_spec(1,$<sql_string>1),0);
	}
;

cursor_specification_sel_ss:
	 stmt_id {
		$<sql_string>$=make_sql_string(print_curr_spec(2,$<str>1) ,0);
	}
	| select_statement_ss  {
		$<sql_string>$=$<sql_string>1;
	}
;



select_statement_full_ss : 
	select_statement_ss curs_forupdate
	{
	$<sql_string>$=$<sql_string>1;
	if (atoi($<str>2)) {
		printf("Warning SELECT ... FOR UPDATE when not declaring a cursor currently has no locking effect\n");
	}
}
// FIX USAGE
;

select_statement_ss:
	SELECT 
	op_ad 
	{ start_bind('i',0); }
	select_list_ss {debug("Got select list...\n");}
        opt_into_sel_ss 
	table_expression_ss
        sel_p2_ss {
		char *ptr;
                ptr=make_sql_string("SELECT ",$<str>2, $<sql_string>4," ", $<sql_string>6, " ",$<sql_string>7," ",$<sql_string>8,0);

		$<sql_string>$=strdup(print_select_all(ptr));
		free(ptr);
		free($<sql_string>4);
		free($<sql_string>6);
		free($<sql_string>7);
		free($<sql_string>8);
}
;


in_select_statement_ss:
	SELECT op_ad select_list_ss table_expression_ss sel_p2_ss {
		$<sql_string>$=make_sql_string("push_char(\"", $<str>1, " ",$<str>2," ", $<sql_string>3, " ",$<sql_string>4, " ",$<sql_string>5, "\");",0);
	free($<sql_string>3);
	free($<sql_string>4);
	free($<sql_string>5);
}

;

select_statement2_ss:
	select_statement21_ss {
		$<sql_string>$=$<sql_string>1;
	 }
	| char_or_var {
		$<sql_string>$=strdup($<str>1);
	};

select_statement21_ss:
	SELECT  op_ad select_list_ss
        opt_into_sel_ss
	table_expression_ss
        sel_p2_ss {
	$<sql_string>$=make_sql_string($<str>1, " ",$<str>2," ",$<sql_string>3," ", $<sql_string>4," ", $<sql_string>5, " ",$<sql_string>6,0);
	free($<sql_string>3);
	free($<sql_string>5);
	free($<sql_string>6);
}
;


sel_p2_ss : {
		$<sql_string>$=strdup("");
		}
| UNION op_all select_statement2_ss {
       lex_printcomment("/* UNION */");
	$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<sql_string>3,0);
       }
| order_by_clause  {
	$<sql_string>$=strdup($<str>1);
}
| INTO_TEMP tmp_tabname op_no_log { $<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<str>3,0); } 
| order_by_clause INTO_TEMP tmp_tabname op_no_log { 
	$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ",$<str>3," ",$<str>4,0);
}
;


tmp_tabname: identifier;


opt_into_sel_ss :  { start_bind('o',0);$<sql_string>$=make_sql_string("",0); }
	| INTO  obind_var_list { 
		$<sql_string>$=make_sql_string(get_into_part(get_bind_cnt('o')),0 ); 

	}
;



query_specification_ss:
	SELECT op_ad select_list_ss table_expression_ss {
		$<sql_string>$=make_sql_string($<str>1," ",$<str>2," ", $<sql_string>3," ",$<sql_string>4,0);
		free($<sql_string>3);
		free($<sql_string>4);

	}
;

subquery_ss:
	OPEN_BRACKET SELECT op_ad select_list_ss table_expression_ss CLOSE_BRACKET {
		$<sql_string>$=make_sql_string("(",$<str>2," ",$<str>3," ",$<sql_string>4," ",$<sql_string>5,")",0);
	}
;

op_ad: {strcpy($<str>$,"");}
	| ALL {strcpy($<str>$,"ALL");}
	| DISTINCT {strcpy($<str>$,"DISTINCT");}
	| UNIQUE {strcpy($<str>$,"DISTINCT");
		ansi_violation("Use DISTINCT not UNIQUE",0);
		strcpy($<str>$,"DISTINCT ");

}
	;

select_list_ss: 
	value_expression_pls_ss  {
		$<sql_string>$=$<sql_string>1;
	}
	| select_list_ss COMMA value_expression_pls_ss { 
		$<sql_string>$=make_sql_string($<sql_string>1,",",$<sql_string>3,0);
	}
;

value_expression_pls_ss : 
	value_expression_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| value_expression_ss  NAMED {
		$<sql_string>$=make_sql_string($<sql_string>1,$<str>2,0);
	}
	| value_expression_ss  reserved_word {
		$<sql_string>$=make_sql_string($<sql_string>1,$<str>2,0);
	}
;


column_specification_ss : value_expression_ss {
	$<sql_string>$=$<sql_string>1;
}

;



value_expression_ss:
	value_expression_initial_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| MINUS value_expression_initial_ss {
		$<sql_string>$=make_sql_string("-",$<sql_string>2,0);
	}
	| PLUS value_expression_initial_ss {
		$<sql_string>$=make_sql_string("+",$<sql_string>2,0);
	}
;

value_expression_initial_ss :
	value_expression_complex_ss {
			if (strlen(current_upd_table)) {
				push_gen(UPDVAL,$<sql_string>1);
			}
		$<sql_string>$=$<sql_string>1;
	}
	| var_ident_ibind_ss 	{
		$<sql_string>$=$<sql_string>1;
	}
	| subquery_ss {
		$<sql_string>$=$<sql_string>1;
	}
	| ATSIGN identifier {
		$<sql_string>$=strdup($<str>2);
	}
	| ATSIGN identifier DOT identifier {
		$<sql_string>$=make_sql_string($<str>2,".",$<str>4);
	}
;

value_expression_complex_ss :
	value_expression_initial_ss DIVIDE value_expression_ss
		{$<sql_string>$=make_sql_string($<sql_string>1,"/",$<sql_string>3,0);}
	| value_expression_initial_ss units_qual
		{$<sql_string>$=make_sql_string($<sql_string>1,$<str>2,0);}
	| value_expression_initial_ss MULTIPLY value_expression_ss
		{$<sql_string>$=make_sql_string($<sql_string>1,"*",$<sql_string>3,0);}
	| value_expression_initial_ss PLUS value_expression_ss
		{$<sql_string>$=make_sql_string($<sql_string>1,"+",$<sql_string>3,0);}
	| value_expression_initial_ss MINUS value_expression_ss
		{$<sql_string>$=make_sql_string($<sql_string>1,"-",$<sql_string>3,0);}
	| literal {$<sql_string>$=make_sql_string($<str>1,0);}
	| KW_TRUE {$<sql_string>$=make_sql_string("TRUE",0);}
	| KW_FALSE {$<sql_string>$=make_sql_string("FALSE",0);}
	| USER {$<sql_string>$=make_sql_string("USER",0);}
	| MULTIPLY {$<sql_string>$=make_sql_string("*",0);}
	| COUNT_MULTIPLY {$<sql_string>$=make_sql_string("COUNT(*)",0);}
 	| AVG OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
{$<sql_string>$=make_sql_string("AVERAGE(",$<str>3,$<sql_string>4,")",0);}
	| XMAX OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
{$<sql_string>$=make_sql_string("MAX(",$<str>3,$<sql_string>4,")",0);}
	| XMIN OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
{$<sql_string>$=make_sql_string("MIN(",$<str>3,$<sql_string>4,")",0);}
	| SUM OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
{$<sql_string>$=make_sql_string("SUM(",$<str>3,$<sql_string>4,")",0);}
	| COUNT OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
{$<sql_string>$=make_sql_string("COUNT(",$<str>3,$<sql_string>4,")",0);}
	| identifier OPEN_BRACKET value_expr_list_ss CLOSE_BRACKET
{$<sql_string>$=make_sql_string($<str>1,"(",$<sql_string>3,")",0);}
	| DATE OPEN_BRACKET value_expr_list_ss CLOSE_BRACKET
{$<sql_string>$=make_sql_string("DATE(",$<sql_string>3,")",0);}
	| OPEN_BRACKET value_expression_ss CLOSE_BRACKET {$<sql_string>$=make_sql_string("(",$<sql_string>2,")",0);}
	| EXTEND OPEN_BRACKET extend_qual CLOSE_BRACKET
{$<sql_string>$=make_sql_string("EXTEND(",$<str>3,")",0);}
;

value_expr_list_ss : 
	value_expression_ss {$<sql_string>$=$<sql_string>1;}
	| value_expr_list_ss COMMA value_expression_ss {
	$<sql_string>$=make_sql_string($<sql_string>1,",",$<sql_string>3,0);
}
	
;

value_specification:
	| literal
	;

unload_cmd :  opt_use UNLOAD_TO ufile opt_delim select_statement2_ss {

print_unload($<str>3,$<str>4,$<sql_string>5);
print_undo_use($<str>1);
}
;


load_cmd :  
opt_use LOAD_FROM ufile opt_delim INSERT_INTO table_name opt_col_list {
print_load($<str>3,$<str>4,$<str>6,$<str>7);
print_undo_use($<str>1);
}
| opt_use LOAD_FROM ufile opt_delim variable {
print_load_str($<str>3,$<str>4,$<str>5);
print_undo_use($<str>1);
}

;

opt_delim : {strcpy($<str>$,"\"|\"");} | DELIMITER char_or_var {
strcpy($<str>$,$<str>2);
};

char_or_var : CHAR_VALUE | variable {
if ((scan_variable($<str>1)&15)!=0) {a4gl_yyerror("Variable must be of type char for a delimiter..");YYERROR;}
}
;

opt_col_list: {strcpy($<str>$,"0");} | OPEN_BRACKET col_list CLOSE_BRACKET {
sprintf($<str>$,"%s,0",$<str>2);
};

col_list : simple_column_name | col_list COMMA simple_column_name {
    sprintf($<str>$,"%s,%s",$<str>1,$<str>3);
};

simple_column_name : identifier {
     sprintf($<str>$,"\"%s\"",$<str>1);
}
;


ufile : CHAR_VALUE | variable;


opt_use : {strcpy($<str>$,"");} | USE_SESSION conn_id FOR {
print_use_session($<str>3);
strcpy($<str>$,get_undo_use());
}
;

conn_id : ident_or_var;





misc_sql :
	lock_stmt
	| unlock_stmt
	| rename_stmt
;

rename_stmt :
	RENTAB rentabname TO rentabname { sprintf($<str>$,"%s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4); }
	| RENCOL rentabname DOT rencolname TO rencolname { sprintf($<str>$,"%s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4); }
;

rentabname : identifier;
rencolname : identifier;

unlock_stmt:

	UNLOCK_TABLE tab_name {
		sprintf($<str>$,"%s %s",$<str>1,$<str>2);
	}
;

lock_stmt :
	LOCK_TABLE tab_name share_or_exclusive  {
		sprintf($<str>$,"%s %s %s",
					$<str>1,
					$<str>2,
					$<str>3
					);
		}
;

share_or_exclusive :
	INSHARE
	| INEXCLUSIVE
;





units_qual:
	UNITS_YEAR {strcpy($<str>$,"UNITS YEAR");}
	| UNITS_MONTH {strcpy($<str>$,"UNITS MONTH"); }
	| UNITS_DAY {strcpy($<str>$,"UNITS DAY"); }
	| UNITS_HOUR {strcpy($<str>$,"UNITS HOUR"); }
	| UNITS_MINUTE {strcpy($<str>$,"UNITS MINUTE"); }
	| UNITS_SECOND {strcpy($<str>$,"UNITS SECOND"); }
;

extend_qual:
        CURRENT COMMA s_curr TO e_curr {sprintf($<str>$,"%s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5);}
        | column_name COMMA s_curr TO e_curr {sprintf($<str>$,"%s %s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4,$<str>5);}
        | CURRENT s_curr TO e_curr {sprintf($<str>$,"%s %s %s %s",$<str>1,$<str>2,$<str>3,$<str>4);}
;

/* ========================= sql1.rule ================================ */
