/*
=====================================================================
                        Source: report.rule
=====================================================================
*/


start_cmd : START_REPORT rep_name TO_PRINTER
{
addmap("Start Report",$<str>2,curr_func,yylineno,infilename);
print_start_report("P","\"lp\"",$<str>2);
}
	    | START_REPORT rep_name TO rout
{
addmap("Start Report",$<str>2,curr_func,yylineno,infilename);
print_start_report("F",$<str>4,$<str>2);
}
	    | START_REPORT rep_name TO_PIPE rout
{
addmap("Start Report",$<str>2,curr_func,yylineno,infilename);
print_start_report("P",$<str>4,$<str>2);
}
	    | START_REPORT rep_name
{
addmap("Start Report",$<str>2,curr_func,yylineno,infilename);
print_start_report("","\"\"",$<str>2);
}
;




rout : CHAR_VALUE | cvariable;



rep_name : identifier;


op_values : | VALUES ;

output_cmd : OUTPUT_TO_REPORT rep_name op_values  OPEN_BRACKET 
{ 
}
reset_cnt 
{
}
op_fgl_expr_list 
{
}
CLOSE_BRACKET
{
addmap("Output to report",$<str>2,curr_func,yylineno,infilename);
print_output_to_report($<str>2,$<str>8); 
}
;

finish_cmd : FINISH_REPORT rep_name
{
addmap("Finish Report",$<str>2,curr_func,yylineno,infilename);
print_finish_report($<str>2);
}
;

report_section: op_output_section op_rep_order_by  { sprintf($<str>$,$<str>2); } ;

format_section: FORMAT EVERY_ROW {
	print_format_every_row();
}
| 
FORMAT format_actions
;

format_actions : format_action | format_actions format_action;

format_action :
	 FIRST_PAGE_HEADER 
{ push_report_block("FIRST",'P');}
commands {print_rep_ret(0);}
	| PAGE_TRAILER
{ push_report_block("TRAILER",'T');}
commands {print_rep_ret(0);}
	| PAGE_HEADER 
{ push_report_block("HEADER",'p');}
commands {print_rep_ret(0);}
	| ON_EVERY_ROW 
{ push_report_block("EVERY",'E');}
commands {print_rep_ret(0);}
	| ON_LAST_ROW 
{ push_report_block("LAST",'L');}
commands {print_rep_ret(0);}
	| BEFGROUP variable  {
int a;
char buff[80];

a=scan_orderby($<str>2,rordcnt);
if (a<0) {
   sprintf(buff,"%s is not in the order by list",$<str>2);
   yyerror(buff);
	YYERROR;
}
sprintf(buff,"%d",a+1);
push_report_block(buff,'B');
set_curr_block(a+1);
}
commands {print_rep_ret(0);}
	| AFTGROUP variable 
{ 
int a;
char buff[80];

a=scan_orderby($<str>2,rordcnt);
if (a<0) {
   sprintf(buff,"%s is not in the order by list",$<str>2);
   yyerror(buff);
	YYERROR;
}

sprintf(buff,"%d",a+1);
push_report_block(buff,'A');
set_curr_block(a+1);

}
commands {print_rep_ret(0);}
;

report_cmd : print_command 
		| print_img_command
		| print_file_command
		| need_command
		| pause_command
		| skip_command;

need_command : NEED fgl_expr {start_state("skip",1);} KWLINE {
	print_need_lines();
	start_state("skip",0);
}
;

op_lines : {strcpy($<str>$,"0");} | KWLINE {strcpy($<str>$,"1");}
;

skip_command : SKIP fgl_expr {start_state("KWLINE",1);} op_lines {
char buff[256];
strcpy(buff,$<str>4);
if (buff[0]=='1') {
	print_skip_lines();
} else {
	if (rep_type!=REP_TYPE_PDF) { yyerror("SKIP BY is only in PDF reports"); YYERROR; } print_skip_by($<str>2);
}
start_state("KWLINE",0); 
}
	| SKIP_TO_TOP { print_skip_top(); }
	| FONT_SIZE nval { print_niy("FONT SIZE"); }
	| SKIP_BY nval {
			if (rep_type!=REP_TYPE_PDF) {
				yyerror("SKIP BY is only in PDF reports");
				YYERROR;
			}
			print_skip_by($<str>2);
		}
	| SKIP_TO nval {
			if (rep_type!=REP_TYPE_PDF) {
				yyerror("SKIP TO is only in PDF reports");
				YYERROR;
			}
			print_skip_to($<str>2);
		}


;


opt_rep_expr_list : {strcpy($<str>$,"");}
	| xrep_expr_list
;

xrep_expr_list: xxrep_expr_list
	| xrep_expr_list xxrep_expr_list
;

xxrep_expr_list : rep_expr_list opt_print_at 
;

opt_print_at : | AT nval {
	print_niy("PRINT AT...");
}
;

print_command : PRINT opt_rep_expr_list opt_semi {
	print_report_print(0,$<str>3,0);
} ;

print_file_command : PRINT_FILE char_or_var opt_semi { 
	print_report_print_file($<str>2,$<str>3);
} ;


print_img_command : PRINT_IMAGE blob_var img_types opt_scaling opt_semi { 
	print_report_print_img($<str>4,$<str>2,$<str>3,$<str>5);
} 
;

opt_scaling :
	{ strcpy($<str>$,get_default_scaling());}
	| SCALED_BY fgl_expr_c { strcpy($<str>$,$<str>2); strcat($<str>$,$<str>2); }
	| SCALED_BY fgl_expr_c COMMA fgl_expr_c {sprintf($<str>$,"%s %s",$<str>2,$<str>4);}
;

img_types : 	
	AS_TIFF {strcpy($<str>$,"tiff");}
	| AS_GIF {strcpy($<str>$,"gif");}
	| AS_PNG {strcpy($<str>$,"png");}
	| AS_JPEG {strcpy($<str>$,"jpeg");}
;


blob_var :  variable {
	int vtype;
	vtype=scan_variable($<str>1);
	if (vtype!=11&&vtype!=12) {
	yyerror("Only Blobs may be printed...");
	YYERROR;
	}
}
;

opt_semi : {
strcpy($<str>$,"0");
} | SEMICOLON {
strcpy($<str>$,"1");
};

rep_expr_list : 
	rep_expr {
	print_report_print(1,0,$<str>1);
	} 
| rep_expr_list COMMA rep_expr {
	print_report_print(1,0,$<str>3); /* changed from $<str>1 */
}
;

rep_expr : fgl_expr op_wordwrap {
	strcpy($<str>$,$<str>2); 
	}
	;

rep_agg : 
SUM       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
{
int a;
a=add_report_agg('S',$<ptr>3,$<ptr>5,racnt);
sprintf($<str>$,"push_double(_g%d);\n",racnt);
racnt+=a;
}
| COUNT_MULTIPLY rep_where
{
int a;
a=add_report_agg('C',0,$<ptr>2,racnt);
sprintf($<str>$,"push_int(_g%d);\n",racnt);
racnt+=a;
}
| PERCENT   OPEN_BRACKET MULTIPLY CLOSE_BRACKET  rep_where
{
int a;
a=add_report_agg('P',$<ptr>3,$<ptr>5,racnt);
sprintf($<str>$,"push_double((double)_g%d/(double)_g%d);\n",racnt,racnt+1);
racnt+=a;
}
| AVERAGE   OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
{
int a;
a=add_report_agg('A',$<ptr>3,$<ptr>5,racnt);
sprintf($<str>$,"push_double(_g%d/(double)_g%d);\n",racnt,racnt+1);
racnt+=a;
}
| AVG       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
{
int a;
a=add_report_agg('A',$<ptr>3,$<ptr>5,racnt);
sprintf($<str>$,"push_double(_g%d/_g%d);\n",racnt,racnt+1);
racnt+=a;
}
| XMIN       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
{
int a;
a=add_report_agg('N',$<ptr>3,$<ptr>5,racnt);
sprintf($<str>$,"push_double(_g%d);\n",racnt);
racnt+=a;
}
| XMAX       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
{
int a;
a=add_report_agg('X',$<ptr>3,$<ptr>5,racnt);
sprintf($<str>$,"push_double(_g%d);\n",racnt);
racnt+=a;
}
;

op_output_section : | OUTPUT output_commands ;

output_commands : output_command | output_commands output_command;

output_command : 
  LEFT_MARGIN INT_VALUE {rep_struct.left_margin=atoi($<str>2);}
| RIGHT_MARGIN INT_VALUE {rep_struct.right_margin=atoi($<str>2);}
| TOP_MARGIN INT_VALUE {rep_struct.top_margin=atoi($<str>2);}
| BOTTOM_MARGIN INT_VALUE {rep_struct.bottom_margin=atoi($<str>2);}
| PAGE_LENGTH INT_VALUE {rep_struct.page_length=atoi($<str>2);}
| REPORT_TO_PRINTER  { rep_struct.output_mode='P';strcpy(rep_struct.output_loc,"\"lp\"");}
| REPORT_TO CHAR_VALUE {rep_struct.output_mode='F';strcpy(rep_struct.output_loc,$<str>2);}
| REPORT_TO variable {rep_struct.output_mode='F';strcpy(rep_struct.output_loc,$<str>2);}
| REPORT_TO_PIPE CHAR_VALUE {rep_struct.output_mode='P';strcpy(rep_struct.output_loc,$<str>2);}
| TOP_OF_PAGE CHAR_VALUE {strcpy(rep_struct.top_of_page,$<str>2);}
;

pdf_output_commands : pdf_output_command | pdf_output_commands pdf_output_command;


nval: nval_number POINTS {sprintf($<str>$,"-%f",atof($<str>1));}
	| nval_number INCHES {sprintf($<str>$,"-%f",atof($<str>1)*72.0); }
	| nval_number MM     {sprintf($<str>$,"-%f",atof($<str>1)*2.83465);}
	| nval_number        {sprintf($<str>$,"%f",atof($<str>1));} 
;

nval_number: real_number | INT_VALUE
;

pdf_op_output_section : | OUTPUT pdf_output_commands ;

pdf_output_command : 
  LEFT_MARGIN nval {pdf_rep_struct.left_margin=atof($<str>2);debug("Left margin=%s\n",$<str>2);}
| RIGHT_MARGIN nval {pdf_rep_struct.right_margin=atof($<str>2);}
| TOP_MARGIN nval {pdf_rep_struct.top_margin=atof($<str>2);}
| BOTTOM_MARGIN nval {pdf_rep_struct.bottom_margin=atof($<str>2);}
| PAGE_LENGTH nval {pdf_rep_struct.page_length=atof($<str>2);}
| PAGE_WIDTH nval {pdf_rep_struct.page_width=atof($<str>2);}
| FONT_NAME CHAR_VALUE {strcpy(pdf_rep_struct.font_name,$<str>2);}
| FONT_SIZE nval {pdf_rep_struct.font_size=atof($<str>2);}

| PAPER_SIZE_IS_A4  {pdf_rep_struct.paper_size=1;}
| PAPER_SIZE_IS_LETTER  {pdf_rep_struct.paper_size=2;}
| PAPER_SIZE_IS_LEGAL  {pdf_rep_struct.paper_size=3;}
| PAPER_SIZE_IS_A5  {pdf_rep_struct.paper_size=5;}

| PAPER_SIZE_IS_A4_L  {pdf_rep_struct.paper_size=-1;}
| PAPER_SIZE_IS_LETTER_L  {pdf_rep_struct.paper_size=-2;}
| PAPER_SIZE_IS_LEGAL_L  {pdf_rep_struct.paper_size=-3;}
| PAPER_SIZE_IS_A5_L  {pdf_rep_struct.paper_size=-5;}

| PAGE_TRAILER_SIZE nval 
| PAGE_HEADER_SIZE nval 
| FIRST_PAGE_HEADER_SIZE nval 
| REPORT_TO CHAR_VALUE {pdf_rep_struct.output_mode='F';strcpy(pdf_rep_struct.output_loc,$<str>2);}
| REPORT_TO_PIPE CHAR_VALUE {pdf_rep_struct.output_mode='P';strcpy(pdf_rep_struct.output_loc,$<str>2);}
| DEFAULT
| ASCII_HEIGHT_ALL
| ASCII_WIDTH_ALL
;


op_rep_order_by : {
int a;
a=print_bind('O');
print_order_by_type(2);
sprintf($<str>$,"%d",a);
}
| ORDER BY obind_var_list_ord
{
int a;
a=print_bind('O');
print_order_by_type(1);
sprintf($<str>$,"%d",a);
}
| ORDER_EXTERNAL_BY obind_var_list_ord {
int a;
a=print_bind('O');
print_order_by_type(2);
sprintf($<str>$,"%d",a);
}
;


report_def : REPORT 
{
rep_type=REP_TYPE_NORMAL;
clr_variable(); lastlineno=yylineno; init_report_structure(&rep_struct);
}
identifier OPEN_BRACKET
{
inc_report_cnt();
sprintf(curr_func,"%s",$<str>3);
addmap("Define Report",curr_func,"MODULE",yylineno,infilename);
set_curr_rep_name($<str>3);
print_report_1($<str>3);
push_blockcommand("REPORT");
}
op_param_var_list CLOSE_BRACKET 
{
lastlineno=yylineno;
}
define_section
report_section 
{

print_report_2(0,$<str>10);
rordcnt=atoi($<str>10);
}
format_section 
{
print_report_ctrl();
}

END_REPORT {
pop_blockcommand("REPORT");
print_report_end() ;
}
;



rep_where :  { strcpy($<str>$,"");
	$<ptr>$=0;
}
| WHERE fgl_expr_c {
	$<ptr>$=$<ptr>2;
//sprintf($<str>$,"%s", $<str>2);
}
;



pause_command: PAUSE pause_msg
{
if (!in_command("REPORT")) {
	yyerror("PAUSE can only be used in reportes");
	YYERROR;
        }

print_pause($<str>2) ;
}

;

pause_msg : {sprintf($<str>$,"\"\"");}
	|
	var_or_char 
;

pdf_report_def : 
PDF_REPORT 
{
rep_type=REP_TYPE_PDF;
clr_variable(); lastlineno=yylineno; pdf_init_report_structure(&pdf_rep_struct);
}
identifier OPEN_BRACKET
{
inc_report_cnt();
sprintf(curr_func,"%s",$<str>3);
addmap("Define PDF Report",curr_func,"MODULE",yylineno,infilename);
set_curr_rep_name($<str>3);
print_report_1($<str>3);
push_blockcommand("REPORT");
}
op_param_var_list CLOSE_BRACKET 
{
lastlineno=yylineno;
}
define_section
pdf_report_section 
{
resize_paper(&pdf_rep_struct);
	print_report_2(1,$<str>10);
	rordcnt=atoi($<str>10);
}
format_section 
{
print_report_ctrl();
}
END_REPORT {
	pop_blockcommand("REPORT");
	print_report_end();
}
;

pdf_report_section: pdf_op_output_section op_rep_order_by  { sprintf($<str>$,$<str>2); } ;


pdf_functions :
	PDF_FUNCTION OPEN_BRACKET CHAR_VALUE COMMA {new_counter();
   		addmap("CALL",$<str>3,curr_func,yylineno,infilename);
   		}
   		opt_func_call_args
   		{
		sprintf($<str>$,"%d",get_counter_val());drop_counter();
		}
   		CLOSE_BRACKET
   		{
		print_pdf_call($<str>3,$<ptr>6,$<str>7);
   		}
   		opt_return
   		{
	print_returning();
   }
;

op_wordwrap:
	{strcpy($<str>$,"0");}
 	| WORDWRAP { sprintf($<str>$,"rep.right_margin"); }
	| WORDWRAP RIGHT_MARGIN INT_VALUE { sprintf($<str>$,"%s",$<str>3); }
	| WORDWRAP RIGHT_MARGIN variable { sprintf($<str>$,"%s",$<str>3); }
;

/* ============================ report.rule ========================== */

