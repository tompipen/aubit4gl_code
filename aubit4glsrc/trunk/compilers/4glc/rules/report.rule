/*
=====================================================================
                        Source: report.rule
=====================================================================
*/


start_cmd : 
	START_REPORT rep_name TO_PRINTER  op_with_dim {
			struct expr_str *p;
			p=A4GL_new_expr_simple(ET_EXPR_REPORT_PRINTER);
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			print_start_report("P",p,$<str>2,$<str>4);
			}
	| START_REPORT rep_name TO_EMAIL  op_with_dim {
			char buff[256];
			struct expr_str *p;
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			p=A4GL_new_expr_simple_string($<str>2,ET_EXPR_REPORT_EMAIL);
			print_start_report("M",p,$<str>2,$<str>4);
			}
	    | START_REPORT rep_name TO rout op_with_dim {
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			print_start_report("F",$<ptr>4,$<str>2,$<str>5);
			}
	    | START_REPORT rep_name TO_FILE rout op_with_dim {
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			print_start_report("F",$<ptr>4,$<str>2,$<str>5);
			}
	    | START_REPORT rep_name TO_PIPE rout op_with_dim {
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			print_start_report("P",$<ptr>4,$<str>2,$<str>5);
			}
	    | START_REPORT rep_name TO_SCREEN op_with_dim {
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			print_start_report("S",0,$<str>2,$<str>4);
			}
	    | START_REPORT rep_name AS_CONVERTABLE  op_with_dim {
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			print_start_report("C",0,$<str>2,$<str>4);
			}
	    | START_REPORT rep_name  op_with_dim {
			add_feature("USE_REPORT");
			ADDMAP("Start Report",$<str>2);
			print_start_report("",0,$<str>2,$<str>3);
			}
;

op_with_dim:
	{strcpy($<str>$,"-1,-1,-1,-1,-1,\"\"");}
	| WITH with_list {sprintf($<str>$,"%d,%d,%d,%d,%d,\"%s\"",with_page_length,with_left_margin,with_right_margin,with_top_margin,with_bottom_margin,with_top_of_page);
			with_page_length=-1;
			with_left_margin=-1;
			with_right_margin=-1;
			with_top_margin=-1;
			with_bottom_margin=-1;
			with_top_of_page="";
	}
;

with_list:
	with_entry
	| with_list KW_COMMA with_entry
	| with_list with_entry
;

with_entry:
	PAGE_LENGTH INT_VALUE {with_page_length=atoi($<str>2);}
	| TOP_MARGIN INT_VALUE {with_top_margin=atoi($<str>2);}
	| BOTTOM_MARGIN INT_VALUE {with_bottom_margin=atoi($<str>2);}
	| LEFT_MARGIN INT_VALUE {with_left_margin=atoi($<str>2);}
	| RIGHT_MARGIN INT_VALUE {with_right_margin=atoi($<str>2);}
	| TOP_OF_PAGE CHAR_VALUE {with_top_of_page=acl_strdup($<str>2);}
;
	
 

convert_cmd : 	CONVERT_REPORT rep_name TO var_or_char AS var_or_char KW_USING var_or_char {
			print_convert_report($<str>2, $<str>4,$<str>6,$<str>8,"FILE");
		}
 		| CONVERT_REPORT rep_name TO var_or_char AS var_or_char {
			print_convert_report($<str>2, $<str>4,$<str>6,"\"\"","FILE");
		}
 		| CONVERT_REPORT rep_name TO_PIPE var_or_char AS var_or_char {
			print_convert_report($<str>2, $<str>4,$<str>6,"\"\"","PIPE");
		}
 		| CONVERT_REPORT rep_name TO_FILE var_or_char AS var_or_char {
			print_convert_report($<str>2, $<str>4,$<str>6,"\"\"","PIPE");
		}
 		| CONVERT_REPORT rep_name TO_PRINTER AS var_or_char {
			print_convert_report($<str>2, "acl_getenv(\"DBPRINT\")",$<str>5,"\"\"","PIPE");
		}
 		| CONVERT_REPORT rep_name TO_EMAIL AS var_or_char {
			char buff[255];
sprintf(buff,"A4GL_get_tmp_rep(_module_name,\"%s\")",$<str>2);
			print_convert_report($<str>2,    buff ,$<str>5,"\"\"","EMAIL");
		}

 		| CONVERT_REPORT rep_name TO_PIPE var_or_char AS var_or_char KW_USING var_or_char {
			print_convert_report($<str>2, $<str>4,$<str>6,$<str>8,"PIPE");
		}
 		| CONVERT_REPORT rep_name TO_FILE var_or_char AS var_or_char KW_USING var_or_char {
			print_convert_report($<str>2, $<str>4,$<str>6,$<str>8,"PIPE");
		}
 		| CONVERT_REPORT rep_name TO_PRINTER AS var_or_char KW_USING var_or_char {
			print_convert_report($<str>2, "acl_getenv(\"DBPRINT\")",$<str>5,$<str>7,"PIPE");
		}
 		| CONVERT_REPORT rep_name TO_EMAIL AS var_or_char KW_USING var_or_char {
                        char buff[255];
			sprintf(buff,"A4GL_get_tmp_rep(_module_name,\"%s\")",$<str>2);
			print_convert_report($<str>2, buff,$<str>5,$<str>7,"EMAIL");
		}

;

rout : fgl_expr_c {
		$<ptr>$=$<ptr>1;
	}
;


free_rep_cmd : FREE_REPORT rep_name {
		print_free_convertable($<str>2);
}
;

rep_name : identifier;


op_values : | VALUES ; /* This isn't standard - but it looks pretty OUTPUT TO REPORT VALUES (...)... */


op_fgl_expr_list_ptr:  {$<ptr_list>$=0;}
	| fgl_expr_list_ptr  {$<ptr_list>$=$<ptr_list>1;}
;


output_cmd : OUTPUT_TO_REPORT rep_name op_values  OPEN_BRACKET op_fgl_expr_list_ptr CLOSE_BRACKET {
		int c;
		add_feature("USE_REPORT");
		ADDMAP("Output to report",$<str>2);
		print_output_to_report($<ptr_list>5,$<str>2); 
		}
;

finish_cmd : FINISH_REPORT rep_name {
			add_feature("USE_REPORT");
		ADDMAP("Finish Report",$<str>2);
		print_finish_report($<str>2);
		print_free_convertable($<str>2); // Shouldn't really be needed - but they may have started it "AS CONVERTABLE"
		}
	| FINISH_REPORT rep_name CONVERTING_TO_MANY   {
			add_feature("USE_REPORT");
		ADDMAP("Finish Report",$<str>2);
		print_finish_report($<str>2);
		// Can't free convertable here - developer needs to do that using FREE REPORT
	}
	| FINISH_REPORT rep_name CONVERTING_TO var_or_char AS var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,$<str>4,$<str>6,"\"\"","FILE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO_PIPE var_or_char AS var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,$<str>4,$<str>6,"\"\"","PIPE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO_PRINTER AS var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,"acl_getenv(\"DBPRINT\")",$<str>5,"\"\"","PIPE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO_EMAIL AS var_or_char {
                        char buff[255];
			add_feature("USE_REPORT");
			sprintf(buff,"A4GL_get_tmp_rep(_module_name,\"%s\")",$<str>2);
		print_finish_report($<str>2);
		print_convert_report($<str>2,buff,$<str>5,"\"\"","EMAIL");
		print_free_convertable($<str>2);
	}


	| FINISH_REPORT rep_name CONVERTING_TO_FILE var_or_char AS var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,$<str>4,$<str>6,"\"\"","FILE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO var_or_char AS var_or_char KW_USING var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,$<str>4,$<str>6,$<str>8,"FILE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO_FILE var_or_char AS var_or_char KW_USING var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,$<str>4,$<str>6,$<str>8,"FILE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO_PIPE var_or_char AS var_or_char KW_USING var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,$<str>4,$<str>6,$<str>8,"PIPE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO_PRINTER AS var_or_char KW_USING var_or_char {
			add_feature("USE_REPORT");
		print_finish_report($<str>2);
		print_convert_report($<str>2,"acl_getenv(\"DBPRINT\")",$<str>5,$<str>7,"PIPE");
		print_free_convertable($<str>2);
	}
	| FINISH_REPORT rep_name CONVERTING_TO_EMAIL AS var_or_char KW_USING var_or_char {
                        char buff[255];
			add_feature("USE_REPORT");
			sprintf(buff,"A4GL_get_tmp_rep(_module_name,\"%s\")",$<str>2);
		print_finish_report($<str>2);
		print_convert_report($<str>2,buff,$<str>5,$<str>7,"EMAIL");
		print_free_convertable($<str>2);
	}


	
;


term_rep_cmd : TERMINATE_REPORT rep_name {
			add_feature("USE_REPORT");
		ADDMAP("Terminate Report",$<str>2);
		print_terminate_report($<str>2);
}
;

report_section: op_output_section op_rep_order_by  { strcpy($<str>$,$<str>2); } ;

format_section: FORMAT EVERY_ROW {
	print_format_every_row();
}
| 
FORMAT format_actions
;

format_actions : format_action | format_actions format_action;

format_action :
	 FIRST_PAGE_HEADER { push_report_block("FIRST",'P');} commands {
	 	add_feature("REPORT_FIRST_PAGE_HEADER");
		rep_struct.lines_in_first_header=if_print_stack[0][0];
		pdf_rep_struct.lines_in_first_header=if_print_stack[0][0];
		print_rep_ret(0,1);
		}
	| PAGE_TRAILER { 
	 	add_feature("REPORT_PAGE_TRAILER");
		push_report_block("TRAILER",'T');
		if_print_stack[0][0]=0;
		if_print_stack[0][1]=0;
	} commands {
		rep_struct.lines_in_trailer=if_print_stack[0][0];
		pdf_rep_struct.lines_in_trailer=if_print_stack[0][0];
		print_rep_ret(0,1);
	}
	| PAGE_HEADER { push_report_block("HEADER",'p');} commands {
	 	add_feature("REPORT_PAGE_HEADER");
		rep_struct.lines_in_header=if_print_stack[0][0];
		pdf_rep_struct.lines_in_header=if_print_stack[0][0];
		print_rep_ret(0,1);}
	| ON_EVERY_ROW { push_report_block("EVERY",'E'); add_feature("ON_EVERY_ROW"); } commands {print_rep_ret(0,1);}
	| ON_LAST_ROW { push_report_block("LAST",'L'); add_feature("ON_LAST_ROW");} commands {print_rep_ret(0,1);}
	| BEFGROUP variable  {
		int a;
		char buff[80];
		A4GL_debug("rordcnt=%d",rordcnt);
		a=scan_orderby($<str>2,rordcnt);
		if (a<0) {
   		sprintf(buff,"%s is not in the order by list",$<str>2);
   		a4gl_yyerror(buff);
			YYERROR;
		}
		add_feature("REPORT_BEFORE_GROUP");
		sprintf(buff,"%d",a+1);
		push_report_block(buff,'B');
		set_curr_block(a+1);
		} commands {print_rep_ret(0,1);}
	| AFTGROUP variable { 
		int a;
		char buff[80];
		
		add_feature("REPORT_AFTER_GROUP");
		A4GL_debug("rordcnt=%d",rordcnt);
		a=scan_orderby($<str>2,rordcnt);
		if (a<0) {
   		sprintf(buff,"%s is not in the order by list",$<str>2);
   		a4gl_yyerror(buff);
			YYERROR;
		}
		
		sprintf(buff,"%d",a+1);
		push_report_block(buff,'A');
		set_curr_block(a+1);
		
		} commands {print_rep_ret(0,1);}
;

report_cmd : 
	print_command 
	| print_img_command
	| print_file_command
	| need_command
	| pause_command
	| skip_command
;

need_command : NEED fgl_expr_c  KWLINE {
	print_need_lines($<ptr>2);
}
;

op_lines : {strcpy($<str>$,"0");} | KWLINE {strcpy($<str>$,"1");}
;

skip_command : SKIP INT_VALUE op_lines {
			double n;
			char buff[256];
			strcpy(buff,$<str>3);
			n=atof($<str>2);
			if (buff[0]=='1') {
				print_skip_lines(n);
				if (if_print_stack_cnt==0) if_print_section[0]=0;
				if (get_curr_report_stack_whytype_1()=='T') {
					if_print_stack[if_print_stack_cnt][if_print_section[if_print_stack_cnt]]+=(int)n;
				}
			} else {
				if (rep_type!=REP_TYPE_PDF) { a4gl_yyerror("SKIP BY is only in PDF reports"); YYERROR; } print_skip_by(n); }
			}
	| SKIP_TO_TOP { print_skip_top(); }
	| FONT_SIZE nval { print_niy("FONT SIZE"); }
	| SKIP_BY nval {
		double n;
			n=atof($<str>2);
			if (rep_type!=REP_TYPE_PDF) {
				a4gl_yyerror("SKIP BY is only in PDF reports");
				YYERROR;
			}
			print_skip_by(n);
		}
	| SKIP_TO nval {
			if (rep_type!=REP_TYPE_PDF) {
				a4gl_yyerror("SKIP TO is only in PDF reports");
				YYERROR;
			}
			print_skip_to($<str>2);
		}


;


opt_rep_expr_list : {strcpy($<str>$,"");}
	| xrep_expr_list
;

xrep_expr_list: xxrep_expr_list
	| xrep_expr_list xxrep_expr_list
;

xxrep_expr_list : rep_expr_list opt_print_at 
;

opt_print_at : | AT nval {
	print_niy("PRINT AT...");
}
;

print_command : PRINT opt_rep_expr_list opt_semi {
	char wt;
	doing_a_print=0;
	print_report_print(0,$<str>3,0);
	wt=get_curr_report_stack_whytype_1();
	if (strcmp($<str>3,"0")==0) {
		if (wt=='P'||wt=='p'||wt=='T') { /* Page header or trailer */
			if (isin_command("WHILE")||isin_command("FOR")) {
				a4gl_yyerror("You can't print within a loop in a PAGE HEADER or PAGE TRAILER");
				YYERROR;
			}
		}
	}
	if (strcmp($<str>3,"0")==0) {
			if (if_print_stack_cnt==0) if_print_section[0]=0;
		if (get_curr_report_stack_whytype_1()=='T') {
			if_print_stack[if_print_stack_cnt][if_print_section[if_print_stack_cnt]]+=1;
		}
	}
} 

;


pf_char_or_var:
	char_or_var
	| OPEN_BRACKET char_or_var CLOSE_BRACKET {
		strcpy($<str>$,$<str>2);
	}
;


print_file_command : PRINT_FILE pf_char_or_var opt_semi { 
	add_feature("PRINT_FILE");
	print_report_print_file($<str>2,$<str>3);
} ;


print_img_command : PRINT_IMAGE blob_var img_types opt_scaling opt_semi { 
	print_expr($<ptr>4);
	print_report_print_img("",$<str>2,$<str>3,$<str>5);
} 
;

opt_scaling :
	{ struct expr_str *p;
		p=A4GL_new_literal_double_str("1.0");
		$<ptr>$=A4GL_append_expr_expr(p,p);
	}
	| SCALED_BY fgl_expr_c { 
			$<ptr>$=A4GL_append_expr_expr($<ptr>2,$<ptr>2);
	}
	| SCALED_BY fgl_expr_c KW_COMMA fgl_expr_c {
			$<ptr>$=A4GL_append_expr_expr($<ptr>2,$<ptr>4);
	}
;

img_types : 	
	AS_TIFF {strcpy($<str>$,"tiff");}
	| AS_GIF {strcpy($<str>$,"gif");}
	| AS_PNG {strcpy($<str>$,"png");}
	| AS_JPEG {strcpy($<str>$,"jpeg");}
;


blob_var :  variable {
	int vtype;
	vtype=scan_variable($<str>1);
	if (vtype!=11&&vtype!=12) {
	a4gl_yyerror("Only Blobs may be printed...");
	YYERROR;
	}
}
;

opt_semi : {
strcpy($<str>$,"0");
} | SEMICOLON {
strcpy($<str>$,"1");
};

rep_expr_list : 
	rep_expr_p {
	print_report_print(1,0,$<ptr>1);
	} 
| rep_expr_list KW_COMMA rep_expr_p {
	print_report_print(1,0,$<ptr>3); /* changed from $<str>1 */
}
;

rep_expr_p : fgl_expr_c op_wordwrap {
	if (strcmp($<str>2,"0")==0) {
		$<ptr>$=$<ptr>1;
	} else {
		$<ptr>$=A4GL_new_expr_wordwrap($<ptr>1,$<str>2);
	}
}
;

rep_agg : 
	SUM OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
		{
		long a;
		$<ptr>$=add_report_agg('S',$<ptr>3,$<ptr>5,racnt,&a);
		racnt+=a;
		}
	| COUNT_MULTIPLY rep_where
		{
		long a;
		$<ptr>$=add_report_agg('C',0,$<ptr>2,racnt,&a);
		racnt+=a;
		}
	| COUNT OPEN_BRACKET MULTIPLY CLOSE_BRACKET rep_where
		{
		long a;
		$<ptr>$=add_report_agg('C',0,$<ptr>5,racnt,&a);
		racnt+=a;
		}
	| PERCENT   OPEN_BRACKET MULTIPLY CLOSE_BRACKET  rep_where
		{
		long a;
		$<ptr>$=add_report_agg('P',$<ptr>3,$<ptr>5,racnt,&a);
		racnt+=a;
	}
	| AVERAGE   OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
		{
		long a;
		$<ptr>$=add_report_agg('A',$<ptr>3,$<ptr>5,racnt,&a);
		racnt+=a;
		}
	| AVG   OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
		{
		long a;
		$<ptr>$=add_report_agg('A',$<ptr>3,$<ptr>5,racnt,&a);
		racnt+=a;
		}
	| XMIN       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
		{
		long a;
		$<ptr>$=add_report_agg('N',$<ptr>3,$<ptr>5,racnt,&a);
		racnt+=a;
		}
	| XMAX       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
		{
		long a;
		$<ptr>$=add_report_agg('X',$<ptr>3,$<ptr>5,racnt,&a);
		racnt+=a;
		}
;

op_output_section : | OUTPUT output_commands ;

output_commands : output_command | output_commands output_command;

output_command : 
  LEFT_MARGIN INT_VALUE {rep_struct.left_margin=atoi($<str>2);}
| RIGHT_MARGIN INT_VALUE {rep_struct.right_margin=atoi($<str>2);}
| TOP_MARGIN INT_VALUE {rep_struct.top_margin=atoi($<str>2);}
| BOTTOM_MARGIN INT_VALUE {rep_struct.bottom_margin=atoi($<str>2);}
| PAGE_LENGTH INT_VALUE {rep_struct.page_length=atoi($<str>2);}
| REPORT_TO_PRINTER  { rep_struct.output_mode='P';strcpy(rep_struct.output_loc,"acl_getenv(\"DBPRINT\")");}
| REPORT_TO CHAR_VALUE {rep_struct.output_mode='F';strcpy(rep_struct.output_loc,$<str>2);}
| REPORT_TO variable {rep_struct.output_mode='F';strcpy(rep_struct.output_loc,$<str>2);}
| REPORT_TO_PIPE CHAR_VALUE {rep_struct.output_mode='P';strcpy(rep_struct.output_loc,$<str>2);}
| TOP_OF_PAGE CHAR_VALUE {strcpy(rep_struct.top_of_page,$<str>2);}
;

pdf_output_commands : pdf_output_command | pdf_output_commands pdf_output_command;


nval: nval_number KW_POINTS {sprintf($<str>$,"-%f",atof($<str>1));}
	| nval_number INCHES {sprintf($<str>$,"-%f",atof($<str>1)*72.0); }
	| nval_number MM     {sprintf($<str>$,"-%f",atof($<str>1)*2.83465);}
	| nval_number        {sprintf($<str>$,"%f",atof($<str>1));} 
;

nval_number: real_number | INT_VALUE
;

pdf_op_output_section : | OUTPUT pdf_output_commands ;

pdf_output_command : 
  LEFT_MARGIN nval {pdf_rep_struct.left_margin=atof($<str>2);A4GL_debug("Left margin=%s\n",$<str>2);}
| RIGHT_MARGIN nval {pdf_rep_struct.right_margin=atof($<str>2);}
| TOP_MARGIN nval {pdf_rep_struct.top_margin=atof($<str>2);}
| BOTTOM_MARGIN nval {pdf_rep_struct.bottom_margin=atof($<str>2);}
| PAGE_LENGTH nval {pdf_rep_struct.page_length=atof($<str>2);}
| PAGE_WIDTH nval {pdf_rep_struct.page_width=atof($<str>2);}
| FONT_NAME CHAR_VALUE {strcpy(pdf_rep_struct.font_name,$<str>2);}
| FONT_SIZE nval {pdf_rep_struct.font_size=atof($<str>2);}

| PAPER_SIZE_IS_A4  {pdf_rep_struct.paper_size=1;}
| PAPER_SIZE_IS_LETTER  {pdf_rep_struct.paper_size=2;}
| PAPER_SIZE_IS_LEGAL  {pdf_rep_struct.paper_size=3;}
| PAPER_SIZE_IS_A5  {pdf_rep_struct.paper_size=5;}

| PAPER_SIZE_IS_A4_L  {pdf_rep_struct.paper_size=-1;}
| PAPER_SIZE_IS_LETTER_L  {pdf_rep_struct.paper_size=-2;}
| PAPER_SIZE_IS_LEGAL_L  {pdf_rep_struct.paper_size=-3;}
| PAPER_SIZE_IS_A5_L  {pdf_rep_struct.paper_size=-5;}

| PAGE_TRAILER_SIZE nval 
| PAGE_HEADER_SIZE nval 
| FIRST_PAGE_HEADER_SIZE nval 
| REPORT_TO CHAR_VALUE {pdf_rep_struct.output_mode='F';strcpy(pdf_rep_struct.output_loc,$<str>2);}
| REPORT_TO_PIPE CHAR_VALUE {pdf_rep_struct.output_mode='P';strcpy(pdf_rep_struct.output_loc,$<str>2);}
| DEFAULT
| ASCII_HEIGHT_ALL
| ASCII_WIDTH_ALL
;


op_rep_order_by : {
int a;
set_rep_no_orderby(1);
if (get_bind_cnt('f')&&!get_bind_cnt('O')) { A4GL_copy_fbind_to_Obind(); }
a=print_bind_definition('O');
print_order_by_type(2,-1);
sprintf($<str>$,"%d",a);
}
| ORDER BY obind_var_list_ord
{
int a;
set_rep_no_orderby(0);
add_feature("REPORT_ORDER_BY");
if (get_bind_cnt('f')&&!get_bind_cnt('O')) { A4GL_copy_fbind_to_Obind(); }
a=print_bind_definition('O');
print_order_by_type(1,a);
sprintf($<str>$,"%d",a);
A4GL_debug("Order by Gives :%d\n",a);
}
| ORDER_EXTERNAL_BY obind_var_list_ord {
int a;
set_rep_no_orderby(0);
if (get_bind_cnt('f')&&!get_bind_cnt('O')) { A4GL_copy_fbind_to_Obind(); }
a=print_bind_definition('O');
print_order_by_type(2,a);
sprintf($<str>$,"%d",a);
A4GL_debug("Order by Gives :%d\n",a);
}
;


report_def : REPORT 
	{ 
	add_feature("USE_REPORT");
    if (class_cnt>1) { a4gl_yyerror("You've already defined a class - you can't do any more now"); }

		rep_type=REP_TYPE_NORMAL; 
		clr_function_constants (); 
		clr_variable(); 
		lastlineno=yylineno; 
		init_report_structure(&rep_struct); 
		}
	identifier 
	OPEN_BRACKET
	{
		inc_report_cnt();
		sprintf(curr_func,"%s",$<str>3);
		ADDMAP_MODULE("Define Report",curr_func);
		variable_action(-1,$<str>3,"","","add_function");
		set_curr_rep_name($<str>3);
		print_report_1($<str>3);
		push_blockcommand("REPORT");
		}
	op_param_var_list 
	CLOSE_BRACKET 
	{
		lastlineno=yylineno;
		}
	define_section 
	{
		print_report_2_1();
		print_variables();
		}
	report_section 
	{
		print_report_2(0,$<str>11);
		rordcnt=atoi($<str>11);
	 A4GL_debug("SET rordcnt=%d %s",rordcnt,$<str>11);
		}
	format_section 
	{
		print_report_ctrl();
		}

	END_REPORT 
	{
		pop_blockcommand("REPORT");
 	A4GL_chk_and_clr_labels();
		print_report_end() ;
		}
;



rep_where :  { strcpy($<str>$,"");
	$<ptr>$=0;
}
| WHERE fgl_expr_c {
	$<ptr>$=$<ptr>2;
}
;



pause_command: PAUSE pause_msg
{
if (!in_command("REPORT")) {
	a4gl_yyerror("PAUSE can only be used in reportes");
	YYERROR;
        }

print_pause($<str>2) ;
}

;

pause_msg : {strcpy($<str>$,"\"\"");}
	|
	var_or_char 
;

pdf_report_def : 
PDF_REPORT 
{
    if (class_cnt>1) { a4gl_yyerror("You've already defined a class - you can't do any more now"); }

rep_type=REP_TYPE_PDF;
clr_function_constants();
clr_variable(); 
lastlineno=yylineno; 
pdf_init_report_structure(&pdf_rep_struct);
}
identifier OPEN_BRACKET
{
inc_report_cnt();
variable_action(-1,$<str>3,"","","add_function");
sprintf(curr_func,"%s",$<str>3);
ADDMAP_MODULE("Define PDF Report",curr_func);
set_curr_rep_name($<str>3);
print_report_1($<str>3);
push_blockcommand("REPORT");
}
op_param_var_list CLOSE_BRACKET 
{
lastlineno=yylineno;
}
define_section  {
	print_variables();
}
pdf_report_section 
{
resize_paper(&pdf_rep_struct);
	print_report_2(1,$<str>11);
A4GL_debug("SET rordcnt=%d (%s)",rordcnt,$<str>11);
	rordcnt=atoi($<str>11);
}
format_section 
{
print_report_ctrl();
}
END_REPORT {
	pop_blockcommand("REPORT");
	print_report_end();
}
;

pdf_report_section: pdf_op_output_section op_rep_order_by  { strcpy($<str>$,$<str>2); } ;


pdf_functions :
	PDF_FUNCTION OPEN_BRACKET CHAR_VALUE KW_COMMA {new_counter();
   		ADDMAP("CALL",$<str>3);
   		}
   		opt_func_call_args
   		{
		sprintf($<str>$,"%d",get_counter_val());drop_counter();
		}
   		CLOSE_BRACKET
   		{
		print_pdf_call($<str>3,$<ptr_list>6,$<str>7);
   		}
   		opt_return
;

op_wordwrap:
	{strcpy($<str>$,"0");}
 	| WORDWRAP { strcpy($<str>$,"_rep.right_margin"); }
	| WORDWRAP RIGHT_MARGIN INT_VALUE { sprintf($<str>$,"%s",$<str>3); }
	| WORDWRAP RIGHT_MARGIN variable { sprintf($<str>$,"%s",$<str>3); }
;

/* ============================ report.rule ========================== */

