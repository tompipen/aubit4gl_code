/*
=====================================================================
                        Source: for.rule
=====================================================================
*/


for_cmd	:	KW_FOR atline variable_usage_expression EQUAL fgl_expr_c KW_TO fgl_expr_c for_step {
				char errbuff[256];
				int dtype;
				dtype=get_variable_dtype_from_variable_usage_expression(errbuff,$<ptr>3);
				if (dtype==-1) {
					a4gl_yyerror(errbuff);
					YYERROR;
				}
				dtype=dtype&DTYPE_MASK;
				switch (dtype) {
					case DTYPE_INT:
					case DTYPE_SMINT:
					case DTYPE_SERIAL:
					case 90:
						break;

					default :
						set_yytext(get_variable_as_string_from_variable_usage_expression($<ptr>3));
						a4gl_yyerror("Variable is not an INTEGER or SMALLINT.  It cannot be used as the FOR loop variable.");
						YYERROR;

				}
		
				inc_var_assigned($<ptr>3);
				inc_var_usage($<ptr>3);
				add_feature("FOR");
				push_blockcommand("FOR");
 				lastlineno=yylineno;
				}
		commands_as_list END_FOR { 
				pop_blockcommand("FOR"); 
				$<cmd>$=new_for_cmd($<ptr>3, chk_expr($<ptr>5), chk_expr($<ptr>7) ,chk_expr($<ptr>8), $<commands>10, $<integer_val>2);
			}
;

for_step :	{ $<ptr>$=get_for_default_step(); }
	|	STEP fgl_expr_c {$<ptr>$=$<ptr>2;}
;


/* ============================= for.rule =========================== */

