%{

#define yyin asql_yyin
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "a4gl_libaubit4gl.h"

#define SQL_SET_EXPLAIN_OFF 1
#define SQL_SET_LOCK_MODE_WAIT_N 2
#define SQL_SET_LOCK_MODE_NOT_WAIT 3
#define SQL_SET_ISOLATION_DIRTY_READ 4
#define SQL_SET_ISOLATION_REPEATABLE_READ 5
#define SQL_SET_ISOLATION_CURSOR_STABILITY 6 
#define SQL_SET_ISOLATION_COMMITTED_READ 7


char *kw_space=" ";
char *kw_comma=",";
char *kw_ob="(";
char *kw_cb=")";
int insql=0;
static char *make_sql_string_and_free(char *,...);
char last_tmp_name[256];


int yylineno;
int table_cnt=0;
char* curr_func="";
char *infilename="";
int doing_declare=0;
#define UPDCOL 0
#define UPDVAL 1
#define UPDVAL2 4

static char *convstrsql(char *s) ;
char current_upd_table[256];
#define a4gl_yyerror asql_yyerror
char *A4GLSQLCV_check_colname(char *tabname,char *colname) ;
char *A4GLSQLCV_check_expr(char *s ) ;
char *A4GLSQLCV_datetime_value(char *s) ;
char *A4GLSQLCV_dtype_alias(char *s ) ;
char *A4GLSQLCV_dtype_alias(char *s ) ;
char *A4GLSQLCV_generate_current(char *from,char *to) ;
char *A4GLSQLCV_make_tablename(char *t,char *c);
char *A4GLSQLCV_interval_value(char *s) ;
char *A4GLSQLCV_make_dtime_extend(char *dval,char *from,char *to,int extend) ;
char *A4GLSQLCV_make_ival_extend(char *ival,char *from,char *from_len,char *to,int extend) ;
char *A4GLSQLCV_make_substr(char *colname,int nints,int i1,int i2) ;
char *A4GLSQLCV_make_substr_s(char *colname,int n, char *l,char *r) ;
char *A4GLSQLCV_matches_string(char *str,char *esc);
char *A4GLSQLCV_rencol(char *tabname,char *colname,char *ncolname) ;
char *A4GLSQLCV_rentab(char *tabname,char *ntabname) ;
char *A4GLSQLCV_get_sqlconst(char *s);
char *A4GLSQLCV_sqlfunc(char *s,char *p);


int A4GLSQLCV_check_requirement(char *s) ;
static void push_gen (int a, char *s);
static void copy_gen (int a, int b);
static void pop_all_gen (int a, char *s);
static char * convstr_dbl_to_single (char *s);
static int get_bind_cnt (char i);
static void rm_quotes (char *s);
static void A4GL_CV_print_exec_sql(char *s);

static void print_set_conn(char *conn) ;
static void print_load (char *fname,char *delim,char *tab,char *col) ;
static void print_load_str (char *fname,char *delim,char *query) ;
static void print_sql_commit (int n) ;
static void print_select_all (char *s) ;
static void print_exec_sql (char *s) ;
static void print_exec_sql_bound (char *s) ;
static void print_exec_select (char *s)    ;
static void print_undo_use (char *use_stuff) ;
static void print_unload (char *fname,char *delim,char *sql) ;
static void print_use_session (char *conn_id) ;
static void print_init_conn (char *s) ;
static void print_unable_to_parse(void) ;
static int yywrap(void) ;
static int start_bind (char c,int n);
static int A4GLSQLCV_process(void);
static int meminput(char *buf,int maxsize);
static int asql_yyerror(char *s) ;



static void A4GL_CV_print_exec_sql_bound(char *s);



#include "ilist.h"

static char* A4GL_get_into_part(int d,int n);
static char *  fix_update_expr (int mode);
static char *A4GL_get_undo_use(void);
//static char *A4GL_strip_quotes (char *s);
static int gen_cnt (int a);
static void ansi_violation(char *s,int n);
static int A4GL_escape_quote_owner(void);
static void A4GL_lex_printcomment (char *fmt,...);
static void addmap (char *s,char *f,char *x,int l,char *fn);
static int scan_variable (char *s);
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=meminput(buf,max_size)

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include "y.tab.h"
#define GEN_STACKS              10
#define GEN_STACK_SIZE 10000
#define UPDCOL 0
#define UPDVAL 1
#define UPDVAL2 4

char gen_stack[GEN_STACKS][GEN_STACK_SIZE][80];
int gen_stack_cnt[GEN_STACKS] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int sql_string_cnt=0;
int this_sql_start=0;
char *Sql=0;
FILE *Sql_file;
int input_from_file=0;
extern char* yytext;

extern FILE *yyin;
extern int asql_yydebug;
int process(void) ;
char *sql_string;
int sql_type;
int was_ok=0;
/*
struct sql_stmt {
        int type;
        char *val;
};

struct sql_stmt *stmts=0;
*/

int db_used=0;
char *acl_getenv(char *s);

%}
%name-prefix="asql_yy"
%start sql_statement
%union    {
        char    str[1024];
   char *sql_string;
	struct  ilist int_list;

}

%token INT_VALUE
%token NAMED
%token NAMED_GEN
%token CHAR_VALUE
%token NOT_USED_1
%token NOT_USED_2
%token NOT_USED_3
%token NOT_USED_4
%token NOT_USED_5
%token NOT_USED_6
%token NOT_USED_7
%token NOT_USED_8
%token NUMBER_VALUE
%token SEMICOLON
%token QUESTION_MARK
%token CLINE
%token CH
