identifier: NAMED | reserved_word
;

fetch_cursor_name: NAMED
;

real_number : NUMBER_VALUE 
	| KW_DOT INT_VALUE { sprintf($<str>$,".%s",$<str>2); }
;


var_ident_qchar : NAMED
	| CHAR_VALUE {strcpy($<str>$, A4GL_strip_quotes ($<str>1));}

;



char_or_var : CHAR_VALUE 
	| variable { if ((scan_variable($<str>1)&15)!=0) {a4gl_yyerror("Variable must be of type charr..");YYERROR;} }
;

opt_use : {strcpy($<str>$,"");} 
	| USE_SESSION conn_id KW_FOR { print_use_session($<str>3); strcpy($<str>$,A4GL_get_undo_use()); }
;

conn_id : var_ident
;


variable : NOT_USED_1
;

obind_var_list: NOT_USED_2
;

fgl_sql_statement: NOT_USED_3
;

var_ident: identifier
;

ident_or_var: identifier
	| QUESTION_MARK {
			if (A4GL_isyes(acl_getenv("DOING_CM"))) {
				strcpy($<str>$,"?@@PARAM@@?");
			} else {
				strcpy($<str>$,"?");
			}
	}
;


sql_statement :
	individual_sql_statement
	| sql_statement SEMICOLON individual_sql_statement
;



individual_sql_statement : 
		/* Empty statement */
	| set_database_cmd 
	| unload_cmd  
	| load_cmd  
	| sql_commands 
	| select_statement_ss_str_cfu 	{ print_exec_select($<sql_string>1); }
	| set_cmd  			
	| error				{print_unable_to_parse();}
;

select_statement_ss_str_cfu:
	select_statement_ss_str_converted curs_forupdate { $<sql_string>$=make_sql_string_and_free($<sql_string>1,acl_strdup($<str>2),0);
}

;


curs_forupdate : {strcpy($<str>$,"");}
                | FOR_UPDATE {
                        if ( A4GLSQLCV_check_requirement("NO_FOR_UPDATE") || A4GLSQLCV_check_requirement("EMULATE_FOR_UPDATE")) { strcpy($<str>$,""); } else {
			strcpy($<str>$," FOR UPDATE");
			}
		}
                | FOR_UPDATE_OF cur_update_list {
                        if ( A4GLSQLCV_check_requirement("NO_FOR_UPDATE") || A4GLSQLCV_check_requirement("EMULATE_FOR_UPDATE")) { strcpy($<str>$,""); } else {

			sprintf($<str>$," FOR UPDATE OF %s",$<str>2);
}
}
;

cur_update_list : colident { strcpy($<str>$,$<str>1); } 
		| cur_update_list KW_COMMA colident { sprintf($<str>$,"%s,%s",$<str>1,$<str>3); }
;

colident: identifier
| identifier KW_DOT identifier {sprintf($<str>$,"%s.%s",$<str>1,$<str>3);}
| CHAR_VALUE KW_DOT identifier KW_DOT identifier {
	if (A4GL_escape_quote_owner()) {
		sprintf($<str>$,"\\\"%s\\\".%s.%s", A4GL_strip_quotes ($<str>1),$<str>3,$<str>5);
	} else {
		sprintf($<str>$,"\"%s\".%s.%s", A4GL_strip_quotes ($<str>1),$<str>3,$<str>5);
		}
}
                                                                                                                   
;





set_cmd : SQLSEOFF 		 { print_exec_sql(acl_strdup($<str>1)); }
	| SQLSEON 		 { print_exec_sql(acl_strdup($<str>1)); }
	| SQLSLMW op_fgl_expr    { sprintf($<str>$,"%s %s",$<str>1,$<str>2); print_exec_sql(acl_strdup($<str>$)); }
	| SQLSLMNW		 { print_exec_sql(acl_strdup($<str>1)); }
	| SQLSIDR		 { print_exec_sql(acl_strdup($<str>1)); }
	| SQLSIRR		 { print_exec_sql(acl_strdup($<str>1)); }
	| SQLSICS		 { print_exec_sql(acl_strdup($<str>1)); }
	| SQLSICR		 { print_exec_sql(acl_strdup($<str>1)); }
;


var_ident_ibind_sli :  column_name_x { $<s_select_list_item>$=new_select_list_item_column_from_transform($<str>1);}
	 | QUESTION_MARK {  
		$<s_select_list_item>$=new_select_list_item_builtin_const(E_SLI_QUERY_PLACEHOLDER);}
	| replace_with_variable {
		$<s_select_list_item>$=new_select_list_item_replace_var($<sql_string>1);
	}
;

var_ident_ibind_ss :  column_name_x { $<sql_string>$=strdup($<str>1);}
	 | QUESTION_MARK {  
			if (A4GL_isyes(acl_getenv("DOING_CM"))) {
				$<sql_string>$=strdup("?@@PARAM@@?");
			} else {
				$<sql_string>$=strdup("?");
			}
	}
	| replace_with_variable {
		$<sql_string>$=$<sql_string>1;
	}
;



replace_with_variable : MARK_VAR CHAR_VALUE END_MARK_VAR {
		$<sql_string>$=strdup($<str>2);
}
;


column_name_x:
        column_name_specific { strcpy($<str>$,$<str>1); }
;




value_expression_initial_sli :
        value_expression_complex_sli { $<s_select_list_item>1=$<s_select_list_item>1; }
        | var_ident_ibind_sli    {$<s_select_list_item>1=$<s_select_list_item>1;}
        | subquery_sli {  $<s_select_list_item>$=new_select_list_item_sq(E_SQE_DONT_CARE,$<s_select_list_item>1); }
        | ALL subquery_sli   { $<s_select_list_item>$=new_select_list_item_sq(E_SQE_ALL,$<s_select_list_item>2); }
        | ANY subquery_sli   { $<s_select_list_item>$=new_select_list_item_sq(E_SQE_ANY,$<s_select_list_item>2); }
        | SOME subquery_sli  { $<s_select_list_item>$=new_select_list_item_sq(E_SQE_SOME,$<s_select_list_item>2); }
;


op_fgl_expr :  {strcpy($<str>$,"");}
	| INT_VALUE {strcpy($<str>$,$<str>1);}
;


reserved_word:
CONSTRAINT
|REFERENCES
|SMALLFLOAT
|NCHAR
|NVARCHAR
|DELIMITER
|EXCLUSIVE
|DATABASE
|DATETIME
|DISTINCT
|FRACTION
|INTERVAL
|RESOURCE
|SMALLINT
|BETWEEN
|CONNECT
|DEFAULT
|INTEGER
|MATCHES
|VARCHAR
|KW_DELETE
|KW_ESCAPE
|EXISTS
|EXTEND
|HAVING
|KW_INSERT
|MINUTE
|MODIFY
|REVOKE
|SECOND
|SERIAL
|UNIQUE
|KW_UPDATE
|VALUES
|ALTER
|CHECK
|COUNT
|GRANT
|INDEX
|MONEY
|MONTH
|DESC
|DROP
|HOUR
|INTO
|LIKE
|REAL
|SOME
|KW_TEXT
|YEAR
|XSET
|ADD
|ALL
|ANY
|ASC
|AVG
|DAY
|DBA
|KW_FOR
|XMAX
|XMIN
|KW_NOT
|KW_SUM
|KW_AS
|KW_BY
|KW_IN
|KW_TO
|BEFORE
|ILIKE
|FILLFACTOR
|KW_CHAR
|KW_DECIMAL
|KW_FLOAT
|KW_BYTE
|KW_DATE
|KW_DOW
| CASE
| KW_THEN
| WHEN
| ELSE
;
