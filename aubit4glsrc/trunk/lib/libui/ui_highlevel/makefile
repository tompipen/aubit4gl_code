# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0                              |
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+

#
# $Id: makefile,v 1.32 2004-12-07 01:43:58 afalout Exp $
#

LIBROOT		=../..
ROOT		=../../..

#All stuff common to more then one Aubit compiler make file is there:
include ${ROOT}/incl/Makefile-common
HOSTNAME		:=$(shell echo $$HOSTNAME)
## ==================================================================
##                              GTK+ Options
## ==================================================================
CFLAGS+=${GTK_INC_PATH} ${GTK_LIB_PATH}

ifeq "${WIN_PATH}" "1"
#ifeq "" "$(findstring cygdrive,${GTK_INC_PATH})"
ifeq "" "$(findstring :,${GTK_INC_PATH})"
#GTK installed inside CygWin tree - need to translate to Windows path
	#under cygwin path /usr/lib/ is actailly a symling to /lib, but "real" Windows
	#app (like MingGW) don't know anythign about links! So for now we will add path to
	#there.   -ID:/cygwin/usr/lib/glib-2.0/include
	ADD_ME		=-I${WIN_CYGPATH}/lib/glib-2.0/include \
					-I${WIN_CYGPATH}/lib/gtk-2.0/include
	GLIB_CFLAGS		:=$(subst -I,-I${WIN_CYGPATH},${GLIB_CFLAGS}) ${ADD_ME}
	GTK_INC_PATH	:=$(subst -I,-I${WIN_CYGPATH},${GTK_INC_PATH}) ${ADD_ME}
	GTK_LIB_PATH	:=$(subst -L,-L${WIN_CYGPATH},${GTK_LIB_PATH}) -L${WIN_CYGPATH}/lib
endif
#endif
endif

GTKLIBS			:=$(subst -rdynamic,,${GTKLIBS}) 

#Need to find better sollution for this:
#dropline.net and other installers have -lintl, but zip has -lintl-1
#ifeq "${HOSTNAME}" "istation"
#	GTKLIBS			:=$(subst -lintl,-lintl-1,${GTKLIBS})
#endif

CFLAGS				+=-I.. -I. -I${ROOT}/incl ${GLIB_CFLAGS} ${GTK_INC_PATH} \
					${GTK_LIB_PATH} -I/usr/local/include/ncurses

CFLAGS				:=$(subst /target/build,/usr,${CFLAGS})
GTK_LIB_PATH   		:=$(subst /target/build,/usr,${GTK_LIB_PATH})

CFLAGS		 		:=$(subst /target,/usr,${CFLAGS})
CFLAGS				+=-fPIC
GTK_LIB_PATH 		:=$(subst /target,/usr,${GTK_LIB_PATH})

#-mms-bitfields or -fnative-struct

ifeq "${WIN_PATH}" "1"
ifeq "" "$(findstring :,${GTK_LIB_PATH})"
	GTK_LIB_PATH 	:=$(subst -L,-L${WIN_CYGPATH},${GTK_LIB_PATH})  -L${WIN_CYGPATH}/lib
endif
endif

#we don't want -Wall in CFLAGS when compiling form_x_xdr.c because it would
#give us bunch of warnings about unised varibles, that we cannot fix
#because this file is generated by rpcgen:
CFLAGS_FORM_X_XDR_C =$(CFLAGS:%-Wall=%)

# We don't want -Wmissing-declarations and -Wmissing-prototypes when
# compiling C code created by 4glc, since it is not creating prototypes,
# so we get lots of warnings:
CFLAGS_4GLC2 		=$(CFLAGS:%-Wmissing-declarations=%)
CFLAGS_4GLC1 		=$(CFLAGS_4GLC2:%-Wmissing-prototypes=%)
CFLAGS_4GLC 		=$(CFLAGS_4GLC1:%-Wstrict-prototypes=%)

#we cannot compile GTK code with  -Wstrict-prototypes because
#GTK+ supplied libraries have many functions declared without parameters
CFLAGS_GTK_C 		=$(CFLAGS:%-Wstrict-prototypes=%)

#Fails with error: initializer element is not computable at load time:
ifeq "${NON_PEDANTIC_OK}" "1"
	CFLAGS_4GLC 	:=$(CFLAGS_4GLC:%-pedantic=%)
endif

ifeq "${GTKBUILD}" "yes"
	ALL				+=${LIBROOT}/libUI_HL_GTK${SO_EXT}
endif

## ==================================================================
##                              Curses Options
## ==================================================================

ifneq "${HAVE_CURSES}" "0"
	ALL					+=${LIBROOT}/libUI_HL_TUI${SO_EXT} ${LIBROOT}/libUI_HL_TUIN${SO_EXT}
	#CURSES_INC_PATH must be BEFORE system paths:
	#Note: On CygWin term.h is in -I/usr/include/ncurses
	CFLAGS				:=${CURSES_INC_PATH} -I/usr/include/ncurses ${CFLAGS}
else
	ifneq "${HAVE_PDCURSES}" "0"
		ALL				+=${LIBROOT}/libUI_HL_TUIN${SO_EXT}
		DO_PDCURSES		=1
	endif
	ifneq "${HAS_PDCURSES_STATIC_OBJS}" "0"
		ALL				+=${LIBROOT}/libUI_HL_TUINs${SO_EXT}
		DO_PDCURSES		=1
	endif
		
	ifeq "${DO_PDCURSES}" "1"
		CURSES_LIB_PATH	=${PD_CURSES_LIB_PATH}
		CURSES_INC_PATH	=${PD_CURSES_INC_PATH}
		CURSES_LIB_NAME	=${PD_CURSES_LIB_NAME}

		ifeq "${WIN_PATH}" "1"
			#CURSES_LIB_PATH 	:=$(subst -L/cygdrive/d,-Ld:,${CURSES_LIB_PATH})
			#CURSES_INC_PATH 	:=$(subst -I/cygdrive/d,-Id:,${CURSES_INC_PATH})
			#CURSES_LIB_NAME 	:=$(subst /cygdrive/d,d:,${CURSES_LIB_NAME})
			CURSES_LIB_PATH 	:=$(subst -L${PD_CURSES_CYGDRIVE},-L${PD_CURSES_DRIVE}:,${CURSES_LIB_PATH})
			CURSES_INC_PATH 	:=$(subst -I${PD_CURSES_CYGDRIVE},-I${PD_CURSES_DRIVE}:,${CURSES_INC_PATH})
			CURSES_LIB_NAME 	:=$(subst ${PD_CURSES_CYGDRIVE},${PD_CURSES_DRIVE}:,${CURSES_LIB_NAME})
			#CURSES_LIB_NAME 	:=$(subst /cygdrive/d,d:,${CURSES_LIB_NAME}) d:/pdc25_vc_w32/panel.lib
			#CURSES_LIB_NAME=d:/pdc25_vc_w32/curses.dll d:/pdc25_vc_w32/panel.lib
		endif

		#CURSES_INC_PATH must be BEFORE system paths:
		CFLAGS			:=${CURSES_INC_PATH} ${CFLAGS}
	endif
endif

CFLAGS					+=-I.. -I. -I${ROOT}/incl

ifeq "${NON_PEDANTIC_OK}" "1"
	CFLAGS_NO_PEDANTIC  =$(CFLAGS:%-pedantic=%)
else
	CFLAGS_NO_PEDANTIC  =${CFLAGS}
endif

CURSES_LIB_NAME_NO_FORM	=$(CURSES_LIB_NAME:%-lform=%)

## ==================================================================
##                              Common Options
## ==================================================================


ifneq "${COMSPEC}" ""
	LINKLIBS	=-L${LIBROOT} -laubit4gl
endif

CFLAGS			+=-g -I${ROOT}/incl -I.. -I${LIBROOT}/libaubit4gl

## ==================================================================
##                              Source files
## ==================================================================

OBJS= forms.o generic_ui.o menu.o display_array.o formcntrl.o input_array.o misc.o 

## ==================================================================
##                              Targets
## ==================================================================

all: ${ALL}
	@echo "Default trgets (${ALL}) compiled sucessfuly."

#What was this is should it be removed completely? Mike?
#${LIBROOT}/libUI_HLGENERIC${SO_EXT}: $(OBJS) API_lowlevel.o
#	gcc -L${ROOT}/lib -rdynamic -shared $(OBJS) API_lowlevel.o -o libUI_HLGENERIC${SO_EXT} -laubit4gl
#	cp *${SO_EXT} ../..
#	${LD} ${SO_LDFLAGS} -o $@ $^ ${LINKLIBS}

#Standard Curses based plug-in
libUI_HL_TUI${SO_EXT}: ${LIBROOT}/libUI_HL_TUI${SO_EXT}
${LIBROOT}/libUI_HL_TUI${SO_EXT}: $(OBJS) lowlevel_tui.o width_narrow.o
	${LD} ${CURSES_LIB_PATH} ${SO_LDFLAGS} -o $@ $^ ${LINKLIBS} ${CURSES_LIB_NAME} 

#TUI mode plug-in with Aubit's own implementation of Curses libform
#This also enables PDcurses to be used instead of Ncurses, since PDcurses have 
#no libform implementation (PDcurses are only Curses implementation available for Windows)
libUI_HL_TUIN${SO_EXT}: ${LIBROOT}/libUI_HL_TUIN${SO_EXT}
${LIBROOT}/libUI_HL_TUIN${SO_EXT}: $(OBJS) lowlevel_tui_noform.o form_tui.o width_narrow.o
	${LD} ${CURSES_LIB_PATH} ${SO_LDFLAGS} -o $@ $^ ${LINKLIBS} ${CURSES_LIB_NAME_NO_FORM}  

#Statically linked TUIN
libUI_HL_TUINs${SO_EXT}: ${LIBROOT}/libUI_HL_TUINs${SO_EXT}
${LIBROOT}/libUI_HL_TUINs${SO_EXT}: $(OBJS) lowlevel_tui_noform.o form_tui.o width_narrow.o
	${LD} ${CURSES_LIB_PATH} ${SO_LDFLAGS} -o $@ $^ ${LINKLIBS} \
		${PD_CURSES_LIB_NAME}
#		d:/cygwin/tmp/pdcurs26/win32/panel.a d:/cygwin/tmp/pdcurs26/win32/pdcurses.a		

#Debug version of TUIN, using debug library libpanel_g
libUI_HL_TUIN-DEBUG${SO_EXT}: ${LIBROOT}/libUI_HL_TUIN-DEBUG${SO_EXT}
${LIBROOT}/libUI_HL_TUIN-DEBUG${SO_EXT}: $(OBJS) lowlevel_tui_noform.o form_tui.o width_narrow.o
	${LD} ${CURSES_LIB_PATH} ${SO_LDFLAGS} -o $@ $^ ${LINKLIBS}  -lpanel_g -lncurses_g -lgpm

#Not shure what this is? Mike?
libUI_HL_TUINW${SO_EXT}: ${LIBROOT}/libUI_HL_TUINW${SO_EXT}
${LIBROOT}/libUI_HL_TUINW${SO_EXT}: $(OBJS) lowlevel_tui_noform_wide.o form_tui.o width_wide.o
	${LD} ${CURSES_LIB_PATH} ${SO_LDFLAGS} -o $@ $^ ${LINKLIBS} -L/usr/local/widec/lib -static -lpanelw_g -lncursesw_g

#Standard GTK+ based plug-in
libUI_HL_GTK${SO_EXT}: ${LIBROOT}/libUI_HL_GTK${SO_EXT}
${LIBROOT}/libUI_HL_GTK${SO_EXT}: $(OBJS) lowlevel_gtk.o widget_gtk.o menu_gtk.o width_narrow.o
	${LD} ${GTK_LIB_PATH} ${SO_LDFLAGS} -fPIC -o $@ $^ ${LINKLIBS} ${GTKLIBS} -Wl,--export-dynamic -L/opt/gnome/lib  ${GTKLIBS}

## ==================================================================
##                              Sub-Targets
## ==================================================================

#API_lowlevel.c: ${LIBROOT}/libaubit4gl/API_lowlevel.spec API_lowlevel.h a4gl_API_lowlevel.h
#	(cd ${LIBROOT}/libaubit4gl && ${SH} ../bin/dlmagic ./API_lowlevel.spec > ../libui/ui_highlevel/API_lowlevel.c)

#so is it now only this one, or...
a4gl_API_lowlevel.h: ${LIBROOT}/libaubit4gl/API_lowlevel.spec
#	(cd ${LIBROOT}/libaubit4gl && ${SH} ../bin/dlmagic ./API_lowlevel.spec -h > ../libui/ui_highlevel/a4gl_API_lowlevel.h)
	${SH} ${LIBROOT}/bin/dlmagic $^ -h > $@

width_narrow.o: width.c
	${CC} -DNO_WIDEC $^ ${CFLAGS} -c -o $@

width_wide.o: width.c
	${CC} -DWIDEC $^ ${CFLAGS} -c -o $@

lowlevel_tui.o: lowlevel/lowlevel_tui.c
	${CC} ${CFLAGS} -c -I$(ROOT)/incl -I. -Ilowlevel $^ -o $@

lowlevel_tui_noform.o: lowlevel/lowlevel_tui.c
	${CC} ${CFLAGS} -DNO_CURSES_FORM -c -I$(ROOT)/incl -I. -Ilowlevel $^ -o $@

lowlevel_tui_noform_wide.o: lowlevel/lowlevel_tui.c
	${CC} ${CFLAGS} -DWIDEC -DNO_CURSES_FORM -c -I$(ROOT)/incl -I. -Ilowlevel $^ -o $@

form_tui.o: lowlevel/form_tui.c
	${CC} ${CFLAGS} -c -I$(ROOT)/incl -I. -Ilowlevel $^ -o $@

lowlevel_gtk.o: lowlevel/lowlevel_gtk.c a4gl_API_lowlevel.h
	${CC} ${CFLAGS_GTK_C} -c -I$(ROOT)/incl -I. -Ilowlevel $< -o $@ $(GTK_INC_PATH)

widget_gtk.o: lowlevel/widget_gtk.c
	${CC} ${CFLAGS_GTK_C} -c -I$(ROOT)/incl -I. -Ilowlevel $^ -o $@ $(GTK_INC_PATH)

menu_gtk.o: lowlevel/menu_gtk.c
	${CC} ${CFLAGS_GTK_C} -c -I$(ROOT)/incl -I../../../common/dataio -I. -Ilowlevel $^ -o $@ $(GTK_INC_PATH)

## ==================================================================
##                              Dependencies
## ==================================================================

#All objects depend on API headers:
#${OBJS}: ${ROOT}/incl/a4gl_API_lex.h ${ROOT}/incl/a4gl_API_form.h ${ROOT}/incl/a4gl_API_menu.h \
	#${ROOT}/incl/a4gl_API_msg.h ${ROOT}/incl/a4gl_API_packer.h ${ROOT}/incl/a4gl_API_ui.h a4gl_API_lowlevel.h

#Rule to generate API's:
${ROOT}/incl/a4gl_API_%.h :
	${MAKE} -C ${LIBROOT}/libaubit4gl api

${OBJS} :  a4gl_API_lowlevel.h

## ==================================================================
##                              Test
## ==================================================================

testit:  $(OBJS) testit.o API_lowlevel.o
	${CC} ${CURSES_LIB_PATH} -L${ROOT}/lib $^  -o testit -laubit4gl ${CURSES_LIB_NAME} 

show:
	@echo "LINKLIBS=${LINKLIBS}"
	@echo "GTK_LIB_PATH=${GTK_LIB_PATH}" 
	@echo "GTKLIBS=${GTKLIBS}"
	@echo "CFLAGS_GTK_C=${CFLAGS_GTK_C}"
	@echo "CFLAGS=${CFLAGS}"
	@echo "HAVE_CURSES=${HAVE_CURSES}"
	@echo "CURSES_LIB_PATH=${CURSES_LIB_PATH}"
	@echo "CURSES_INC_PATH=${CURSES_INC_PATH}"
	@echo "CURSES_LIB_NAME=${CURSES_LIB_NAME}"
	@echo "HAVE_PDCURSES=${HAVE_PDCURSES}"	
	@echo "PD_CURSES_LIB_PATH=${PD_CURSES_LIB_PATH}"
	@echo "PD_CURSES_INC_PATH=${PD_CURSES_INC_PATH}"
	@echo "PD_CURSES_LIB_NAME=${PD_CURSES_LIB_NAME}"
	@echo "WIN_PATH=${WIN_PATH}"
	@echo "PD_CURSES_CYGDRIVE=${PD_CURSES_CYGDRIVE}"
	@echo "PD_CURSES_DRIVE=${PD_CURSES_DRIVE}"
	@echo "HAS_PDCURSES_STATIC_OBJS=${HAS_PDCURSES_STATIC_OBJS}"
	@echo "DO_PDCURSES=${DO_PDCURSES}"	
	
## ==================================================================
##                              Clean
## ==================================================================

clean:
	${RM} *${SO_EXT} *.o *.bak testit API_lowlevel.c API_lowlevel.h \
	lowlevel/*.bak a4gl_API_lowlevel.h


