/* Validating XML processor for module_def.dtd.
 * Generated 2009/10/06 16:37:55.
 *
 * This program was generated with the FleXML XML processor generator.
 * FleXML is Copyright (C) 1999-2005 Kristoffer Rose.  All rights reserved.
 * FleXML is Copyright (C) 2003-2006 Martin Quinson.  All rights reserved.
 * (Id: flexml.pl,v 1.61 2006/09/13 16:34:33 wdowling Exp).
 * 
 * There are two, intertwined parts to this program, part A and part B.
 *
 * Part A
 * ------
 * 
 * Some parts, here collectively called "Part A", are found in the 
 * FleXML package.  They are Copyright (C) 1999-2005 Kristoffer Rose
 * and Copyright (C) 2003-2006 Martin Quinson. All rights reserved.
 *
 * You can redistribute, use, perform, display and/or modify "Part A"
 * provided the following two conditions hold:
 *
 * 1. The program is distributed WITHOUT ANY WARRANTY from the author of
 *    FleXML; without even the implied warranty of MERCHANTABILITY or
 *    FITNESS FOR A PARTICULAR PURPOSE.
 *
 * 2. The program distribution conditions do not in any way affect the
 *    distribution conditions of the FleXML system used to generate this
 *    file or any version of FleXML derived from that system.
 *
 * Notice that these are explicit rights granted to you for files
 * generated by the FleXML system.  For your rights in connection with
 * the FleXML system itself please consult the GNU General Public License.
 * 
 * Part B
 * ------
 * 
 * The other parts, here collectively called "Part B", and which came 
 * from the DTD used by FleXML to generate this program, can be 
 * distributed (or not, as the case may be) under the terms of whoever
 * wrote them, provided these terms respect and obey the two conditions 
 * above under the heading "Part A".
 *
 * The author of and contributors to FleXML specifically disclaim
 * any copyright interest in "Part B", unless "Part B" was written 
 * by the author of or contributors to FleXML.
 * 
 */

%{

/* Version strings. */
const char rcs_flexml_skeleton[] =
 "$" "Id: skel,v 1.38 2006/09/12 18:05:45 wdowling Exp $";
const char rcs_flexml[] =
 "$" "Id: flexml.pl,v 1.61 2006/09/13 16:34:33 wdowling Exp $";

/* ANSI headers. */
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdarg.h>
#include <ctype.h>

#ifndef FLEXML_INDEXSTACKSIZE
#define FLEXML_INDEXSTACKSIZE 1000
#endif

/* Generated definitions. */
#define FLEXML_yylineno
#ifndef FLEXML_BUFFERSTACKSIZE
#define FLEXML_BUFFERSTACKSIZE 100000
#endif

/* XML processor api. */
#include "module_def.h"

/* FleXML-provided data. */
int pcdata_ix;
extern char *bufferstack;
#define pcdata (bufferstack + pcdata_ix)
AT_s_expr_external_call_func AX_s_expr_external_call_func;
#define A_s_expr_external_call_func (bufferstack + AX_s_expr_external_call_func)
AT_struct_msg_box_cmd_default_button AX_struct_msg_box_cmd_default_button;
#define A_struct_msg_box_cmd_default_button (bufferstack + AX_struct_msg_box_cmd_default_button)
AT_list_of_integers_nm AX_list_of_integers_nm;
#define A_list_of_integers_nm (bufferstack + AX_list_of_integers_nm)
AT_struct_sleep_cmd_nm AX_struct_sleep_cmd_nm;
#define A_struct_sleep_cmd_nm (bufferstack + AX_struct_sleep_cmd_nm)
AT_struct_start_cmd_repname AX_struct_start_cmd_repname;
#define A_struct_start_cmd_repname (bufferstack + AX_struct_start_cmd_repname)
AT_s_expr_cast_notnull AX_s_expr_cast_notnull;
#define A_s_expr_cast_notnull (bufferstack + AX_s_expr_cast_notnull)
AT_field_fieldname AX_field_fieldname;
#define A_field_fieldname (bufferstack + AX_field_fieldname)
AT_fgl_comment_lineno AX_fgl_comment_lineno;
#define A_fgl_comment_lineno (bufferstack + AX_fgl_comment_lineno)
AT_struct_next_form_cmd_nm AX_struct_next_form_cmd_nm;
#define A_struct_next_form_cmd_nm (bufferstack + AX_struct_next_form_cmd_nm)
AT_s_expr_external_call_module AX_s_expr_external_call_module;
#define A_s_expr_external_call_module (bufferstack + AX_s_expr_external_call_module)
AT_attrib_underline AX_attrib_underline;
#define A_attrib_underline (bufferstack + AX_attrib_underline)
AT_vname_name AX_vname_name;
#define A_vname_name (bufferstack + AX_vname_name)
AT_variable_usage_variable_name AX_variable_usage_variable_name;
#define A_variable_usage_variable_name (bufferstack + AX_variable_usage_variable_name)
AT_struct_open_form_gui_cmd_formhandler AX_struct_open_form_gui_cmd_formhandler;
#define A_struct_open_form_gui_cmd_formhandler (bufferstack + AX_struct_open_form_gui_cmd_formhandler)
AT_s_expr_bound_fcall_namespace AX_s_expr_bound_fcall_namespace;
#define A_s_expr_bound_fcall_namespace (bufferstack + AX_s_expr_bound_fcall_namespace)
AT_sql_statement_nm AX_sql_statement_nm;
#define A_sql_statement_nm (bufferstack + AX_sql_statement_nm)
AT_convert_towhat AX_convert_towhat;
#define A_convert_towhat (bufferstack + AX_convert_towhat)
AT_s_exchange_clobber_origval AX_s_exchange_clobber_origval;
#define A_s_exchange_clobber_origval (bufferstack + AX_s_exchange_clobber_origval)
AT_struct_print_file_cmd_semi AX_struct_print_file_cmd_semi;
#define A_struct_print_file_cmd_semi (bufferstack + AX_struct_print_file_cmd_semi)
AT_s_expr_function_call_fname AX_s_expr_function_call_fname;
#define A_s_expr_function_call_fname (bufferstack + AX_s_expr_function_call_fname)
AT_s_expr_cached_ref_cnt AX_s_expr_cached_ref_cnt;
#define A_s_expr_cached_ref_cnt (bufferstack + AX_s_expr_cached_ref_cnt)
AT_if_cond_lineno AX_if_cond_lineno;
#define A_if_cond_lineno (bufferstack + AX_if_cond_lineno)
AT_report_orderby_section_nm AX_report_orderby_section_nm;
#define A_report_orderby_section_nm (bufferstack + AX_report_orderby_section_nm)
AT_constant_data_e_constant_type AX_constant_data_e_constant_type;
#define A_constant_data_e_constant_type (bufferstack + AX_constant_data_e_constant_type)
AT_struct_foreach_cmd_nm AX_struct_foreach_cmd_nm;
#define A_struct_foreach_cmd_nm (bufferstack + AX_struct_foreach_cmd_nm)
AT_struct_show_menu_cmd_menuname AX_struct_show_menu_cmd_menuname;
#define A_struct_show_menu_cmd_menuname (bufferstack + AX_struct_show_menu_cmd_menuname)
AT_struct_skip_to_cmd_nm AX_struct_skip_to_cmd_nm;
#define A_struct_skip_to_cmd_nm (bufferstack + AX_struct_skip_to_cmd_nm)
AT_s_expr_bound_fcall_nm AX_s_expr_bound_fcall_nm;
#define A_s_expr_bound_fcall_nm (bufferstack + AX_s_expr_bound_fcall_nm)
AT_struct_term_rep_cmd_nm AX_struct_term_rep_cmd_nm;
#define A_struct_term_rep_cmd_nm (bufferstack + AX_struct_term_rep_cmd_nm)
AT_struct_sql_cmd_sql AX_struct_sql_cmd_sql;
#define A_struct_sql_cmd_sql (bufferstack + AX_struct_sql_cmd_sql)
AT_s_sli_cast_datatype AX_s_sli_cast_datatype;
#define A_s_sli_cast_datatype (bufferstack + AX_s_sli_cast_datatype)
AT_struct_return_cmd_with_resume AX_struct_return_cmd_with_resume;
#define A_struct_return_cmd_with_resume (bufferstack + AX_struct_return_cmd_with_resume)
AT_s_report_definition_isstatic AX_s_report_definition_isstatic;
#define A_s_report_definition_isstatic (bufferstack + AX_s_report_definition_isstatic)
AT_int_nm AX_int_nm;
#define A_int_nm (bufferstack + AX_int_nm)
AT_assoc_subscript_subscript_string AX_assoc_subscript_subscript_string;
#define A_assoc_subscript_subscript_string (bufferstack + AX_assoc_subscript_subscript_string)
AT_struct_open_statusbox_cmd_nm AX_struct_open_statusbox_cmd_nm;
#define A_struct_open_statusbox_cmd_nm (bufferstack + AX_struct_open_statusbox_cmd_nm)
AT_s_select_list_item_regex_nm AX_s_select_list_item_regex_nm;
#define A_s_select_list_item_regex_nm (bufferstack + AX_s_select_list_item_regex_nm)
AT_struct_whenever_cmd_whencode AX_struct_whenever_cmd_whencode;
#define A_struct_whenever_cmd_whencode (bufferstack + AX_struct_whenever_cmd_whencode)
AT_struct_term_rep_cmd_namespace AX_struct_term_rep_cmd_namespace;
#define A_struct_term_rep_cmd_namespace (bufferstack + AX_struct_term_rep_cmd_namespace)
AT_struct_output_cmd_namespace AX_struct_output_cmd_namespace;
#define A_struct_output_cmd_namespace (bufferstack + AX_struct_output_cmd_namespace)
AT_pdf_startrep_towhat AX_pdf_startrep_towhat;
#define A_pdf_startrep_towhat (bufferstack + AX_pdf_startrep_towhat)
AT_struct_start_cmd_namespace AX_struct_start_cmd_namespace;
#define A_struct_start_cmd_namespace (bufferstack + AX_struct_start_cmd_namespace)
AT_startrep_with_top_margin AX_startrep_with_top_margin;
#define A_startrep_with_top_margin (bufferstack + AX_startrep_with_top_margin)
AT_s_import_function_definition_nparam AX_s_import_function_definition_nparam;
#define A_s_import_function_definition_nparam (bufferstack + AX_s_import_function_definition_nparam)
AT_s_full_col_tab AX_s_full_col_tab;
#define A_s_full_col_tab (bufferstack + AX_s_full_col_tab)
AT_s_expr_parameter_nm AX_s_expr_parameter_nm;
#define A_s_expr_parameter_nm (bufferstack + AX_s_expr_parameter_nm)
AT_cons_list_entry_tabname AX_cons_list_entry_tabname;
#define A_cons_list_entry_tabname (bufferstack + AX_cons_list_entry_tabname)
AT_variable_is_static AX_variable_is_static;
#define A_variable_is_static (bufferstack + AX_variable_is_static)
AT_command_data_nm AX_command_data_nm;
#define A_command_data_nm (bufferstack + AX_command_data_nm)
AT_expr_str_sv AX_expr_str_sv;
#define A_expr_str_sv (bufferstack + AX_expr_str_sv)
AT_short_value AX_short_value;
#define A_short_value (bufferstack + AX_short_value)
AT_s_expr_form_is_compiled_nm AX_s_expr_form_is_compiled_nm;
#define A_s_expr_form_is_compiled_nm (bufferstack + AX_s_expr_form_is_compiled_nm)
AT_s_select_list_item_data_e_sli AX_s_select_list_item_data_e_sli;
#define A_s_select_list_item_data_e_sli (bufferstack + AX_s_select_list_item_data_e_sli)
AT_field_subscript AX_field_subscript;
#define A_field_subscript (bufferstack + AX_field_subscript)
AT_struct_options_cmd_nm AX_struct_options_cmd_nm;
#define A_struct_options_cmd_nm (bufferstack + AX_struct_options_cmd_nm)
AT_s_expr_shared_function_call_lib AX_s_expr_shared_function_call_lib;
#define A_s_expr_shared_function_call_lib (bufferstack + AX_s_expr_shared_function_call_lib)
AT_s_pdf_report_definition_nm AX_s_pdf_report_definition_nm;
#define A_s_pdf_report_definition_nm (bufferstack + AX_s_pdf_report_definition_nm)
AT_s_expr_infield_line AX_s_expr_infield_line;
#define A_s_expr_infield_line (bufferstack + AX_s_expr_infield_line)
AT_variable_flags AX_variable_flags;
#define A_variable_flags (bufferstack + AX_variable_flags)
AT_s_expr_pdf_function_call_module AX_s_expr_pdf_function_call_module;
#define A_s_expr_pdf_function_call_module (bufferstack + AX_s_expr_pdf_function_call_module)
AT_s_expr_agg_expr_num AX_s_expr_agg_expr_num;
#define A_s_expr_agg_expr_num (bufferstack + AX_s_expr_agg_expr_num)
AT_variable_is_extern AX_variable_is_extern;
#define A_variable_is_extern (bufferstack + AX_variable_is_extern)
AT_s_function_definition_nm AX_s_function_definition_nm;
#define A_s_function_definition_nm (bufferstack + AX_s_function_definition_nm)
AT_s_expr_field_touched_line AX_s_expr_field_touched_line;
#define A_s_expr_field_touched_line (bufferstack + AX_s_expr_field_touched_line)
AT_struct_run_cmd_nm AX_struct_run_cmd_nm;
#define A_struct_run_cmd_nm (bufferstack + AX_struct_run_cmd_nm)
AT_s_sli_cast_nm AX_s_sli_cast_nm;
#define A_s_sli_cast_nm (bufferstack + AX_s_sli_cast_nm)
AT_struct_call_shared_cmd_niy AX_struct_call_shared_cmd_niy;
#define A_struct_call_shared_cmd_niy (bufferstack + AX_struct_call_shared_cmd_niy)
AT_if_conds_nm AX_if_conds_nm;
#define A_if_conds_nm (bufferstack + AX_if_conds_nm)
AT_single_option_nm AX_single_option_nm;
#define A_single_option_nm (bufferstack + AX_single_option_nm)
AT_s_expr_field_touched_nm AX_s_expr_field_touched_nm;
#define A_s_expr_field_touched_nm (bufferstack + AX_s_expr_field_touched_nm)
AT_s_select_modifier AX_s_select_modifier;
#define A_s_select_modifier (bufferstack + AX_s_select_modifier)
AT_s_formhandler_definition_formhandler_name AX_s_formhandler_definition_formhandler_name;
#define A_s_formhandler_definition_formhandler_name (bufferstack + AX_s_formhandler_definition_formhandler_name)
AT_struct_foreach_cmd_block_id AX_struct_foreach_cmd_block_id;
#define A_struct_foreach_cmd_block_id (bufferstack + AX_struct_foreach_cmd_block_id)
AT_s_expr_function_call_namespace AX_s_expr_function_call_namespace;
#define A_s_expr_function_call_namespace (bufferstack + AX_s_expr_function_call_namespace)
AT_menuoption_nm AX_menuoption_nm;
#define A_menuoption_nm (bufferstack + AX_menuoption_nm)
AT_struct_msg_box_cmd_buttons AX_struct_msg_box_cmd_buttons;
#define A_struct_msg_box_cmd_buttons (bufferstack + AX_struct_msg_box_cmd_buttons)
AT_struct_pdf_call_cmd_nm AX_struct_pdf_call_cmd_nm;
#define A_struct_pdf_call_cmd_nm (bufferstack + AX_struct_pdf_call_cmd_nm)
AT_struct_output_cmd_nm AX_struct_output_cmd_nm;
#define A_struct_output_cmd_nm (bufferstack + AX_struct_output_cmd_nm)
AT_simple_variable_datatype AX_simple_variable_datatype;
#define A_simple_variable_datatype (bufferstack + AX_simple_variable_datatype)
AT_s_expr_get_fldbuf_module AX_s_expr_get_fldbuf_module;
#define A_s_expr_get_fldbuf_module (bufferstack + AX_s_expr_get_fldbuf_module)
AT_sql_statement_sql_string AX_sql_statement_sql_string;
#define A_sql_statement_sql_string (bufferstack + AX_sql_statement_sql_string)
AT_variable_escope AX_variable_escope;
#define A_variable_escope (bufferstack + AX_variable_escope)
AT_object_variable_nm AX_object_variable_nm;
#define A_object_variable_nm (bufferstack + AX_object_variable_nm)
AT_struct_connect_cmd_nm AX_struct_connect_cmd_nm;
#define A_struct_connect_cmd_nm (bufferstack + AX_struct_connect_cmd_nm)
AT_s_select_list_item_sq_expression_type AX_s_select_list_item_sq_expression_type;
#define A_s_select_list_item_sq_expression_type (bufferstack + AX_s_select_list_item_sq_expression_type)
AT_struct_locate_cmd_nm AX_struct_locate_cmd_nm;
#define A_struct_locate_cmd_nm (bufferstack + AX_struct_locate_cmd_nm)
AT_s_expr_cast_force AX_s_expr_cast_force;
#define A_s_expr_cast_force (bufferstack + AX_s_expr_cast_force)
AT_s_pdf_report_definition_funcname AX_s_pdf_report_definition_funcname;
#define A_s_pdf_report_definition_funcname (bufferstack + AX_s_pdf_report_definition_funcname)
AT_command_comment AX_command_comment;
#define A_command_comment (bufferstack + AX_command_comment)
AT_variable_list_sorted_list AX_variable_list_sorted_list;
#define A_variable_list_sorted_list (bufferstack + AX_variable_list_sorted_list)
AT_assoc_array_variable_char_size AX_assoc_array_variable_char_size;
#define A_assoc_array_variable_char_size (bufferstack + AX_assoc_array_variable_char_size)
AT_module_definition_compiled_time AX_module_definition_compiled_time;
#define A_module_definition_compiled_time (bufferstack + AX_module_definition_compiled_time)
AT_fh_field_entry_nm AX_fh_field_entry_nm;
#define A_fh_field_entry_nm (bufferstack + AX_fh_field_entry_nm)
AT_struct_if_cmd_nm AX_struct_if_cmd_nm;
#define A_struct_if_cmd_nm (bufferstack + AX_struct_if_cmd_nm)
AT_s_import_package_nm AX_s_import_package_nm;
#define A_s_import_package_nm (bufferstack + AX_s_import_package_nm)
AT_event_data_on_action AX_event_data_on_action;
#define A_event_data_on_action (bufferstack + AX_event_data_on_action)
AT_variable_data_e_variable_type AX_variable_data_e_variable_type;
#define A_variable_data_e_variable_type (bufferstack + AX_variable_data_e_variable_type)
AT_s_table_list_element_alias AX_s_table_list_element_alias;
#define A_s_table_list_element_alias (bufferstack + AX_s_table_list_element_alias)
AT_struct_finish_cmd_namespace AX_struct_finish_cmd_namespace;
#define A_struct_finish_cmd_namespace (bufferstack + AX_struct_finish_cmd_namespace)
AT_s_fetch_place_ab_rel AX_s_fetch_place_ab_rel;
#define A_s_fetch_place_ab_rel (bufferstack + AX_s_fetch_place_ab_rel)
AT_bluebar_style AX_bluebar_style;
#define A_bluebar_style (bufferstack + AX_bluebar_style)
AT_s_expr_current_from AX_s_expr_current_from;
#define A_s_expr_current_from (bufferstack + AX_s_expr_current_from)
AT_s_pdf_report_definition_isstatic AX_s_pdf_report_definition_isstatic;
#define A_s_pdf_report_definition_isstatic (bufferstack + AX_s_pdf_report_definition_isstatic)
AT_field_nm AX_field_nm;
#define A_field_nm (bufferstack + AX_field_nm)
AT_struct_prompt_cmd_helpno AX_struct_prompt_cmd_helpno;
#define A_struct_prompt_cmd_helpno (bufferstack + AX_struct_prompt_cmd_helpno)
AT_s_expr_dynarr_function_call_n_namespace AX_s_expr_dynarr_function_call_n_namespace;
#define A_s_expr_dynarr_function_call_n_namespace (bufferstack + AX_s_expr_dynarr_function_call_n_namespace)
AT_s_update_pair_nm AX_s_update_pair_nm;
#define A_s_update_pair_nm (bufferstack + AX_s_update_pair_nm)
AT_lint_warning_warning AX_lint_warning_warning;
#define A_lint_warning_warning (bufferstack + AX_lint_warning_warning)
AT_struct_dealloc_arr_cmd_nm AX_struct_dealloc_arr_cmd_nm;
#define A_struct_dealloc_arr_cmd_nm (bufferstack + AX_struct_dealloc_arr_cmd_nm)
AT_struct_show_option_cmd_nm AX_struct_show_option_cmd_nm;
#define A_struct_show_option_cmd_nm (bufferstack + AX_struct_show_option_cmd_nm)
AT_s_import_package_package_name AX_s_import_package_package_name;
#define A_s_import_package_package_name (bufferstack + AX_s_import_package_package_name)
AT_on_event_nm AX_on_event_nm;
#define A_on_event_nm (bufferstack + AX_on_event_nm)
AT_struct_lint_expect_cmd_nm AX_struct_lint_expect_cmd_nm;
#define A_struct_lint_expect_cmd_nm (bufferstack + AX_struct_lint_expect_cmd_nm)
AT_s_expr_infield_module AX_s_expr_infield_module;
#define A_s_expr_infield_module (bufferstack + AX_s_expr_infield_module)
AT_struct_at_term_cmd_funcname AX_struct_at_term_cmd_funcname;
#define A_struct_at_term_cmd_funcname (bufferstack + AX_struct_at_term_cmd_funcname)
AT_s_table_outer_type AX_s_table_outer_type;
#define A_s_table_outer_type (bufferstack + AX_s_table_outer_type)
AT_struct_uncheck_menu_cmd_nm AX_struct_uncheck_menu_cmd_nm;
#define A_struct_uncheck_menu_cmd_nm (bufferstack + AX_struct_uncheck_menu_cmd_nm)
AT_s_expr_get_fldbuf_sio_id AX_s_expr_get_fldbuf_sio_id;
#define A_s_expr_get_fldbuf_sio_id (bufferstack + AX_s_expr_get_fldbuf_sio_id)
AT_user_details_nm AX_user_details_nm;
#define A_user_details_nm (bufferstack + AX_user_details_nm)
AT_variable_list_nm AX_variable_list_nm;
#define A_variable_list_nm (bufferstack + AX_variable_list_nm)
AT_variable_usage_escope AX_variable_usage_escope;
#define A_variable_usage_escope (bufferstack + AX_variable_usage_escope)
AT_struct_update_cmd_table AX_struct_update_cmd_table;
#define A_struct_update_cmd_table (bufferstack + AX_struct_update_cmd_table)
AT_when_lineno AX_when_lineno;
#define A_when_lineno (bufferstack + AX_when_lineno)
AT_variable_defsrc AX_variable_defsrc;
#define A_variable_defsrc (bufferstack + AX_variable_defsrc)
AT_s_expr_pdf_function_call_line AX_s_expr_pdf_function_call_line;
#define A_s_expr_pdf_function_call_line (bufferstack + AX_s_expr_pdf_function_call_line)
AT_s_expr_cached_nm AX_s_expr_cached_nm;
#define A_s_expr_cached_nm (bufferstack + AX_s_expr_cached_nm)
AT_when_nm AX_when_nm;
#define A_when_nm (bufferstack + AX_when_nm)
AT_struct_input_array_cmd_slice_start AX_struct_input_array_cmd_slice_start;
#define A_struct_input_array_cmd_slice_start (bufferstack + AX_struct_input_array_cmd_slice_start)
AT_event_data_time_n AX_event_data_time_n;
#define A_event_data_time_n (bufferstack + AX_event_data_time_n)
AT_s_expr_agg_nm AX_s_expr_agg_nm;
#define A_s_expr_agg_nm (bufferstack + AX_s_expr_agg_nm)
AT_pdf_startrep_ascii_width AX_pdf_startrep_ascii_width;
#define A_pdf_startrep_ascii_width (bufferstack + AX_pdf_startrep_ascii_width)
AT_s_import_legacy_definition_module AX_s_import_legacy_definition_module;
#define A_s_import_legacy_definition_module (bufferstack + AX_s_import_legacy_definition_module)
AT_locate_pos_e_location AX_locate_pos_e_location;
#define A_locate_pos_e_location (bufferstack + AX_locate_pos_e_location)
AT_s_expr_shared_function_call_nm AX_s_expr_shared_function_call_nm;
#define A_s_expr_shared_function_call_nm (bufferstack + AX_s_expr_shared_function_call_nm)
AT_struct_convert_cmd_repname AX_struct_convert_cmd_repname;
#define A_struct_convert_cmd_repname (bufferstack + AX_struct_convert_cmd_repname)
AT_form_field_form AX_form_field_form;
#define A_form_field_form (bufferstack + AX_form_field_form)
AT_s_expr_bound_fcall_line AX_s_expr_bound_fcall_line;
#define A_s_expr_bound_fcall_line (bufferstack + AX_s_expr_bound_fcall_line)
AT_attrib_bold AX_attrib_bold;
#define A_attrib_bold (bufferstack + AX_attrib_bold)
AT_variable_usage_with_asc_desc_nm AX_variable_usage_with_asc_desc_nm;
#define A_variable_usage_with_asc_desc_nm (bufferstack + AX_variable_usage_with_asc_desc_nm)
AT_sq_subquery_nm AX_sq_subquery_nm;
#define A_sq_subquery_nm (bufferstack + AX_sq_subquery_nm)
AT_s_module_entry_ptr_list_nm AX_s_module_entry_ptr_list_nm;
#define A_s_module_entry_ptr_list_nm (bufferstack + AX_s_module_entry_ptr_list_nm)
AT_attrib_border AX_attrib_border;
#define A_attrib_border (bufferstack + AX_attrib_border)
AT_s_expr_pdf_function_call_nm AX_s_expr_pdf_function_call_nm;
#define A_s_expr_pdf_function_call_nm (bufferstack + AX_s_expr_pdf_function_call_nm)
AT_s_expr_member_function_call_n_objectType AX_s_expr_member_function_call_n_objectType;
#define A_s_expr_member_function_call_n_objectType (bufferstack + AX_s_expr_member_function_call_n_objectType)
AT_s_dependant_tables_checksuminfo AX_s_dependant_tables_checksuminfo;
#define A_s_dependant_tables_checksuminfo (bufferstack + AX_s_dependant_tables_checksuminfo)
AT_on_event_lineno AX_on_event_lineno;
#define A_on_event_lineno (bufferstack + AX_on_event_lineno)
AT_struct_defer_cmd_nm AX_struct_defer_cmd_nm;
#define A_struct_defer_cmd_nm (bufferstack + AX_struct_defer_cmd_nm)
AT_s_select_list_item_sign AX_s_select_list_item_sign;
#define A_s_select_list_item_sign (bufferstack + AX_s_select_list_item_sign)
AT_vname_nm AX_vname_nm;
#define A_vname_nm (bufferstack + AX_vname_nm)
AT_s_expr_tmp_str AX_s_expr_tmp_str;
#define A_s_expr_tmp_str (bufferstack + AX_s_expr_tmp_str)
AT_file_description_name AX_file_description_name;
#define A_file_description_name (bufferstack + AX_file_description_name)
AT_struct_open_cursor_cmd_cursor_type AX_struct_open_cursor_cmd_cursor_type;
#define A_struct_open_cursor_cmd_cursor_type (bufferstack + AX_struct_open_cursor_cmd_cursor_type)
AT_s_select_finish_into_temp AX_s_select_finish_into_temp;
#define A_s_select_finish_into_temp (bufferstack + AX_s_select_finish_into_temp)
AT_s_expr_dynarr_function_call_n_nm AX_s_expr_dynarr_function_call_n_nm;
#define A_s_expr_dynarr_function_call_n_nm (bufferstack + AX_s_expr_dynarr_function_call_n_nm)
AT_struct_run_waiting_for_cmd_nm AX_struct_run_waiting_for_cmd_nm;
#define A_struct_run_waiting_for_cmd_nm (bufferstack + AX_struct_run_waiting_for_cmd_nm)
AT_s_class_definition_nm AX_s_class_definition_nm;
#define A_s_class_definition_nm (bufferstack + AX_s_class_definition_nm)
AT_event_data_interval_n AX_event_data_interval_n;
#define A_event_data_interval_n (bufferstack + AX_event_data_interval_n)
AT_struct_display_cmd_by_name AX_struct_display_cmd_by_name;
#define A_struct_display_cmd_by_name (bufferstack + AX_struct_display_cmd_by_name)
AT_s_exchange_clobber_nm AX_s_exchange_clobber_nm;
#define A_s_exchange_clobber_nm (bufferstack + AX_s_exchange_clobber_nm)
AT_whens_nm AX_whens_nm;
#define A_whens_nm (bufferstack + AX_whens_nm)
AT_startrep_with_right_margin AX_startrep_with_right_margin;
#define A_startrep_with_right_margin (bufferstack + AX_startrep_with_right_margin)
AT_struct_update_cmd_nm AX_struct_update_cmd_nm;
#define A_struct_update_cmd_nm (bufferstack + AX_struct_update_cmd_nm)
AT_struct_skip_cmd_nm AX_struct_skip_cmd_nm;
#define A_struct_skip_cmd_nm (bufferstack + AX_struct_skip_cmd_nm)
AT_s_cur_def_nm AX_s_cur_def_nm;
#define A_s_cur_def_nm (bufferstack + AX_s_cur_def_nm)
AT_struct_next_field_cmd_rel AX_struct_next_field_cmd_rel;
#define A_struct_next_field_cmd_rel (bufferstack + AX_struct_next_field_cmd_rel)
AT_struct_let_cmd_nm AX_struct_let_cmd_nm;
#define A_struct_let_cmd_nm (bufferstack + AX_struct_let_cmd_nm)
AT_struct_msg_box_cmd_nm AX_struct_msg_box_cmd_nm;
#define A_struct_msg_box_cmd_nm (bufferstack + AX_struct_msg_box_cmd_nm)
AT_pdf_startrep_pageheadersize AX_pdf_startrep_pageheadersize;
#define A_pdf_startrep_pageheadersize (bufferstack + AX_pdf_startrep_pageheadersize)
AT_attrib_dim AX_attrib_dim;
#define A_attrib_dim (bufferstack + AX_attrib_dim)
AT_s_expr_get_fldbuf_nm AX_s_expr_get_fldbuf_nm;
#define A_s_expr_get_fldbuf_nm (bufferstack + AX_s_expr_get_fldbuf_nm)
AT_form_field_nm AX_form_field_nm;
#define A_form_field_nm (bufferstack + AX_form_field_nm)
AT_s_expr_bound_fcall_module AX_s_expr_bound_fcall_module;
#define A_s_expr_bound_fcall_module (bufferstack + AX_s_expr_bound_fcall_module)
AT_s_expr_extend_to AX_s_expr_extend_to;
#define A_s_expr_extend_to (bufferstack + AX_s_expr_extend_to)
AT_s_select_list_item_complex_expr_op AX_s_select_list_item_complex_expr_op;
#define A_s_select_list_item_complex_expr_op (bufferstack + AX_s_select_list_item_complex_expr_op)
AT_constant_data_data_f AX_constant_data_data_f;
#define A_constant_data_data_f (bufferstack + AX_constant_data_data_f)
AT_s_expr_dynarr_function_call_n_line AX_s_expr_dynarr_function_call_n_line;
#define A_s_expr_dynarr_function_call_n_line (bufferstack + AX_s_expr_dynarr_function_call_n_line)
AT_struct_if_cmd_lineno AX_struct_if_cmd_lineno;
#define A_struct_if_cmd_lineno (bufferstack + AX_struct_if_cmd_lineno)
AT_s_table_list_nm AX_s_table_list_nm;
#define A_s_table_list_nm (bufferstack + AX_s_table_list_nm)
AT_s_expr_cast_nm AX_s_expr_cast_nm;
#define A_s_expr_cast_nm (bufferstack + AX_s_expr_cast_nm)
AT_startrep_towhat AX_startrep_towhat;
#define A_startrep_towhat (bufferstack + AX_startrep_towhat)
AT_s_select_list_item_sli_expr_nm AX_s_select_list_item_sli_expr_nm;
#define A_s_select_list_item_sli_expr_nm (bufferstack + AX_s_select_list_item_sli_expr_nm)
AT_s_report_definition_nm AX_s_report_definition_nm;
#define A_s_report_definition_nm (bufferstack + AX_s_report_definition_nm)
AT_s_select_list_item_builtin_fcall_nm AX_s_select_list_item_builtin_fcall_nm;
#define A_s_select_list_item_builtin_fcall_nm (bufferstack + AX_s_select_list_item_builtin_fcall_nm)
AT_s_expr_extend_nm AX_s_expr_extend_nm;
#define A_s_expr_extend_nm (bufferstack + AX_s_expr_extend_nm)
AT_struct_close_cmd_nm AX_struct_close_cmd_nm;
#define A_struct_close_cmd_nm (bufferstack + AX_struct_close_cmd_nm)
AT_dt_display_caption AX_dt_display_caption;
#define A_dt_display_caption (bufferstack + AX_dt_display_caption)
AT_s_select_list_item_regex_escape AX_s_select_list_item_regex_escape;
#define A_s_select_list_item_regex_escape (bufferstack + AX_s_select_list_item_regex_escape)
AT_s_select_list_item_sq_expression_nm AX_s_select_list_item_sq_expression_nm;
#define A_s_select_list_item_sq_expression_nm (bufferstack + AX_s_select_list_item_sq_expression_nm)
AT_s_expr_bound_fcall_lib AX_s_expr_bound_fcall_lib;
#define A_s_expr_bound_fcall_lib (bufferstack + AX_s_expr_bound_fcall_lib)
AT_struct_init_cmd_tonull AX_struct_init_cmd_tonull;
#define A_struct_init_cmd_tonull (bufferstack + AX_struct_init_cmd_tonull)
AT_s_expr_infield_nm AX_s_expr_infield_nm;
#define A_s_expr_infield_nm (bufferstack + AX_s_expr_infield_nm)
AT_struct_goto_cmd_label AX_struct_goto_cmd_label;
#define A_struct_goto_cmd_label (bufferstack + AX_struct_goto_cmd_label)
AT_struct_continue_cmd_block_id AX_struct_continue_cmd_block_id;
#define A_struct_continue_cmd_block_id (bufferstack + AX_struct_continue_cmd_block_id)
AT_command_colno AX_command_colno;
#define A_command_colno (bufferstack + AX_command_colno)
AT_s_expr_external_call_without_waiting AX_s_expr_external_call_without_waiting;
#define A_s_expr_external_call_without_waiting (bufferstack + AX_s_expr_external_call_without_waiting)
AT_variable_usage_variable_id AX_variable_usage_variable_id;
#define A_variable_usage_variable_id (bufferstack + AX_variable_usage_variable_id)
AT_s_select_list_item_column_nm AX_s_select_list_item_column_nm;
#define A_s_select_list_item_column_nm (bufferstack + AX_s_select_list_item_column_nm)
AT_ilist_i2 AX_ilist_i2;
#define A_ilist_i2 (bufferstack + AX_ilist_i2)
AT_struct_display_cmd_nm AX_struct_display_cmd_nm;
#define A_struct_display_cmd_nm (bufferstack + AX_struct_display_cmd_nm)
AT_flist_special AX_flist_special;
#define A_flist_special (bufferstack + AX_flist_special)
AT_report_format_section_entry_orderby_var_no AX_report_format_section_entry_orderby_var_no;
#define A_report_format_section_entry_orderby_var_no (bufferstack + AX_report_format_section_entry_orderby_var_no)
AT_struct_skip_by_cmd_nm AX_struct_skip_by_cmd_nm;
#define A_struct_skip_by_cmd_nm (bufferstack + AX_struct_skip_by_cmd_nm)
AT_struct_finish_cmd_repname AX_struct_finish_cmd_repname;
#define A_struct_finish_cmd_repname (bufferstack + AX_struct_finish_cmd_repname)
AT_struct_enable_menu_cmd_nm AX_struct_enable_menu_cmd_nm;
#define A_struct_enable_menu_cmd_nm (bufferstack + AX_struct_enable_menu_cmd_nm)
AT_record_variable_user_ptr AX_record_variable_user_ptr;
#define A_record_variable_user_ptr (bufferstack + AX_record_variable_user_ptr)
AT_struct_print_img_cmd_semi AX_struct_print_img_cmd_semi;
#define A_struct_print_img_cmd_semi (bufferstack + AX_struct_print_img_cmd_semi)
AT_pdf_startrep_ascii_height AX_pdf_startrep_ascii_height;
#define A_pdf_startrep_ascii_height (bufferstack + AX_pdf_startrep_ascii_height)
AT_pdf_startrep_fontname AX_pdf_startrep_fontname;
#define A_pdf_startrep_fontname (bufferstack + AX_pdf_startrep_fontname)
AT_globals_definition_nm AX_globals_definition_nm;
#define A_globals_definition_nm (bufferstack + AX_globals_definition_nm)
AT_s_table_nm AX_s_table_nm;
#define A_s_table_nm (bufferstack + AX_s_table_nm)
AT_struct_continue_cmd_sio_id AX_struct_continue_cmd_sio_id;
#define A_struct_continue_cmd_sio_id (bufferstack + AX_struct_continue_cmd_sio_id)
AT_s_select_finish_nolog AX_s_select_finish_nolog;
#define A_s_select_finish_nolog (bufferstack + AX_s_select_finish_nolog)
AT_module_entry_nm AX_module_entry_nm;
#define A_module_entry_nm (bufferstack + AX_module_entry_nm)
AT_on_events_nm AX_on_events_nm;
#define A_on_events_nm (bufferstack + AX_on_events_nm)
AT_struct_insert_cmd_table AX_struct_insert_cmd_table;
#define A_struct_insert_cmd_table (bufferstack + AX_struct_insert_cmd_table)
AT_s_expr_cast_target_dtype AX_s_expr_cast_target_dtype;
#define A_s_expr_cast_target_dtype (bufferstack + AX_s_expr_cast_target_dtype)
AT_s_expr_member_function_call_n_line AX_s_expr_member_function_call_n_line;
#define A_s_expr_member_function_call_n_line (bufferstack + AX_s_expr_member_function_call_n_line)
AT_struct_msg_box_cmd_icon AX_struct_msg_box_cmd_icon;
#define A_struct_msg_box_cmd_icon (bufferstack + AX_struct_msg_box_cmd_icon)
AT_flist_name AX_flist_name;
#define A_flist_name (bufferstack + AX_flist_name)
AT_report_format_section_entry_lineno AX_report_format_section_entry_lineno;
#define A_report_format_section_entry_lineno (bufferstack + AX_report_format_section_entry_lineno)
AT_s_expr_agg_blockid AX_s_expr_agg_blockid;
#define A_s_expr_agg_blockid (bufferstack + AX_s_expr_agg_blockid)
AT_struct_show_menu_cmd_nm AX_struct_show_menu_cmd_nm;
#define A_struct_show_menu_cmd_nm (bufferstack + AX_struct_show_menu_cmd_nm)
AT_s_expr_field_touched_module AX_s_expr_field_touched_module;
#define A_s_expr_field_touched_module (bufferstack + AX_s_expr_field_touched_module)
AT_struct_prompt_cmd_for_char AX_struct_prompt_cmd_for_char;
#define A_struct_prompt_cmd_for_char (bufferstack + AX_struct_prompt_cmd_for_char)
AT_struct_finish_cmd_nm AX_struct_finish_cmd_nm;
#define A_struct_finish_cmd_nm (bufferstack + AX_struct_finish_cmd_nm)
AT_struct_display_array_cmd_slice_end AX_struct_display_array_cmd_slice_end;
#define A_struct_display_array_cmd_slice_end (bufferstack + AX_struct_display_array_cmd_slice_end)
AT_s_exchange_clobber_newval AX_s_exchange_clobber_newval;
#define A_s_exchange_clobber_newval (bufferstack + AX_s_exchange_clobber_newval)
AT_struct_free_rep_cmd_namespace AX_struct_free_rep_cmd_namespace;
#define A_struct_free_rep_cmd_namespace (bufferstack + AX_struct_free_rep_cmd_namespace)
AT_s_expr_datetime_nm AX_s_expr_datetime_nm;
#define A_s_expr_datetime_nm (bufferstack + AX_s_expr_datetime_nm)
AT_struct_resize_arr_cmd_nm AX_struct_resize_arr_cmd_nm;
#define A_struct_resize_arr_cmd_nm (bufferstack + AX_struct_resize_arr_cmd_nm)
AT_rowscols_nm AX_rowscols_nm;
#define A_rowscols_nm (bufferstack + AX_rowscols_nm)
AT_s_expr_current_to AX_s_expr_current_to;
#define A_s_expr_current_to (bufferstack + AX_s_expr_current_to)
AT_s_dependant_tables_nm AX_s_dependant_tables_nm;
#define A_s_dependant_tables_nm (bufferstack + AX_s_dependant_tables_nm)
AT_struct_run_cmd_run_mode AX_struct_run_cmd_run_mode;
#define A_struct_run_cmd_run_mode (bufferstack + AX_struct_run_cmd_run_mode)
AT_pdf_startrep_firstpageheadersize AX_pdf_startrep_firstpageheadersize;
#define A_pdf_startrep_firstpageheadersize (bufferstack + AX_pdf_startrep_firstpageheadersize)
AT_struct_continue_cmd_what AX_struct_continue_cmd_what;
#define A_struct_continue_cmd_what (bufferstack + AX_struct_continue_cmd_what)
AT_flist_nm AX_flist_nm;
#define A_flist_nm (bufferstack + AX_flist_nm)
AT_struct_display_array_cmd_slice AX_struct_display_array_cmd_slice;
#define A_struct_display_array_cmd_slice (bufferstack + AX_struct_display_array_cmd_slice)
AT_struct_set_database_cmd_exclusive_mode AX_struct_set_database_cmd_exclusive_mode;
#define A_struct_set_database_cmd_exclusive_mode (bufferstack + AX_struct_set_database_cmd_exclusive_mode)
AT_s_expr_parameter_isReference AX_s_expr_parameter_isReference;
#define A_s_expr_parameter_isReference (bufferstack + AX_s_expr_parameter_isReference)
AT_struct_next_option_cmd_nm AX_struct_next_option_cmd_nm;
#define A_struct_next_option_cmd_nm (bufferstack + AX_struct_next_option_cmd_nm)
AT_struct_ext_cmd_block_id AX_struct_ext_cmd_block_id;
#define A_struct_ext_cmd_block_id (bufferstack + AX_struct_ext_cmd_block_id)
AT_report_format_section_lines_in_header AX_report_format_section_lines_in_header;
#define A_report_format_section_lines_in_header (bufferstack + AX_report_format_section_lines_in_header)
AT_struct_current_win_cmd_nm AX_struct_current_win_cmd_nm;
#define A_struct_current_win_cmd_nm (bufferstack + AX_struct_current_win_cmd_nm)
AT_s_expr_tag_nm AX_s_expr_tag_nm;
#define A_s_expr_tag_nm (bufferstack + AX_s_expr_tag_nm)
AT_program_definition_nm AX_program_definition_nm;
#define A_program_definition_nm (bufferstack + AX_program_definition_nm)
AT_struct_unload_cmd_nm AX_struct_unload_cmd_nm;
#define A_struct_unload_cmd_nm (bufferstack + AX_struct_unload_cmd_nm)
AT_struct_run_cmd_wait AX_struct_run_cmd_wait;
#define A_struct_run_cmd_wait (bufferstack + AX_struct_run_cmd_wait)
AT_struct_prompt_cmd_nm AX_struct_prompt_cmd_nm;
#define A_struct_prompt_cmd_nm (bufferstack + AX_struct_prompt_cmd_nm)
AT_pdf_startrep_with_page_width AX_pdf_startrep_with_page_width;
#define A_pdf_startrep_with_page_width (bufferstack + AX_pdf_startrep_with_page_width)
AT_s_report_definition_namespace AX_s_report_definition_namespace;
#define A_s_report_definition_namespace (bufferstack + AX_s_report_definition_namespace)
AT_manyoptions_nm AX_manyoptions_nm;
#define A_manyoptions_nm (bufferstack + AX_manyoptions_nm)
AT_startrep_nm AX_startrep_nm;
#define A_startrep_nm (bufferstack + AX_startrep_nm)
AT_s_table_list_element_nm AX_s_table_list_element_nm;
#define A_s_table_list_element_nm (bufferstack + AX_s_table_list_element_nm)
AT_clear_data_e_clear AX_clear_data_e_clear;
#define A_clear_data_e_clear (bufferstack + AX_clear_data_e_clear)
AT_s_expr_agg_in_group AX_s_expr_agg_in_group;
#define A_s_expr_agg_in_group (bufferstack + AX_s_expr_agg_in_group)
AT_s_expr_external_call_namespace AX_s_expr_external_call_namespace;
#define A_s_expr_external_call_namespace (bufferstack + AX_s_expr_external_call_namespace)
AT_struct_message_cmd_wait AX_struct_message_cmd_wait;
#define A_struct_message_cmd_wait (bufferstack + AX_struct_message_cmd_wait)
AT_s_table_alias AX_s_table_alias;
#define A_s_table_alias (bufferstack + AX_s_table_alias)
AT_struct_delete_cmd_nm AX_struct_delete_cmd_nm;
#define A_struct_delete_cmd_nm (bufferstack + AX_struct_delete_cmd_nm)
AT_struct_close_sql_cmd_nm AX_struct_close_sql_cmd_nm;
#define A_struct_close_sql_cmd_nm (bufferstack + AX_struct_close_sql_cmd_nm)
AT_struct_alloc_arr_cmd_nm AX_struct_alloc_arr_cmd_nm;
#define A_struct_alloc_arr_cmd_nm (bufferstack + AX_struct_alloc_arr_cmd_nm)
AT_s_select_list_item_data_expression AX_s_select_list_item_data_expression;
#define A_s_select_list_item_data_expression (bufferstack + AX_s_select_list_item_data_expression)
AT_struct_input_cmd_blockid AX_struct_input_cmd_blockid;
#define A_struct_input_cmd_blockid (bufferstack + AX_struct_input_cmd_blockid)
AT_s_expr_bound_fcall_fname AX_s_expr_bound_fcall_fname;
#define A_s_expr_bound_fcall_fname (bufferstack + AX_s_expr_bound_fcall_fname)
AT_module_entry_module_entry_type AX_module_entry_module_entry_type;
#define A_module_entry_module_entry_type (bufferstack + AX_module_entry_module_entry_type)
AT_variable_usage_datatype AX_variable_usage_datatype;
#define A_variable_usage_datatype (bufferstack + AX_variable_usage_datatype)
AT_struct_print_file_cmd_nm AX_struct_print_file_cmd_nm;
#define A_struct_print_file_cmd_nm (bufferstack + AX_struct_print_file_cmd_nm)
AT_struct_open_form_cmd_nm AX_struct_open_form_cmd_nm;
#define A_struct_open_form_cmd_nm (bufferstack + AX_struct_open_form_cmd_nm)
AT_s_table_tabname AX_s_table_tabname;
#define A_s_table_tabname (bufferstack + AX_s_table_tabname)
AT_struct_select_cmd_nm AX_struct_select_cmd_nm;
#define A_struct_select_cmd_nm (bufferstack + AX_struct_select_cmd_nm)
AT_s_pdf_report_definition_namespace AX_s_pdf_report_definition_namespace;
#define A_s_pdf_report_definition_namespace (bufferstack + AX_s_pdf_report_definition_namespace)
AT_struct_sql_transact_cmd_trans AX_struct_sql_transact_cmd_trans;
#define A_struct_sql_transact_cmd_trans (bufferstack + AX_struct_sql_transact_cmd_trans)
AT_fgl_comment_nm AX_fgl_comment_nm;
#define A_fgl_comment_nm (bufferstack + AX_fgl_comment_nm)
AT_linked_variable_tabname AX_linked_variable_tabname;
#define A_linked_variable_tabname (bufferstack + AX_linked_variable_tabname)
AT_struct_error_cmd_nm AX_struct_error_cmd_nm;
#define A_struct_error_cmd_nm (bufferstack + AX_struct_error_cmd_nm)
AT_struct_load_cmd_nm AX_struct_load_cmd_nm;
#define A_struct_load_cmd_nm (bufferstack + AX_struct_load_cmd_nm)
AT_file_description_nm AX_file_description_nm;
#define A_file_description_nm (bufferstack + AX_file_description_nm)
AT_clear_data_nm AX_clear_data_nm;
#define A_clear_data_nm (bufferstack + AX_clear_data_nm)
AT_s_pdf_report_definition_module AX_s_pdf_report_definition_module;
#define A_s_pdf_report_definition_module (bufferstack + AX_s_pdf_report_definition_module)
AT_menuoption_helpno AX_menuoption_helpno;
#define A_menuoption_helpno (bufferstack + AX_menuoption_helpno)
AT_variable_usage_datatype_length AX_variable_usage_datatype_length;
#define A_variable_usage_datatype_length (bufferstack + AX_variable_usage_datatype_length)
AT_bluebar_r AX_bluebar_r;
#define A_bluebar_r (bufferstack + AX_bluebar_r)
AT_s_expr_interval_nm AX_s_expr_interval_nm;
#define A_s_expr_interval_nm (bufferstack + AX_s_expr_interval_nm)
AT_s_import_legacy_definition_colno AX_s_import_legacy_definition_colno;
#define A_s_import_legacy_definition_colno (bufferstack + AX_s_import_legacy_definition_colno)
AT_s_limit_offset AX_s_limit_offset;
#define A_s_limit_offset (bufferstack + AX_s_limit_offset)
AT_pdf_startrep_with_right_margin AX_pdf_startrep_with_right_margin;
#define A_pdf_startrep_with_right_margin (bufferstack + AX_pdf_startrep_with_right_margin)
AT_dt_display_dt_display_type AX_dt_display_dt_display_type;
#define A_dt_display_dt_display_type (bufferstack + AX_dt_display_dt_display_type)
AT_s_select_extra_statement AX_s_select_extra_statement;
#define A_s_select_extra_statement (bufferstack + AX_s_select_extra_statement)
AT_ilist_i0 AX_ilist_i0;
#define A_ilist_i0 (bufferstack + AX_ilist_i0)
AT_module_definition_mod_dbname AX_module_definition_mod_dbname;
#define A_module_definition_mod_dbname (bufferstack + AX_module_definition_mod_dbname)
AT_struct_ext_cmd_what AX_struct_ext_cmd_what;
#define A_struct_ext_cmd_what (bufferstack + AX_struct_ext_cmd_what)
AT_windowtype_e_wintype AX_windowtype_e_wintype;
#define A_windowtype_e_wintype (bufferstack + AX_windowtype_e_wintype)
AT_str_value AX_str_value;
#define A_str_value (bufferstack + AX_str_value)
AT_attrib_blink AX_attrib_blink;
#define A_attrib_blink (bufferstack + AX_attrib_blink)
AT_struct_error_cmd_wait_for_key AX_struct_error_cmd_wait_for_key;
#define A_struct_error_cmd_wait_for_key (bufferstack + AX_struct_error_cmd_wait_for_key)
AT_startrep_with_top_of_page AX_startrep_with_top_of_page;
#define A_startrep_with_top_of_page (bufferstack + AX_startrep_with_top_of_page)
AT_s_expr_shared_function_call_fname AX_s_expr_shared_function_call_fname;
#define A_s_expr_shared_function_call_fname (bufferstack + AX_s_expr_shared_function_call_fname)
AT_expr_str_list_nm AX_expr_str_list_nm;
#define A_expr_str_list_nm (bufferstack + AX_expr_str_list_nm)
AT_struct_while_cmd_nm AX_struct_while_cmd_nm;
#define A_struct_while_cmd_nm (bufferstack + AX_struct_while_cmd_nm)
AT_str_nm AX_str_nm;
#define A_str_nm (bufferstack + AX_str_nm)
AT_sql_statement_nobind AX_sql_statement_nobind;
#define A_sql_statement_nobind (bufferstack + AX_sql_statement_nobind)
AT_sql_statement_nibind AX_sql_statement_nibind;
#define A_sql_statement_nibind (bufferstack + AX_sql_statement_nibind)
AT_funcname_nm AX_funcname_nm;
#define A_funcname_nm (bufferstack + AX_funcname_nm)
AT_struct_code_cmd_nm AX_struct_code_cmd_nm;
#define A_struct_code_cmd_nm (bufferstack + AX_struct_code_cmd_nm)
AT_pdf_startrep_pagetrailersize AX_pdf_startrep_pagetrailersize;
#define A_pdf_startrep_pagetrailersize (bufferstack + AX_pdf_startrep_pagetrailersize)
AT_s_select_list_item_column_tabname AX_s_select_list_item_column_tabname;
#define A_s_select_list_item_column_tabname (bufferstack + AX_s_select_list_item_column_tabname)
AT_module_definition_full_path_filename AX_module_definition_full_path_filename;
#define A_module_definition_full_path_filename (bufferstack + AX_module_definition_full_path_filename)
AT_command_data_cmd_type AX_command_data_cmd_type;
#define A_command_data_cmd_type (bufferstack + AX_command_data_cmd_type)
AT_struct_construct_cmd_without_defaults AX_struct_construct_cmd_without_defaults;
#define A_struct_construct_cmd_without_defaults (bufferstack + AX_struct_construct_cmd_without_defaults)
AT_ilist_i1 AX_ilist_i1;
#define A_ilist_i1 (bufferstack + AX_ilist_i1)
AT_s_expr_field_touched_sio_id AX_s_expr_field_touched_sio_id;
#define A_s_expr_field_touched_sio_id (bufferstack + AX_s_expr_field_touched_sio_id)
AT_report_format_section_nm AX_report_format_section_nm;
#define A_report_format_section_nm (bufferstack + AX_report_format_section_nm)
AT_expr_str_s AX_expr_str_s;
#define A_expr_str_s (bufferstack + AX_expr_str_s)
AT_struct_case_cmd_nm AX_struct_case_cmd_nm;
#define A_struct_case_cmd_nm (bufferstack + AX_struct_case_cmd_nm)
AT_s_limit_end AX_s_limit_end;
#define A_s_limit_end (bufferstack + AX_s_limit_end)
AT_struct_next_field_cmd_nm AX_struct_next_field_cmd_nm;
#define A_struct_next_field_cmd_nm (bufferstack + AX_struct_next_field_cmd_nm)
AT_ilist_nm AX_ilist_nm;
#define A_ilist_nm (bufferstack + AX_ilist_nm)
AT_struct_cancel_cmd_nm AX_struct_cancel_cmd_nm;
#define A_struct_cancel_cmd_nm (bufferstack + AX_struct_cancel_cmd_nm)
AT_struct_show_menu_cmd_menuhandler AX_struct_show_menu_cmd_menuhandler;
#define A_struct_show_menu_cmd_menuhandler (bufferstack + AX_struct_show_menu_cmd_menuhandler)
AT_struct_convert_cmd_namespace AX_struct_convert_cmd_namespace;
#define A_struct_convert_cmd_namespace (bufferstack + AX_struct_convert_cmd_namespace)
AT_struct_run_waiting_for_cmd_msg_type AX_struct_run_waiting_for_cmd_msg_type;
#define A_struct_run_waiting_for_cmd_msg_type (bufferstack + AX_struct_run_waiting_for_cmd_msg_type)
AT_simple_variable_dimensions_0 AX_simple_variable_dimensions_0;
#define A_simple_variable_dimensions_0 (bufferstack + AX_simple_variable_dimensions_0)
AT_struct_next_form_cmd_form AX_struct_next_form_cmd_form;
#define A_struct_next_form_cmd_form (bufferstack + AX_struct_next_form_cmd_form)
AT_struct_exit_prog_cmd_nm AX_struct_exit_prog_cmd_nm;
#define A_struct_exit_prog_cmd_nm (bufferstack + AX_struct_exit_prog_cmd_nm)
AT_struct_if_cmd_else_lineno AX_struct_if_cmd_else_lineno;
#define A_struct_if_cmd_else_lineno (bufferstack + AX_struct_if_cmd_else_lineno)
AT_s_func_namespace AX_s_func_namespace;
#define A_s_func_namespace (bufferstack + AX_s_func_namespace)
AT_struct_hide_option_cmd_nm AX_struct_hide_option_cmd_nm;
#define A_struct_hide_option_cmd_nm (bufferstack + AX_struct_hide_option_cmd_nm)
AT_variable_src_module AX_variable_src_module;
#define A_variable_src_module (bufferstack + AX_variable_src_module)
AT_struct_input_array_cmd_without_defaults AX_struct_input_array_cmd_without_defaults;
#define A_struct_input_array_cmd_without_defaults (bufferstack + AX_struct_input_array_cmd_without_defaults)
AT_s_expr_shared_function_call_line AX_s_expr_shared_function_call_line;
#define A_s_expr_shared_function_call_line (bufferstack + AX_s_expr_shared_function_call_line)
AT_struct_sql_block_cmd_nm AX_struct_sql_block_cmd_nm;
#define A_struct_sql_block_cmd_nm (bufferstack + AX_struct_sql_block_cmd_nm)
AT_s_expr_aligned_nm AX_s_expr_aligned_nm;
#define A_s_expr_aligned_nm (bufferstack + AX_s_expr_aligned_nm)
AT_struct_display_array_cmd_sio AX_struct_display_array_cmd_sio;
#define A_struct_display_array_cmd_sio (bufferstack + AX_struct_display_array_cmd_sio)
AT_struct_next_form_cmd_field AX_struct_next_form_cmd_field;
#define A_struct_next_form_cmd_field (bufferstack + AX_struct_next_form_cmd_field)
AT_struct_construct_cmd_nm AX_struct_construct_cmd_nm;
#define A_struct_construct_cmd_nm (bufferstack + AX_struct_construct_cmd_nm)
AT_bluebar_nm AX_bluebar_nm;
#define A_bluebar_nm (bufferstack + AX_bluebar_nm)
AT_struct_free_rep_cmd_nm AX_struct_free_rep_cmd_nm;
#define A_struct_free_rep_cmd_nm (bufferstack + AX_struct_free_rep_cmd_nm)
AT_s_import_package_module AX_s_import_package_module;
#define A_s_import_package_module (bufferstack + AX_s_import_package_module)
AT_struct_declare_cmd_nm AX_struct_declare_cmd_nm;
#define A_struct_declare_cmd_nm (bufferstack + AX_struct_declare_cmd_nm)
AT_object_variable_class_name AX_object_variable_class_name;
#define A_object_variable_class_name (bufferstack + AX_object_variable_class_name)
AT_startrep_with_page_length AX_startrep_with_page_length;
#define A_startrep_with_page_length (bufferstack + AX_startrep_with_page_length)
AT_struct_start_cmd_nm AX_struct_start_cmd_nm;
#define A_struct_start_cmd_nm (bufferstack + AX_struct_start_cmd_nm)
AT_s_sli_case_element_nm AX_s_sli_case_element_nm;
#define A_s_sli_case_element_nm (bufferstack + AX_s_sli_case_element_nm)
AT_struct_input_array_cmd_nm AX_struct_input_array_cmd_nm;
#define A_struct_input_array_cmd_nm (bufferstack + AX_struct_input_array_cmd_nm)
AT_module_definition_schema_only AX_module_definition_schema_only;
#define A_module_definition_schema_only (bufferstack + AX_module_definition_schema_only)
AT_struct_start_rpc_cmd_nm AX_struct_start_rpc_cmd_nm;
#define A_struct_start_rpc_cmd_nm (bufferstack + AX_struct_start_rpc_cmd_nm)
AT_vname_alias AX_vname_alias;
#define A_vname_alias (bufferstack + AX_vname_alias)
AT_struct_input_cmd_helpno AX_struct_input_cmd_helpno;
#define A_struct_input_cmd_helpno (bufferstack + AX_struct_input_cmd_helpno)
AT_expr_str_i AX_expr_str_i;
#define A_expr_str_i (bufferstack + AX_expr_str_i)
AT_s_expr_member_function_call_n_funcName AX_s_expr_member_function_call_n_funcName;
#define A_s_expr_member_function_call_n_funcName (bufferstack + AX_s_expr_member_function_call_n_funcName)
AT_bluebar_g AX_bluebar_g;
#define A_bluebar_g (bufferstack + AX_bluebar_g)
AT_struct_output_cmd_repname AX_struct_output_cmd_repname;
#define A_struct_output_cmd_repname (bufferstack + AX_struct_output_cmd_repname)
AT_fh_field_list_nm AX_fh_field_list_nm;
#define A_fh_field_list_nm (bufferstack + AX_fh_field_list_nm)
AT_module_definition_module_name AX_module_definition_module_name;
#define A_module_definition_module_name (bufferstack + AX_module_definition_module_name)
AT_s_expr_in_nm AX_s_expr_in_nm;
#define A_s_expr_in_nm (bufferstack + AX_s_expr_in_nm)
AT_struct_sql_cmd_nm AX_struct_sql_cmd_nm;
#define A_struct_sql_cmd_nm (bufferstack + AX_struct_sql_cmd_nm)
AT_struct_print_img_cmd_nm AX_struct_print_img_cmd_nm;
#define A_struct_print_img_cmd_nm (bufferstack + AX_struct_print_img_cmd_nm)
AT_s_expr_op_nm AX_s_expr_op_nm;
#define A_s_expr_op_nm (bufferstack + AX_s_expr_op_nm)
AT_cmd_int_list_nm AX_cmd_int_list_nm;
#define A_cmd_int_list_nm (bufferstack + AX_cmd_int_list_nm)
AT_struct_construct_cmd_helpno AX_struct_construct_cmd_helpno;
#define A_struct_construct_cmd_helpno (bufferstack + AX_struct_construct_cmd_helpno)
AT_struct_term_rep_cmd_repname AX_struct_term_rep_cmd_repname;
#define A_struct_term_rep_cmd_repname (bufferstack + AX_struct_term_rep_cmd_repname)
AT_struct_input_array_cmd_slice_end AX_struct_input_array_cmd_slice_end;
#define A_struct_input_array_cmd_slice_end (bufferstack + AX_struct_input_array_cmd_slice_end)
AT_s_expr_in_sq_nm AX_s_expr_in_sq_nm;
#define A_s_expr_in_sq_nm (bufferstack + AX_s_expr_in_sq_nm)
AT_attrib_nm AX_attrib_nm;
#define A_attrib_nm (bufferstack + AX_attrib_nm)
AT_report_orderby_section_rord_type AX_report_orderby_section_rord_type;
#define A_report_orderby_section_rord_type (bufferstack + AX_report_orderby_section_rord_type)
AT_x_y_nm AX_x_y_nm;
#define A_x_y_nm (bufferstack + AX_x_y_nm)
AT_s_expr_tmp_nm AX_s_expr_tmp_nm;
#define A_s_expr_tmp_nm (bufferstack + AX_s_expr_tmp_nm)
AT_struct_select_cmd_forupdate AX_struct_select_cmd_forupdate;
#define A_struct_select_cmd_forupdate (bufferstack + AX_struct_select_cmd_forupdate)
AT_event_data_idle_n AX_event_data_idle_n;
#define A_event_data_idle_n (bufferstack + AX_event_data_idle_n)
AT_s_expr_function_call_module AX_s_expr_function_call_module;
#define A_s_expr_function_call_module (bufferstack + AX_s_expr_function_call_module)
AT_ilist_i3 AX_ilist_i3;
#define A_ilist_i3 (bufferstack + AX_ilist_i3)
AT_struct_display_array_cmd_helpno AX_struct_display_array_cmd_helpno;
#define A_struct_display_array_cmd_helpno (bufferstack + AX_struct_display_array_cmd_helpno)
AT_pdf_startrep_nm AX_pdf_startrep_nm;
#define A_pdf_startrep_nm (bufferstack + AX_pdf_startrep_nm)
AT_s_select_list_item_fcall_fname AX_s_select_list_item_fcall_fname;
#define A_s_select_list_item_fcall_fname (bufferstack + AX_s_select_list_item_fcall_fname)
AT_report_block_data_nm AX_report_block_data_nm;
#define A_report_block_data_nm (bufferstack + AX_report_block_data_nm)
AT_s_pdf_report_definition_colno AX_s_pdf_report_definition_colno;
#define A_s_pdf_report_definition_colno (bufferstack + AX_s_pdf_report_definition_colno)
AT_attrib_color AX_attrib_color;
#define A_attrib_color (bufferstack + AX_attrib_color)
AT_s_select_finish_insert_into AX_s_select_finish_insert_into;
#define A_s_select_finish_insert_into (bufferstack + AX_s_select_finish_insert_into)
AT_variable_usage_with_asc_desc_asc_desc AX_variable_usage_with_asc_desc_asc_desc;
#define A_variable_usage_with_asc_desc_asc_desc (bufferstack + AX_variable_usage_with_asc_desc_asc_desc)
AT_linked_variable_nm AX_linked_variable_nm;
#define A_linked_variable_nm (bufferstack + AX_linked_variable_nm)
AT_s_select_list_item_column_colname AX_s_select_list_item_column_colname;
#define A_s_select_list_item_column_colname (bufferstack + AX_s_select_list_item_column_colname)
AT_variable_data_nm AX_variable_data_nm;
#define A_variable_data_nm (bufferstack + AX_variable_data_nm)
AT_constant_data_data_c AX_constant_data_data_c;
#define A_constant_data_data_c (bufferstack + AX_constant_data_data_c)
AT_record_variable_record_alloc AX_record_variable_record_alloc;
#define A_record_variable_record_alloc (bufferstack + AX_record_variable_record_alloc)
AT_struct_input_cmd_by_name AX_struct_input_cmd_by_name;
#define A_struct_input_cmd_by_name (bufferstack + AX_struct_input_cmd_by_name)
AT_event_data_nm AX_event_data_nm;
#define A_event_data_nm (bufferstack + AX_event_data_nm)
AT_command_lineno AX_command_lineno;
#define A_command_lineno (bufferstack + AX_command_lineno)
AT_struct_construct_cmd_by_name AX_struct_construct_cmd_by_name;
#define A_struct_construct_cmd_by_name (bufferstack + AX_struct_construct_cmd_by_name)
AT_attrib_allow_delete AX_attrib_allow_delete;
#define A_attrib_allow_delete (bufferstack + AX_attrib_allow_delete)
AT_s_expr_member_function_call_n_datatype AX_s_expr_member_function_call_n_datatype;
#define A_s_expr_member_function_call_n_datatype (bufferstack + AX_s_expr_member_function_call_n_datatype)
AT_if_cond_nm AX_if_cond_nm;
#define A_if_cond_nm (bufferstack + AX_if_cond_nm)
AT_s_expr_datetime_extend AX_s_expr_datetime_extend;
#define A_s_expr_datetime_extend (bufferstack + AX_s_expr_datetime_extend)
AT_s_expr_external_call_line AX_s_expr_external_call_line;
#define A_s_expr_external_call_line (bufferstack + AX_s_expr_external_call_line)
AT_single_option_option AX_single_option_option;
#define A_single_option_option (bufferstack + AX_single_option_option)
AT_struct_open_statusbox_cmd_name AX_struct_open_statusbox_cmd_name;
#define A_struct_open_statusbox_cmd_name (bufferstack + AX_struct_open_statusbox_cmd_name)
AT_attrib_allow_insert AX_attrib_allow_insert;
#define A_attrib_allow_insert (bufferstack + AX_attrib_allow_insert)
AT_struct_declare_cmd_cursor_type AX_struct_declare_cmd_cursor_type;
#define A_struct_declare_cmd_cursor_type (bufferstack + AX_struct_declare_cmd_cursor_type)
AT_struct_label_cmd_label AX_struct_label_cmd_label;
#define A_struct_label_cmd_label (bufferstack + AX_struct_label_cmd_label)
AT_s_expr_form_is_compiled_line AX_s_expr_form_is_compiled_line;
#define A_s_expr_form_is_compiled_line (bufferstack + AX_s_expr_form_is_compiled_line)
AT_struct_whenever_cmd_nm AX_struct_whenever_cmd_nm;
#define A_struct_whenever_cmd_nm (bufferstack + AX_struct_whenever_cmd_nm)
AT_short_nm AX_short_nm;
#define A_short_nm (bufferstack + AX_short_nm)
AT_s_select_list_item_complex_expr_nm AX_s_select_list_item_complex_expr_nm;
#define A_s_select_list_item_complex_expr_nm (bufferstack + AX_s_select_list_item_complex_expr_nm)
AT_flist_type AX_flist_type;
#define A_flist_type (bufferstack + AX_flist_type)
AT_sq_subquery_aud AX_sq_subquery_aud;
#define A_sq_subquery_aud (bufferstack + AX_sq_subquery_aud)
AT_s_expr_member_function_call_n_module AX_s_expr_member_function_call_n_module;
#define A_s_expr_member_function_call_n_module (bufferstack + AX_s_expr_member_function_call_n_module)
AT_s_report_definition_lineno AX_s_report_definition_lineno;
#define A_s_report_definition_lineno (bufferstack + AX_s_report_definition_lineno)
AT_s_expr_current_nm AX_s_expr_current_nm;
#define A_s_expr_current_nm (bufferstack + AX_s_expr_current_nm)
AT_struct_delete_cmd_table AX_struct_delete_cmd_table;
#define A_struct_delete_cmd_table (bufferstack + AX_struct_delete_cmd_table)
AT_single_option_isKey AX_single_option_isKey;
#define A_single_option_isKey (bufferstack + AX_single_option_isKey)
AT_struct_set_database_cmd_nm AX_struct_set_database_cmd_nm;
#define A_struct_set_database_cmd_nm (bufferstack + AX_struct_set_database_cmd_nm)
AT_attrib_nonewlines AX_attrib_nonewlines;
#define A_attrib_nonewlines (bufferstack + AX_attrib_nonewlines)
AT_single_option_value AX_single_option_value;
#define A_single_option_value (bufferstack + AX_single_option_value)
AT_s_class_definition_classname AX_s_class_definition_classname;
#define A_s_class_definition_classname (bufferstack + AX_s_class_definition_classname)
AT_struct_move_cmd_relative AX_struct_move_cmd_relative;
#define A_struct_move_cmd_relative (bufferstack + AX_struct_move_cmd_relative)
AT_s_fetch_place_nm AX_s_fetch_place_nm;
#define A_s_fetch_place_nm (bufferstack + AX_s_fetch_place_nm)
AT_struct_menu_cmd_blockid AX_struct_menu_cmd_blockid;
#define A_struct_menu_cmd_blockid (bufferstack + AX_struct_menu_cmd_blockid)
AT_attrib_text AX_attrib_text;
#define A_attrib_text (bufferstack + AX_attrib_text)
AT_struct_display_array_cmd_nm AX_struct_display_array_cmd_nm;
#define A_struct_display_array_cmd_nm (bufferstack + AX_struct_display_array_cmd_nm)
AT_report_format_section_lines_in_trailer AX_report_format_section_lines_in_trailer;
#define A_report_format_section_lines_in_trailer (bufferstack + AX_report_format_section_lines_in_trailer)
AT_s_function_definition_isstatic AX_s_function_definition_isstatic;
#define A_s_function_definition_isstatic (bufferstack + AX_s_function_definition_isstatic)
AT_s_limit_start AX_s_limit_start;
#define A_s_limit_start (bufferstack + AX_s_limit_start)
AT_s_expr_external_call_nm AX_s_expr_external_call_nm;
#define A_s_expr_external_call_nm (bufferstack + AX_s_expr_external_call_nm)
AT_cons_list_entry_nm AX_cons_list_entry_nm;
#define A_cons_list_entry_nm (bufferstack + AX_cons_list_entry_nm)
AT_struct_display_array_cmd_blockid AX_struct_display_array_cmd_blockid;
#define A_struct_display_array_cmd_blockid (bufferstack + AX_struct_display_array_cmd_blockid)
AT_module_definition_compile_time_sqltype AX_module_definition_compile_time_sqltype;
#define A_module_definition_compile_time_sqltype (bufferstack + AX_module_definition_compile_time_sqltype)
AT_struct_enable_form_cmd_nm AX_struct_enable_form_cmd_nm;
#define A_struct_enable_form_cmd_nm (bufferstack + AX_struct_enable_form_cmd_nm)
AT_pdf_startrep_with_page_length AX_pdf_startrep_with_page_length;
#define A_pdf_startrep_with_page_length (bufferstack + AX_pdf_startrep_with_page_length)
AT_s_expr_dynarr_extent_nm AX_s_expr_dynarr_extent_nm;
#define A_s_expr_dynarr_extent_nm (bufferstack + AX_s_expr_dynarr_extent_nm)
AT_s_expr_function_call_nm AX_s_expr_function_call_nm;
#define A_s_expr_function_call_nm (bufferstack + AX_s_expr_function_call_nm)
AT_s_expr_tmp_dtype AX_s_expr_tmp_dtype;
#define A_s_expr_tmp_dtype (bufferstack + AX_s_expr_tmp_dtype)
AT_s_formhandler_definition_nm AX_s_formhandler_definition_nm;
#define A_s_formhandler_definition_nm (bufferstack + AX_s_formhandler_definition_nm)
AT_s_import_function_definition_funcname AX_s_import_function_definition_funcname;
#define A_s_import_function_definition_funcname (bufferstack + AX_s_import_function_definition_funcname)
AT_struct_load_cmd_tabname AX_struct_load_cmd_tabname;
#define A_struct_load_cmd_tabname (bufferstack + AX_struct_load_cmd_tabname)
AT_s_limit_nm AX_s_limit_nm;
#define A_s_limit_nm (bufferstack + AX_s_limit_nm)
AT_s_select_list_item_data_nm AX_s_select_list_item_data_nm;
#define A_s_select_list_item_data_nm (bufferstack + AX_s_select_list_item_data_nm)
AT_s_select_union_op AX_s_select_union_op;
#define A_s_select_union_op (bufferstack + AX_s_select_union_op)
AT_fgl_comment_printed AX_fgl_comment_printed;
#define A_fgl_comment_printed (bufferstack + AX_fgl_comment_printed)
AT_struct_input_array_cmd_blockid AX_struct_input_array_cmd_blockid;
#define A_struct_input_array_cmd_blockid (bufferstack + AX_struct_input_array_cmd_blockid)
AT_str_list_nm AX_str_list_nm;
#define A_str_list_nm (bufferstack + AX_str_list_nm)
AT_s_import_function_definition_colno AX_s_import_function_definition_colno;
#define A_s_import_function_definition_colno (bufferstack + AX_s_import_function_definition_colno)
AT_s_exchange_clobber_important AX_s_exchange_clobber_important;
#define A_s_exchange_clobber_important (bufferstack + AX_s_exchange_clobber_important)
AT_struct_convert_cmd_nm AX_struct_convert_cmd_nm;
#define A_struct_convert_cmd_nm (bufferstack + AX_struct_convert_cmd_nm)
AT_s_select_list_item_agg_expr_aud AX_s_select_list_item_agg_expr_aud;
#define A_s_select_list_item_agg_expr_aud (bufferstack + AX_s_select_list_item_agg_expr_aud)
AT_s_select_list_item_slil_expr_nm AX_s_select_list_item_slil_expr_nm;
#define A_s_select_list_item_slil_expr_nm (bufferstack + AX_s_select_list_item_slil_expr_nm)
AT_module_definition_genStackInfo AX_module_definition_genStackInfo;
#define A_module_definition_genStackInfo (bufferstack + AX_module_definition_genStackInfo)
AT_pdf_startrep_papersize AX_pdf_startrep_papersize;
#define A_pdf_startrep_papersize (bufferstack + AX_pdf_startrep_papersize)
AT_struct_sql_transact_cmd_nm AX_struct_sql_transact_cmd_nm;
#define A_struct_sql_transact_cmd_nm (bufferstack + AX_struct_sql_transact_cmd_nm)
AT_struct_free_cmd_nm AX_struct_free_cmd_nm;
#define A_struct_free_cmd_nm (bufferstack + AX_struct_free_cmd_nm)
AT_locate_pos_nm AX_locate_pos_nm;
#define A_locate_pos_nm (bufferstack + AX_locate_pos_nm)
AT_struct_code_cmd_contents AX_struct_code_cmd_contents;
#define A_struct_code_cmd_contents (bufferstack + AX_struct_code_cmd_contents)
AT_event_data_e_event AX_event_data_e_event;
#define A_event_data_e_event (bufferstack + AX_event_data_e_event)
AT_s_function_definition_lastlineno AX_s_function_definition_lastlineno;
#define A_s_function_definition_lastlineno (bufferstack + AX_s_function_definition_lastlineno)
AT_struct_execute_immediate_cmd_nm AX_struct_execute_immediate_cmd_nm;
#define A_struct_execute_immediate_cmd_nm (bufferstack + AX_struct_execute_immediate_cmd_nm)
AT_module_definition_force_ui AX_module_definition_force_ui;
#define A_module_definition_force_ui (bufferstack + AX_module_definition_force_ui)
AT_struct_return_cmd_nm AX_struct_return_cmd_nm;
#define A_struct_return_cmd_nm (bufferstack + AX_struct_return_cmd_nm)
AT_globals_definition_mod_dbname AX_globals_definition_mod_dbname;
#define A_globals_definition_mod_dbname (bufferstack + AX_globals_definition_mod_dbname)
AT_call_list_nm AX_call_list_nm;
#define A_call_list_nm (bufferstack + AX_call_list_nm)
AT_s_full_col_col AX_s_full_col_col;
#define A_s_full_col_col (bufferstack + AX_s_full_col_col)
AT_s_pdf_report_definition_lastlineno AX_s_pdf_report_definition_lastlineno;
#define A_s_pdf_report_definition_lastlineno (bufferstack + AX_s_pdf_report_definition_lastlineno)
AT_constant_data_data_ident AX_constant_data_data_ident;
#define A_constant_data_data_ident (bufferstack + AX_constant_data_data_ident)
AT_variable_lineno AX_variable_lineno;
#define A_variable_lineno (bufferstack + AX_variable_lineno)
AT_s_expr_exists_sq_nm AX_s_expr_exists_sq_nm;
#define A_s_expr_exists_sq_nm (bufferstack + AX_s_expr_exists_sq_nm)
AT_struct_prompt_cmd_sio AX_struct_prompt_cmd_sio;
#define A_struct_prompt_cmd_sio (bufferstack + AX_struct_prompt_cmd_sio)
AT_struct_open_form_gui_cmd_nm AX_struct_open_form_gui_cmd_nm;
#define A_struct_open_form_gui_cmd_nm (bufferstack + AX_struct_open_form_gui_cmd_nm)
AT_s_expr_wordwrap_nm AX_s_expr_wordwrap_nm;
#define A_s_expr_wordwrap_nm (bufferstack + AX_s_expr_wordwrap_nm)
AT_when_colno AX_when_colno;
#define A_when_colno (bufferstack + AX_when_colno)
AT_fgl_comment_type AX_fgl_comment_type;
#define A_fgl_comment_type (bufferstack + AX_fgl_comment_type)
AT_struct_menu_cmd_nm AX_struct_menu_cmd_nm;
#define A_struct_menu_cmd_nm (bufferstack + AX_struct_menu_cmd_nm)
AT_struct_input_array_cmd_sio AX_struct_input_array_cmd_sio;
#define A_struct_input_array_cmd_sio (bufferstack + AX_struct_input_array_cmd_sio)
AT_startrep_with_left_margin AX_startrep_with_left_margin;
#define A_startrep_with_left_margin (bufferstack + AX_startrep_with_left_margin)
AT_s_select_list_item_extend_to AX_s_select_list_item_extend_to;
#define A_s_select_list_item_extend_to (bufferstack + AX_s_select_list_item_extend_to)
AT_struct_for_cmd_block_id AX_struct_for_cmd_block_id;
#define A_struct_for_cmd_block_id (bufferstack + AX_struct_for_cmd_block_id)
AT_module_definition_nm AX_module_definition_nm;
#define A_module_definition_nm (bufferstack + AX_module_definition_nm)
AT_struct_open_window_cmd_nm AX_struct_open_window_cmd_nm;
#define A_struct_open_window_cmd_nm (bufferstack + AX_struct_open_window_cmd_nm)
AT_s_select_list_item_nm AX_s_select_list_item_nm;
#define A_s_select_list_item_nm (bufferstack + AX_s_select_list_item_nm)
AT_pdf_startrep_with_top_margin AX_pdf_startrep_with_top_margin;
#define A_pdf_startrep_with_top_margin (bufferstack + AX_pdf_startrep_with_top_margin)
AT_struct_free_rep_cmd_repname AX_struct_free_rep_cmd_repname;
#define A_struct_free_rep_cmd_repname (bufferstack + AX_struct_free_rep_cmd_repname)
AT_s_dependant_tables_tabname AX_s_dependant_tables_tabname;
#define A_s_dependant_tables_tabname (bufferstack + AX_s_dependant_tables_tabname)
AT_s_report_definition_funcname AX_s_report_definition_funcname;
#define A_s_report_definition_funcname (bufferstack + AX_s_report_definition_funcname)
AT_s_cur_def_forUpdate AX_s_cur_def_forUpdate;
#define A_s_cur_def_forUpdate (bufferstack + AX_s_cur_def_forUpdate)
AT_s_expr_datetime_dtval AX_s_expr_datetime_dtval;
#define A_s_expr_datetime_dtval (bufferstack + AX_s_expr_datetime_dtval)
AT_s_expr_interval_extend AX_s_expr_interval_extend;
#define A_s_expr_interval_extend (bufferstack + AX_s_expr_interval_extend)
AT_assoc_subscript_nm AX_assoc_subscript_nm;
#define A_assoc_subscript_nm (bufferstack + AX_assoc_subscript_nm)
AT_variable_usage_nm AX_variable_usage_nm;
#define A_variable_usage_nm (bufferstack + AX_variable_usage_nm)
AT_struct_label_cmd_nm AX_struct_label_cmd_nm;
#define A_struct_label_cmd_nm (bufferstack + AX_struct_label_cmd_nm)
AT_s_expr_member_function_call_n_namespace AX_s_expr_member_function_call_n_namespace;
#define A_s_expr_member_function_call_n_namespace (bufferstack + AX_s_expr_member_function_call_n_namespace)
AT_struct_cancel_cmd_c AX_struct_cancel_cmd_c;
#define A_struct_cancel_cmd_c (bufferstack + AX_struct_cancel_cmd_c)
AT_struct_print_cmd_semi AX_struct_print_cmd_semi;
#define A_struct_print_cmd_semi (bufferstack + AX_struct_print_cmd_semi)
AT_record_variable_nm AX_record_variable_nm;
#define A_record_variable_nm (bufferstack + AX_record_variable_nm)
AT_struct_disable_menu_cmd_nm AX_struct_disable_menu_cmd_nm;
#define A_struct_disable_menu_cmd_nm (bufferstack + AX_struct_disable_menu_cmd_nm)
AT_expr_str_expr_long AX_expr_str_expr_long;
#define A_expr_str_expr_long (bufferstack + AX_expr_str_expr_long)
AT_struct_show_cmd_nm AX_struct_show_cmd_nm;
#define A_struct_show_cmd_nm (bufferstack + AX_struct_show_cmd_nm)
AT_report_format_section_lines_in_first_header AX_report_format_section_lines_in_first_header;
#define A_report_format_section_lines_in_first_header (bufferstack + AX_report_format_section_lines_in_first_header)
AT_s_table_list_element_tabname AX_s_table_list_element_tabname;
#define A_s_table_list_element_tabname (bufferstack + AX_s_table_list_element_tabname)
AT_attrib_reverse AX_attrib_reverse;
#define A_attrib_reverse (bufferstack + AX_attrib_reverse)
AT_s_select_list_item_builtin_fcall_fname AX_s_select_list_item_builtin_fcall_fname;
#define A_s_select_list_item_builtin_fcall_fname (bufferstack + AX_s_select_list_item_builtin_fcall_fname)
AT_struct_set_session_cmd_nm AX_struct_set_session_cmd_nm;
#define A_struct_set_session_cmd_nm (bufferstack + AX_struct_set_session_cmd_nm)
AT_struct_open_cursor_cmd_nm AX_struct_open_cursor_cmd_nm;
#define A_struct_open_cursor_cmd_nm (bufferstack + AX_struct_open_cursor_cmd_nm)
AT_pdf_startrep_fontsize AX_pdf_startrep_fontsize;
#define A_pdf_startrep_fontsize (bufferstack + AX_pdf_startrep_fontsize)
AT_struct_call_shared_cmd_nm AX_struct_call_shared_cmd_nm;
#define A_struct_call_shared_cmd_nm (bufferstack + AX_struct_call_shared_cmd_nm)
AT_struct_input_cmd_without_defaults AX_struct_input_cmd_without_defaults;
#define A_struct_input_cmd_without_defaults (bufferstack + AX_struct_input_cmd_without_defaults)
AT_struct_for_cmd_nm AX_struct_for_cmd_nm;
#define A_struct_for_cmd_nm (bufferstack + AX_struct_for_cmd_nm)
AT_dt_display_nm AX_dt_display_nm;
#define A_dt_display_nm (bufferstack + AX_dt_display_nm)
AT_struct_validate_cmd_nm AX_struct_validate_cmd_nm;
#define A_struct_validate_cmd_nm (bufferstack + AX_struct_validate_cmd_nm)
AT_struct_declare_cmd_isstmt AX_struct_declare_cmd_isstmt;
#define A_struct_declare_cmd_isstmt (bufferstack + AX_struct_declare_cmd_isstmt)
AT_s_expr_pdf_function_call_namespace AX_s_expr_pdf_function_call_namespace;
#define A_s_expr_pdf_function_call_namespace (bufferstack + AX_s_expr_pdf_function_call_namespace)
AT_s_function_definition_lineno AX_s_function_definition_lineno;
#define A_s_function_definition_lineno (bufferstack + AX_s_function_definition_lineno)
AT_struct_construct_cmd_sio AX_struct_construct_cmd_sio;
#define A_struct_construct_cmd_sio (bufferstack + AX_struct_construct_cmd_sio)
AT_struct_ext_cmd_nm AX_struct_ext_cmd_nm;
#define A_struct_ext_cmd_nm (bufferstack + AX_struct_ext_cmd_nm)
AT_struct_hide_cmd_nm AX_struct_hide_cmd_nm;
#define A_struct_hide_cmd_nm (bufferstack + AX_struct_hide_cmd_nm)
AT_s_expr_interval_intval AX_s_expr_interval_intval;
#define A_s_expr_interval_intval (bufferstack + AX_s_expr_interval_intval)
AT_s_pdf_report_definition_comment AX_s_pdf_report_definition_comment;
#define A_s_pdf_report_definition_comment (bufferstack + AX_s_pdf_report_definition_comment)
AT_s_expr_dynarr_extent_n AX_s_expr_dynarr_extent_n;
#define A_s_expr_dynarr_extent_n (bufferstack + AX_s_expr_dynarr_extent_n)
AT_s_import_package_lineno AX_s_import_package_lineno;
#define A_s_import_package_lineno (bufferstack + AX_s_import_package_lineno)
AT_struct_clear_cmd_todefaults AX_struct_clear_cmd_todefaults;
#define A_struct_clear_cmd_todefaults (bufferstack + AX_struct_clear_cmd_todefaults)
AT_s_function_definition_module AX_s_function_definition_module;
#define A_s_function_definition_module (bufferstack + AX_s_function_definition_module)
AT_s_import_function_definition_lineno AX_s_import_function_definition_lineno;
#define A_s_import_function_definition_lineno (bufferstack + AX_s_import_function_definition_lineno)
AT_assoc_array_variable_size AX_assoc_array_variable_size;
#define A_assoc_array_variable_size (bufferstack + AX_assoc_array_variable_size)
AT_sql_statement_stmt_type AX_sql_statement_stmt_type;
#define A_sql_statement_stmt_type (bufferstack + AX_sql_statement_stmt_type)
AT_s_select_list_item_alias AX_s_select_list_item_alias;
#define A_s_select_list_item_alias (bufferstack + AX_s_select_list_item_alias)
AT_s_report_definition_lastlineno AX_s_report_definition_lastlineno;
#define A_s_report_definition_lastlineno (bufferstack + AX_s_report_definition_lastlineno)
AT_s_select_list_item_between_expr_nm AX_s_select_list_item_between_expr_nm;
#define A_s_select_list_item_between_expr_nm (bufferstack + AX_s_select_list_item_between_expr_nm)
AT_struct_execute_cmd_nm AX_struct_execute_cmd_nm;
#define A_struct_execute_cmd_nm (bufferstack + AX_struct_execute_cmd_nm)
AT_pdf_startrep_isdefault AX_pdf_startrep_isdefault;
#define A_pdf_startrep_isdefault (bufferstack + AX_pdf_startrep_isdefault)
AT_s_expr_dynarr_function_call_n_module AX_s_expr_dynarr_function_call_n_module;
#define A_s_expr_dynarr_function_call_n_module (bufferstack + AX_s_expr_dynarr_function_call_n_module)
AT_long_nm AX_long_nm;
#define A_long_nm (bufferstack + AX_long_nm)
AT_attrib_normal AX_attrib_normal;
#define A_attrib_normal (bufferstack + AX_attrib_normal)
AT_struct_insert_cmd_nm AX_struct_insert_cmd_nm;
#define A_struct_insert_cmd_nm (bufferstack + AX_struct_insert_cmd_nm)
AT_commands_nm AX_commands_nm;
#define A_commands_nm (bufferstack + AX_commands_nm)
AT_struct_defer_cmd_what AX_struct_defer_cmd_what;
#define A_struct_defer_cmd_what (bufferstack + AX_struct_defer_cmd_what)
AT_struct_close_cmd_cl_type AX_struct_close_cmd_cl_type;
#define A_struct_close_cmd_cl_type (bufferstack + AX_struct_close_cmd_cl_type)
AT_s_expr_function_call_line AX_s_expr_function_call_line;
#define A_s_expr_function_call_line (bufferstack + AX_s_expr_function_call_line)
AT_struct_lint_ignore_cmd_nm AX_struct_lint_ignore_cmd_nm;
#define A_struct_lint_ignore_cmd_nm (bufferstack + AX_struct_lint_ignore_cmd_nm)
AT_s_expr_shared_function_call_module AX_s_expr_shared_function_call_module;
#define A_s_expr_shared_function_call_module (bufferstack + AX_s_expr_shared_function_call_module)
AT_struct_flush_cmd_nm AX_struct_flush_cmd_nm;
#define A_struct_flush_cmd_nm (bufferstack + AX_struct_flush_cmd_nm)
AT_attrib_no_new_lines AX_attrib_no_new_lines;
#define A_attrib_no_new_lines (bufferstack + AX_attrib_no_new_lines)
AT_s_function_definition_namespace AX_s_function_definition_namespace;
#define A_s_function_definition_namespace (bufferstack + AX_s_function_definition_namespace)
AT_struct_check_menu_cmd_nm AX_struct_check_menu_cmd_nm;
#define A_struct_check_menu_cmd_nm (bufferstack + AX_struct_check_menu_cmd_nm)
AT_s_func_funcname AX_s_func_funcname;
#define A_s_func_funcname (bufferstack + AX_s_func_funcname)
AT_report_block_data_report_blocks AX_report_block_data_report_blocks;
#define A_report_block_data_report_blocks (bufferstack + AX_report_block_data_report_blocks)
AT_s_import_legacy_definition_nm AX_s_import_legacy_definition_nm;
#define A_s_import_legacy_definition_nm (bufferstack + AX_s_import_legacy_definition_nm)
AT_s_select_list_item_list_nm AX_s_select_list_item_list_nm;
#define A_s_select_list_item_list_nm (bufferstack + AX_s_select_list_item_list_nm)
AT_struct_input_array_cmd_slice AX_struct_input_array_cmd_slice;
#define A_struct_input_array_cmd_slice (bufferstack + AX_struct_input_array_cmd_slice)
AT_s_expr_infield_sio_id AX_s_expr_infield_sio_id;
#define A_s_expr_infield_sio_id (bufferstack + AX_s_expr_infield_sio_id)
AT_struct_declare_cmd_with_hold AX_struct_declare_cmd_with_hold;
#define A_struct_declare_cmd_with_hold (bufferstack + AX_struct_declare_cmd_with_hold)
AT_struct_whenever_cmd_whento AX_struct_whenever_cmd_whento;
#define A_struct_whenever_cmd_whento (bufferstack + AX_struct_whenever_cmd_whento)
AT_globals_definition_schema_only AX_globals_definition_schema_only;
#define A_globals_definition_schema_only (bufferstack + AX_globals_definition_schema_only)
AT_fgl_comment_comment AX_fgl_comment_comment;
#define A_fgl_comment_comment (bufferstack + AX_fgl_comment_comment)
AT_s_class_definition_parentname AX_s_class_definition_parentname;
#define A_s_class_definition_parentname (bufferstack + AX_s_class_definition_parentname)
AT_s_import_datatype_lineno AX_s_import_datatype_lineno;
#define A_s_import_datatype_lineno (bufferstack + AX_s_import_datatype_lineno)
AT_startrep_with_bottom_margin AX_startrep_with_bottom_margin;
#define A_startrep_with_bottom_margin (bufferstack + AX_startrep_with_bottom_margin)
AT_vname_name_list_nm AX_vname_name_list_nm;
#define A_vname_name_list_nm (bufferstack + AX_vname_name_list_nm)
AT_variable_usage_object_type AX_variable_usage_object_type;
#define A_variable_usage_object_type (bufferstack + AX_variable_usage_object_type)
AT_s_report_definition_comment AX_s_report_definition_comment;
#define A_s_report_definition_comment (bufferstack + AX_s_report_definition_comment)
AT_struct_move_cmd_nm AX_struct_move_cmd_nm;
#define A_struct_move_cmd_nm (bufferstack + AX_struct_move_cmd_nm)
AT_s_pdf_report_definition_lineno AX_s_pdf_report_definition_lineno;
#define A_s_pdf_report_definition_lineno (bufferstack + AX_s_pdf_report_definition_lineno)
AT_s_expr_dynarr_function_call_n_funcName AX_s_expr_dynarr_function_call_n_funcName;
#define A_s_expr_dynarr_function_call_n_funcName (bufferstack + AX_s_expr_dynarr_function_call_n_funcName)
AT_struct_msg_box_cmd_disable AX_struct_msg_box_cmd_disable;
#define A_struct_msg_box_cmd_disable (bufferstack + AX_struct_msg_box_cmd_disable)
AT_s_report_definition_colno AX_s_report_definition_colno;
#define A_s_report_definition_colno (bufferstack + AX_s_report_definition_colno)
AT_s_fetch_nm AX_s_fetch_nm;
#define A_s_fetch_nm (bufferstack + AX_s_fetch_nm)
AT_s_report_definition_module AX_s_report_definition_module;
#define A_s_report_definition_module (bufferstack + AX_s_report_definition_module)
AT_s_select_nm AX_s_select_nm;
#define A_s_select_nm (bufferstack + AX_s_select_nm)
AT_convert_nm AX_convert_nm;
#define A_convert_nm (bufferstack + AX_convert_nm)
AT_struct_call_cmd_nm AX_struct_call_cmd_nm;
#define A_struct_call_cmd_nm (bufferstack + AX_struct_call_cmd_nm)
AT_struct_clear_cmd_nm AX_struct_clear_cmd_nm;
#define A_struct_clear_cmd_nm (bufferstack + AX_struct_clear_cmd_nm)
AT_struct_prompt_cmd_blockid AX_struct_prompt_cmd_blockid;
#define A_struct_prompt_cmd_blockid (bufferstack + AX_struct_prompt_cmd_blockid)
AT_attrib_pad AX_attrib_pad;
#define A_attrib_pad (bufferstack + AX_attrib_pad)
AT_struct_display_array_cmd_slice_start AX_struct_display_array_cmd_slice_start;
#define A_struct_display_array_cmd_slice_start (bufferstack + AX_struct_display_array_cmd_slice_start)
AT_struct_input_cmd_sio AX_struct_input_cmd_sio;
#define A_struct_input_cmd_sio (bufferstack + AX_struct_input_cmd_sio)
AT_struct_at_term_cmd_nm AX_struct_at_term_cmd_nm;
#define A_struct_at_term_cmd_nm (bufferstack + AX_struct_at_term_cmd_nm)
AT_constant_data_data_i AX_constant_data_data_i;
#define A_constant_data_data_i (bufferstack + AX_constant_data_data_i)
AT_s_select_list_item_extend_nm AX_s_select_list_item_extend_nm;
#define A_s_select_list_item_extend_nm (bufferstack + AX_s_select_list_item_extend_nm)
AT_report_format_section_entry_nm AX_report_format_section_entry_nm;
#define A_report_format_section_entry_nm (bufferstack + AX_report_format_section_entry_nm)
AT_struct_close_sql_cmd_cl_type AX_struct_close_sql_cmd_cl_type;
#define A_struct_close_sql_cmd_cl_type (bufferstack + AX_struct_close_sql_cmd_cl_type)
AT_lint_warning_nm AX_lint_warning_nm;
#define A_lint_warning_nm (bufferstack + AX_lint_warning_nm)
AT_struct_pause_cmd_nm AX_struct_pause_cmd_nm;
#define A_struct_pause_cmd_nm (bufferstack + AX_struct_pause_cmd_nm)
AT_s_expr_cached_cache_num AX_s_expr_cached_cache_num;
#define A_s_expr_cached_cache_num (bufferstack + AX_s_expr_cached_cache_num)
AT_on_event_colno AX_on_event_colno;
#define A_on_event_colno (bufferstack + AX_on_event_colno)
AT_s_import_datatype_dtype_name AX_s_import_datatype_dtype_name;
#define A_s_import_datatype_dtype_name (bufferstack + AX_s_import_datatype_dtype_name)
AT_struct_declare_cmd_scroll AX_struct_declare_cmd_scroll;
#define A_struct_declare_cmd_scroll (bufferstack + AX_struct_declare_cmd_scroll)
AT_s_expr_member_function_call_n_nm AX_s_expr_member_function_call_n_nm;
#define A_s_expr_member_function_call_n_nm (bufferstack + AX_s_expr_member_function_call_n_nm)
AT_module_definition_moduleIsInLibrary AX_module_definition_moduleIsInLibrary;
#define A_module_definition_moduleIsInLibrary (bufferstack + AX_module_definition_moduleIsInLibrary)
AT_s_update_pair_column_name AX_s_update_pair_column_name;
#define A_s_update_pair_column_name (bufferstack + AX_s_update_pair_column_name)
AT_attrib_invisible AX_attrib_invisible;
#define A_attrib_invisible (bufferstack + AX_attrib_invisible)
AT_s_sli_case_nm AX_s_sli_case_nm;
#define A_s_sli_case_nm (bufferstack + AX_s_sli_case_nm)
AT_simple_variable_nm AX_simple_variable_nm;
#define A_simple_variable_nm (bufferstack + AX_simple_variable_nm)
AT_struct_next_field_cmd_sio AX_struct_next_field_cmd_sio;
#define A_struct_next_field_cmd_sio (bufferstack + AX_struct_next_field_cmd_sio)
AT_bluebar_b AX_bluebar_b;
#define A_bluebar_b (bufferstack + AX_bluebar_b)
AT_expr_str_nm AX_expr_str_nm;
#define A_expr_str_nm (bufferstack + AX_expr_str_nm)
AT_s_function_definition_funcname AX_s_function_definition_funcname;
#define A_s_function_definition_funcname (bufferstack + AX_s_function_definition_funcname)
AT_struct_menu_cmd_sio AX_struct_menu_cmd_sio;
#define A_struct_menu_cmd_sio (bufferstack + AX_struct_menu_cmd_sio)
AT_s_select_ncolumns AX_s_select_ncolumns;
#define A_s_select_ncolumns (bufferstack + AX_s_select_ncolumns)
AT_variable_nm AX_variable_nm;
#define A_variable_nm (bufferstack + AX_variable_nm)
AT_s_expr_external_call_host AX_s_expr_external_call_host;
#define A_s_expr_external_call_host (bufferstack + AX_s_expr_external_call_host)
AT_s_select_list_item_agg_expr_nm AX_s_select_list_item_agg_expr_nm;
#define A_s_select_list_item_agg_expr_nm (bufferstack + AX_s_select_list_item_agg_expr_nm)
AT_s_function_definition_comment AX_s_function_definition_comment;
#define A_s_function_definition_comment (bufferstack + AX_s_function_definition_comment)
AT_struct_construct_cmd_blockid AX_struct_construct_cmd_blockid;
#define A_struct_construct_cmd_blockid (bufferstack + AX_struct_construct_cmd_blockid)
AT_s_import_datatype_module AX_s_import_datatype_module;
#define A_s_import_datatype_module (bufferstack + AX_s_import_datatype_module)
AT_struct_display_b_n_cmd_nm AX_struct_display_b_n_cmd_nm;
#define A_struct_display_b_n_cmd_nm (bufferstack + AX_struct_display_b_n_cmd_nm)
AT_funcname_list_nm AX_funcname_list_nm;
#define A_funcname_list_nm (bufferstack + AX_funcname_list_nm)
AT_globals_definition_compiled_time AX_globals_definition_compiled_time;
#define A_globals_definition_compiled_time (bufferstack + AX_globals_definition_compiled_time)
AT_struct_prepare_cmd_nm AX_struct_prepare_cmd_nm;
#define A_struct_prepare_cmd_nm (bufferstack + AX_struct_prepare_cmd_nm)
AT_struct_input_cmd_nm AX_struct_input_cmd_nm;
#define A_struct_input_cmd_nm (bufferstack + AX_struct_input_cmd_nm)
AT_s_import_function_definition_nm AX_s_import_function_definition_nm;
#define A_s_import_function_definition_nm (bufferstack + AX_s_import_function_definition_nm)
AT_s_expr_form_is_compiled_module AX_s_expr_form_is_compiled_module;
#define A_s_expr_form_is_compiled_module (bufferstack + AX_s_expr_form_is_compiled_module)
AT_cons_list_entry_colname AX_cons_list_entry_colname;
#define A_cons_list_entry_colname (bufferstack + AX_cons_list_entry_colname)
AT_module_definition_debug_filename AX_module_definition_debug_filename;
#define A_module_definition_debug_filename (bufferstack + AX_module_definition_debug_filename)
AT_assoc_array_variable_nm AX_assoc_array_variable_nm;
#define A_assoc_array_variable_nm (bufferstack + AX_assoc_array_variable_nm)
AT_s_source_code_nm AX_s_source_code_nm;
#define A_s_source_code_nm (bufferstack + AX_s_source_code_nm)
AT_struct_message_cmd_nm AX_struct_message_cmd_nm;
#define A_struct_message_cmd_nm (bufferstack + AX_struct_message_cmd_nm)
AT_s_import_legacy_definition_lineno AX_s_import_legacy_definition_lineno;
#define A_s_import_legacy_definition_lineno (bufferstack + AX_s_import_legacy_definition_lineno)
AT_pdf_startrep_with_bottom_margin AX_pdf_startrep_with_bottom_margin;
#define A_pdf_startrep_with_bottom_margin (bufferstack + AX_pdf_startrep_with_bottom_margin)
AT_s_expr_get_fldbuf_line AX_s_expr_get_fldbuf_line;
#define A_s_expr_get_fldbuf_line (bufferstack + AX_s_expr_get_fldbuf_line)
AT_ilist_i5 AX_ilist_i5;
#define A_ilist_i5 (bufferstack + AX_ilist_i5)
AT_long_value AX_long_value;
#define A_long_value (bufferstack + AX_long_value)
AT_s_expr_agg_agg_type AX_s_expr_agg_agg_type;
#define A_s_expr_agg_agg_type (bufferstack + AX_s_expr_agg_agg_type)
AT_cons_list_nm AX_cons_list_nm;
#define A_cons_list_nm (bufferstack + AX_cons_list_nm)
AT_struct_sql_block_cmd_convert AX_struct_sql_block_cmd_convert;
#define A_struct_sql_block_cmd_convert (bufferstack + AX_struct_sql_block_cmd_convert)
AT_s_expr_parameter_expr_string AX_s_expr_parameter_expr_string;
#define A_s_expr_parameter_expr_string (bufferstack + AX_s_expr_parameter_expr_string)
AT_simple_variable_dimensions_1 AX_simple_variable_dimensions_1;
#define A_simple_variable_dimensions_1 (bufferstack + AX_simple_variable_dimensions_1)
AT_struct_enable_cmd_nm AX_struct_enable_cmd_nm;
#define A_struct_enable_cmd_nm (bufferstack + AX_struct_enable_cmd_nm)
AT_struct_while_cmd_block_id AX_struct_while_cmd_block_id;
#define A_struct_while_cmd_block_id (bufferstack + AX_struct_while_cmd_block_id)
AT_command_module AX_command_module;
#define A_command_module (bufferstack + AX_command_module)
AT_s_import_legacy_definition_funcname AX_s_import_legacy_definition_funcname;
#define A_s_import_legacy_definition_funcname (bufferstack + AX_s_import_legacy_definition_funcname)
AT_variable_user_system AX_variable_user_system;
#define A_variable_user_system (bufferstack + AX_variable_user_system)
AT_variable_usage AX_variable_usage;
#define A_variable_usage (bufferstack + AX_variable_usage)
AT_expr_str_e_expr_type AX_expr_str_e_expr_type;
#define A_expr_str_e_expr_type (bufferstack + AX_expr_str_e_expr_type)
AT_struct_case_cmd_block_id AX_struct_case_cmd_block_id;
#define A_struct_case_cmd_block_id (bufferstack + AX_struct_case_cmd_block_id)
AT_struct_set_session_cmd_session_type AX_struct_set_session_cmd_session_type;
#define A_struct_set_session_cmd_session_type (bufferstack + AX_struct_set_session_cmd_session_type)
AT_struct_scroll_cmd_nm AX_struct_scroll_cmd_nm;
#define A_struct_scroll_cmd_nm (bufferstack + AX_struct_scroll_cmd_nm)
AT_struct_display_form_cmd_nm AX_struct_display_form_cmd_nm;
#define A_struct_display_form_cmd_nm (bufferstack + AX_struct_display_form_cmd_nm)
AT_lint_warning_lineno AX_lint_warning_lineno;
#define A_lint_warning_lineno (bufferstack + AX_lint_warning_lineno)
AT_funcname_value AX_funcname_value;
#define A_funcname_value (bufferstack + AX_funcname_value)
AT_s_select_finish_nm AX_s_select_finish_nm;
#define A_s_select_finish_nm (bufferstack + AX_s_select_finish_nm)
AT_s_import_datatype_nm AX_s_import_datatype_nm;
#define A_s_import_datatype_nm (bufferstack + AX_s_import_datatype_nm)
AT_struct_put_cmd_nm AX_struct_put_cmd_nm;
#define A_struct_put_cmd_nm (bufferstack + AX_struct_put_cmd_nm)
AT_struct_open_form_gui_cmd_disable AX_struct_open_form_gui_cmd_disable;
#define A_struct_open_form_gui_cmd_disable (bufferstack + AX_struct_open_form_gui_cmd_disable)
AT_pdf_startrep_with_left_margin AX_pdf_startrep_with_left_margin;
#define A_pdf_startrep_with_left_margin (bufferstack + AX_pdf_startrep_with_left_margin)
AT_expr_str_si AX_expr_str_si;
#define A_expr_str_si (bufferstack + AX_expr_str_si)
AT_module_definition_namespace AX_module_definition_namespace;
#define A_module_definition_namespace (bufferstack + AX_module_definition_namespace)
AT_s_expr_shared_function_call_namespace AX_s_expr_shared_function_call_namespace;
#define A_s_expr_shared_function_call_namespace (bufferstack + AX_s_expr_shared_function_call_namespace)
AT_struct_goto_cmd_nm AX_struct_goto_cmd_nm;
#define A_struct_goto_cmd_nm (bufferstack + AX_struct_goto_cmd_nm)
AT_int_value AX_int_value;
#define A_int_value (bufferstack + AX_int_value)
AT_struct_disable_cmd_nm AX_struct_disable_cmd_nm;
#define A_struct_disable_cmd_nm (bufferstack + AX_struct_disable_cmd_nm)
AT_struct_fetch_cmd_nm AX_struct_fetch_cmd_nm;
#define A_struct_fetch_cmd_nm (bufferstack + AX_struct_fetch_cmd_nm)
AT_variable_assigned AX_variable_assigned;
#define A_variable_assigned (bufferstack + AX_variable_assigned)
AT_struct_input_array_cmd_helpno AX_struct_input_array_cmd_helpno;
#define A_struct_input_array_cmd_helpno (bufferstack + AX_struct_input_array_cmd_helpno)
AT_struct_init_cmd_nm AX_struct_init_cmd_nm;
#define A_struct_init_cmd_nm (bufferstack + AX_struct_init_cmd_nm)
AT_s_select_list_item_fcall_nm AX_s_select_list_item_fcall_nm;
#define A_s_select_list_item_fcall_nm (bufferstack + AX_s_select_list_item_fcall_nm)
AT_s_select_list_item_extend_from AX_s_select_list_item_extend_from;
#define A_s_select_list_item_extend_from (bufferstack + AX_s_select_list_item_extend_from)
AT_windowtype_nm AX_windowtype_nm;
#define A_windowtype_nm (bufferstack + AX_windowtype_nm)
AT_struct_disable_form_cmd_nm AX_struct_disable_form_cmd_nm;
#define A_struct_disable_form_cmd_nm (bufferstack + AX_struct_disable_form_cmd_nm)
AT_constant_data_nm AX_constant_data_nm;
#define A_constant_data_nm (bufferstack + AX_constant_data_nm)
AT_s_full_col_nm AX_s_full_col_nm;
#define A_s_full_col_nm (bufferstack + AX_s_full_col_nm)
AT_s_func_nm AX_s_func_nm;
#define A_s_func_nm (bufferstack + AX_s_func_nm)
AT_struct_continue_cmd_nm AX_struct_continue_cmd_nm;
#define A_struct_continue_cmd_nm (bufferstack + AX_struct_continue_cmd_nm)
AT_s_import_function_definition_module AX_s_import_function_definition_module;
#define A_s_import_function_definition_module (bufferstack + AX_s_import_function_definition_module)
AT_fgl_comment_colno AX_fgl_comment_colno;
#define A_fgl_comment_colno (bufferstack + AX_fgl_comment_colno)
AT_ilist_i4 AX_ilist_i4;
#define A_ilist_i4 (bufferstack + AX_ilist_i4)
AT_struct_print_cmd_nm AX_struct_print_cmd_nm;
#define A_struct_print_cmd_nm (bufferstack + AX_struct_print_cmd_nm)
AT_s_expr_cast_src_dtype AX_s_expr_cast_src_dtype;
#define A_s_expr_cast_src_dtype (bufferstack + AX_s_expr_cast_src_dtype)
AT_expr_str_expr_string AX_expr_str_expr_string;
#define A_expr_str_expr_string (bufferstack + AX_expr_str_expr_string)
AT_struct_need_cmd_nm AX_struct_need_cmd_nm;
#define A_struct_need_cmd_nm (bufferstack + AX_struct_need_cmd_nm)
AT_command_nm AX_command_nm;
#define A_command_nm (bufferstack + AX_command_nm)
AT_struct_print_img_cmd_img_type AX_struct_print_img_cmd_img_type;
#define A_struct_print_img_cmd_img_type (bufferstack + AX_struct_print_img_cmd_img_type)
AT_s_expr_pdf_function_call_fname AX_s_expr_pdf_function_call_fname;
#define A_s_expr_pdf_function_call_fname (bufferstack + AX_s_expr_pdf_function_call_fname)

/* XML state. */
#ifdef FLEX_DEBUG
# define ENTER(state)	debug_enter(state,#state)
# define LEAVE		debug_leave()
# define SET(state)	debug_set(state,#state)
  static void debug_enter(int, const char*);
  static void debug_leave(void);
  static void debug_set(int, const char*);
#else
# define ENTER(state)	(yy_push_state(state))
# define LEAVE		(yy_pop_state())
# define SET(state)	BEGIN(state)
#endif

/* Generic actions. */
#define SKIP	/*skip*/
#define SUCCEED        CLEANUP; return 0

#define FAIL	return fail
static int fail(const char*, ...);

enum {flexml_max_err_msg_size = 512};
static char flexml_err_msg[flexml_max_err_msg_size];
const char * parse_err_msg()
{
    return flexml_err_msg;
}
static void reset_parse_err_msg()
{
    flexml_err_msg[0] = '\0';
}

/* Cleanup */
static void cleanup(void);
#define CLEANUP  cleanup()

/* Text buffer stack handling. */
char *bufferstack = NULL;
static int blimit = FLEXML_BUFFERSTACKSIZE;
static int bnext = 1;

static int *indexstack = NULL;
static int ilimit = FLEXML_INDEXSTACKSIZE;
static int inext = 1;

#define BUFFERSET(P)  (P = bnext)
#define BUFFERPUTC(C) (ck_blimit(), bufferstack[bnext++] = (C))
#define BUFFERDONE    (BUFFERPUTC('\0'))

#define BUFFERLITERAL(C, P) bufferliteral(C, &(P), yytext)

/* after this is called, there are at least 2 slots left in the stack */
static int ck_blimit()
{
     if (bnext >= blimit) {
	 blimit += FLEXML_BUFFERSTACKSIZE + 2;
	 {
	     char *temp = (char *) realloc(bufferstack, blimit);
	     assert(temp);
	     bufferstack = temp;
	 }
     }
     return 0;
}

/* after this is called, there are at least 2 slots left in the stack */
static int ck_ilimit()
{
     if (inext >= ilimit) {
	 ilimit += FLEXML_INDEXSTACKSIZE + 2;
	 {
	     int *temp = (int *) realloc(indexstack, ilimit);
	     assert(temp);
	     indexstack = temp;
	 }
     }
     return 0;
}

#ifdef FLEXML_NEED_BUFFERLIT
static void bufferliteral(char c, int* pp, const char* text)
{
  const char *s = (c ? strchr(text,c) : text-1), *e = strrchr(text,c);
  assert(s <= e); BUFFERSET(*pp);
  while (++s<e) {
    if (isspace(*s) && c) { BUFFERPUTC(' '); while (isspace(*s)) ++s; }
    else BUFFERPUTC(*s);
  }
  BUFFERDONE;
}
#endif

static void pushbuffer(int p)
{
    ck_ilimit();
    indexstack[inext++] = p;
    indexstack[inext++] = bnext;    
}

static int popbuffer(void)
{
    assert(inext >= 2);
    bnext = indexstack[--inext];
    return indexstack[--inext];
}

/* General internal entities are `unput' back onto the input stream... */
#define ENTITYTEXT(T) \
  { char *s = (T), *e = s+strlen(s);\
    while (--e >= s) { unput(*e); }}

/* User-supplied header */
#include "pack_xml.h"

%}

/* Flex standard options. */
%option stack
%option noyy_top_state
%option noinput
%option noreject
%option noyymore
%option noyywrap

/* Flex user-requested options. */
%option yylineno
%option nounput

/* XML character classes (currently restricted to ASCII). */

/* "Common syntactic structures." */
S		[ \t\n\r\f]+
s		[ \t\n\r\f]*

/* "Names and Tokens." */
NameChar	[A-Za-z0-9.:_-]
Name		[A-Za-z_:]{NameChar}*
Names 		{Name}({S}{Name})*
Nmtoken		({NameChar})+
Nmtokens 	{Nmtoken}({S}{Nmtoken})*

/* Miscellaneous. */
VersionNum	[a-zA-Z0-9_.:-]+
Eq		{s}"="{s}
Literal		\'[^'']*\'|\"[^""]*\"

/* Parser states (flex `exclusive start conditions'):
 *
 * PROLOG	the XML prolog of the document before <?xml...>
 * DOCTYPE	the XML prolog of the document after <?xml...>
 * EPILOG	after the root element
 * INCOMMENT	inside an XML comment <!--....-->
 * INPI		inside an XML PI <?...?>
 * VALUE1	inside a '...'-delimited literal
 * VALUE2	inside a "..."-delimited literal
 * CDATA	inside a <![CDATA[...] ]> section.
 * ROOT_<tag>	expect root element <tag>
 * AL_<tag>	inside the attribute list for <tag>
 * IN_<tag>	inside a <tag> with element contents (ready for end tag)
 * IMPOSSIBLE	dummy to permit disabling rules; must be last
 */
%x PROLOG DOCTYPE EPILOG INCOMMENT INPI VALUE1 VALUE2 CDATA
%x ROOT_assoc_array_variable AL_assoc_array_variable S_assoc_array_variable S_assoc_array_variable_1 S_assoc_array_variable_2 E_assoc_array_variable
%x ROOT_assoc_subscript AL_assoc_subscript S_assoc_subscript S_assoc_subscript_1 S_assoc_subscript_2 E_assoc_subscript
%x ROOT_attrib AL_attrib S_attrib S_attrib_1 S_attrib_2 E_attrib
%x ROOT_bluebar AL_bluebar E_bluebar
%x ROOT_call_list AL_call_list S_call_list S_call_list_1 S_call_list_2 E_call_list
%x ROOT_clear_data AL_clear_data S_clear_data S_clear_data_1 S_clear_data_2 E_clear_data
%x ROOT_cmd_int_list AL_cmd_int_list S_cmd_int_list S_cmd_int_list_1 S_cmd_int_list_2 E_cmd_int_list
%x ROOT_command AL_command S_command S_command_1 S_command_2 E_command
%x ROOT_command_data AL_command_data S_command_data S_command_data_1 S_command_data_2 E_command_data
%x ROOT_commands AL_commands S_commands S_commands_1 S_commands_2 E_commands
%x ROOT_cons_list AL_cons_list S_cons_list S_cons_list_1 S_cons_list_2 E_cons_list
%x ROOT_cons_list_entry AL_cons_list_entry E_cons_list_entry
%x ROOT_constant_data AL_constant_data E_constant_data
%x ROOT_convert AL_convert S_convert S_convert_1 S_convert_2 E_convert
%x ROOT_dt_display AL_dt_display S_dt_display S_dt_display_1 S_dt_display_2 E_dt_display
%x ROOT_event_data AL_event_data S_event_data S_event_data_1 S_event_data_2 E_event_data
%x ROOT_expr_str AL_expr_str S_expr_str S_expr_str_1 S_expr_str_2 E_expr_str
%x ROOT_expr_str_list AL_expr_str_list S_expr_str_list S_expr_str_list_1 S_expr_str_list_2 E_expr_str_list
%x ROOT_fgl_comment AL_fgl_comment E_fgl_comment
%x ROOT_fh_field_entry AL_fh_field_entry S_fh_field_entry S_fh_field_entry_1 S_fh_field_entry_2 E_fh_field_entry
%x ROOT_fh_field_list AL_fh_field_list S_fh_field_list S_fh_field_list_1 S_fh_field_list_2 E_fh_field_list
%x ROOT_field AL_field E_field
%x ROOT_file_description AL_file_description S_file_description S_file_description_1 S_file_description_2 E_file_description
%x ROOT_flist AL_flist E_flist
%x ROOT_form_field AL_form_field S_form_field S_form_field_1 S_form_field_2 E_form_field
%x ROOT_funcname AL_funcname E_funcname
%x ROOT_funcname_list AL_funcname_list S_funcname_list S_funcname_list_1 S_funcname_list_2 E_funcname_list
%x ROOT_globals_definition AL_globals_definition S_globals_definition S_globals_definition_1 S_globals_definition_2 E_globals_definition
%x ROOT_if_cond AL_if_cond S_if_cond S_if_cond_1 S_if_cond_2 E_if_cond
%x ROOT_if_conds AL_if_conds S_if_conds S_if_conds_1 S_if_conds_2 E_if_conds
%x ROOT_ilist AL_ilist E_ilist
%x ROOT_int AL_int E_int
%x ROOT_linked_variable AL_linked_variable S_linked_variable S_linked_variable_1 S_linked_variable_2 E_linked_variable
%x ROOT_lint_warning AL_lint_warning E_lint_warning
%x ROOT_list_of_integers AL_list_of_integers S_list_of_integers S_list_of_integers_1 S_list_of_integers_2 E_list_of_integers
%x ROOT_locate_pos AL_locate_pos S_locate_pos S_locate_pos_1 S_locate_pos_2 E_locate_pos
%x ROOT_long AL_long E_long
%x ROOT_manyoptions AL_manyoptions S_manyoptions S_manyoptions_1 S_manyoptions_2 E_manyoptions
%x ROOT_menuoption AL_menuoption S_menuoption S_menuoption_1 S_menuoption_2 E_menuoption
%x ROOT_module_definition AL_module_definition S_module_definition S_module_definition_1 S_module_definition_2 E_module_definition
%x ROOT_module_entry AL_module_entry S_module_entry S_module_entry_1 S_module_entry_2 E_module_entry
%x ROOT_object_variable AL_object_variable S_object_variable S_object_variable_1 S_object_variable_2 E_object_variable
%x ROOT_on_event AL_on_event S_on_event S_on_event_1 S_on_event_2 E_on_event
%x ROOT_on_events AL_on_events S_on_events S_on_events_1 S_on_events_2 E_on_events
%x ROOT_pdf_startrep AL_pdf_startrep S_pdf_startrep S_pdf_startrep_1 S_pdf_startrep_2 E_pdf_startrep
%x ROOT_program_definition AL_program_definition S_program_definition S_program_definition_1 S_program_definition_2 E_program_definition
%x ROOT_record_variable AL_record_variable S_record_variable S_record_variable_1 S_record_variable_2 E_record_variable
%x ROOT_report_block_data AL_report_block_data S_report_block_data S_report_block_data_1 S_report_block_data_2 E_report_block_data
%x ROOT_report_format_section AL_report_format_section S_report_format_section S_report_format_section_1 S_report_format_section_2 E_report_format_section
%x ROOT_report_format_section_entry AL_report_format_section_entry S_report_format_section_entry S_report_format_section_entry_1 S_report_format_section_entry_2 E_report_format_section_entry
%x ROOT_report_orderby_section AL_report_orderby_section S_report_orderby_section S_report_orderby_section_1 S_report_orderby_section_2 E_report_orderby_section
%x ROOT_rowscols AL_rowscols S_rowscols S_rowscols_1 S_rowscols_2 E_rowscols
%x ROOT_s_class_definition AL_s_class_definition S_s_class_definition S_s_class_definition_1 S_s_class_definition_2 E_s_class_definition
%x ROOT_s_cur_def AL_s_cur_def S_s_cur_def S_s_cur_def_1 S_s_cur_def_2 E_s_cur_def
%x ROOT_s_dependant_tables AL_s_dependant_tables E_s_dependant_tables
%x ROOT_s_exchange_clobber AL_s_exchange_clobber E_s_exchange_clobber
%x ROOT_s_expr_agg AL_s_expr_agg S_s_expr_agg S_s_expr_agg_1 S_s_expr_agg_2 E_s_expr_agg
%x ROOT_s_expr_aligned AL_s_expr_aligned S_s_expr_aligned S_s_expr_aligned_1 S_s_expr_aligned_2 E_s_expr_aligned
%x ROOT_s_expr_bound_fcall AL_s_expr_bound_fcall S_s_expr_bound_fcall S_s_expr_bound_fcall_1 S_s_expr_bound_fcall_2 E_s_expr_bound_fcall
%x ROOT_s_expr_cached AL_s_expr_cached E_s_expr_cached
%x ROOT_s_expr_cast AL_s_expr_cast S_s_expr_cast S_s_expr_cast_1 S_s_expr_cast_2 E_s_expr_cast
%x ROOT_s_expr_current AL_s_expr_current E_s_expr_current
%x ROOT_s_expr_datetime AL_s_expr_datetime E_s_expr_datetime
%x ROOT_s_expr_dynarr_extent AL_s_expr_dynarr_extent S_s_expr_dynarr_extent S_s_expr_dynarr_extent_1 S_s_expr_dynarr_extent_2 E_s_expr_dynarr_extent
%x ROOT_s_expr_dynarr_function_call_n AL_s_expr_dynarr_function_call_n S_s_expr_dynarr_function_call_n S_s_expr_dynarr_function_call_n_1 S_s_expr_dynarr_function_call_n_2 E_s_expr_dynarr_function_call_n
%x ROOT_s_expr_exists_sq AL_s_expr_exists_sq S_s_expr_exists_sq S_s_expr_exists_sq_1 S_s_expr_exists_sq_2 E_s_expr_exists_sq
%x ROOT_s_expr_extend AL_s_expr_extend S_s_expr_extend S_s_expr_extend_1 S_s_expr_extend_2 E_s_expr_extend
%x ROOT_s_expr_external_call AL_s_expr_external_call S_s_expr_external_call S_s_expr_external_call_1 S_s_expr_external_call_2 E_s_expr_external_call
%x ROOT_s_expr_field_touched AL_s_expr_field_touched S_s_expr_field_touched S_s_expr_field_touched_1 S_s_expr_field_touched_2 E_s_expr_field_touched
%x ROOT_s_expr_form_is_compiled AL_s_expr_form_is_compiled S_s_expr_form_is_compiled S_s_expr_form_is_compiled_1 S_s_expr_form_is_compiled_2 E_s_expr_form_is_compiled
%x ROOT_s_expr_function_call AL_s_expr_function_call S_s_expr_function_call S_s_expr_function_call_1 S_s_expr_function_call_2 E_s_expr_function_call
%x ROOT_s_expr_get_fldbuf AL_s_expr_get_fldbuf S_s_expr_get_fldbuf S_s_expr_get_fldbuf_1 S_s_expr_get_fldbuf_2 E_s_expr_get_fldbuf
%x ROOT_s_expr_in AL_s_expr_in S_s_expr_in S_s_expr_in_1 S_s_expr_in_2 E_s_expr_in
%x ROOT_s_expr_in_sq AL_s_expr_in_sq S_s_expr_in_sq S_s_expr_in_sq_1 S_s_expr_in_sq_2 E_s_expr_in_sq
%x ROOT_s_expr_infield AL_s_expr_infield S_s_expr_infield S_s_expr_infield_1 S_s_expr_infield_2 E_s_expr_infield
%x ROOT_s_expr_interval AL_s_expr_interval E_s_expr_interval
%x ROOT_s_expr_member_function_call_n AL_s_expr_member_function_call_n S_s_expr_member_function_call_n S_s_expr_member_function_call_n_1 S_s_expr_member_function_call_n_2 E_s_expr_member_function_call_n
%x ROOT_s_expr_op AL_s_expr_op S_s_expr_op S_s_expr_op_1 S_s_expr_op_2 E_s_expr_op
%x ROOT_s_expr_parameter AL_s_expr_parameter E_s_expr_parameter
%x ROOT_s_expr_pdf_function_call AL_s_expr_pdf_function_call S_s_expr_pdf_function_call S_s_expr_pdf_function_call_1 S_s_expr_pdf_function_call_2 E_s_expr_pdf_function_call
%x ROOT_s_expr_shared_function_call AL_s_expr_shared_function_call S_s_expr_shared_function_call S_s_expr_shared_function_call_1 S_s_expr_shared_function_call_2 E_s_expr_shared_function_call
%x ROOT_s_expr_tag AL_s_expr_tag S_s_expr_tag S_s_expr_tag_1 S_s_expr_tag_2 E_s_expr_tag
%x ROOT_s_expr_tmp AL_s_expr_tmp E_s_expr_tmp
%x ROOT_s_expr_wordwrap AL_s_expr_wordwrap S_s_expr_wordwrap S_s_expr_wordwrap_1 S_s_expr_wordwrap_2 E_s_expr_wordwrap
%x ROOT_s_fetch AL_s_fetch S_s_fetch S_s_fetch_1 S_s_fetch_2 E_s_fetch
%x ROOT_s_fetch_place AL_s_fetch_place S_s_fetch_place S_s_fetch_place_1 S_s_fetch_place_2 E_s_fetch_place
%x ROOT_s_formhandler_definition AL_s_formhandler_definition S_s_formhandler_definition S_s_formhandler_definition_1 S_s_formhandler_definition_2 E_s_formhandler_definition
%x ROOT_s_full_col AL_s_full_col E_s_full_col
%x ROOT_s_func AL_s_func E_s_func
%x ROOT_s_function_definition AL_s_function_definition S_s_function_definition S_s_function_definition_1 S_s_function_definition_2 E_s_function_definition
%x ROOT_s_import_datatype AL_s_import_datatype E_s_import_datatype
%x ROOT_s_import_function_definition AL_s_import_function_definition E_s_import_function_definition
%x ROOT_s_import_legacy_definition AL_s_import_legacy_definition E_s_import_legacy_definition
%x ROOT_s_import_package AL_s_import_package E_s_import_package
%x ROOT_s_limit AL_s_limit E_s_limit
%x ROOT_s_module_entry_ptr_list AL_s_module_entry_ptr_list S_s_module_entry_ptr_list S_s_module_entry_ptr_list_1 S_s_module_entry_ptr_list_2 E_s_module_entry_ptr_list
%x ROOT_s_pdf_report_definition AL_s_pdf_report_definition S_s_pdf_report_definition S_s_pdf_report_definition_1 S_s_pdf_report_definition_2 E_s_pdf_report_definition
%x ROOT_s_report_definition AL_s_report_definition S_s_report_definition S_s_report_definition_1 S_s_report_definition_2 E_s_report_definition
%x ROOT_s_select AL_s_select S_s_select S_s_select_1 S_s_select_2 E_s_select
%x ROOT_s_select_finish AL_s_select_finish S_s_select_finish S_s_select_finish_1 S_s_select_finish_2 E_s_select_finish
%x ROOT_s_select_list_item AL_s_select_list_item S_s_select_list_item S_s_select_list_item_1 S_s_select_list_item_2 E_s_select_list_item
%x ROOT_s_select_list_item_agg_expr AL_s_select_list_item_agg_expr S_s_select_list_item_agg_expr S_s_select_list_item_agg_expr_1 S_s_select_list_item_agg_expr_2 E_s_select_list_item_agg_expr
%x ROOT_s_select_list_item_between_expr AL_s_select_list_item_between_expr S_s_select_list_item_between_expr S_s_select_list_item_between_expr_1 S_s_select_list_item_between_expr_2 E_s_select_list_item_between_expr
%x ROOT_s_select_list_item_builtin_fcall AL_s_select_list_item_builtin_fcall S_s_select_list_item_builtin_fcall S_s_select_list_item_builtin_fcall_1 S_s_select_list_item_builtin_fcall_2 E_s_select_list_item_builtin_fcall
%x ROOT_s_select_list_item_column AL_s_select_list_item_column S_s_select_list_item_column S_s_select_list_item_column_1 S_s_select_list_item_column_2 E_s_select_list_item_column
%x ROOT_s_select_list_item_complex_expr AL_s_select_list_item_complex_expr S_s_select_list_item_complex_expr S_s_select_list_item_complex_expr_1 S_s_select_list_item_complex_expr_2 E_s_select_list_item_complex_expr
%x ROOT_s_select_list_item_data AL_s_select_list_item_data S_s_select_list_item_data S_s_select_list_item_data_1 S_s_select_list_item_data_2 E_s_select_list_item_data
%x ROOT_s_select_list_item_extend AL_s_select_list_item_extend S_s_select_list_item_extend S_s_select_list_item_extend_1 S_s_select_list_item_extend_2 E_s_select_list_item_extend
%x ROOT_s_select_list_item_fcall AL_s_select_list_item_fcall S_s_select_list_item_fcall S_s_select_list_item_fcall_1 S_s_select_list_item_fcall_2 E_s_select_list_item_fcall
%x ROOT_s_select_list_item_list AL_s_select_list_item_list S_s_select_list_item_list S_s_select_list_item_list_1 S_s_select_list_item_list_2 E_s_select_list_item_list
%x ROOT_s_select_list_item_regex AL_s_select_list_item_regex S_s_select_list_item_regex S_s_select_list_item_regex_1 S_s_select_list_item_regex_2 E_s_select_list_item_regex
%x ROOT_s_select_list_item_sli_expr AL_s_select_list_item_sli_expr S_s_select_list_item_sli_expr S_s_select_list_item_sli_expr_1 S_s_select_list_item_sli_expr_2 E_s_select_list_item_sli_expr
%x ROOT_s_select_list_item_slil_expr AL_s_select_list_item_slil_expr S_s_select_list_item_slil_expr S_s_select_list_item_slil_expr_1 S_s_select_list_item_slil_expr_2 E_s_select_list_item_slil_expr
%x ROOT_s_select_list_item_sq_expression AL_s_select_list_item_sq_expression S_s_select_list_item_sq_expression S_s_select_list_item_sq_expression_1 S_s_select_list_item_sq_expression_2 E_s_select_list_item_sq_expression
%x ROOT_s_sli_case AL_s_sli_case S_s_sli_case S_s_sli_case_1 S_s_sli_case_2 E_s_sli_case
%x ROOT_s_sli_case_element AL_s_sli_case_element S_s_sli_case_element S_s_sli_case_element_1 S_s_sli_case_element_2 E_s_sli_case_element
%x ROOT_s_sli_cast AL_s_sli_cast S_s_sli_cast S_s_sli_cast_1 S_s_sli_cast_2 E_s_sli_cast
%x ROOT_s_source_code AL_s_source_code S_s_source_code S_s_source_code_1 S_s_source_code_2 E_s_source_code
%x ROOT_s_table AL_s_table S_s_table S_s_table_1 S_s_table_2 E_s_table
%x ROOT_s_table_list AL_s_table_list S_s_table_list S_s_table_list_1 S_s_table_list_2 E_s_table_list
%x ROOT_s_table_list_element AL_s_table_list_element S_s_table_list_element S_s_table_list_element_1 S_s_table_list_element_2 E_s_table_list_element
%x ROOT_s_update_pair AL_s_update_pair S_s_update_pair S_s_update_pair_1 S_s_update_pair_2 E_s_update_pair
%x ROOT_short AL_short E_short
%x ROOT_simple_variable AL_simple_variable E_simple_variable
%x ROOT_single_option AL_single_option S_single_option S_single_option_1 S_single_option_2 E_single_option
%x ROOT_sq_subquery AL_sq_subquery S_sq_subquery S_sq_subquery_1 S_sq_subquery_2 E_sq_subquery
%x ROOT_sql_statement AL_sql_statement S_sql_statement S_sql_statement_1 S_sql_statement_2 E_sql_statement
%x ROOT_startrep AL_startrep S_startrep S_startrep_1 S_startrep_2 E_startrep
%x ROOT_str AL_str E_str
%x ROOT_str_list AL_str_list S_str_list S_str_list_1 S_str_list_2 E_str_list
%x ROOT_struct_alloc_arr_cmd AL_struct_alloc_arr_cmd S_struct_alloc_arr_cmd S_struct_alloc_arr_cmd_1 S_struct_alloc_arr_cmd_2 E_struct_alloc_arr_cmd
%x ROOT_struct_at_term_cmd AL_struct_at_term_cmd E_struct_at_term_cmd
%x ROOT_struct_call_cmd AL_struct_call_cmd S_struct_call_cmd S_struct_call_cmd_1 S_struct_call_cmd_2 E_struct_call_cmd
%x ROOT_struct_call_shared_cmd AL_struct_call_shared_cmd E_struct_call_shared_cmd
%x ROOT_struct_cancel_cmd AL_struct_cancel_cmd E_struct_cancel_cmd
%x ROOT_struct_case_cmd AL_struct_case_cmd S_struct_case_cmd S_struct_case_cmd_1 S_struct_case_cmd_2 E_struct_case_cmd
%x ROOT_struct_check_menu_cmd AL_struct_check_menu_cmd S_struct_check_menu_cmd S_struct_check_menu_cmd_1 S_struct_check_menu_cmd_2 E_struct_check_menu_cmd
%x ROOT_struct_clear_cmd AL_struct_clear_cmd S_struct_clear_cmd S_struct_clear_cmd_1 S_struct_clear_cmd_2 E_struct_clear_cmd
%x ROOT_struct_close_cmd AL_struct_close_cmd S_struct_close_cmd S_struct_close_cmd_1 S_struct_close_cmd_2 E_struct_close_cmd
%x ROOT_struct_close_sql_cmd AL_struct_close_sql_cmd S_struct_close_sql_cmd S_struct_close_sql_cmd_1 S_struct_close_sql_cmd_2 E_struct_close_sql_cmd
%x ROOT_struct_code_cmd AL_struct_code_cmd E_struct_code_cmd
%x ROOT_struct_connect_cmd AL_struct_connect_cmd S_struct_connect_cmd S_struct_connect_cmd_1 S_struct_connect_cmd_2 E_struct_connect_cmd
%x ROOT_struct_construct_cmd AL_struct_construct_cmd S_struct_construct_cmd S_struct_construct_cmd_1 S_struct_construct_cmd_2 E_struct_construct_cmd
%x ROOT_struct_continue_cmd AL_struct_continue_cmd E_struct_continue_cmd
%x ROOT_struct_convert_cmd AL_struct_convert_cmd S_struct_convert_cmd S_struct_convert_cmd_1 S_struct_convert_cmd_2 E_struct_convert_cmd
%x ROOT_struct_current_win_cmd AL_struct_current_win_cmd S_struct_current_win_cmd S_struct_current_win_cmd_1 S_struct_current_win_cmd_2 E_struct_current_win_cmd
%x ROOT_struct_dealloc_arr_cmd AL_struct_dealloc_arr_cmd S_struct_dealloc_arr_cmd S_struct_dealloc_arr_cmd_1 S_struct_dealloc_arr_cmd_2 E_struct_dealloc_arr_cmd
%x ROOT_struct_declare_cmd AL_struct_declare_cmd S_struct_declare_cmd S_struct_declare_cmd_1 S_struct_declare_cmd_2 E_struct_declare_cmd
%x ROOT_struct_defer_cmd AL_struct_defer_cmd E_struct_defer_cmd
%x ROOT_struct_delete_cmd AL_struct_delete_cmd S_struct_delete_cmd S_struct_delete_cmd_1 S_struct_delete_cmd_2 E_struct_delete_cmd
%x ROOT_struct_disable_cmd AL_struct_disable_cmd S_struct_disable_cmd S_struct_disable_cmd_1 S_struct_disable_cmd_2 E_struct_disable_cmd
%x ROOT_struct_disable_form_cmd AL_struct_disable_form_cmd S_struct_disable_form_cmd S_struct_disable_form_cmd_1 S_struct_disable_form_cmd_2 E_struct_disable_form_cmd
%x ROOT_struct_disable_menu_cmd AL_struct_disable_menu_cmd S_struct_disable_menu_cmd S_struct_disable_menu_cmd_1 S_struct_disable_menu_cmd_2 E_struct_disable_menu_cmd
%x ROOT_struct_display_array_cmd AL_struct_display_array_cmd S_struct_display_array_cmd S_struct_display_array_cmd_1 S_struct_display_array_cmd_2 E_struct_display_array_cmd
%x ROOT_struct_display_b_n_cmd AL_struct_display_b_n_cmd S_struct_display_b_n_cmd S_struct_display_b_n_cmd_1 S_struct_display_b_n_cmd_2 E_struct_display_b_n_cmd
%x ROOT_struct_display_cmd AL_struct_display_cmd S_struct_display_cmd S_struct_display_cmd_1 S_struct_display_cmd_2 E_struct_display_cmd
%x ROOT_struct_display_form_cmd AL_struct_display_form_cmd S_struct_display_form_cmd S_struct_display_form_cmd_1 S_struct_display_form_cmd_2 E_struct_display_form_cmd
%x ROOT_struct_enable_cmd AL_struct_enable_cmd S_struct_enable_cmd S_struct_enable_cmd_1 S_struct_enable_cmd_2 E_struct_enable_cmd
%x ROOT_struct_enable_form_cmd AL_struct_enable_form_cmd S_struct_enable_form_cmd S_struct_enable_form_cmd_1 S_struct_enable_form_cmd_2 E_struct_enable_form_cmd
%x ROOT_struct_enable_menu_cmd AL_struct_enable_menu_cmd S_struct_enable_menu_cmd S_struct_enable_menu_cmd_1 S_struct_enable_menu_cmd_2 E_struct_enable_menu_cmd
%x ROOT_struct_error_cmd AL_struct_error_cmd S_struct_error_cmd S_struct_error_cmd_1 S_struct_error_cmd_2 E_struct_error_cmd
%x ROOT_struct_execute_cmd AL_struct_execute_cmd S_struct_execute_cmd S_struct_execute_cmd_1 S_struct_execute_cmd_2 E_struct_execute_cmd
%x ROOT_struct_execute_immediate_cmd AL_struct_execute_immediate_cmd S_struct_execute_immediate_cmd S_struct_execute_immediate_cmd_1 S_struct_execute_immediate_cmd_2 E_struct_execute_immediate_cmd
%x ROOT_struct_exit_prog_cmd AL_struct_exit_prog_cmd S_struct_exit_prog_cmd S_struct_exit_prog_cmd_1 S_struct_exit_prog_cmd_2 E_struct_exit_prog_cmd
%x ROOT_struct_ext_cmd AL_struct_ext_cmd E_struct_ext_cmd
%x ROOT_struct_fetch_cmd AL_struct_fetch_cmd S_struct_fetch_cmd S_struct_fetch_cmd_1 S_struct_fetch_cmd_2 E_struct_fetch_cmd
%x ROOT_struct_finish_cmd AL_struct_finish_cmd S_struct_finish_cmd S_struct_finish_cmd_1 S_struct_finish_cmd_2 E_struct_finish_cmd
%x ROOT_struct_flush_cmd AL_struct_flush_cmd S_struct_flush_cmd S_struct_flush_cmd_1 S_struct_flush_cmd_2 E_struct_flush_cmd
%x ROOT_struct_for_cmd AL_struct_for_cmd S_struct_for_cmd S_struct_for_cmd_1 S_struct_for_cmd_2 E_struct_for_cmd
%x ROOT_struct_foreach_cmd AL_struct_foreach_cmd S_struct_foreach_cmd S_struct_foreach_cmd_1 S_struct_foreach_cmd_2 E_struct_foreach_cmd
%x ROOT_struct_free_cmd AL_struct_free_cmd S_struct_free_cmd S_struct_free_cmd_1 S_struct_free_cmd_2 E_struct_free_cmd
%x ROOT_struct_free_rep_cmd AL_struct_free_rep_cmd E_struct_free_rep_cmd
%x ROOT_struct_goto_cmd AL_struct_goto_cmd E_struct_goto_cmd
%x ROOT_struct_hide_cmd AL_struct_hide_cmd S_struct_hide_cmd S_struct_hide_cmd_1 S_struct_hide_cmd_2 E_struct_hide_cmd
%x ROOT_struct_hide_option_cmd AL_struct_hide_option_cmd S_struct_hide_option_cmd S_struct_hide_option_cmd_1 S_struct_hide_option_cmd_2 E_struct_hide_option_cmd
%x ROOT_struct_if_cmd AL_struct_if_cmd S_struct_if_cmd S_struct_if_cmd_1 S_struct_if_cmd_2 E_struct_if_cmd
%x ROOT_struct_init_cmd AL_struct_init_cmd S_struct_init_cmd S_struct_init_cmd_1 S_struct_init_cmd_2 E_struct_init_cmd
%x ROOT_struct_input_array_cmd AL_struct_input_array_cmd S_struct_input_array_cmd S_struct_input_array_cmd_1 S_struct_input_array_cmd_2 E_struct_input_array_cmd
%x ROOT_struct_input_cmd AL_struct_input_cmd S_struct_input_cmd S_struct_input_cmd_1 S_struct_input_cmd_2 E_struct_input_cmd
%x ROOT_struct_insert_cmd AL_struct_insert_cmd S_struct_insert_cmd S_struct_insert_cmd_1 S_struct_insert_cmd_2 E_struct_insert_cmd
%x ROOT_struct_label_cmd AL_struct_label_cmd E_struct_label_cmd
%x ROOT_struct_let_cmd AL_struct_let_cmd S_struct_let_cmd S_struct_let_cmd_1 S_struct_let_cmd_2 E_struct_let_cmd
%x ROOT_struct_lint_expect_cmd AL_struct_lint_expect_cmd S_struct_lint_expect_cmd S_struct_lint_expect_cmd_1 S_struct_lint_expect_cmd_2 E_struct_lint_expect_cmd
%x ROOT_struct_lint_ignore_cmd AL_struct_lint_ignore_cmd S_struct_lint_ignore_cmd S_struct_lint_ignore_cmd_1 S_struct_lint_ignore_cmd_2 E_struct_lint_ignore_cmd
%x ROOT_struct_load_cmd AL_struct_load_cmd S_struct_load_cmd S_struct_load_cmd_1 S_struct_load_cmd_2 E_struct_load_cmd
%x ROOT_struct_locate_cmd AL_struct_locate_cmd S_struct_locate_cmd S_struct_locate_cmd_1 S_struct_locate_cmd_2 E_struct_locate_cmd
%x ROOT_struct_menu_cmd AL_struct_menu_cmd S_struct_menu_cmd S_struct_menu_cmd_1 S_struct_menu_cmd_2 E_struct_menu_cmd
%x ROOT_struct_message_cmd AL_struct_message_cmd S_struct_message_cmd S_struct_message_cmd_1 S_struct_message_cmd_2 E_struct_message_cmd
%x ROOT_struct_move_cmd AL_struct_move_cmd S_struct_move_cmd S_struct_move_cmd_1 S_struct_move_cmd_2 E_struct_move_cmd
%x ROOT_struct_msg_box_cmd AL_struct_msg_box_cmd S_struct_msg_box_cmd S_struct_msg_box_cmd_1 S_struct_msg_box_cmd_2 E_struct_msg_box_cmd
%x ROOT_struct_need_cmd AL_struct_need_cmd S_struct_need_cmd S_struct_need_cmd_1 S_struct_need_cmd_2 E_struct_need_cmd
%x ROOT_struct_next_field_cmd AL_struct_next_field_cmd S_struct_next_field_cmd S_struct_next_field_cmd_1 S_struct_next_field_cmd_2 E_struct_next_field_cmd
%x ROOT_struct_next_form_cmd AL_struct_next_form_cmd E_struct_next_form_cmd
%x ROOT_struct_next_option_cmd AL_struct_next_option_cmd S_struct_next_option_cmd S_struct_next_option_cmd_1 S_struct_next_option_cmd_2 E_struct_next_option_cmd
%x ROOT_struct_open_cursor_cmd AL_struct_open_cursor_cmd S_struct_open_cursor_cmd S_struct_open_cursor_cmd_1 S_struct_open_cursor_cmd_2 E_struct_open_cursor_cmd
%x ROOT_struct_open_form_cmd AL_struct_open_form_cmd S_struct_open_form_cmd S_struct_open_form_cmd_1 S_struct_open_form_cmd_2 E_struct_open_form_cmd
%x ROOT_struct_open_form_gui_cmd AL_struct_open_form_gui_cmd S_struct_open_form_gui_cmd S_struct_open_form_gui_cmd_1 S_struct_open_form_gui_cmd_2 E_struct_open_form_gui_cmd
%x ROOT_struct_open_statusbox_cmd AL_struct_open_statusbox_cmd S_struct_open_statusbox_cmd S_struct_open_statusbox_cmd_1 S_struct_open_statusbox_cmd_2 E_struct_open_statusbox_cmd
%x ROOT_struct_open_window_cmd AL_struct_open_window_cmd S_struct_open_window_cmd S_struct_open_window_cmd_1 S_struct_open_window_cmd_2 E_struct_open_window_cmd
%x ROOT_struct_options_cmd AL_struct_options_cmd S_struct_options_cmd S_struct_options_cmd_1 S_struct_options_cmd_2 E_struct_options_cmd
%x ROOT_struct_output_cmd AL_struct_output_cmd S_struct_output_cmd S_struct_output_cmd_1 S_struct_output_cmd_2 E_struct_output_cmd
%x ROOT_struct_pause_cmd AL_struct_pause_cmd S_struct_pause_cmd S_struct_pause_cmd_1 S_struct_pause_cmd_2 E_struct_pause_cmd
%x ROOT_struct_pdf_call_cmd AL_struct_pdf_call_cmd S_struct_pdf_call_cmd S_struct_pdf_call_cmd_1 S_struct_pdf_call_cmd_2 E_struct_pdf_call_cmd
%x ROOT_struct_prepare_cmd AL_struct_prepare_cmd S_struct_prepare_cmd S_struct_prepare_cmd_1 S_struct_prepare_cmd_2 E_struct_prepare_cmd
%x ROOT_struct_print_cmd AL_struct_print_cmd S_struct_print_cmd S_struct_print_cmd_1 S_struct_print_cmd_2 E_struct_print_cmd
%x ROOT_struct_print_file_cmd AL_struct_print_file_cmd S_struct_print_file_cmd S_struct_print_file_cmd_1 S_struct_print_file_cmd_2 E_struct_print_file_cmd
%x ROOT_struct_print_img_cmd AL_struct_print_img_cmd S_struct_print_img_cmd S_struct_print_img_cmd_1 S_struct_print_img_cmd_2 E_struct_print_img_cmd
%x ROOT_struct_prompt_cmd AL_struct_prompt_cmd S_struct_prompt_cmd S_struct_prompt_cmd_1 S_struct_prompt_cmd_2 E_struct_prompt_cmd
%x ROOT_struct_put_cmd AL_struct_put_cmd S_struct_put_cmd S_struct_put_cmd_1 S_struct_put_cmd_2 E_struct_put_cmd
%x ROOT_struct_resize_arr_cmd AL_struct_resize_arr_cmd S_struct_resize_arr_cmd S_struct_resize_arr_cmd_1 S_struct_resize_arr_cmd_2 E_struct_resize_arr_cmd
%x ROOT_struct_return_cmd AL_struct_return_cmd S_struct_return_cmd S_struct_return_cmd_1 S_struct_return_cmd_2 E_struct_return_cmd
%x ROOT_struct_run_cmd AL_struct_run_cmd S_struct_run_cmd S_struct_run_cmd_1 S_struct_run_cmd_2 E_struct_run_cmd
%x ROOT_struct_run_waiting_for_cmd AL_struct_run_waiting_for_cmd S_struct_run_waiting_for_cmd S_struct_run_waiting_for_cmd_1 S_struct_run_waiting_for_cmd_2 E_struct_run_waiting_for_cmd
%x ROOT_struct_scroll_cmd AL_struct_scroll_cmd S_struct_scroll_cmd S_struct_scroll_cmd_1 S_struct_scroll_cmd_2 E_struct_scroll_cmd
%x ROOT_struct_select_cmd AL_struct_select_cmd S_struct_select_cmd S_struct_select_cmd_1 S_struct_select_cmd_2 E_struct_select_cmd
%x ROOT_struct_set_database_cmd AL_struct_set_database_cmd S_struct_set_database_cmd S_struct_set_database_cmd_1 S_struct_set_database_cmd_2 E_struct_set_database_cmd
%x ROOT_struct_set_session_cmd AL_struct_set_session_cmd S_struct_set_session_cmd S_struct_set_session_cmd_1 S_struct_set_session_cmd_2 E_struct_set_session_cmd
%x ROOT_struct_show_cmd AL_struct_show_cmd S_struct_show_cmd S_struct_show_cmd_1 S_struct_show_cmd_2 E_struct_show_cmd
%x ROOT_struct_show_menu_cmd AL_struct_show_menu_cmd S_struct_show_menu_cmd S_struct_show_menu_cmd_1 S_struct_show_menu_cmd_2 E_struct_show_menu_cmd
%x ROOT_struct_show_option_cmd AL_struct_show_option_cmd S_struct_show_option_cmd S_struct_show_option_cmd_1 S_struct_show_option_cmd_2 E_struct_show_option_cmd
%x ROOT_struct_skip_by_cmd AL_struct_skip_by_cmd S_struct_skip_by_cmd S_struct_skip_by_cmd_1 S_struct_skip_by_cmd_2 E_struct_skip_by_cmd
%x ROOT_struct_skip_cmd AL_struct_skip_cmd S_struct_skip_cmd S_struct_skip_cmd_1 S_struct_skip_cmd_2 E_struct_skip_cmd
%x ROOT_struct_skip_to_cmd AL_struct_skip_to_cmd S_struct_skip_to_cmd S_struct_skip_to_cmd_1 S_struct_skip_to_cmd_2 E_struct_skip_to_cmd
%x ROOT_struct_sleep_cmd AL_struct_sleep_cmd S_struct_sleep_cmd S_struct_sleep_cmd_1 S_struct_sleep_cmd_2 E_struct_sleep_cmd
%x ROOT_struct_sql_block_cmd AL_struct_sql_block_cmd S_struct_sql_block_cmd S_struct_sql_block_cmd_1 S_struct_sql_block_cmd_2 E_struct_sql_block_cmd
%x ROOT_struct_sql_cmd AL_struct_sql_cmd S_struct_sql_cmd S_struct_sql_cmd_1 S_struct_sql_cmd_2 E_struct_sql_cmd
%x ROOT_struct_sql_transact_cmd AL_struct_sql_transact_cmd S_struct_sql_transact_cmd S_struct_sql_transact_cmd_1 S_struct_sql_transact_cmd_2 E_struct_sql_transact_cmd
%x ROOT_struct_start_cmd AL_struct_start_cmd S_struct_start_cmd S_struct_start_cmd_1 S_struct_start_cmd_2 E_struct_start_cmd
%x ROOT_struct_start_rpc_cmd AL_struct_start_rpc_cmd S_struct_start_rpc_cmd S_struct_start_rpc_cmd_1 S_struct_start_rpc_cmd_2 E_struct_start_rpc_cmd
%x ROOT_struct_term_rep_cmd AL_struct_term_rep_cmd E_struct_term_rep_cmd
%x ROOT_struct_uncheck_menu_cmd AL_struct_uncheck_menu_cmd S_struct_uncheck_menu_cmd S_struct_uncheck_menu_cmd_1 S_struct_uncheck_menu_cmd_2 E_struct_uncheck_menu_cmd
%x ROOT_struct_unload_cmd AL_struct_unload_cmd S_struct_unload_cmd S_struct_unload_cmd_1 S_struct_unload_cmd_2 E_struct_unload_cmd
%x ROOT_struct_update_cmd AL_struct_update_cmd S_struct_update_cmd S_struct_update_cmd_1 S_struct_update_cmd_2 E_struct_update_cmd
%x ROOT_struct_validate_cmd AL_struct_validate_cmd S_struct_validate_cmd S_struct_validate_cmd_1 S_struct_validate_cmd_2 E_struct_validate_cmd
%x ROOT_struct_whenever_cmd AL_struct_whenever_cmd E_struct_whenever_cmd
%x ROOT_struct_while_cmd AL_struct_while_cmd S_struct_while_cmd S_struct_while_cmd_1 S_struct_while_cmd_2 E_struct_while_cmd
%x ROOT_user_details AL_user_details S_user_details S_user_details_1 S_user_details_2 E_user_details
%x ROOT_variable AL_variable S_variable S_variable_1 S_variable_2 E_variable
%x ROOT_variable_data AL_variable_data S_variable_data S_variable_data_1 S_variable_data_2 E_variable_data
%x ROOT_variable_list AL_variable_list S_variable_list S_variable_list_1 S_variable_list_2 E_variable_list
%x ROOT_variable_usage AL_variable_usage S_variable_usage S_variable_usage_1 S_variable_usage_2 E_variable_usage
%x ROOT_variable_usage_with_asc_desc AL_variable_usage_with_asc_desc S_variable_usage_with_asc_desc S_variable_usage_with_asc_desc_1 S_variable_usage_with_asc_desc_2 E_variable_usage_with_asc_desc
%x ROOT_vname AL_vname E_vname
%x ROOT_vname_name_list AL_vname_name_list S_vname_name_list S_vname_name_list_1 S_vname_name_list_2 E_vname_name_list
%x ROOT_when AL_when S_when S_when_1 S_when_2 E_when
%x ROOT_whens AL_whens S_whens S_whens_1 S_whens_2 E_whens
%x ROOT_windowtype AL_windowtype S_windowtype S_windowtype_1 S_windowtype_2 E_windowtype
%x ROOT_x_y AL_x_y S_x_y S_x_y_1 S_x_y_2 E_x_y
%x IMPOSSIBLE

%{
/* State names. */
const char* *statenames=NULL;
%}

%%

 /* Bypass Flex's default INITIAL state and begin by parsing the XML prolog. */
 SET(PROLOG);
 reset_parse_err_msg();
 bufferstack = (char *) malloc(FLEXML_BUFFERSTACKSIZE);
 assert(bufferstack);
 #ifdef FLEX_DEBUG
 {
     int i;
     for (i = 0; i < blimit; i++) {
         bufferstack[i] = '\377';
     }
 }
 #endif
 bufferstack[0] = '\0';
 indexstack = (int *) malloc(FLEXML_INDEXSTACKSIZE * sizeof(int));
 assert(indexstack);
 indexstack[0] = 0;

  /* FleXML_init */
  bnext = inext = 1;
  if(!statenames) {statenames= (const char **)calloc(IMPOSSIBLE,sizeof(char*));
  statenames[PROLOG] = NULL;
  statenames[DOCTYPE] = NULL;
  statenames[EPILOG] = NULL;
  statenames[INCOMMENT] = NULL;
  statenames[INPI] = NULL;
  statenames[VALUE1] = NULL;
  statenames[VALUE2] = NULL;
  statenames[CDATA] = NULL;
  statenames[ROOT_assoc_array_variable] = NULL;
  statenames[AL_assoc_array_variable] = NULL;
  statenames[S_assoc_array_variable] = "assoc_array_variable";
  statenames[S_assoc_array_variable_1] = "assoc_array_variable";
  statenames[S_assoc_array_variable_2] = "assoc_array_variable";
  statenames[E_assoc_array_variable] = "assoc_array_variable";
  statenames[ROOT_assoc_subscript] = NULL;
  statenames[AL_assoc_subscript] = NULL;
  statenames[S_assoc_subscript] = "assoc_subscript";
  statenames[S_assoc_subscript_1] = "assoc_subscript";
  statenames[S_assoc_subscript_2] = "assoc_subscript";
  statenames[E_assoc_subscript] = "assoc_subscript";
  statenames[ROOT_attrib] = NULL;
  statenames[AL_attrib] = NULL;
  statenames[S_attrib] = "attrib";
  statenames[S_attrib_1] = "attrib";
  statenames[S_attrib_2] = "attrib";
  statenames[E_attrib] = "attrib";
  statenames[ROOT_bluebar] = NULL;
  statenames[AL_bluebar] = NULL;
  statenames[E_bluebar] = "bluebar";
  statenames[ROOT_call_list] = NULL;
  statenames[AL_call_list] = NULL;
  statenames[S_call_list] = "call_list";
  statenames[S_call_list_1] = "call_list";
  statenames[S_call_list_2] = "call_list";
  statenames[E_call_list] = "call_list";
  statenames[ROOT_clear_data] = NULL;
  statenames[AL_clear_data] = NULL;
  statenames[S_clear_data] = "clear_data";
  statenames[S_clear_data_1] = "clear_data";
  statenames[S_clear_data_2] = "clear_data";
  statenames[E_clear_data] = "clear_data";
  statenames[ROOT_cmd_int_list] = NULL;
  statenames[AL_cmd_int_list] = NULL;
  statenames[S_cmd_int_list] = "cmd_int_list";
  statenames[S_cmd_int_list_1] = "cmd_int_list";
  statenames[S_cmd_int_list_2] = "cmd_int_list";
  statenames[E_cmd_int_list] = "cmd_int_list";
  statenames[ROOT_command] = NULL;
  statenames[AL_command] = NULL;
  statenames[S_command] = "command";
  statenames[S_command_1] = "command";
  statenames[S_command_2] = "command";
  statenames[E_command] = "command";
  statenames[ROOT_command_data] = NULL;
  statenames[AL_command_data] = NULL;
  statenames[S_command_data] = "command_data";
  statenames[S_command_data_1] = "command_data";
  statenames[S_command_data_2] = "command_data";
  statenames[E_command_data] = "command_data";
  statenames[ROOT_commands] = NULL;
  statenames[AL_commands] = NULL;
  statenames[S_commands] = "commands";
  statenames[S_commands_1] = "commands";
  statenames[S_commands_2] = "commands";
  statenames[E_commands] = "commands";
  statenames[ROOT_cons_list] = NULL;
  statenames[AL_cons_list] = NULL;
  statenames[S_cons_list] = "cons_list";
  statenames[S_cons_list_1] = "cons_list";
  statenames[S_cons_list_2] = "cons_list";
  statenames[E_cons_list] = "cons_list";
  statenames[ROOT_cons_list_entry] = NULL;
  statenames[AL_cons_list_entry] = NULL;
  statenames[E_cons_list_entry] = "cons_list_entry";
  statenames[ROOT_constant_data] = NULL;
  statenames[AL_constant_data] = NULL;
  statenames[E_constant_data] = "constant_data";
  statenames[ROOT_convert] = NULL;
  statenames[AL_convert] = NULL;
  statenames[S_convert] = "convert";
  statenames[S_convert_1] = "convert";
  statenames[S_convert_2] = "convert";
  statenames[E_convert] = "convert";
  statenames[ROOT_dt_display] = NULL;
  statenames[AL_dt_display] = NULL;
  statenames[S_dt_display] = "dt_display";
  statenames[S_dt_display_1] = "dt_display";
  statenames[S_dt_display_2] = "dt_display";
  statenames[E_dt_display] = "dt_display";
  statenames[ROOT_event_data] = NULL;
  statenames[AL_event_data] = NULL;
  statenames[S_event_data] = "event_data";
  statenames[S_event_data_1] = "event_data";
  statenames[S_event_data_2] = "event_data";
  statenames[E_event_data] = "event_data";
  statenames[ROOT_expr_str] = NULL;
  statenames[AL_expr_str] = NULL;
  statenames[S_expr_str] = "expr_str";
  statenames[S_expr_str_1] = "expr_str";
  statenames[S_expr_str_2] = "expr_str";
  statenames[E_expr_str] = "expr_str";
  statenames[ROOT_expr_str_list] = NULL;
  statenames[AL_expr_str_list] = NULL;
  statenames[S_expr_str_list] = "expr_str_list";
  statenames[S_expr_str_list_1] = "expr_str_list";
  statenames[S_expr_str_list_2] = "expr_str_list";
  statenames[E_expr_str_list] = "expr_str_list";
  statenames[ROOT_fgl_comment] = NULL;
  statenames[AL_fgl_comment] = NULL;
  statenames[E_fgl_comment] = "fgl_comment";
  statenames[ROOT_fh_field_entry] = NULL;
  statenames[AL_fh_field_entry] = NULL;
  statenames[S_fh_field_entry] = "fh_field_entry";
  statenames[S_fh_field_entry_1] = "fh_field_entry";
  statenames[S_fh_field_entry_2] = "fh_field_entry";
  statenames[E_fh_field_entry] = "fh_field_entry";
  statenames[ROOT_fh_field_list] = NULL;
  statenames[AL_fh_field_list] = NULL;
  statenames[S_fh_field_list] = "fh_field_list";
  statenames[S_fh_field_list_1] = "fh_field_list";
  statenames[S_fh_field_list_2] = "fh_field_list";
  statenames[E_fh_field_list] = "fh_field_list";
  statenames[ROOT_field] = NULL;
  statenames[AL_field] = NULL;
  statenames[E_field] = "field";
  statenames[ROOT_file_description] = NULL;
  statenames[AL_file_description] = NULL;
  statenames[S_file_description] = "file_description";
  statenames[S_file_description_1] = "file_description";
  statenames[S_file_description_2] = "file_description";
  statenames[E_file_description] = "file_description";
  statenames[ROOT_flist] = NULL;
  statenames[AL_flist] = NULL;
  statenames[E_flist] = "flist";
  statenames[ROOT_form_field] = NULL;
  statenames[AL_form_field] = NULL;
  statenames[S_form_field] = "form_field";
  statenames[S_form_field_1] = "form_field";
  statenames[S_form_field_2] = "form_field";
  statenames[E_form_field] = "form_field";
  statenames[ROOT_funcname] = NULL;
  statenames[AL_funcname] = NULL;
  statenames[E_funcname] = "funcname";
  statenames[ROOT_funcname_list] = NULL;
  statenames[AL_funcname_list] = NULL;
  statenames[S_funcname_list] = "funcname_list";
  statenames[S_funcname_list_1] = "funcname_list";
  statenames[S_funcname_list_2] = "funcname_list";
  statenames[E_funcname_list] = "funcname_list";
  statenames[ROOT_globals_definition] = NULL;
  statenames[AL_globals_definition] = NULL;
  statenames[S_globals_definition] = "globals_definition";
  statenames[S_globals_definition_1] = "globals_definition";
  statenames[S_globals_definition_2] = "globals_definition";
  statenames[E_globals_definition] = "globals_definition";
  statenames[ROOT_if_cond] = NULL;
  statenames[AL_if_cond] = NULL;
  statenames[S_if_cond] = "if_cond";
  statenames[S_if_cond_1] = "if_cond";
  statenames[S_if_cond_2] = "if_cond";
  statenames[E_if_cond] = "if_cond";
  statenames[ROOT_if_conds] = NULL;
  statenames[AL_if_conds] = NULL;
  statenames[S_if_conds] = "if_conds";
  statenames[S_if_conds_1] = "if_conds";
  statenames[S_if_conds_2] = "if_conds";
  statenames[E_if_conds] = "if_conds";
  statenames[ROOT_ilist] = NULL;
  statenames[AL_ilist] = NULL;
  statenames[E_ilist] = "ilist";
  statenames[ROOT_int] = NULL;
  statenames[AL_int] = NULL;
  statenames[E_int] = "int";
  statenames[ROOT_linked_variable] = NULL;
  statenames[AL_linked_variable] = NULL;
  statenames[S_linked_variable] = "linked_variable";
  statenames[S_linked_variable_1] = "linked_variable";
  statenames[S_linked_variable_2] = "linked_variable";
  statenames[E_linked_variable] = "linked_variable";
  statenames[ROOT_lint_warning] = NULL;
  statenames[AL_lint_warning] = NULL;
  statenames[E_lint_warning] = "lint_warning";
  statenames[ROOT_list_of_integers] = NULL;
  statenames[AL_list_of_integers] = NULL;
  statenames[S_list_of_integers] = "list_of_integers";
  statenames[S_list_of_integers_1] = "list_of_integers";
  statenames[S_list_of_integers_2] = "list_of_integers";
  statenames[E_list_of_integers] = "list_of_integers";
  statenames[ROOT_locate_pos] = NULL;
  statenames[AL_locate_pos] = NULL;
  statenames[S_locate_pos] = "locate_pos";
  statenames[S_locate_pos_1] = "locate_pos";
  statenames[S_locate_pos_2] = "locate_pos";
  statenames[E_locate_pos] = "locate_pos";
  statenames[ROOT_long] = NULL;
  statenames[AL_long] = NULL;
  statenames[E_long] = "long";
  statenames[ROOT_manyoptions] = NULL;
  statenames[AL_manyoptions] = NULL;
  statenames[S_manyoptions] = "manyoptions";
  statenames[S_manyoptions_1] = "manyoptions";
  statenames[S_manyoptions_2] = "manyoptions";
  statenames[E_manyoptions] = "manyoptions";
  statenames[ROOT_menuoption] = NULL;
  statenames[AL_menuoption] = NULL;
  statenames[S_menuoption] = "menuoption";
  statenames[S_menuoption_1] = "menuoption";
  statenames[S_menuoption_2] = "menuoption";
  statenames[E_menuoption] = "menuoption";
  statenames[ROOT_module_definition] = NULL;
  statenames[AL_module_definition] = NULL;
  statenames[S_module_definition] = "module_definition";
  statenames[S_module_definition_1] = "module_definition";
  statenames[S_module_definition_2] = "module_definition";
  statenames[E_module_definition] = "module_definition";
  statenames[ROOT_module_entry] = NULL;
  statenames[AL_module_entry] = NULL;
  statenames[S_module_entry] = "module_entry";
  statenames[S_module_entry_1] = "module_entry";
  statenames[S_module_entry_2] = "module_entry";
  statenames[E_module_entry] = "module_entry";
  statenames[ROOT_object_variable] = NULL;
  statenames[AL_object_variable] = NULL;
  statenames[S_object_variable] = "object_variable";
  statenames[S_object_variable_1] = "object_variable";
  statenames[S_object_variable_2] = "object_variable";
  statenames[E_object_variable] = "object_variable";
  statenames[ROOT_on_event] = NULL;
  statenames[AL_on_event] = NULL;
  statenames[S_on_event] = "on_event";
  statenames[S_on_event_1] = "on_event";
  statenames[S_on_event_2] = "on_event";
  statenames[E_on_event] = "on_event";
  statenames[ROOT_on_events] = NULL;
  statenames[AL_on_events] = NULL;
  statenames[S_on_events] = "on_events";
  statenames[S_on_events_1] = "on_events";
  statenames[S_on_events_2] = "on_events";
  statenames[E_on_events] = "on_events";
  statenames[ROOT_pdf_startrep] = NULL;
  statenames[AL_pdf_startrep] = NULL;
  statenames[S_pdf_startrep] = "pdf_startrep";
  statenames[S_pdf_startrep_1] = "pdf_startrep";
  statenames[S_pdf_startrep_2] = "pdf_startrep";
  statenames[E_pdf_startrep] = "pdf_startrep";
  statenames[ROOT_program_definition] = NULL;
  statenames[AL_program_definition] = NULL;
  statenames[S_program_definition] = "program_definition";
  statenames[S_program_definition_1] = "program_definition";
  statenames[S_program_definition_2] = "program_definition";
  statenames[E_program_definition] = "program_definition";
  statenames[ROOT_record_variable] = NULL;
  statenames[AL_record_variable] = NULL;
  statenames[S_record_variable] = "record_variable";
  statenames[S_record_variable_1] = "record_variable";
  statenames[S_record_variable_2] = "record_variable";
  statenames[E_record_variable] = "record_variable";
  statenames[ROOT_report_block_data] = NULL;
  statenames[AL_report_block_data] = NULL;
  statenames[S_report_block_data] = "report_block_data";
  statenames[S_report_block_data_1] = "report_block_data";
  statenames[S_report_block_data_2] = "report_block_data";
  statenames[E_report_block_data] = "report_block_data";
  statenames[ROOT_report_format_section] = NULL;
  statenames[AL_report_format_section] = NULL;
  statenames[S_report_format_section] = "report_format_section";
  statenames[S_report_format_section_1] = "report_format_section";
  statenames[S_report_format_section_2] = "report_format_section";
  statenames[E_report_format_section] = "report_format_section";
  statenames[ROOT_report_format_section_entry] = NULL;
  statenames[AL_report_format_section_entry] = NULL;
  statenames[S_report_format_section_entry] = "report_format_section_entry";
  statenames[S_report_format_section_entry_1] = "report_format_section_entry";
  statenames[S_report_format_section_entry_2] = "report_format_section_entry";
  statenames[E_report_format_section_entry] = "report_format_section_entry";
  statenames[ROOT_report_orderby_section] = NULL;
  statenames[AL_report_orderby_section] = NULL;
  statenames[S_report_orderby_section] = "report_orderby_section";
  statenames[S_report_orderby_section_1] = "report_orderby_section";
  statenames[S_report_orderby_section_2] = "report_orderby_section";
  statenames[E_report_orderby_section] = "report_orderby_section";
  statenames[ROOT_rowscols] = NULL;
  statenames[AL_rowscols] = NULL;
  statenames[S_rowscols] = "rowscols";
  statenames[S_rowscols_1] = "rowscols";
  statenames[S_rowscols_2] = "rowscols";
  statenames[E_rowscols] = "rowscols";
  statenames[ROOT_s_class_definition] = NULL;
  statenames[AL_s_class_definition] = NULL;
  statenames[S_s_class_definition] = "s_class_definition";
  statenames[S_s_class_definition_1] = "s_class_definition";
  statenames[S_s_class_definition_2] = "s_class_definition";
  statenames[E_s_class_definition] = "s_class_definition";
  statenames[ROOT_s_cur_def] = NULL;
  statenames[AL_s_cur_def] = NULL;
  statenames[S_s_cur_def] = "s_cur_def";
  statenames[S_s_cur_def_1] = "s_cur_def";
  statenames[S_s_cur_def_2] = "s_cur_def";
  statenames[E_s_cur_def] = "s_cur_def";
  statenames[ROOT_s_dependant_tables] = NULL;
  statenames[AL_s_dependant_tables] = NULL;
  statenames[E_s_dependant_tables] = "s_dependant_tables";
  statenames[ROOT_s_exchange_clobber] = NULL;
  statenames[AL_s_exchange_clobber] = NULL;
  statenames[E_s_exchange_clobber] = "s_exchange_clobber";
  statenames[ROOT_s_expr_agg] = NULL;
  statenames[AL_s_expr_agg] = NULL;
  statenames[S_s_expr_agg] = "s_expr_agg";
  statenames[S_s_expr_agg_1] = "s_expr_agg";
  statenames[S_s_expr_agg_2] = "s_expr_agg";
  statenames[E_s_expr_agg] = "s_expr_agg";
  statenames[ROOT_s_expr_aligned] = NULL;
  statenames[AL_s_expr_aligned] = NULL;
  statenames[S_s_expr_aligned] = "s_expr_aligned";
  statenames[S_s_expr_aligned_1] = "s_expr_aligned";
  statenames[S_s_expr_aligned_2] = "s_expr_aligned";
  statenames[E_s_expr_aligned] = "s_expr_aligned";
  statenames[ROOT_s_expr_bound_fcall] = NULL;
  statenames[AL_s_expr_bound_fcall] = NULL;
  statenames[S_s_expr_bound_fcall] = "s_expr_bound_fcall";
  statenames[S_s_expr_bound_fcall_1] = "s_expr_bound_fcall";
  statenames[S_s_expr_bound_fcall_2] = "s_expr_bound_fcall";
  statenames[E_s_expr_bound_fcall] = "s_expr_bound_fcall";
  statenames[ROOT_s_expr_cached] = NULL;
  statenames[AL_s_expr_cached] = NULL;
  statenames[E_s_expr_cached] = "s_expr_cached";
  statenames[ROOT_s_expr_cast] = NULL;
  statenames[AL_s_expr_cast] = NULL;
  statenames[S_s_expr_cast] = "s_expr_cast";
  statenames[S_s_expr_cast_1] = "s_expr_cast";
  statenames[S_s_expr_cast_2] = "s_expr_cast";
  statenames[E_s_expr_cast] = "s_expr_cast";
  statenames[ROOT_s_expr_current] = NULL;
  statenames[AL_s_expr_current] = NULL;
  statenames[E_s_expr_current] = "s_expr_current";
  statenames[ROOT_s_expr_datetime] = NULL;
  statenames[AL_s_expr_datetime] = NULL;
  statenames[E_s_expr_datetime] = "s_expr_datetime";
  statenames[ROOT_s_expr_dynarr_extent] = NULL;
  statenames[AL_s_expr_dynarr_extent] = NULL;
  statenames[S_s_expr_dynarr_extent] = "s_expr_dynarr_extent";
  statenames[S_s_expr_dynarr_extent_1] = "s_expr_dynarr_extent";
  statenames[S_s_expr_dynarr_extent_2] = "s_expr_dynarr_extent";
  statenames[E_s_expr_dynarr_extent] = "s_expr_dynarr_extent";
  statenames[ROOT_s_expr_dynarr_function_call_n] = NULL;
  statenames[AL_s_expr_dynarr_function_call_n] = NULL;
  statenames[S_s_expr_dynarr_function_call_n] = "s_expr_dynarr_function_call_n";
  statenames[S_s_expr_dynarr_function_call_n_1] = "s_expr_dynarr_function_call_n";
  statenames[S_s_expr_dynarr_function_call_n_2] = "s_expr_dynarr_function_call_n";
  statenames[E_s_expr_dynarr_function_call_n] = "s_expr_dynarr_function_call_n";
  statenames[ROOT_s_expr_exists_sq] = NULL;
  statenames[AL_s_expr_exists_sq] = NULL;
  statenames[S_s_expr_exists_sq] = "s_expr_exists_sq";
  statenames[S_s_expr_exists_sq_1] = "s_expr_exists_sq";
  statenames[S_s_expr_exists_sq_2] = "s_expr_exists_sq";
  statenames[E_s_expr_exists_sq] = "s_expr_exists_sq";
  statenames[ROOT_s_expr_extend] = NULL;
  statenames[AL_s_expr_extend] = NULL;
  statenames[S_s_expr_extend] = "s_expr_extend";
  statenames[S_s_expr_extend_1] = "s_expr_extend";
  statenames[S_s_expr_extend_2] = "s_expr_extend";
  statenames[E_s_expr_extend] = "s_expr_extend";
  statenames[ROOT_s_expr_external_call] = NULL;
  statenames[AL_s_expr_external_call] = NULL;
  statenames[S_s_expr_external_call] = "s_expr_external_call";
  statenames[S_s_expr_external_call_1] = "s_expr_external_call";
  statenames[S_s_expr_external_call_2] = "s_expr_external_call";
  statenames[E_s_expr_external_call] = "s_expr_external_call";
  statenames[ROOT_s_expr_field_touched] = NULL;
  statenames[AL_s_expr_field_touched] = NULL;
  statenames[S_s_expr_field_touched] = "s_expr_field_touched";
  statenames[S_s_expr_field_touched_1] = "s_expr_field_touched";
  statenames[S_s_expr_field_touched_2] = "s_expr_field_touched";
  statenames[E_s_expr_field_touched] = "s_expr_field_touched";
  statenames[ROOT_s_expr_form_is_compiled] = NULL;
  statenames[AL_s_expr_form_is_compiled] = NULL;
  statenames[S_s_expr_form_is_compiled] = "s_expr_form_is_compiled";
  statenames[S_s_expr_form_is_compiled_1] = "s_expr_form_is_compiled";
  statenames[S_s_expr_form_is_compiled_2] = "s_expr_form_is_compiled";
  statenames[E_s_expr_form_is_compiled] = "s_expr_form_is_compiled";
  statenames[ROOT_s_expr_function_call] = NULL;
  statenames[AL_s_expr_function_call] = NULL;
  statenames[S_s_expr_function_call] = "s_expr_function_call";
  statenames[S_s_expr_function_call_1] = "s_expr_function_call";
  statenames[S_s_expr_function_call_2] = "s_expr_function_call";
  statenames[E_s_expr_function_call] = "s_expr_function_call";
  statenames[ROOT_s_expr_get_fldbuf] = NULL;
  statenames[AL_s_expr_get_fldbuf] = NULL;
  statenames[S_s_expr_get_fldbuf] = "s_expr_get_fldbuf";
  statenames[S_s_expr_get_fldbuf_1] = "s_expr_get_fldbuf";
  statenames[S_s_expr_get_fldbuf_2] = "s_expr_get_fldbuf";
  statenames[E_s_expr_get_fldbuf] = "s_expr_get_fldbuf";
  statenames[ROOT_s_expr_in] = NULL;
  statenames[AL_s_expr_in] = NULL;
  statenames[S_s_expr_in] = "s_expr_in";
  statenames[S_s_expr_in_1] = "s_expr_in";
  statenames[S_s_expr_in_2] = "s_expr_in";
  statenames[E_s_expr_in] = "s_expr_in";
  statenames[ROOT_s_expr_in_sq] = NULL;
  statenames[AL_s_expr_in_sq] = NULL;
  statenames[S_s_expr_in_sq] = "s_expr_in_sq";
  statenames[S_s_expr_in_sq_1] = "s_expr_in_sq";
  statenames[S_s_expr_in_sq_2] = "s_expr_in_sq";
  statenames[E_s_expr_in_sq] = "s_expr_in_sq";
  statenames[ROOT_s_expr_infield] = NULL;
  statenames[AL_s_expr_infield] = NULL;
  statenames[S_s_expr_infield] = "s_expr_infield";
  statenames[S_s_expr_infield_1] = "s_expr_infield";
  statenames[S_s_expr_infield_2] = "s_expr_infield";
  statenames[E_s_expr_infield] = "s_expr_infield";
  statenames[ROOT_s_expr_interval] = NULL;
  statenames[AL_s_expr_interval] = NULL;
  statenames[E_s_expr_interval] = "s_expr_interval";
  statenames[ROOT_s_expr_member_function_call_n] = NULL;
  statenames[AL_s_expr_member_function_call_n] = NULL;
  statenames[S_s_expr_member_function_call_n] = "s_expr_member_function_call_n";
  statenames[S_s_expr_member_function_call_n_1] = "s_expr_member_function_call_n";
  statenames[S_s_expr_member_function_call_n_2] = "s_expr_member_function_call_n";
  statenames[E_s_expr_member_function_call_n] = "s_expr_member_function_call_n";
  statenames[ROOT_s_expr_op] = NULL;
  statenames[AL_s_expr_op] = NULL;
  statenames[S_s_expr_op] = "s_expr_op";
  statenames[S_s_expr_op_1] = "s_expr_op";
  statenames[S_s_expr_op_2] = "s_expr_op";
  statenames[E_s_expr_op] = "s_expr_op";
  statenames[ROOT_s_expr_parameter] = NULL;
  statenames[AL_s_expr_parameter] = NULL;
  statenames[E_s_expr_parameter] = "s_expr_parameter";
  statenames[ROOT_s_expr_pdf_function_call] = NULL;
  statenames[AL_s_expr_pdf_function_call] = NULL;
  statenames[S_s_expr_pdf_function_call] = "s_expr_pdf_function_call";
  statenames[S_s_expr_pdf_function_call_1] = "s_expr_pdf_function_call";
  statenames[S_s_expr_pdf_function_call_2] = "s_expr_pdf_function_call";
  statenames[E_s_expr_pdf_function_call] = "s_expr_pdf_function_call";
  statenames[ROOT_s_expr_shared_function_call] = NULL;
  statenames[AL_s_expr_shared_function_call] = NULL;
  statenames[S_s_expr_shared_function_call] = "s_expr_shared_function_call";
  statenames[S_s_expr_shared_function_call_1] = "s_expr_shared_function_call";
  statenames[S_s_expr_shared_function_call_2] = "s_expr_shared_function_call";
  statenames[E_s_expr_shared_function_call] = "s_expr_shared_function_call";
  statenames[ROOT_s_expr_tag] = NULL;
  statenames[AL_s_expr_tag] = NULL;
  statenames[S_s_expr_tag] = "s_expr_tag";
  statenames[S_s_expr_tag_1] = "s_expr_tag";
  statenames[S_s_expr_tag_2] = "s_expr_tag";
  statenames[E_s_expr_tag] = "s_expr_tag";
  statenames[ROOT_s_expr_tmp] = NULL;
  statenames[AL_s_expr_tmp] = NULL;
  statenames[E_s_expr_tmp] = "s_expr_tmp";
  statenames[ROOT_s_expr_wordwrap] = NULL;
  statenames[AL_s_expr_wordwrap] = NULL;
  statenames[S_s_expr_wordwrap] = "s_expr_wordwrap";
  statenames[S_s_expr_wordwrap_1] = "s_expr_wordwrap";
  statenames[S_s_expr_wordwrap_2] = "s_expr_wordwrap";
  statenames[E_s_expr_wordwrap] = "s_expr_wordwrap";
  statenames[ROOT_s_fetch] = NULL;
  statenames[AL_s_fetch] = NULL;
  statenames[S_s_fetch] = "s_fetch";
  statenames[S_s_fetch_1] = "s_fetch";
  statenames[S_s_fetch_2] = "s_fetch";
  statenames[E_s_fetch] = "s_fetch";
  statenames[ROOT_s_fetch_place] = NULL;
  statenames[AL_s_fetch_place] = NULL;
  statenames[S_s_fetch_place] = "s_fetch_place";
  statenames[S_s_fetch_place_1] = "s_fetch_place";
  statenames[S_s_fetch_place_2] = "s_fetch_place";
  statenames[E_s_fetch_place] = "s_fetch_place";
  statenames[ROOT_s_formhandler_definition] = NULL;
  statenames[AL_s_formhandler_definition] = NULL;
  statenames[S_s_formhandler_definition] = "s_formhandler_definition";
  statenames[S_s_formhandler_definition_1] = "s_formhandler_definition";
  statenames[S_s_formhandler_definition_2] = "s_formhandler_definition";
  statenames[E_s_formhandler_definition] = "s_formhandler_definition";
  statenames[ROOT_s_full_col] = NULL;
  statenames[AL_s_full_col] = NULL;
  statenames[E_s_full_col] = "s_full_col";
  statenames[ROOT_s_func] = NULL;
  statenames[AL_s_func] = NULL;
  statenames[E_s_func] = "s_func";
  statenames[ROOT_s_function_definition] = NULL;
  statenames[AL_s_function_definition] = NULL;
  statenames[S_s_function_definition] = "s_function_definition";
  statenames[S_s_function_definition_1] = "s_function_definition";
  statenames[S_s_function_definition_2] = "s_function_definition";
  statenames[E_s_function_definition] = "s_function_definition";
  statenames[ROOT_s_import_datatype] = NULL;
  statenames[AL_s_import_datatype] = NULL;
  statenames[E_s_import_datatype] = "s_import_datatype";
  statenames[ROOT_s_import_function_definition] = NULL;
  statenames[AL_s_import_function_definition] = NULL;
  statenames[E_s_import_function_definition] = "s_import_function_definition";
  statenames[ROOT_s_import_legacy_definition] = NULL;
  statenames[AL_s_import_legacy_definition] = NULL;
  statenames[E_s_import_legacy_definition] = "s_import_legacy_definition";
  statenames[ROOT_s_import_package] = NULL;
  statenames[AL_s_import_package] = NULL;
  statenames[E_s_import_package] = "s_import_package";
  statenames[ROOT_s_limit] = NULL;
  statenames[AL_s_limit] = NULL;
  statenames[E_s_limit] = "s_limit";
  statenames[ROOT_s_module_entry_ptr_list] = NULL;
  statenames[AL_s_module_entry_ptr_list] = NULL;
  statenames[S_s_module_entry_ptr_list] = "s_module_entry_ptr_list";
  statenames[S_s_module_entry_ptr_list_1] = "s_module_entry_ptr_list";
  statenames[S_s_module_entry_ptr_list_2] = "s_module_entry_ptr_list";
  statenames[E_s_module_entry_ptr_list] = "s_module_entry_ptr_list";
  statenames[ROOT_s_pdf_report_definition] = NULL;
  statenames[AL_s_pdf_report_definition] = NULL;
  statenames[S_s_pdf_report_definition] = "s_pdf_report_definition";
  statenames[S_s_pdf_report_definition_1] = "s_pdf_report_definition";
  statenames[S_s_pdf_report_definition_2] = "s_pdf_report_definition";
  statenames[E_s_pdf_report_definition] = "s_pdf_report_definition";
  statenames[ROOT_s_report_definition] = NULL;
  statenames[AL_s_report_definition] = NULL;
  statenames[S_s_report_definition] = "s_report_definition";
  statenames[S_s_report_definition_1] = "s_report_definition";
  statenames[S_s_report_definition_2] = "s_report_definition";
  statenames[E_s_report_definition] = "s_report_definition";
  statenames[ROOT_s_select] = NULL;
  statenames[AL_s_select] = NULL;
  statenames[S_s_select] = "s_select";
  statenames[S_s_select_1] = "s_select";
  statenames[S_s_select_2] = "s_select";
  statenames[E_s_select] = "s_select";
  statenames[ROOT_s_select_finish] = NULL;
  statenames[AL_s_select_finish] = NULL;
  statenames[S_s_select_finish] = "s_select_finish";
  statenames[S_s_select_finish_1] = "s_select_finish";
  statenames[S_s_select_finish_2] = "s_select_finish";
  statenames[E_s_select_finish] = "s_select_finish";
  statenames[ROOT_s_select_list_item] = NULL;
  statenames[AL_s_select_list_item] = NULL;
  statenames[S_s_select_list_item] = "s_select_list_item";
  statenames[S_s_select_list_item_1] = "s_select_list_item";
  statenames[S_s_select_list_item_2] = "s_select_list_item";
  statenames[E_s_select_list_item] = "s_select_list_item";
  statenames[ROOT_s_select_list_item_agg_expr] = NULL;
  statenames[AL_s_select_list_item_agg_expr] = NULL;
  statenames[S_s_select_list_item_agg_expr] = "s_select_list_item_agg_expr";
  statenames[S_s_select_list_item_agg_expr_1] = "s_select_list_item_agg_expr";
  statenames[S_s_select_list_item_agg_expr_2] = "s_select_list_item_agg_expr";
  statenames[E_s_select_list_item_agg_expr] = "s_select_list_item_agg_expr";
  statenames[ROOT_s_select_list_item_between_expr] = NULL;
  statenames[AL_s_select_list_item_between_expr] = NULL;
  statenames[S_s_select_list_item_between_expr] = "s_select_list_item_between_expr";
  statenames[S_s_select_list_item_between_expr_1] = "s_select_list_item_between_expr";
  statenames[S_s_select_list_item_between_expr_2] = "s_select_list_item_between_expr";
  statenames[E_s_select_list_item_between_expr] = "s_select_list_item_between_expr";
  statenames[ROOT_s_select_list_item_builtin_fcall] = NULL;
  statenames[AL_s_select_list_item_builtin_fcall] = NULL;
  statenames[S_s_select_list_item_builtin_fcall] = "s_select_list_item_builtin_fcall";
  statenames[S_s_select_list_item_builtin_fcall_1] = "s_select_list_item_builtin_fcall";
  statenames[S_s_select_list_item_builtin_fcall_2] = "s_select_list_item_builtin_fcall";
  statenames[E_s_select_list_item_builtin_fcall] = "s_select_list_item_builtin_fcall";
  statenames[ROOT_s_select_list_item_column] = NULL;
  statenames[AL_s_select_list_item_column] = NULL;
  statenames[S_s_select_list_item_column] = "s_select_list_item_column";
  statenames[S_s_select_list_item_column_1] = "s_select_list_item_column";
  statenames[S_s_select_list_item_column_2] = "s_select_list_item_column";
  statenames[E_s_select_list_item_column] = "s_select_list_item_column";
  statenames[ROOT_s_select_list_item_complex_expr] = NULL;
  statenames[AL_s_select_list_item_complex_expr] = NULL;
  statenames[S_s_select_list_item_complex_expr] = "s_select_list_item_complex_expr";
  statenames[S_s_select_list_item_complex_expr_1] = "s_select_list_item_complex_expr";
  statenames[S_s_select_list_item_complex_expr_2] = "s_select_list_item_complex_expr";
  statenames[E_s_select_list_item_complex_expr] = "s_select_list_item_complex_expr";
  statenames[ROOT_s_select_list_item_data] = NULL;
  statenames[AL_s_select_list_item_data] = NULL;
  statenames[S_s_select_list_item_data] = "s_select_list_item_data";
  statenames[S_s_select_list_item_data_1] = "s_select_list_item_data";
  statenames[S_s_select_list_item_data_2] = "s_select_list_item_data";
  statenames[E_s_select_list_item_data] = "s_select_list_item_data";
  statenames[ROOT_s_select_list_item_extend] = NULL;
  statenames[AL_s_select_list_item_extend] = NULL;
  statenames[S_s_select_list_item_extend] = "s_select_list_item_extend";
  statenames[S_s_select_list_item_extend_1] = "s_select_list_item_extend";
  statenames[S_s_select_list_item_extend_2] = "s_select_list_item_extend";
  statenames[E_s_select_list_item_extend] = "s_select_list_item_extend";
  statenames[ROOT_s_select_list_item_fcall] = NULL;
  statenames[AL_s_select_list_item_fcall] = NULL;
  statenames[S_s_select_list_item_fcall] = "s_select_list_item_fcall";
  statenames[S_s_select_list_item_fcall_1] = "s_select_list_item_fcall";
  statenames[S_s_select_list_item_fcall_2] = "s_select_list_item_fcall";
  statenames[E_s_select_list_item_fcall] = "s_select_list_item_fcall";
  statenames[ROOT_s_select_list_item_list] = NULL;
  statenames[AL_s_select_list_item_list] = NULL;
  statenames[S_s_select_list_item_list] = "s_select_list_item_list";
  statenames[S_s_select_list_item_list_1] = "s_select_list_item_list";
  statenames[S_s_select_list_item_list_2] = "s_select_list_item_list";
  statenames[E_s_select_list_item_list] = "s_select_list_item_list";
  statenames[ROOT_s_select_list_item_regex] = NULL;
  statenames[AL_s_select_list_item_regex] = NULL;
  statenames[S_s_select_list_item_regex] = "s_select_list_item_regex";
  statenames[S_s_select_list_item_regex_1] = "s_select_list_item_regex";
  statenames[S_s_select_list_item_regex_2] = "s_select_list_item_regex";
  statenames[E_s_select_list_item_regex] = "s_select_list_item_regex";
  statenames[ROOT_s_select_list_item_sli_expr] = NULL;
  statenames[AL_s_select_list_item_sli_expr] = NULL;
  statenames[S_s_select_list_item_sli_expr] = "s_select_list_item_sli_expr";
  statenames[S_s_select_list_item_sli_expr_1] = "s_select_list_item_sli_expr";
  statenames[S_s_select_list_item_sli_expr_2] = "s_select_list_item_sli_expr";
  statenames[E_s_select_list_item_sli_expr] = "s_select_list_item_sli_expr";
  statenames[ROOT_s_select_list_item_slil_expr] = NULL;
  statenames[AL_s_select_list_item_slil_expr] = NULL;
  statenames[S_s_select_list_item_slil_expr] = "s_select_list_item_slil_expr";
  statenames[S_s_select_list_item_slil_expr_1] = "s_select_list_item_slil_expr";
  statenames[S_s_select_list_item_slil_expr_2] = "s_select_list_item_slil_expr";
  statenames[E_s_select_list_item_slil_expr] = "s_select_list_item_slil_expr";
  statenames[ROOT_s_select_list_item_sq_expression] = NULL;
  statenames[AL_s_select_list_item_sq_expression] = NULL;
  statenames[S_s_select_list_item_sq_expression] = "s_select_list_item_sq_expression";
  statenames[S_s_select_list_item_sq_expression_1] = "s_select_list_item_sq_expression";
  statenames[S_s_select_list_item_sq_expression_2] = "s_select_list_item_sq_expression";
  statenames[E_s_select_list_item_sq_expression] = "s_select_list_item_sq_expression";
  statenames[ROOT_s_sli_case] = NULL;
  statenames[AL_s_sli_case] = NULL;
  statenames[S_s_sli_case] = "s_sli_case";
  statenames[S_s_sli_case_1] = "s_sli_case";
  statenames[S_s_sli_case_2] = "s_sli_case";
  statenames[E_s_sli_case] = "s_sli_case";
  statenames[ROOT_s_sli_case_element] = NULL;
  statenames[AL_s_sli_case_element] = NULL;
  statenames[S_s_sli_case_element] = "s_sli_case_element";
  statenames[S_s_sli_case_element_1] = "s_sli_case_element";
  statenames[S_s_sli_case_element_2] = "s_sli_case_element";
  statenames[E_s_sli_case_element] = "s_sli_case_element";
  statenames[ROOT_s_sli_cast] = NULL;
  statenames[AL_s_sli_cast] = NULL;
  statenames[S_s_sli_cast] = "s_sli_cast";
  statenames[S_s_sli_cast_1] = "s_sli_cast";
  statenames[S_s_sli_cast_2] = "s_sli_cast";
  statenames[E_s_sli_cast] = "s_sli_cast";
  statenames[ROOT_s_source_code] = NULL;
  statenames[AL_s_source_code] = NULL;
  statenames[S_s_source_code] = "s_source_code";
  statenames[S_s_source_code_1] = "s_source_code";
  statenames[S_s_source_code_2] = "s_source_code";
  statenames[E_s_source_code] = "s_source_code";
  statenames[ROOT_s_table] = NULL;
  statenames[AL_s_table] = NULL;
  statenames[S_s_table] = "s_table";
  statenames[S_s_table_1] = "s_table";
  statenames[S_s_table_2] = "s_table";
  statenames[E_s_table] = "s_table";
  statenames[ROOT_s_table_list] = NULL;
  statenames[AL_s_table_list] = NULL;
  statenames[S_s_table_list] = "s_table_list";
  statenames[S_s_table_list_1] = "s_table_list";
  statenames[S_s_table_list_2] = "s_table_list";
  statenames[E_s_table_list] = "s_table_list";
  statenames[ROOT_s_table_list_element] = NULL;
  statenames[AL_s_table_list_element] = NULL;
  statenames[S_s_table_list_element] = "s_table_list_element";
  statenames[S_s_table_list_element_1] = "s_table_list_element";
  statenames[S_s_table_list_element_2] = "s_table_list_element";
  statenames[E_s_table_list_element] = "s_table_list_element";
  statenames[ROOT_s_update_pair] = NULL;
  statenames[AL_s_update_pair] = NULL;
  statenames[S_s_update_pair] = "s_update_pair";
  statenames[S_s_update_pair_1] = "s_update_pair";
  statenames[S_s_update_pair_2] = "s_update_pair";
  statenames[E_s_update_pair] = "s_update_pair";
  statenames[ROOT_short] = NULL;
  statenames[AL_short] = NULL;
  statenames[E_short] = "short";
  statenames[ROOT_simple_variable] = NULL;
  statenames[AL_simple_variable] = NULL;
  statenames[E_simple_variable] = "simple_variable";
  statenames[ROOT_single_option] = NULL;
  statenames[AL_single_option] = NULL;
  statenames[S_single_option] = "single_option";
  statenames[S_single_option_1] = "single_option";
  statenames[S_single_option_2] = "single_option";
  statenames[E_single_option] = "single_option";
  statenames[ROOT_sq_subquery] = NULL;
  statenames[AL_sq_subquery] = NULL;
  statenames[S_sq_subquery] = "sq_subquery";
  statenames[S_sq_subquery_1] = "sq_subquery";
  statenames[S_sq_subquery_2] = "sq_subquery";
  statenames[E_sq_subquery] = "sq_subquery";
  statenames[ROOT_sql_statement] = NULL;
  statenames[AL_sql_statement] = NULL;
  statenames[S_sql_statement] = "sql_statement";
  statenames[S_sql_statement_1] = "sql_statement";
  statenames[S_sql_statement_2] = "sql_statement";
  statenames[E_sql_statement] = "sql_statement";
  statenames[ROOT_startrep] = NULL;
  statenames[AL_startrep] = NULL;
  statenames[S_startrep] = "startrep";
  statenames[S_startrep_1] = "startrep";
  statenames[S_startrep_2] = "startrep";
  statenames[E_startrep] = "startrep";
  statenames[ROOT_str] = NULL;
  statenames[AL_str] = NULL;
  statenames[E_str] = "str";
  statenames[ROOT_str_list] = NULL;
  statenames[AL_str_list] = NULL;
  statenames[S_str_list] = "str_list";
  statenames[S_str_list_1] = "str_list";
  statenames[S_str_list_2] = "str_list";
  statenames[E_str_list] = "str_list";
  statenames[ROOT_struct_alloc_arr_cmd] = NULL;
  statenames[AL_struct_alloc_arr_cmd] = NULL;
  statenames[S_struct_alloc_arr_cmd] = "struct_alloc_arr_cmd";
  statenames[S_struct_alloc_arr_cmd_1] = "struct_alloc_arr_cmd";
  statenames[S_struct_alloc_arr_cmd_2] = "struct_alloc_arr_cmd";
  statenames[E_struct_alloc_arr_cmd] = "struct_alloc_arr_cmd";
  statenames[ROOT_struct_at_term_cmd] = NULL;
  statenames[AL_struct_at_term_cmd] = NULL;
  statenames[E_struct_at_term_cmd] = "struct_at_term_cmd";
  statenames[ROOT_struct_call_cmd] = NULL;
  statenames[AL_struct_call_cmd] = NULL;
  statenames[S_struct_call_cmd] = "struct_call_cmd";
  statenames[S_struct_call_cmd_1] = "struct_call_cmd";
  statenames[S_struct_call_cmd_2] = "struct_call_cmd";
  statenames[E_struct_call_cmd] = "struct_call_cmd";
  statenames[ROOT_struct_call_shared_cmd] = NULL;
  statenames[AL_struct_call_shared_cmd] = NULL;
  statenames[E_struct_call_shared_cmd] = "struct_call_shared_cmd";
  statenames[ROOT_struct_cancel_cmd] = NULL;
  statenames[AL_struct_cancel_cmd] = NULL;
  statenames[E_struct_cancel_cmd] = "struct_cancel_cmd";
  statenames[ROOT_struct_case_cmd] = NULL;
  statenames[AL_struct_case_cmd] = NULL;
  statenames[S_struct_case_cmd] = "struct_case_cmd";
  statenames[S_struct_case_cmd_1] = "struct_case_cmd";
  statenames[S_struct_case_cmd_2] = "struct_case_cmd";
  statenames[E_struct_case_cmd] = "struct_case_cmd";
  statenames[ROOT_struct_check_menu_cmd] = NULL;
  statenames[AL_struct_check_menu_cmd] = NULL;
  statenames[S_struct_check_menu_cmd] = "struct_check_menu_cmd";
  statenames[S_struct_check_menu_cmd_1] = "struct_check_menu_cmd";
  statenames[S_struct_check_menu_cmd_2] = "struct_check_menu_cmd";
  statenames[E_struct_check_menu_cmd] = "struct_check_menu_cmd";
  statenames[ROOT_struct_clear_cmd] = NULL;
  statenames[AL_struct_clear_cmd] = NULL;
  statenames[S_struct_clear_cmd] = "struct_clear_cmd";
  statenames[S_struct_clear_cmd_1] = "struct_clear_cmd";
  statenames[S_struct_clear_cmd_2] = "struct_clear_cmd";
  statenames[E_struct_clear_cmd] = "struct_clear_cmd";
  statenames[ROOT_struct_close_cmd] = NULL;
  statenames[AL_struct_close_cmd] = NULL;
  statenames[S_struct_close_cmd] = "struct_close_cmd";
  statenames[S_struct_close_cmd_1] = "struct_close_cmd";
  statenames[S_struct_close_cmd_2] = "struct_close_cmd";
  statenames[E_struct_close_cmd] = "struct_close_cmd";
  statenames[ROOT_struct_close_sql_cmd] = NULL;
  statenames[AL_struct_close_sql_cmd] = NULL;
  statenames[S_struct_close_sql_cmd] = "struct_close_sql_cmd";
  statenames[S_struct_close_sql_cmd_1] = "struct_close_sql_cmd";
  statenames[S_struct_close_sql_cmd_2] = "struct_close_sql_cmd";
  statenames[E_struct_close_sql_cmd] = "struct_close_sql_cmd";
  statenames[ROOT_struct_code_cmd] = NULL;
  statenames[AL_struct_code_cmd] = NULL;
  statenames[E_struct_code_cmd] = "struct_code_cmd";
  statenames[ROOT_struct_connect_cmd] = NULL;
  statenames[AL_struct_connect_cmd] = NULL;
  statenames[S_struct_connect_cmd] = "struct_connect_cmd";
  statenames[S_struct_connect_cmd_1] = "struct_connect_cmd";
  statenames[S_struct_connect_cmd_2] = "struct_connect_cmd";
  statenames[E_struct_connect_cmd] = "struct_connect_cmd";
  statenames[ROOT_struct_construct_cmd] = NULL;
  statenames[AL_struct_construct_cmd] = NULL;
  statenames[S_struct_construct_cmd] = "struct_construct_cmd";
  statenames[S_struct_construct_cmd_1] = "struct_construct_cmd";
  statenames[S_struct_construct_cmd_2] = "struct_construct_cmd";
  statenames[E_struct_construct_cmd] = "struct_construct_cmd";
  statenames[ROOT_struct_continue_cmd] = NULL;
  statenames[AL_struct_continue_cmd] = NULL;
  statenames[E_struct_continue_cmd] = "struct_continue_cmd";
  statenames[ROOT_struct_convert_cmd] = NULL;
  statenames[AL_struct_convert_cmd] = NULL;
  statenames[S_struct_convert_cmd] = "struct_convert_cmd";
  statenames[S_struct_convert_cmd_1] = "struct_convert_cmd";
  statenames[S_struct_convert_cmd_2] = "struct_convert_cmd";
  statenames[E_struct_convert_cmd] = "struct_convert_cmd";
  statenames[ROOT_struct_current_win_cmd] = NULL;
  statenames[AL_struct_current_win_cmd] = NULL;
  statenames[S_struct_current_win_cmd] = "struct_current_win_cmd";
  statenames[S_struct_current_win_cmd_1] = "struct_current_win_cmd";
  statenames[S_struct_current_win_cmd_2] = "struct_current_win_cmd";
  statenames[E_struct_current_win_cmd] = "struct_current_win_cmd";
  statenames[ROOT_struct_dealloc_arr_cmd] = NULL;
  statenames[AL_struct_dealloc_arr_cmd] = NULL;
  statenames[S_struct_dealloc_arr_cmd] = "struct_dealloc_arr_cmd";
  statenames[S_struct_dealloc_arr_cmd_1] = "struct_dealloc_arr_cmd";
  statenames[S_struct_dealloc_arr_cmd_2] = "struct_dealloc_arr_cmd";
  statenames[E_struct_dealloc_arr_cmd] = "struct_dealloc_arr_cmd";
  statenames[ROOT_struct_declare_cmd] = NULL;
  statenames[AL_struct_declare_cmd] = NULL;
  statenames[S_struct_declare_cmd] = "struct_declare_cmd";
  statenames[S_struct_declare_cmd_1] = "struct_declare_cmd";
  statenames[S_struct_declare_cmd_2] = "struct_declare_cmd";
  statenames[E_struct_declare_cmd] = "struct_declare_cmd";
  statenames[ROOT_struct_defer_cmd] = NULL;
  statenames[AL_struct_defer_cmd] = NULL;
  statenames[E_struct_defer_cmd] = "struct_defer_cmd";
  statenames[ROOT_struct_delete_cmd] = NULL;
  statenames[AL_struct_delete_cmd] = NULL;
  statenames[S_struct_delete_cmd] = "struct_delete_cmd";
  statenames[S_struct_delete_cmd_1] = "struct_delete_cmd";
  statenames[S_struct_delete_cmd_2] = "struct_delete_cmd";
  statenames[E_struct_delete_cmd] = "struct_delete_cmd";
  statenames[ROOT_struct_disable_cmd] = NULL;
  statenames[AL_struct_disable_cmd] = NULL;
  statenames[S_struct_disable_cmd] = "struct_disable_cmd";
  statenames[S_struct_disable_cmd_1] = "struct_disable_cmd";
  statenames[S_struct_disable_cmd_2] = "struct_disable_cmd";
  statenames[E_struct_disable_cmd] = "struct_disable_cmd";
  statenames[ROOT_struct_disable_form_cmd] = NULL;
  statenames[AL_struct_disable_form_cmd] = NULL;
  statenames[S_struct_disable_form_cmd] = "struct_disable_form_cmd";
  statenames[S_struct_disable_form_cmd_1] = "struct_disable_form_cmd";
  statenames[S_struct_disable_form_cmd_2] = "struct_disable_form_cmd";
  statenames[E_struct_disable_form_cmd] = "struct_disable_form_cmd";
  statenames[ROOT_struct_disable_menu_cmd] = NULL;
  statenames[AL_struct_disable_menu_cmd] = NULL;
  statenames[S_struct_disable_menu_cmd] = "struct_disable_menu_cmd";
  statenames[S_struct_disable_menu_cmd_1] = "struct_disable_menu_cmd";
  statenames[S_struct_disable_menu_cmd_2] = "struct_disable_menu_cmd";
  statenames[E_struct_disable_menu_cmd] = "struct_disable_menu_cmd";
  statenames[ROOT_struct_display_array_cmd] = NULL;
  statenames[AL_struct_display_array_cmd] = NULL;
  statenames[S_struct_display_array_cmd] = "struct_display_array_cmd";
  statenames[S_struct_display_array_cmd_1] = "struct_display_array_cmd";
  statenames[S_struct_display_array_cmd_2] = "struct_display_array_cmd";
  statenames[E_struct_display_array_cmd] = "struct_display_array_cmd";
  statenames[ROOT_struct_display_b_n_cmd] = NULL;
  statenames[AL_struct_display_b_n_cmd] = NULL;
  statenames[S_struct_display_b_n_cmd] = "struct_display_b_n_cmd";
  statenames[S_struct_display_b_n_cmd_1] = "struct_display_b_n_cmd";
  statenames[S_struct_display_b_n_cmd_2] = "struct_display_b_n_cmd";
  statenames[E_struct_display_b_n_cmd] = "struct_display_b_n_cmd";
  statenames[ROOT_struct_display_cmd] = NULL;
  statenames[AL_struct_display_cmd] = NULL;
  statenames[S_struct_display_cmd] = "struct_display_cmd";
  statenames[S_struct_display_cmd_1] = "struct_display_cmd";
  statenames[S_struct_display_cmd_2] = "struct_display_cmd";
  statenames[E_struct_display_cmd] = "struct_display_cmd";
  statenames[ROOT_struct_display_form_cmd] = NULL;
  statenames[AL_struct_display_form_cmd] = NULL;
  statenames[S_struct_display_form_cmd] = "struct_display_form_cmd";
  statenames[S_struct_display_form_cmd_1] = "struct_display_form_cmd";
  statenames[S_struct_display_form_cmd_2] = "struct_display_form_cmd";
  statenames[E_struct_display_form_cmd] = "struct_display_form_cmd";
  statenames[ROOT_struct_enable_cmd] = NULL;
  statenames[AL_struct_enable_cmd] = NULL;
  statenames[S_struct_enable_cmd] = "struct_enable_cmd";
  statenames[S_struct_enable_cmd_1] = "struct_enable_cmd";
  statenames[S_struct_enable_cmd_2] = "struct_enable_cmd";
  statenames[E_struct_enable_cmd] = "struct_enable_cmd";
  statenames[ROOT_struct_enable_form_cmd] = NULL;
  statenames[AL_struct_enable_form_cmd] = NULL;
  statenames[S_struct_enable_form_cmd] = "struct_enable_form_cmd";
  statenames[S_struct_enable_form_cmd_1] = "struct_enable_form_cmd";
  statenames[S_struct_enable_form_cmd_2] = "struct_enable_form_cmd";
  statenames[E_struct_enable_form_cmd] = "struct_enable_form_cmd";
  statenames[ROOT_struct_enable_menu_cmd] = NULL;
  statenames[AL_struct_enable_menu_cmd] = NULL;
  statenames[S_struct_enable_menu_cmd] = "struct_enable_menu_cmd";
  statenames[S_struct_enable_menu_cmd_1] = "struct_enable_menu_cmd";
  statenames[S_struct_enable_menu_cmd_2] = "struct_enable_menu_cmd";
  statenames[E_struct_enable_menu_cmd] = "struct_enable_menu_cmd";
  statenames[ROOT_struct_error_cmd] = NULL;
  statenames[AL_struct_error_cmd] = NULL;
  statenames[S_struct_error_cmd] = "struct_error_cmd";
  statenames[S_struct_error_cmd_1] = "struct_error_cmd";
  statenames[S_struct_error_cmd_2] = "struct_error_cmd";
  statenames[E_struct_error_cmd] = "struct_error_cmd";
  statenames[ROOT_struct_execute_cmd] = NULL;
  statenames[AL_struct_execute_cmd] = NULL;
  statenames[S_struct_execute_cmd] = "struct_execute_cmd";
  statenames[S_struct_execute_cmd_1] = "struct_execute_cmd";
  statenames[S_struct_execute_cmd_2] = "struct_execute_cmd";
  statenames[E_struct_execute_cmd] = "struct_execute_cmd";
  statenames[ROOT_struct_execute_immediate_cmd] = NULL;
  statenames[AL_struct_execute_immediate_cmd] = NULL;
  statenames[S_struct_execute_immediate_cmd] = "struct_execute_immediate_cmd";
  statenames[S_struct_execute_immediate_cmd_1] = "struct_execute_immediate_cmd";
  statenames[S_struct_execute_immediate_cmd_2] = "struct_execute_immediate_cmd";
  statenames[E_struct_execute_immediate_cmd] = "struct_execute_immediate_cmd";
  statenames[ROOT_struct_exit_prog_cmd] = NULL;
  statenames[AL_struct_exit_prog_cmd] = NULL;
  statenames[S_struct_exit_prog_cmd] = "struct_exit_prog_cmd";
  statenames[S_struct_exit_prog_cmd_1] = "struct_exit_prog_cmd";
  statenames[S_struct_exit_prog_cmd_2] = "struct_exit_prog_cmd";
  statenames[E_struct_exit_prog_cmd] = "struct_exit_prog_cmd";
  statenames[ROOT_struct_ext_cmd] = NULL;
  statenames[AL_struct_ext_cmd] = NULL;
  statenames[E_struct_ext_cmd] = "struct_ext_cmd";
  statenames[ROOT_struct_fetch_cmd] = NULL;
  statenames[AL_struct_fetch_cmd] = NULL;
  statenames[S_struct_fetch_cmd] = "struct_fetch_cmd";
  statenames[S_struct_fetch_cmd_1] = "struct_fetch_cmd";
  statenames[S_struct_fetch_cmd_2] = "struct_fetch_cmd";
  statenames[E_struct_fetch_cmd] = "struct_fetch_cmd";
  statenames[ROOT_struct_finish_cmd] = NULL;
  statenames[AL_struct_finish_cmd] = NULL;
  statenames[S_struct_finish_cmd] = "struct_finish_cmd";
  statenames[S_struct_finish_cmd_1] = "struct_finish_cmd";
  statenames[S_struct_finish_cmd_2] = "struct_finish_cmd";
  statenames[E_struct_finish_cmd] = "struct_finish_cmd";
  statenames[ROOT_struct_flush_cmd] = NULL;
  statenames[AL_struct_flush_cmd] = NULL;
  statenames[S_struct_flush_cmd] = "struct_flush_cmd";
  statenames[S_struct_flush_cmd_1] = "struct_flush_cmd";
  statenames[S_struct_flush_cmd_2] = "struct_flush_cmd";
  statenames[E_struct_flush_cmd] = "struct_flush_cmd";
  statenames[ROOT_struct_for_cmd] = NULL;
  statenames[AL_struct_for_cmd] = NULL;
  statenames[S_struct_for_cmd] = "struct_for_cmd";
  statenames[S_struct_for_cmd_1] = "struct_for_cmd";
  statenames[S_struct_for_cmd_2] = "struct_for_cmd";
  statenames[E_struct_for_cmd] = "struct_for_cmd";
  statenames[ROOT_struct_foreach_cmd] = NULL;
  statenames[AL_struct_foreach_cmd] = NULL;
  statenames[S_struct_foreach_cmd] = "struct_foreach_cmd";
  statenames[S_struct_foreach_cmd_1] = "struct_foreach_cmd";
  statenames[S_struct_foreach_cmd_2] = "struct_foreach_cmd";
  statenames[E_struct_foreach_cmd] = "struct_foreach_cmd";
  statenames[ROOT_struct_free_cmd] = NULL;
  statenames[AL_struct_free_cmd] = NULL;
  statenames[S_struct_free_cmd] = "struct_free_cmd";
  statenames[S_struct_free_cmd_1] = "struct_free_cmd";
  statenames[S_struct_free_cmd_2] = "struct_free_cmd";
  statenames[E_struct_free_cmd] = "struct_free_cmd";
  statenames[ROOT_struct_free_rep_cmd] = NULL;
  statenames[AL_struct_free_rep_cmd] = NULL;
  statenames[E_struct_free_rep_cmd] = "struct_free_rep_cmd";
  statenames[ROOT_struct_goto_cmd] = NULL;
  statenames[AL_struct_goto_cmd] = NULL;
  statenames[E_struct_goto_cmd] = "struct_goto_cmd";
  statenames[ROOT_struct_hide_cmd] = NULL;
  statenames[AL_struct_hide_cmd] = NULL;
  statenames[S_struct_hide_cmd] = "struct_hide_cmd";
  statenames[S_struct_hide_cmd_1] = "struct_hide_cmd";
  statenames[S_struct_hide_cmd_2] = "struct_hide_cmd";
  statenames[E_struct_hide_cmd] = "struct_hide_cmd";
  statenames[ROOT_struct_hide_option_cmd] = NULL;
  statenames[AL_struct_hide_option_cmd] = NULL;
  statenames[S_struct_hide_option_cmd] = "struct_hide_option_cmd";
  statenames[S_struct_hide_option_cmd_1] = "struct_hide_option_cmd";
  statenames[S_struct_hide_option_cmd_2] = "struct_hide_option_cmd";
  statenames[E_struct_hide_option_cmd] = "struct_hide_option_cmd";
  statenames[ROOT_struct_if_cmd] = NULL;
  statenames[AL_struct_if_cmd] = NULL;
  statenames[S_struct_if_cmd] = "struct_if_cmd";
  statenames[S_struct_if_cmd_1] = "struct_if_cmd";
  statenames[S_struct_if_cmd_2] = "struct_if_cmd";
  statenames[E_struct_if_cmd] = "struct_if_cmd";
  statenames[ROOT_struct_init_cmd] = NULL;
  statenames[AL_struct_init_cmd] = NULL;
  statenames[S_struct_init_cmd] = "struct_init_cmd";
  statenames[S_struct_init_cmd_1] = "struct_init_cmd";
  statenames[S_struct_init_cmd_2] = "struct_init_cmd";
  statenames[E_struct_init_cmd] = "struct_init_cmd";
  statenames[ROOT_struct_input_array_cmd] = NULL;
  statenames[AL_struct_input_array_cmd] = NULL;
  statenames[S_struct_input_array_cmd] = "struct_input_array_cmd";
  statenames[S_struct_input_array_cmd_1] = "struct_input_array_cmd";
  statenames[S_struct_input_array_cmd_2] = "struct_input_array_cmd";
  statenames[E_struct_input_array_cmd] = "struct_input_array_cmd";
  statenames[ROOT_struct_input_cmd] = NULL;
  statenames[AL_struct_input_cmd] = NULL;
  statenames[S_struct_input_cmd] = "struct_input_cmd";
  statenames[S_struct_input_cmd_1] = "struct_input_cmd";
  statenames[S_struct_input_cmd_2] = "struct_input_cmd";
  statenames[E_struct_input_cmd] = "struct_input_cmd";
  statenames[ROOT_struct_insert_cmd] = NULL;
  statenames[AL_struct_insert_cmd] = NULL;
  statenames[S_struct_insert_cmd] = "struct_insert_cmd";
  statenames[S_struct_insert_cmd_1] = "struct_insert_cmd";
  statenames[S_struct_insert_cmd_2] = "struct_insert_cmd";
  statenames[E_struct_insert_cmd] = "struct_insert_cmd";
  statenames[ROOT_struct_label_cmd] = NULL;
  statenames[AL_struct_label_cmd] = NULL;
  statenames[E_struct_label_cmd] = "struct_label_cmd";
  statenames[ROOT_struct_let_cmd] = NULL;
  statenames[AL_struct_let_cmd] = NULL;
  statenames[S_struct_let_cmd] = "struct_let_cmd";
  statenames[S_struct_let_cmd_1] = "struct_let_cmd";
  statenames[S_struct_let_cmd_2] = "struct_let_cmd";
  statenames[E_struct_let_cmd] = "struct_let_cmd";
  statenames[ROOT_struct_lint_expect_cmd] = NULL;
  statenames[AL_struct_lint_expect_cmd] = NULL;
  statenames[S_struct_lint_expect_cmd] = "struct_lint_expect_cmd";
  statenames[S_struct_lint_expect_cmd_1] = "struct_lint_expect_cmd";
  statenames[S_struct_lint_expect_cmd_2] = "struct_lint_expect_cmd";
  statenames[E_struct_lint_expect_cmd] = "struct_lint_expect_cmd";
  statenames[ROOT_struct_lint_ignore_cmd] = NULL;
  statenames[AL_struct_lint_ignore_cmd] = NULL;
  statenames[S_struct_lint_ignore_cmd] = "struct_lint_ignore_cmd";
  statenames[S_struct_lint_ignore_cmd_1] = "struct_lint_ignore_cmd";
  statenames[S_struct_lint_ignore_cmd_2] = "struct_lint_ignore_cmd";
  statenames[E_struct_lint_ignore_cmd] = "struct_lint_ignore_cmd";
  statenames[ROOT_struct_load_cmd] = NULL;
  statenames[AL_struct_load_cmd] = NULL;
  statenames[S_struct_load_cmd] = "struct_load_cmd";
  statenames[S_struct_load_cmd_1] = "struct_load_cmd";
  statenames[S_struct_load_cmd_2] = "struct_load_cmd";
  statenames[E_struct_load_cmd] = "struct_load_cmd";
  statenames[ROOT_struct_locate_cmd] = NULL;
  statenames[AL_struct_locate_cmd] = NULL;
  statenames[S_struct_locate_cmd] = "struct_locate_cmd";
  statenames[S_struct_locate_cmd_1] = "struct_locate_cmd";
  statenames[S_struct_locate_cmd_2] = "struct_locate_cmd";
  statenames[E_struct_locate_cmd] = "struct_locate_cmd";
  statenames[ROOT_struct_menu_cmd] = NULL;
  statenames[AL_struct_menu_cmd] = NULL;
  statenames[S_struct_menu_cmd] = "struct_menu_cmd";
  statenames[S_struct_menu_cmd_1] = "struct_menu_cmd";
  statenames[S_struct_menu_cmd_2] = "struct_menu_cmd";
  statenames[E_struct_menu_cmd] = "struct_menu_cmd";
  statenames[ROOT_struct_message_cmd] = NULL;
  statenames[AL_struct_message_cmd] = NULL;
  statenames[S_struct_message_cmd] = "struct_message_cmd";
  statenames[S_struct_message_cmd_1] = "struct_message_cmd";
  statenames[S_struct_message_cmd_2] = "struct_message_cmd";
  statenames[E_struct_message_cmd] = "struct_message_cmd";
  statenames[ROOT_struct_move_cmd] = NULL;
  statenames[AL_struct_move_cmd] = NULL;
  statenames[S_struct_move_cmd] = "struct_move_cmd";
  statenames[S_struct_move_cmd_1] = "struct_move_cmd";
  statenames[S_struct_move_cmd_2] = "struct_move_cmd";
  statenames[E_struct_move_cmd] = "struct_move_cmd";
  statenames[ROOT_struct_msg_box_cmd] = NULL;
  statenames[AL_struct_msg_box_cmd] = NULL;
  statenames[S_struct_msg_box_cmd] = "struct_msg_box_cmd";
  statenames[S_struct_msg_box_cmd_1] = "struct_msg_box_cmd";
  statenames[S_struct_msg_box_cmd_2] = "struct_msg_box_cmd";
  statenames[E_struct_msg_box_cmd] = "struct_msg_box_cmd";
  statenames[ROOT_struct_need_cmd] = NULL;
  statenames[AL_struct_need_cmd] = NULL;
  statenames[S_struct_need_cmd] = "struct_need_cmd";
  statenames[S_struct_need_cmd_1] = "struct_need_cmd";
  statenames[S_struct_need_cmd_2] = "struct_need_cmd";
  statenames[E_struct_need_cmd] = "struct_need_cmd";
  statenames[ROOT_struct_next_field_cmd] = NULL;
  statenames[AL_struct_next_field_cmd] = NULL;
  statenames[S_struct_next_field_cmd] = "struct_next_field_cmd";
  statenames[S_struct_next_field_cmd_1] = "struct_next_field_cmd";
  statenames[S_struct_next_field_cmd_2] = "struct_next_field_cmd";
  statenames[E_struct_next_field_cmd] = "struct_next_field_cmd";
  statenames[ROOT_struct_next_form_cmd] = NULL;
  statenames[AL_struct_next_form_cmd] = NULL;
  statenames[E_struct_next_form_cmd] = "struct_next_form_cmd";
  statenames[ROOT_struct_next_option_cmd] = NULL;
  statenames[AL_struct_next_option_cmd] = NULL;
  statenames[S_struct_next_option_cmd] = "struct_next_option_cmd";
  statenames[S_struct_next_option_cmd_1] = "struct_next_option_cmd";
  statenames[S_struct_next_option_cmd_2] = "struct_next_option_cmd";
  statenames[E_struct_next_option_cmd] = "struct_next_option_cmd";
  statenames[ROOT_struct_open_cursor_cmd] = NULL;
  statenames[AL_struct_open_cursor_cmd] = NULL;
  statenames[S_struct_open_cursor_cmd] = "struct_open_cursor_cmd";
  statenames[S_struct_open_cursor_cmd_1] = "struct_open_cursor_cmd";
  statenames[S_struct_open_cursor_cmd_2] = "struct_open_cursor_cmd";
  statenames[E_struct_open_cursor_cmd] = "struct_open_cursor_cmd";
  statenames[ROOT_struct_open_form_cmd] = NULL;
  statenames[AL_struct_open_form_cmd] = NULL;
  statenames[S_struct_open_form_cmd] = "struct_open_form_cmd";
  statenames[S_struct_open_form_cmd_1] = "struct_open_form_cmd";
  statenames[S_struct_open_form_cmd_2] = "struct_open_form_cmd";
  statenames[E_struct_open_form_cmd] = "struct_open_form_cmd";
  statenames[ROOT_struct_open_form_gui_cmd] = NULL;
  statenames[AL_struct_open_form_gui_cmd] = NULL;
  statenames[S_struct_open_form_gui_cmd] = "struct_open_form_gui_cmd";
  statenames[S_struct_open_form_gui_cmd_1] = "struct_open_form_gui_cmd";
  statenames[S_struct_open_form_gui_cmd_2] = "struct_open_form_gui_cmd";
  statenames[E_struct_open_form_gui_cmd] = "struct_open_form_gui_cmd";
  statenames[ROOT_struct_open_statusbox_cmd] = NULL;
  statenames[AL_struct_open_statusbox_cmd] = NULL;
  statenames[S_struct_open_statusbox_cmd] = "struct_open_statusbox_cmd";
  statenames[S_struct_open_statusbox_cmd_1] = "struct_open_statusbox_cmd";
  statenames[S_struct_open_statusbox_cmd_2] = "struct_open_statusbox_cmd";
  statenames[E_struct_open_statusbox_cmd] = "struct_open_statusbox_cmd";
  statenames[ROOT_struct_open_window_cmd] = NULL;
  statenames[AL_struct_open_window_cmd] = NULL;
  statenames[S_struct_open_window_cmd] = "struct_open_window_cmd";
  statenames[S_struct_open_window_cmd_1] = "struct_open_window_cmd";
  statenames[S_struct_open_window_cmd_2] = "struct_open_window_cmd";
  statenames[E_struct_open_window_cmd] = "struct_open_window_cmd";
  statenames[ROOT_struct_options_cmd] = NULL;
  statenames[AL_struct_options_cmd] = NULL;
  statenames[S_struct_options_cmd] = "struct_options_cmd";
  statenames[S_struct_options_cmd_1] = "struct_options_cmd";
  statenames[S_struct_options_cmd_2] = "struct_options_cmd";
  statenames[E_struct_options_cmd] = "struct_options_cmd";
  statenames[ROOT_struct_output_cmd] = NULL;
  statenames[AL_struct_output_cmd] = NULL;
  statenames[S_struct_output_cmd] = "struct_output_cmd";
  statenames[S_struct_output_cmd_1] = "struct_output_cmd";
  statenames[S_struct_output_cmd_2] = "struct_output_cmd";
  statenames[E_struct_output_cmd] = "struct_output_cmd";
  statenames[ROOT_struct_pause_cmd] = NULL;
  statenames[AL_struct_pause_cmd] = NULL;
  statenames[S_struct_pause_cmd] = "struct_pause_cmd";
  statenames[S_struct_pause_cmd_1] = "struct_pause_cmd";
  statenames[S_struct_pause_cmd_2] = "struct_pause_cmd";
  statenames[E_struct_pause_cmd] = "struct_pause_cmd";
  statenames[ROOT_struct_pdf_call_cmd] = NULL;
  statenames[AL_struct_pdf_call_cmd] = NULL;
  statenames[S_struct_pdf_call_cmd] = "struct_pdf_call_cmd";
  statenames[S_struct_pdf_call_cmd_1] = "struct_pdf_call_cmd";
  statenames[S_struct_pdf_call_cmd_2] = "struct_pdf_call_cmd";
  statenames[E_struct_pdf_call_cmd] = "struct_pdf_call_cmd";
  statenames[ROOT_struct_prepare_cmd] = NULL;
  statenames[AL_struct_prepare_cmd] = NULL;
  statenames[S_struct_prepare_cmd] = "struct_prepare_cmd";
  statenames[S_struct_prepare_cmd_1] = "struct_prepare_cmd";
  statenames[S_struct_prepare_cmd_2] = "struct_prepare_cmd";
  statenames[E_struct_prepare_cmd] = "struct_prepare_cmd";
  statenames[ROOT_struct_print_cmd] = NULL;
  statenames[AL_struct_print_cmd] = NULL;
  statenames[S_struct_print_cmd] = "struct_print_cmd";
  statenames[S_struct_print_cmd_1] = "struct_print_cmd";
  statenames[S_struct_print_cmd_2] = "struct_print_cmd";
  statenames[E_struct_print_cmd] = "struct_print_cmd";
  statenames[ROOT_struct_print_file_cmd] = NULL;
  statenames[AL_struct_print_file_cmd] = NULL;
  statenames[S_struct_print_file_cmd] = "struct_print_file_cmd";
  statenames[S_struct_print_file_cmd_1] = "struct_print_file_cmd";
  statenames[S_struct_print_file_cmd_2] = "struct_print_file_cmd";
  statenames[E_struct_print_file_cmd] = "struct_print_file_cmd";
  statenames[ROOT_struct_print_img_cmd] = NULL;
  statenames[AL_struct_print_img_cmd] = NULL;
  statenames[S_struct_print_img_cmd] = "struct_print_img_cmd";
  statenames[S_struct_print_img_cmd_1] = "struct_print_img_cmd";
  statenames[S_struct_print_img_cmd_2] = "struct_print_img_cmd";
  statenames[E_struct_print_img_cmd] = "struct_print_img_cmd";
  statenames[ROOT_struct_prompt_cmd] = NULL;
  statenames[AL_struct_prompt_cmd] = NULL;
  statenames[S_struct_prompt_cmd] = "struct_prompt_cmd";
  statenames[S_struct_prompt_cmd_1] = "struct_prompt_cmd";
  statenames[S_struct_prompt_cmd_2] = "struct_prompt_cmd";
  statenames[E_struct_prompt_cmd] = "struct_prompt_cmd";
  statenames[ROOT_struct_put_cmd] = NULL;
  statenames[AL_struct_put_cmd] = NULL;
  statenames[S_struct_put_cmd] = "struct_put_cmd";
  statenames[S_struct_put_cmd_1] = "struct_put_cmd";
  statenames[S_struct_put_cmd_2] = "struct_put_cmd";
  statenames[E_struct_put_cmd] = "struct_put_cmd";
  statenames[ROOT_struct_resize_arr_cmd] = NULL;
  statenames[AL_struct_resize_arr_cmd] = NULL;
  statenames[S_struct_resize_arr_cmd] = "struct_resize_arr_cmd";
  statenames[S_struct_resize_arr_cmd_1] = "struct_resize_arr_cmd";
  statenames[S_struct_resize_arr_cmd_2] = "struct_resize_arr_cmd";
  statenames[E_struct_resize_arr_cmd] = "struct_resize_arr_cmd";
  statenames[ROOT_struct_return_cmd] = NULL;
  statenames[AL_struct_return_cmd] = NULL;
  statenames[S_struct_return_cmd] = "struct_return_cmd";
  statenames[S_struct_return_cmd_1] = "struct_return_cmd";
  statenames[S_struct_return_cmd_2] = "struct_return_cmd";
  statenames[E_struct_return_cmd] = "struct_return_cmd";
  statenames[ROOT_struct_run_cmd] = NULL;
  statenames[AL_struct_run_cmd] = NULL;
  statenames[S_struct_run_cmd] = "struct_run_cmd";
  statenames[S_struct_run_cmd_1] = "struct_run_cmd";
  statenames[S_struct_run_cmd_2] = "struct_run_cmd";
  statenames[E_struct_run_cmd] = "struct_run_cmd";
  statenames[ROOT_struct_run_waiting_for_cmd] = NULL;
  statenames[AL_struct_run_waiting_for_cmd] = NULL;
  statenames[S_struct_run_waiting_for_cmd] = "struct_run_waiting_for_cmd";
  statenames[S_struct_run_waiting_for_cmd_1] = "struct_run_waiting_for_cmd";
  statenames[S_struct_run_waiting_for_cmd_2] = "struct_run_waiting_for_cmd";
  statenames[E_struct_run_waiting_for_cmd] = "struct_run_waiting_for_cmd";
  statenames[ROOT_struct_scroll_cmd] = NULL;
  statenames[AL_struct_scroll_cmd] = NULL;
  statenames[S_struct_scroll_cmd] = "struct_scroll_cmd";
  statenames[S_struct_scroll_cmd_1] = "struct_scroll_cmd";
  statenames[S_struct_scroll_cmd_2] = "struct_scroll_cmd";
  statenames[E_struct_scroll_cmd] = "struct_scroll_cmd";
  statenames[ROOT_struct_select_cmd] = NULL;
  statenames[AL_struct_select_cmd] = NULL;
  statenames[S_struct_select_cmd] = "struct_select_cmd";
  statenames[S_struct_select_cmd_1] = "struct_select_cmd";
  statenames[S_struct_select_cmd_2] = "struct_select_cmd";
  statenames[E_struct_select_cmd] = "struct_select_cmd";
  statenames[ROOT_struct_set_database_cmd] = NULL;
  statenames[AL_struct_set_database_cmd] = NULL;
  statenames[S_struct_set_database_cmd] = "struct_set_database_cmd";
  statenames[S_struct_set_database_cmd_1] = "struct_set_database_cmd";
  statenames[S_struct_set_database_cmd_2] = "struct_set_database_cmd";
  statenames[E_struct_set_database_cmd] = "struct_set_database_cmd";
  statenames[ROOT_struct_set_session_cmd] = NULL;
  statenames[AL_struct_set_session_cmd] = NULL;
  statenames[S_struct_set_session_cmd] = "struct_set_session_cmd";
  statenames[S_struct_set_session_cmd_1] = "struct_set_session_cmd";
  statenames[S_struct_set_session_cmd_2] = "struct_set_session_cmd";
  statenames[E_struct_set_session_cmd] = "struct_set_session_cmd";
  statenames[ROOT_struct_show_cmd] = NULL;
  statenames[AL_struct_show_cmd] = NULL;
  statenames[S_struct_show_cmd] = "struct_show_cmd";
  statenames[S_struct_show_cmd_1] = "struct_show_cmd";
  statenames[S_struct_show_cmd_2] = "struct_show_cmd";
  statenames[E_struct_show_cmd] = "struct_show_cmd";
  statenames[ROOT_struct_show_menu_cmd] = NULL;
  statenames[AL_struct_show_menu_cmd] = NULL;
  statenames[S_struct_show_menu_cmd] = "struct_show_menu_cmd";
  statenames[S_struct_show_menu_cmd_1] = "struct_show_menu_cmd";
  statenames[S_struct_show_menu_cmd_2] = "struct_show_menu_cmd";
  statenames[E_struct_show_menu_cmd] = "struct_show_menu_cmd";
  statenames[ROOT_struct_show_option_cmd] = NULL;
  statenames[AL_struct_show_option_cmd] = NULL;
  statenames[S_struct_show_option_cmd] = "struct_show_option_cmd";
  statenames[S_struct_show_option_cmd_1] = "struct_show_option_cmd";
  statenames[S_struct_show_option_cmd_2] = "struct_show_option_cmd";
  statenames[E_struct_show_option_cmd] = "struct_show_option_cmd";
  statenames[ROOT_struct_skip_by_cmd] = NULL;
  statenames[AL_struct_skip_by_cmd] = NULL;
  statenames[S_struct_skip_by_cmd] = "struct_skip_by_cmd";
  statenames[S_struct_skip_by_cmd_1] = "struct_skip_by_cmd";
  statenames[S_struct_skip_by_cmd_2] = "struct_skip_by_cmd";
  statenames[E_struct_skip_by_cmd] = "struct_skip_by_cmd";
  statenames[ROOT_struct_skip_cmd] = NULL;
  statenames[AL_struct_skip_cmd] = NULL;
  statenames[S_struct_skip_cmd] = "struct_skip_cmd";
  statenames[S_struct_skip_cmd_1] = "struct_skip_cmd";
  statenames[S_struct_skip_cmd_2] = "struct_skip_cmd";
  statenames[E_struct_skip_cmd] = "struct_skip_cmd";
  statenames[ROOT_struct_skip_to_cmd] = NULL;
  statenames[AL_struct_skip_to_cmd] = NULL;
  statenames[S_struct_skip_to_cmd] = "struct_skip_to_cmd";
  statenames[S_struct_skip_to_cmd_1] = "struct_skip_to_cmd";
  statenames[S_struct_skip_to_cmd_2] = "struct_skip_to_cmd";
  statenames[E_struct_skip_to_cmd] = "struct_skip_to_cmd";
  statenames[ROOT_struct_sleep_cmd] = NULL;
  statenames[AL_struct_sleep_cmd] = NULL;
  statenames[S_struct_sleep_cmd] = "struct_sleep_cmd";
  statenames[S_struct_sleep_cmd_1] = "struct_sleep_cmd";
  statenames[S_struct_sleep_cmd_2] = "struct_sleep_cmd";
  statenames[E_struct_sleep_cmd] = "struct_sleep_cmd";
  statenames[ROOT_struct_sql_block_cmd] = NULL;
  statenames[AL_struct_sql_block_cmd] = NULL;
  statenames[S_struct_sql_block_cmd] = "struct_sql_block_cmd";
  statenames[S_struct_sql_block_cmd_1] = "struct_sql_block_cmd";
  statenames[S_struct_sql_block_cmd_2] = "struct_sql_block_cmd";
  statenames[E_struct_sql_block_cmd] = "struct_sql_block_cmd";
  statenames[ROOT_struct_sql_cmd] = NULL;
  statenames[AL_struct_sql_cmd] = NULL;
  statenames[S_struct_sql_cmd] = "struct_sql_cmd";
  statenames[S_struct_sql_cmd_1] = "struct_sql_cmd";
  statenames[S_struct_sql_cmd_2] = "struct_sql_cmd";
  statenames[E_struct_sql_cmd] = "struct_sql_cmd";
  statenames[ROOT_struct_sql_transact_cmd] = NULL;
  statenames[AL_struct_sql_transact_cmd] = NULL;
  statenames[S_struct_sql_transact_cmd] = "struct_sql_transact_cmd";
  statenames[S_struct_sql_transact_cmd_1] = "struct_sql_transact_cmd";
  statenames[S_struct_sql_transact_cmd_2] = "struct_sql_transact_cmd";
  statenames[E_struct_sql_transact_cmd] = "struct_sql_transact_cmd";
  statenames[ROOT_struct_start_cmd] = NULL;
  statenames[AL_struct_start_cmd] = NULL;
  statenames[S_struct_start_cmd] = "struct_start_cmd";
  statenames[S_struct_start_cmd_1] = "struct_start_cmd";
  statenames[S_struct_start_cmd_2] = "struct_start_cmd";
  statenames[E_struct_start_cmd] = "struct_start_cmd";
  statenames[ROOT_struct_start_rpc_cmd] = NULL;
  statenames[AL_struct_start_rpc_cmd] = NULL;
  statenames[S_struct_start_rpc_cmd] = "struct_start_rpc_cmd";
  statenames[S_struct_start_rpc_cmd_1] = "struct_start_rpc_cmd";
  statenames[S_struct_start_rpc_cmd_2] = "struct_start_rpc_cmd";
  statenames[E_struct_start_rpc_cmd] = "struct_start_rpc_cmd";
  statenames[ROOT_struct_term_rep_cmd] = NULL;
  statenames[AL_struct_term_rep_cmd] = NULL;
  statenames[E_struct_term_rep_cmd] = "struct_term_rep_cmd";
  statenames[ROOT_struct_uncheck_menu_cmd] = NULL;
  statenames[AL_struct_uncheck_menu_cmd] = NULL;
  statenames[S_struct_uncheck_menu_cmd] = "struct_uncheck_menu_cmd";
  statenames[S_struct_uncheck_menu_cmd_1] = "struct_uncheck_menu_cmd";
  statenames[S_struct_uncheck_menu_cmd_2] = "struct_uncheck_menu_cmd";
  statenames[E_struct_uncheck_menu_cmd] = "struct_uncheck_menu_cmd";
  statenames[ROOT_struct_unload_cmd] = NULL;
  statenames[AL_struct_unload_cmd] = NULL;
  statenames[S_struct_unload_cmd] = "struct_unload_cmd";
  statenames[S_struct_unload_cmd_1] = "struct_unload_cmd";
  statenames[S_struct_unload_cmd_2] = "struct_unload_cmd";
  statenames[E_struct_unload_cmd] = "struct_unload_cmd";
  statenames[ROOT_struct_update_cmd] = NULL;
  statenames[AL_struct_update_cmd] = NULL;
  statenames[S_struct_update_cmd] = "struct_update_cmd";
  statenames[S_struct_update_cmd_1] = "struct_update_cmd";
  statenames[S_struct_update_cmd_2] = "struct_update_cmd";
  statenames[E_struct_update_cmd] = "struct_update_cmd";
  statenames[ROOT_struct_validate_cmd] = NULL;
  statenames[AL_struct_validate_cmd] = NULL;
  statenames[S_struct_validate_cmd] = "struct_validate_cmd";
  statenames[S_struct_validate_cmd_1] = "struct_validate_cmd";
  statenames[S_struct_validate_cmd_2] = "struct_validate_cmd";
  statenames[E_struct_validate_cmd] = "struct_validate_cmd";
  statenames[ROOT_struct_whenever_cmd] = NULL;
  statenames[AL_struct_whenever_cmd] = NULL;
  statenames[E_struct_whenever_cmd] = "struct_whenever_cmd";
  statenames[ROOT_struct_while_cmd] = NULL;
  statenames[AL_struct_while_cmd] = NULL;
  statenames[S_struct_while_cmd] = "struct_while_cmd";
  statenames[S_struct_while_cmd_1] = "struct_while_cmd";
  statenames[S_struct_while_cmd_2] = "struct_while_cmd";
  statenames[E_struct_while_cmd] = "struct_while_cmd";
  statenames[ROOT_user_details] = NULL;
  statenames[AL_user_details] = NULL;
  statenames[S_user_details] = "user_details";
  statenames[S_user_details_1] = "user_details";
  statenames[S_user_details_2] = "user_details";
  statenames[E_user_details] = "user_details";
  statenames[ROOT_variable] = NULL;
  statenames[AL_variable] = NULL;
  statenames[S_variable] = "variable";
  statenames[S_variable_1] = "variable";
  statenames[S_variable_2] = "variable";
  statenames[E_variable] = "variable";
  statenames[ROOT_variable_data] = NULL;
  statenames[AL_variable_data] = NULL;
  statenames[S_variable_data] = "variable_data";
  statenames[S_variable_data_1] = "variable_data";
  statenames[S_variable_data_2] = "variable_data";
  statenames[E_variable_data] = "variable_data";
  statenames[ROOT_variable_list] = NULL;
  statenames[AL_variable_list] = NULL;
  statenames[S_variable_list] = "variable_list";
  statenames[S_variable_list_1] = "variable_list";
  statenames[S_variable_list_2] = "variable_list";
  statenames[E_variable_list] = "variable_list";
  statenames[ROOT_variable_usage] = NULL;
  statenames[AL_variable_usage] = NULL;
  statenames[S_variable_usage] = "variable_usage";
  statenames[S_variable_usage_1] = "variable_usage";
  statenames[S_variable_usage_2] = "variable_usage";
  statenames[E_variable_usage] = "variable_usage";
  statenames[ROOT_variable_usage_with_asc_desc] = NULL;
  statenames[AL_variable_usage_with_asc_desc] = NULL;
  statenames[S_variable_usage_with_asc_desc] = "variable_usage_with_asc_desc";
  statenames[S_variable_usage_with_asc_desc_1] = "variable_usage_with_asc_desc";
  statenames[S_variable_usage_with_asc_desc_2] = "variable_usage_with_asc_desc";
  statenames[E_variable_usage_with_asc_desc] = "variable_usage_with_asc_desc";
  statenames[ROOT_vname] = NULL;
  statenames[AL_vname] = NULL;
  statenames[E_vname] = "vname";
  statenames[ROOT_vname_name_list] = NULL;
  statenames[AL_vname_name_list] = NULL;
  statenames[S_vname_name_list] = "vname_name_list";
  statenames[S_vname_name_list_1] = "vname_name_list";
  statenames[S_vname_name_list_2] = "vname_name_list";
  statenames[E_vname_name_list] = "vname_name_list";
  statenames[ROOT_when] = NULL;
  statenames[AL_when] = NULL;
  statenames[S_when] = "when";
  statenames[S_when_1] = "when";
  statenames[S_when_2] = "when";
  statenames[E_when] = "when";
  statenames[ROOT_whens] = NULL;
  statenames[AL_whens] = NULL;
  statenames[S_whens] = "whens";
  statenames[S_whens_1] = "whens";
  statenames[S_whens_2] = "whens";
  statenames[E_whens] = "whens";
  statenames[ROOT_windowtype] = NULL;
  statenames[AL_windowtype] = NULL;
  statenames[S_windowtype] = "windowtype";
  statenames[S_windowtype_1] = "windowtype";
  statenames[S_windowtype_2] = "windowtype";
  statenames[E_windowtype] = "windowtype";
  statenames[ROOT_x_y] = NULL;
  statenames[AL_x_y] = NULL;
  statenames[S_x_y] = "x_y";
  statenames[S_x_y_1] = "x_y";
  statenames[S_x_y_2] = "x_y";
  statenames[E_x_y] = "x_y";
  }

 /* COMMENTS and PIs: handled uniformly for efficiency. */

<ROOT_assoc_array_variable,AL_assoc_array_variable,S_assoc_array_variable,S_assoc_array_variable_1,S_assoc_array_variable_2,E_assoc_array_variable,ROOT_assoc_subscript,AL_assoc_subscript,S_assoc_subscript,S_assoc_subscript_1,S_assoc_subscript_2,E_assoc_subscript,ROOT_attrib,AL_attrib,S_attrib,S_attrib_1,S_attrib_2,E_attrib,ROOT_bluebar,AL_bluebar,E_bluebar,ROOT_call_list,AL_call_list,S_call_list,S_call_list_1,S_call_list_2,E_call_list,ROOT_clear_data,AL_clear_data,S_clear_data,S_clear_data_1,S_clear_data_2,E_clear_data,ROOT_cmd_int_list,AL_cmd_int_list,S_cmd_int_list,S_cmd_int_list_1,S_cmd_int_list_2,E_cmd_int_list,ROOT_command,AL_command,S_command,S_command_1,S_command_2,E_command,ROOT_command_data,AL_command_data,S_command_data,S_command_data_1,S_command_data_2,E_command_data,ROOT_commands,AL_commands,S_commands,S_commands_1,S_commands_2,E_commands,ROOT_cons_list,AL_cons_list,S_cons_list,S_cons_list_1,S_cons_list_2,E_cons_list,ROOT_cons_list_entry,AL_cons_list_entry,E_cons_list_entry,ROOT_constant_data,AL_constant_data,E_constant_data,ROOT_convert,AL_convert,S_convert,S_convert_1,S_convert_2,E_convert,ROOT_dt_display,AL_dt_display,S_dt_display,S_dt_display_1,S_dt_display_2,E_dt_display,ROOT_event_data,AL_event_data,S_event_data,S_event_data_1,S_event_data_2,E_event_data,ROOT_expr_str,AL_expr_str,S_expr_str,S_expr_str_1,S_expr_str_2,E_expr_str,ROOT_expr_str_list,AL_expr_str_list,S_expr_str_list,S_expr_str_list_1,S_expr_str_list_2,E_expr_str_list,ROOT_fgl_comment,AL_fgl_comment,E_fgl_comment,ROOT_fh_field_entry,AL_fh_field_entry,S_fh_field_entry,S_fh_field_entry_1,S_fh_field_entry_2,E_fh_field_entry,ROOT_fh_field_list,AL_fh_field_list,S_fh_field_list,S_fh_field_list_1,S_fh_field_list_2,E_fh_field_list,ROOT_field,AL_field,E_field,ROOT_file_description,AL_file_description,S_file_description,S_file_description_1,S_file_description_2,E_file_description,ROOT_flist,AL_flist,E_flist,ROOT_form_field,AL_form_field,S_form_field,S_form_field_1,S_form_field_2,E_form_field,ROOT_funcname,AL_funcname,E_funcname,ROOT_funcname_list,AL_funcname_list,S_funcname_list,S_funcname_list_1,S_funcname_list_2,E_funcname_list,ROOT_globals_definition,AL_globals_definition,S_globals_definition,S_globals_definition_1,S_globals_definition_2,E_globals_definition,ROOT_if_cond,AL_if_cond,S_if_cond,S_if_cond_1,S_if_cond_2,E_if_cond,ROOT_if_conds,AL_if_conds,S_if_conds,S_if_conds_1,S_if_conds_2,E_if_conds,ROOT_ilist,AL_ilist,E_ilist,ROOT_int,AL_int,E_int,ROOT_linked_variable,AL_linked_variable,S_linked_variable,S_linked_variable_1,S_linked_variable_2,E_linked_variable,ROOT_lint_warning,AL_lint_warning,E_lint_warning,ROOT_list_of_integers,AL_list_of_integers,S_list_of_integers,S_list_of_integers_1,S_list_of_integers_2,E_list_of_integers,ROOT_locate_pos,AL_locate_pos,S_locate_pos,S_locate_pos_1,S_locate_pos_2,E_locate_pos,ROOT_long,AL_long,E_long,ROOT_manyoptions,AL_manyoptions,S_manyoptions,S_manyoptions_1,S_manyoptions_2,E_manyoptions,ROOT_menuoption,AL_menuoption,S_menuoption,S_menuoption_1,S_menuoption_2,E_menuoption,ROOT_module_definition,AL_module_definition,S_module_definition,S_module_definition_1,S_module_definition_2,E_module_definition,ROOT_module_entry,AL_module_entry,S_module_entry,S_module_entry_1,S_module_entry_2,E_module_entry,ROOT_object_variable,AL_object_variable,S_object_variable,S_object_variable_1,S_object_variable_2,E_object_variable,ROOT_on_event,AL_on_event,S_on_event,S_on_event_1,S_on_event_2,E_on_event,ROOT_on_events,AL_on_events,S_on_events,S_on_events_1,S_on_events_2,E_on_events,ROOT_pdf_startrep,AL_pdf_startrep,S_pdf_startrep,S_pdf_startrep_1,S_pdf_startrep_2,E_pdf_startrep,ROOT_program_definition,AL_program_definition,S_program_definition,S_program_definition_1,S_program_definition_2,E_program_definition,ROOT_record_variable,AL_record_variable,S_record_variable,S_record_variable_1,S_record_variable_2,E_record_variable,ROOT_report_block_data,AL_report_block_data,S_report_block_data,S_report_block_data_1,S_report_block_data_2,E_report_block_data,ROOT_report_format_section,AL_report_format_section,S_report_format_section,S_report_format_section_1,S_report_format_section_2,E_report_format_section,ROOT_report_format_section_entry,AL_report_format_section_entry,S_report_format_section_entry,S_report_format_section_entry_1,S_report_format_section_entry_2,E_report_format_section_entry,ROOT_report_orderby_section,AL_report_orderby_section,S_report_orderby_section,S_report_orderby_section_1,S_report_orderby_section_2,E_report_orderby_section,ROOT_rowscols,AL_rowscols,S_rowscols,S_rowscols_1,S_rowscols_2,E_rowscols,ROOT_s_class_definition,AL_s_class_definition,S_s_class_definition,S_s_class_definition_1,S_s_class_definition_2,E_s_class_definition,ROOT_s_cur_def,AL_s_cur_def,S_s_cur_def,S_s_cur_def_1,S_s_cur_def_2,E_s_cur_def,ROOT_s_dependant_tables,AL_s_dependant_tables,E_s_dependant_tables,ROOT_s_exchange_clobber,AL_s_exchange_clobber,E_s_exchange_clobber,ROOT_s_expr_agg,AL_s_expr_agg,S_s_expr_agg,S_s_expr_agg_1,S_s_expr_agg_2,E_s_expr_agg,ROOT_s_expr_aligned,AL_s_expr_aligned,S_s_expr_aligned,S_s_expr_aligned_1,S_s_expr_aligned_2,E_s_expr_aligned,ROOT_s_expr_bound_fcall,AL_s_expr_bound_fcall,S_s_expr_bound_fcall,S_s_expr_bound_fcall_1,S_s_expr_bound_fcall_2,E_s_expr_bound_fcall,ROOT_s_expr_cached,AL_s_expr_cached,E_s_expr_cached,ROOT_s_expr_cast,AL_s_expr_cast,S_s_expr_cast,S_s_expr_cast_1,S_s_expr_cast_2,E_s_expr_cast,ROOT_s_expr_current,AL_s_expr_current,E_s_expr_current,ROOT_s_expr_datetime,AL_s_expr_datetime,E_s_expr_datetime,ROOT_s_expr_dynarr_extent,AL_s_expr_dynarr_extent,S_s_expr_dynarr_extent,S_s_expr_dynarr_extent_1,S_s_expr_dynarr_extent_2,E_s_expr_dynarr_extent,ROOT_s_expr_dynarr_function_call_n,AL_s_expr_dynarr_function_call_n,S_s_expr_dynarr_function_call_n,S_s_expr_dynarr_function_call_n_1,S_s_expr_dynarr_function_call_n_2,E_s_expr_dynarr_function_call_n,ROOT_s_expr_exists_sq,AL_s_expr_exists_sq,S_s_expr_exists_sq,S_s_expr_exists_sq_1,S_s_expr_exists_sq_2,E_s_expr_exists_sq,ROOT_s_expr_extend,AL_s_expr_extend,S_s_expr_extend,S_s_expr_extend_1,S_s_expr_extend_2,E_s_expr_extend,ROOT_s_expr_external_call,AL_s_expr_external_call,S_s_expr_external_call,S_s_expr_external_call_1,S_s_expr_external_call_2,E_s_expr_external_call,ROOT_s_expr_field_touched,AL_s_expr_field_touched,S_s_expr_field_touched,S_s_expr_field_touched_1,S_s_expr_field_touched_2,E_s_expr_field_touched,ROOT_s_expr_form_is_compiled,AL_s_expr_form_is_compiled,S_s_expr_form_is_compiled,S_s_expr_form_is_compiled_1,S_s_expr_form_is_compiled_2,E_s_expr_form_is_compiled,ROOT_s_expr_function_call,AL_s_expr_function_call,S_s_expr_function_call,S_s_expr_function_call_1,S_s_expr_function_call_2,E_s_expr_function_call,ROOT_s_expr_get_fldbuf,AL_s_expr_get_fldbuf,S_s_expr_get_fldbuf,S_s_expr_get_fldbuf_1,S_s_expr_get_fldbuf_2,E_s_expr_get_fldbuf,ROOT_s_expr_in,AL_s_expr_in,S_s_expr_in,S_s_expr_in_1,S_s_expr_in_2,E_s_expr_in,ROOT_s_expr_in_sq,AL_s_expr_in_sq,S_s_expr_in_sq,S_s_expr_in_sq_1,S_s_expr_in_sq_2,E_s_expr_in_sq,ROOT_s_expr_infield,AL_s_expr_infield,S_s_expr_infield,S_s_expr_infield_1,S_s_expr_infield_2,E_s_expr_infield,ROOT_s_expr_interval,AL_s_expr_interval,E_s_expr_interval,ROOT_s_expr_member_function_call_n,AL_s_expr_member_function_call_n,S_s_expr_member_function_call_n,S_s_expr_member_function_call_n_1,S_s_expr_member_function_call_n_2,E_s_expr_member_function_call_n,ROOT_s_expr_op,AL_s_expr_op,S_s_expr_op,S_s_expr_op_1,S_s_expr_op_2,E_s_expr_op,ROOT_s_expr_parameter,AL_s_expr_parameter,E_s_expr_parameter,ROOT_s_expr_pdf_function_call,AL_s_expr_pdf_function_call,S_s_expr_pdf_function_call,S_s_expr_pdf_function_call_1,S_s_expr_pdf_function_call_2,E_s_expr_pdf_function_call,ROOT_s_expr_shared_function_call,AL_s_expr_shared_function_call,S_s_expr_shared_function_call,S_s_expr_shared_function_call_1,S_s_expr_shared_function_call_2,E_s_expr_shared_function_call,ROOT_s_expr_tag,AL_s_expr_tag,S_s_expr_tag,S_s_expr_tag_1,S_s_expr_tag_2,E_s_expr_tag,ROOT_s_expr_tmp,AL_s_expr_tmp,E_s_expr_tmp,ROOT_s_expr_wordwrap,AL_s_expr_wordwrap,S_s_expr_wordwrap,S_s_expr_wordwrap_1,S_s_expr_wordwrap_2,E_s_expr_wordwrap,ROOT_s_fetch,AL_s_fetch,S_s_fetch,S_s_fetch_1,S_s_fetch_2,E_s_fetch,ROOT_s_fetch_place,AL_s_fetch_place,S_s_fetch_place,S_s_fetch_place_1,S_s_fetch_place_2,E_s_fetch_place,ROOT_s_formhandler_definition,AL_s_formhandler_definition,S_s_formhandler_definition,S_s_formhandler_definition_1,S_s_formhandler_definition_2,E_s_formhandler_definition,ROOT_s_full_col,AL_s_full_col,E_s_full_col,ROOT_s_func,AL_s_func,E_s_func,ROOT_s_function_definition,AL_s_function_definition,S_s_function_definition,S_s_function_definition_1,S_s_function_definition_2,E_s_function_definition,ROOT_s_import_datatype,AL_s_import_datatype,E_s_import_datatype,ROOT_s_import_function_definition,AL_s_import_function_definition,E_s_import_function_definition,ROOT_s_import_legacy_definition,AL_s_import_legacy_definition,E_s_import_legacy_definition,ROOT_s_import_package,AL_s_import_package,E_s_import_package,ROOT_s_limit,AL_s_limit,E_s_limit,ROOT_s_module_entry_ptr_list,AL_s_module_entry_ptr_list,S_s_module_entry_ptr_list,S_s_module_entry_ptr_list_1,S_s_module_entry_ptr_list_2,E_s_module_entry_ptr_list,ROOT_s_pdf_report_definition,AL_s_pdf_report_definition,S_s_pdf_report_definition,S_s_pdf_report_definition_1,S_s_pdf_report_definition_2,E_s_pdf_report_definition,ROOT_s_report_definition,AL_s_report_definition,S_s_report_definition,S_s_report_definition_1,S_s_report_definition_2,E_s_report_definition,ROOT_s_select,AL_s_select,S_s_select,S_s_select_1,S_s_select_2,E_s_select,ROOT_s_select_finish,AL_s_select_finish,S_s_select_finish,S_s_select_finish_1,S_s_select_finish_2,E_s_select_finish,ROOT_s_select_list_item,AL_s_select_list_item,S_s_select_list_item,S_s_select_list_item_1,S_s_select_list_item_2,E_s_select_list_item,ROOT_s_select_list_item_agg_expr,AL_s_select_list_item_agg_expr,S_s_select_list_item_agg_expr,S_s_select_list_item_agg_expr_1,S_s_select_list_item_agg_expr_2,E_s_select_list_item_agg_expr,ROOT_s_select_list_item_between_expr,AL_s_select_list_item_between_expr,S_s_select_list_item_between_expr,S_s_select_list_item_between_expr_1,S_s_select_list_item_between_expr_2,E_s_select_list_item_between_expr,ROOT_s_select_list_item_builtin_fcall,AL_s_select_list_item_builtin_fcall,S_s_select_list_item_builtin_fcall,S_s_select_list_item_builtin_fcall_1,S_s_select_list_item_builtin_fcall_2,E_s_select_list_item_builtin_fcall,ROOT_s_select_list_item_column,AL_s_select_list_item_column,S_s_select_list_item_column,S_s_select_list_item_column_1,S_s_select_list_item_column_2,E_s_select_list_item_column,ROOT_s_select_list_item_complex_expr,AL_s_select_list_item_complex_expr,S_s_select_list_item_complex_expr,S_s_select_list_item_complex_expr_1,S_s_select_list_item_complex_expr_2,E_s_select_list_item_complex_expr,ROOT_s_select_list_item_data,AL_s_select_list_item_data,S_s_select_list_item_data,S_s_select_list_item_data_1,S_s_select_list_item_data_2,E_s_select_list_item_data,ROOT_s_select_list_item_extend,AL_s_select_list_item_extend,S_s_select_list_item_extend,S_s_select_list_item_extend_1,S_s_select_list_item_extend_2,E_s_select_list_item_extend,ROOT_s_select_list_item_fcall,AL_s_select_list_item_fcall,S_s_select_list_item_fcall,S_s_select_list_item_fcall_1,S_s_select_list_item_fcall_2,E_s_select_list_item_fcall,ROOT_s_select_list_item_list,AL_s_select_list_item_list,S_s_select_list_item_list,S_s_select_list_item_list_1,S_s_select_list_item_list_2,E_s_select_list_item_list,ROOT_s_select_list_item_regex,AL_s_select_list_item_regex,S_s_select_list_item_regex,S_s_select_list_item_regex_1,S_s_select_list_item_regex_2,E_s_select_list_item_regex,ROOT_s_select_list_item_sli_expr,AL_s_select_list_item_sli_expr,S_s_select_list_item_sli_expr,S_s_select_list_item_sli_expr_1,S_s_select_list_item_sli_expr_2,E_s_select_list_item_sli_expr,ROOT_s_select_list_item_slil_expr,AL_s_select_list_item_slil_expr,S_s_select_list_item_slil_expr,S_s_select_list_item_slil_expr_1,S_s_select_list_item_slil_expr_2,E_s_select_list_item_slil_expr,ROOT_s_select_list_item_sq_expression,AL_s_select_list_item_sq_expression,S_s_select_list_item_sq_expression,S_s_select_list_item_sq_expression_1,S_s_select_list_item_sq_expression_2,E_s_select_list_item_sq_expression,ROOT_s_sli_case,AL_s_sli_case,S_s_sli_case,S_s_sli_case_1,S_s_sli_case_2,E_s_sli_case,ROOT_s_sli_case_element,AL_s_sli_case_element,S_s_sli_case_element,S_s_sli_case_element_1,S_s_sli_case_element_2,E_s_sli_case_element,ROOT_s_sli_cast,AL_s_sli_cast,S_s_sli_cast,S_s_sli_cast_1,S_s_sli_cast_2,E_s_sli_cast,ROOT_s_source_code,AL_s_source_code,S_s_source_code,S_s_source_code_1,S_s_source_code_2,E_s_source_code,ROOT_s_table,AL_s_table,S_s_table,S_s_table_1,S_s_table_2,E_s_table,ROOT_s_table_list,AL_s_table_list,S_s_table_list,S_s_table_list_1,S_s_table_list_2,E_s_table_list,ROOT_s_table_list_element,AL_s_table_list_element,S_s_table_list_element,S_s_table_list_element_1,S_s_table_list_element_2,E_s_table_list_element,ROOT_s_update_pair,AL_s_update_pair,S_s_update_pair,S_s_update_pair_1,S_s_update_pair_2,E_s_update_pair,ROOT_short,AL_short,E_short,ROOT_simple_variable,AL_simple_variable,E_simple_variable,ROOT_single_option,AL_single_option,S_single_option,S_single_option_1,S_single_option_2,E_single_option,ROOT_sq_subquery,AL_sq_subquery,S_sq_subquery,S_sq_subquery_1,S_sq_subquery_2,E_sq_subquery,ROOT_sql_statement,AL_sql_statement,S_sql_statement,S_sql_statement_1,S_sql_statement_2,E_sql_statement,ROOT_startrep,AL_startrep,S_startrep,S_startrep_1,S_startrep_2,E_startrep,ROOT_str,AL_str,E_str,ROOT_str_list,AL_str_list,S_str_list,S_str_list_1,S_str_list_2,E_str_list,ROOT_struct_alloc_arr_cmd,AL_struct_alloc_arr_cmd,S_struct_alloc_arr_cmd,S_struct_alloc_arr_cmd_1,S_struct_alloc_arr_cmd_2,E_struct_alloc_arr_cmd,ROOT_struct_at_term_cmd,AL_struct_at_term_cmd,E_struct_at_term_cmd,ROOT_struct_call_cmd,AL_struct_call_cmd,S_struct_call_cmd,S_struct_call_cmd_1,S_struct_call_cmd_2,E_struct_call_cmd,ROOT_struct_call_shared_cmd,AL_struct_call_shared_cmd,E_struct_call_shared_cmd,ROOT_struct_cancel_cmd,AL_struct_cancel_cmd,E_struct_cancel_cmd,ROOT_struct_case_cmd,AL_struct_case_cmd,S_struct_case_cmd,S_struct_case_cmd_1,S_struct_case_cmd_2,E_struct_case_cmd,ROOT_struct_check_menu_cmd,AL_struct_check_menu_cmd,S_struct_check_menu_cmd,S_struct_check_menu_cmd_1,S_struct_check_menu_cmd_2,E_struct_check_menu_cmd,ROOT_struct_clear_cmd,AL_struct_clear_cmd,S_struct_clear_cmd,S_struct_clear_cmd_1,S_struct_clear_cmd_2,E_struct_clear_cmd,ROOT_struct_close_cmd,AL_struct_close_cmd,S_struct_close_cmd,S_struct_close_cmd_1,S_struct_close_cmd_2,E_struct_close_cmd,ROOT_struct_close_sql_cmd,AL_struct_close_sql_cmd,S_struct_close_sql_cmd,S_struct_close_sql_cmd_1,S_struct_close_sql_cmd_2,E_struct_close_sql_cmd,ROOT_struct_code_cmd,AL_struct_code_cmd,E_struct_code_cmd,ROOT_struct_connect_cmd,AL_struct_connect_cmd,S_struct_connect_cmd,S_struct_connect_cmd_1,S_struct_connect_cmd_2,E_struct_connect_cmd,ROOT_struct_construct_cmd,AL_struct_construct_cmd,S_struct_construct_cmd,S_struct_construct_cmd_1,S_struct_construct_cmd_2,E_struct_construct_cmd,ROOT_struct_continue_cmd,AL_struct_continue_cmd,E_struct_continue_cmd,ROOT_struct_convert_cmd,AL_struct_convert_cmd,S_struct_convert_cmd,S_struct_convert_cmd_1,S_struct_convert_cmd_2,E_struct_convert_cmd,ROOT_struct_current_win_cmd,AL_struct_current_win_cmd,S_struct_current_win_cmd,S_struct_current_win_cmd_1,S_struct_current_win_cmd_2,E_struct_current_win_cmd,ROOT_struct_dealloc_arr_cmd,AL_struct_dealloc_arr_cmd,S_struct_dealloc_arr_cmd,S_struct_dealloc_arr_cmd_1,S_struct_dealloc_arr_cmd_2,E_struct_dealloc_arr_cmd,ROOT_struct_declare_cmd,AL_struct_declare_cmd,S_struct_declare_cmd,S_struct_declare_cmd_1,S_struct_declare_cmd_2,E_struct_declare_cmd,ROOT_struct_defer_cmd,AL_struct_defer_cmd,E_struct_defer_cmd,ROOT_struct_delete_cmd,AL_struct_delete_cmd,S_struct_delete_cmd,S_struct_delete_cmd_1,S_struct_delete_cmd_2,E_struct_delete_cmd,ROOT_struct_disable_cmd,AL_struct_disable_cmd,S_struct_disable_cmd,S_struct_disable_cmd_1,S_struct_disable_cmd_2,E_struct_disable_cmd,ROOT_struct_disable_form_cmd,AL_struct_disable_form_cmd,S_struct_disable_form_cmd,S_struct_disable_form_cmd_1,S_struct_disable_form_cmd_2,E_struct_disable_form_cmd,ROOT_struct_disable_menu_cmd,AL_struct_disable_menu_cmd,S_struct_disable_menu_cmd,S_struct_disable_menu_cmd_1,S_struct_disable_menu_cmd_2,E_struct_disable_menu_cmd,ROOT_struct_display_array_cmd,AL_struct_display_array_cmd,S_struct_display_array_cmd,S_struct_display_array_cmd_1,S_struct_display_array_cmd_2,E_struct_display_array_cmd,ROOT_struct_display_b_n_cmd,AL_struct_display_b_n_cmd,S_struct_display_b_n_cmd,S_struct_display_b_n_cmd_1,S_struct_display_b_n_cmd_2,E_struct_display_b_n_cmd,ROOT_struct_display_cmd,AL_struct_display_cmd,S_struct_display_cmd,S_struct_display_cmd_1,S_struct_display_cmd_2,E_struct_display_cmd,ROOT_struct_display_form_cmd,AL_struct_display_form_cmd,S_struct_display_form_cmd,S_struct_display_form_cmd_1,S_struct_display_form_cmd_2,E_struct_display_form_cmd,ROOT_struct_enable_cmd,AL_struct_enable_cmd,S_struct_enable_cmd,S_struct_enable_cmd_1,S_struct_enable_cmd_2,E_struct_enable_cmd,ROOT_struct_enable_form_cmd,AL_struct_enable_form_cmd,S_struct_enable_form_cmd,S_struct_enable_form_cmd_1,S_struct_enable_form_cmd_2,E_struct_enable_form_cmd,ROOT_struct_enable_menu_cmd,AL_struct_enable_menu_cmd,S_struct_enable_menu_cmd,S_struct_enable_menu_cmd_1,S_struct_enable_menu_cmd_2,E_struct_enable_menu_cmd,ROOT_struct_error_cmd,AL_struct_error_cmd,S_struct_error_cmd,S_struct_error_cmd_1,S_struct_error_cmd_2,E_struct_error_cmd,ROOT_struct_execute_cmd,AL_struct_execute_cmd,S_struct_execute_cmd,S_struct_execute_cmd_1,S_struct_execute_cmd_2,E_struct_execute_cmd,ROOT_struct_execute_immediate_cmd,AL_struct_execute_immediate_cmd,S_struct_execute_immediate_cmd,S_struct_execute_immediate_cmd_1,S_struct_execute_immediate_cmd_2,E_struct_execute_immediate_cmd,ROOT_struct_exit_prog_cmd,AL_struct_exit_prog_cmd,S_struct_exit_prog_cmd,S_struct_exit_prog_cmd_1,S_struct_exit_prog_cmd_2,E_struct_exit_prog_cmd,ROOT_struct_ext_cmd,AL_struct_ext_cmd,E_struct_ext_cmd,ROOT_struct_fetch_cmd,AL_struct_fetch_cmd,S_struct_fetch_cmd,S_struct_fetch_cmd_1,S_struct_fetch_cmd_2,E_struct_fetch_cmd,ROOT_struct_finish_cmd,AL_struct_finish_cmd,S_struct_finish_cmd,S_struct_finish_cmd_1,S_struct_finish_cmd_2,E_struct_finish_cmd,ROOT_struct_flush_cmd,AL_struct_flush_cmd,S_struct_flush_cmd,S_struct_flush_cmd_1,S_struct_flush_cmd_2,E_struct_flush_cmd,ROOT_struct_for_cmd,AL_struct_for_cmd,S_struct_for_cmd,S_struct_for_cmd_1,S_struct_for_cmd_2,E_struct_for_cmd,ROOT_struct_foreach_cmd,AL_struct_foreach_cmd,S_struct_foreach_cmd,S_struct_foreach_cmd_1,S_struct_foreach_cmd_2,E_struct_foreach_cmd,ROOT_struct_free_cmd,AL_struct_free_cmd,S_struct_free_cmd,S_struct_free_cmd_1,S_struct_free_cmd_2,E_struct_free_cmd,ROOT_struct_free_rep_cmd,AL_struct_free_rep_cmd,E_struct_free_rep_cmd,ROOT_struct_goto_cmd,AL_struct_goto_cmd,E_struct_goto_cmd,ROOT_struct_hide_cmd,AL_struct_hide_cmd,S_struct_hide_cmd,S_struct_hide_cmd_1,S_struct_hide_cmd_2,E_struct_hide_cmd,ROOT_struct_hide_option_cmd,AL_struct_hide_option_cmd,S_struct_hide_option_cmd,S_struct_hide_option_cmd_1,S_struct_hide_option_cmd_2,E_struct_hide_option_cmd,ROOT_struct_if_cmd,AL_struct_if_cmd,S_struct_if_cmd,S_struct_if_cmd_1,S_struct_if_cmd_2,E_struct_if_cmd,ROOT_struct_init_cmd,AL_struct_init_cmd,S_struct_init_cmd,S_struct_init_cmd_1,S_struct_init_cmd_2,E_struct_init_cmd,ROOT_struct_input_array_cmd,AL_struct_input_array_cmd,S_struct_input_array_cmd,S_struct_input_array_cmd_1,S_struct_input_array_cmd_2,E_struct_input_array_cmd,ROOT_struct_input_cmd,AL_struct_input_cmd,S_struct_input_cmd,S_struct_input_cmd_1,S_struct_input_cmd_2,E_struct_input_cmd,ROOT_struct_insert_cmd,AL_struct_insert_cmd,S_struct_insert_cmd,S_struct_insert_cmd_1,S_struct_insert_cmd_2,E_struct_insert_cmd,ROOT_struct_label_cmd,AL_struct_label_cmd,E_struct_label_cmd,ROOT_struct_let_cmd,AL_struct_let_cmd,S_struct_let_cmd,S_struct_let_cmd_1,S_struct_let_cmd_2,E_struct_let_cmd,ROOT_struct_lint_expect_cmd,AL_struct_lint_expect_cmd,S_struct_lint_expect_cmd,S_struct_lint_expect_cmd_1,S_struct_lint_expect_cmd_2,E_struct_lint_expect_cmd,ROOT_struct_lint_ignore_cmd,AL_struct_lint_ignore_cmd,S_struct_lint_ignore_cmd,S_struct_lint_ignore_cmd_1,S_struct_lint_ignore_cmd_2,E_struct_lint_ignore_cmd,ROOT_struct_load_cmd,AL_struct_load_cmd,S_struct_load_cmd,S_struct_load_cmd_1,S_struct_load_cmd_2,E_struct_load_cmd,ROOT_struct_locate_cmd,AL_struct_locate_cmd,S_struct_locate_cmd,S_struct_locate_cmd_1,S_struct_locate_cmd_2,E_struct_locate_cmd,ROOT_struct_menu_cmd,AL_struct_menu_cmd,S_struct_menu_cmd,S_struct_menu_cmd_1,S_struct_menu_cmd_2,E_struct_menu_cmd,ROOT_struct_message_cmd,AL_struct_message_cmd,S_struct_message_cmd,S_struct_message_cmd_1,S_struct_message_cmd_2,E_struct_message_cmd,ROOT_struct_move_cmd,AL_struct_move_cmd,S_struct_move_cmd,S_struct_move_cmd_1,S_struct_move_cmd_2,E_struct_move_cmd,ROOT_struct_msg_box_cmd,AL_struct_msg_box_cmd,S_struct_msg_box_cmd,S_struct_msg_box_cmd_1,S_struct_msg_box_cmd_2,E_struct_msg_box_cmd,ROOT_struct_need_cmd,AL_struct_need_cmd,S_struct_need_cmd,S_struct_need_cmd_1,S_struct_need_cmd_2,E_struct_need_cmd,ROOT_struct_next_field_cmd,AL_struct_next_field_cmd,S_struct_next_field_cmd,S_struct_next_field_cmd_1,S_struct_next_field_cmd_2,E_struct_next_field_cmd,ROOT_struct_next_form_cmd,AL_struct_next_form_cmd,E_struct_next_form_cmd,ROOT_struct_next_option_cmd,AL_struct_next_option_cmd,S_struct_next_option_cmd,S_struct_next_option_cmd_1,S_struct_next_option_cmd_2,E_struct_next_option_cmd,ROOT_struct_open_cursor_cmd,AL_struct_open_cursor_cmd,S_struct_open_cursor_cmd,S_struct_open_cursor_cmd_1,S_struct_open_cursor_cmd_2,E_struct_open_cursor_cmd,ROOT_struct_open_form_cmd,AL_struct_open_form_cmd,S_struct_open_form_cmd,S_struct_open_form_cmd_1,S_struct_open_form_cmd_2,E_struct_open_form_cmd,ROOT_struct_open_form_gui_cmd,AL_struct_open_form_gui_cmd,S_struct_open_form_gui_cmd,S_struct_open_form_gui_cmd_1,S_struct_open_form_gui_cmd_2,E_struct_open_form_gui_cmd,ROOT_struct_open_statusbox_cmd,AL_struct_open_statusbox_cmd,S_struct_open_statusbox_cmd,S_struct_open_statusbox_cmd_1,S_struct_open_statusbox_cmd_2,E_struct_open_statusbox_cmd,ROOT_struct_open_window_cmd,AL_struct_open_window_cmd,S_struct_open_window_cmd,S_struct_open_window_cmd_1,S_struct_open_window_cmd_2,E_struct_open_window_cmd,ROOT_struct_options_cmd,AL_struct_options_cmd,S_struct_options_cmd,S_struct_options_cmd_1,S_struct_options_cmd_2,E_struct_options_cmd,ROOT_struct_output_cmd,AL_struct_output_cmd,S_struct_output_cmd,S_struct_output_cmd_1,S_struct_output_cmd_2,E_struct_output_cmd,ROOT_struct_pause_cmd,AL_struct_pause_cmd,S_struct_pause_cmd,S_struct_pause_cmd_1,S_struct_pause_cmd_2,E_struct_pause_cmd,ROOT_struct_pdf_call_cmd,AL_struct_pdf_call_cmd,S_struct_pdf_call_cmd,S_struct_pdf_call_cmd_1,S_struct_pdf_call_cmd_2,E_struct_pdf_call_cmd,ROOT_struct_prepare_cmd,AL_struct_prepare_cmd,S_struct_prepare_cmd,S_struct_prepare_cmd_1,S_struct_prepare_cmd_2,E_struct_prepare_cmd,ROOT_struct_print_cmd,AL_struct_print_cmd,S_struct_print_cmd,S_struct_print_cmd_1,S_struct_print_cmd_2,E_struct_print_cmd,ROOT_struct_print_file_cmd,AL_struct_print_file_cmd,S_struct_print_file_cmd,S_struct_print_file_cmd_1,S_struct_print_file_cmd_2,E_struct_print_file_cmd,ROOT_struct_print_img_cmd,AL_struct_print_img_cmd,S_struct_print_img_cmd,S_struct_print_img_cmd_1,S_struct_print_img_cmd_2,E_struct_print_img_cmd,ROOT_struct_prompt_cmd,AL_struct_prompt_cmd,S_struct_prompt_cmd,S_struct_prompt_cmd_1,S_struct_prompt_cmd_2,E_struct_prompt_cmd,ROOT_struct_put_cmd,AL_struct_put_cmd,S_struct_put_cmd,S_struct_put_cmd_1,S_struct_put_cmd_2,E_struct_put_cmd,ROOT_struct_resize_arr_cmd,AL_struct_resize_arr_cmd,S_struct_resize_arr_cmd,S_struct_resize_arr_cmd_1,S_struct_resize_arr_cmd_2,E_struct_resize_arr_cmd,ROOT_struct_return_cmd,AL_struct_return_cmd,S_struct_return_cmd,S_struct_return_cmd_1,S_struct_return_cmd_2,E_struct_return_cmd,ROOT_struct_run_cmd,AL_struct_run_cmd,S_struct_run_cmd,S_struct_run_cmd_1,S_struct_run_cmd_2,E_struct_run_cmd,ROOT_struct_run_waiting_for_cmd,AL_struct_run_waiting_for_cmd,S_struct_run_waiting_for_cmd,S_struct_run_waiting_for_cmd_1,S_struct_run_waiting_for_cmd_2,E_struct_run_waiting_for_cmd,ROOT_struct_scroll_cmd,AL_struct_scroll_cmd,S_struct_scroll_cmd,S_struct_scroll_cmd_1,S_struct_scroll_cmd_2,E_struct_scroll_cmd,ROOT_struct_select_cmd,AL_struct_select_cmd,S_struct_select_cmd,S_struct_select_cmd_1,S_struct_select_cmd_2,E_struct_select_cmd,ROOT_struct_set_database_cmd,AL_struct_set_database_cmd,S_struct_set_database_cmd,S_struct_set_database_cmd_1,S_struct_set_database_cmd_2,E_struct_set_database_cmd,ROOT_struct_set_session_cmd,AL_struct_set_session_cmd,S_struct_set_session_cmd,S_struct_set_session_cmd_1,S_struct_set_session_cmd_2,E_struct_set_session_cmd,ROOT_struct_show_cmd,AL_struct_show_cmd,S_struct_show_cmd,S_struct_show_cmd_1,S_struct_show_cmd_2,E_struct_show_cmd,ROOT_struct_show_menu_cmd,AL_struct_show_menu_cmd,S_struct_show_menu_cmd,S_struct_show_menu_cmd_1,S_struct_show_menu_cmd_2,E_struct_show_menu_cmd,ROOT_struct_show_option_cmd,AL_struct_show_option_cmd,S_struct_show_option_cmd,S_struct_show_option_cmd_1,S_struct_show_option_cmd_2,E_struct_show_option_cmd,ROOT_struct_skip_by_cmd,AL_struct_skip_by_cmd,S_struct_skip_by_cmd,S_struct_skip_by_cmd_1,S_struct_skip_by_cmd_2,E_struct_skip_by_cmd,ROOT_struct_skip_cmd,AL_struct_skip_cmd,S_struct_skip_cmd,S_struct_skip_cmd_1,S_struct_skip_cmd_2,E_struct_skip_cmd,ROOT_struct_skip_to_cmd,AL_struct_skip_to_cmd,S_struct_skip_to_cmd,S_struct_skip_to_cmd_1,S_struct_skip_to_cmd_2,E_struct_skip_to_cmd,ROOT_struct_sleep_cmd,AL_struct_sleep_cmd,S_struct_sleep_cmd,S_struct_sleep_cmd_1,S_struct_sleep_cmd_2,E_struct_sleep_cmd,ROOT_struct_sql_block_cmd,AL_struct_sql_block_cmd,S_struct_sql_block_cmd,S_struct_sql_block_cmd_1,S_struct_sql_block_cmd_2,E_struct_sql_block_cmd,ROOT_struct_sql_cmd,AL_struct_sql_cmd,S_struct_sql_cmd,S_struct_sql_cmd_1,S_struct_sql_cmd_2,E_struct_sql_cmd,ROOT_struct_sql_transact_cmd,AL_struct_sql_transact_cmd,S_struct_sql_transact_cmd,S_struct_sql_transact_cmd_1,S_struct_sql_transact_cmd_2,E_struct_sql_transact_cmd,ROOT_struct_start_cmd,AL_struct_start_cmd,S_struct_start_cmd,S_struct_start_cmd_1,S_struct_start_cmd_2,E_struct_start_cmd,ROOT_struct_start_rpc_cmd,AL_struct_start_rpc_cmd,S_struct_start_rpc_cmd,S_struct_start_rpc_cmd_1,S_struct_start_rpc_cmd_2,E_struct_start_rpc_cmd,ROOT_struct_term_rep_cmd,AL_struct_term_rep_cmd,E_struct_term_rep_cmd,ROOT_struct_uncheck_menu_cmd,AL_struct_uncheck_menu_cmd,S_struct_uncheck_menu_cmd,S_struct_uncheck_menu_cmd_1,S_struct_uncheck_menu_cmd_2,E_struct_uncheck_menu_cmd,ROOT_struct_unload_cmd,AL_struct_unload_cmd,S_struct_unload_cmd,S_struct_unload_cmd_1,S_struct_unload_cmd_2,E_struct_unload_cmd,ROOT_struct_update_cmd,AL_struct_update_cmd,S_struct_update_cmd,S_struct_update_cmd_1,S_struct_update_cmd_2,E_struct_update_cmd,ROOT_struct_validate_cmd,AL_struct_validate_cmd,S_struct_validate_cmd,S_struct_validate_cmd_1,S_struct_validate_cmd_2,E_struct_validate_cmd,ROOT_struct_whenever_cmd,AL_struct_whenever_cmd,E_struct_whenever_cmd,ROOT_struct_while_cmd,AL_struct_while_cmd,S_struct_while_cmd,S_struct_while_cmd_1,S_struct_while_cmd_2,E_struct_while_cmd,ROOT_user_details,AL_user_details,S_user_details,S_user_details_1,S_user_details_2,E_user_details,ROOT_variable,AL_variable,S_variable,S_variable_1,S_variable_2,E_variable,ROOT_variable_data,AL_variable_data,S_variable_data,S_variable_data_1,S_variable_data_2,E_variable_data,ROOT_variable_list,AL_variable_list,S_variable_list,S_variable_list_1,S_variable_list_2,E_variable_list,ROOT_variable_usage,AL_variable_usage,S_variable_usage,S_variable_usage_1,S_variable_usage_2,E_variable_usage,ROOT_variable_usage_with_asc_desc,AL_variable_usage_with_asc_desc,S_variable_usage_with_asc_desc,S_variable_usage_with_asc_desc_1,S_variable_usage_with_asc_desc_2,E_variable_usage_with_asc_desc,ROOT_vname,AL_vname,E_vname,ROOT_vname_name_list,AL_vname_name_list,S_vname_name_list,S_vname_name_list_1,S_vname_name_list_2,E_vname_name_list,ROOT_when,AL_when,S_when,S_when_1,S_when_2,E_when,ROOT_whens,AL_whens,S_whens,S_whens_1,S_whens_2,E_whens,ROOT_windowtype,AL_windowtype,S_windowtype,S_windowtype_1,S_windowtype_2,E_windowtype,ROOT_x_y,AL_x_y,S_x_y,S_x_y_1,S_x_y_2,E_x_y,PROLOG,DOCTYPE,EPILOG>{
 "<!--" ENTER(INCOMMENT);
 "<?" ENTER(INPI);
}
<INCOMMENT>{
 "-->"		LEAVE;
 "--"		|
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in comment.");
}
<INPI>{
 "?>"		LEAVE;
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in PI (processing instruction).");
}

 /* SPACES: skipped uniformly */

<ROOT_assoc_array_variable,AL_assoc_array_variable,S_assoc_array_variable,S_assoc_array_variable_1,S_assoc_array_variable_2,E_assoc_array_variable,ROOT_assoc_subscript,AL_assoc_subscript,S_assoc_subscript,S_assoc_subscript_1,S_assoc_subscript_2,E_assoc_subscript,ROOT_attrib,AL_attrib,S_attrib,S_attrib_1,S_attrib_2,E_attrib,ROOT_bluebar,AL_bluebar,E_bluebar,ROOT_call_list,AL_call_list,S_call_list,S_call_list_1,S_call_list_2,E_call_list,ROOT_clear_data,AL_clear_data,S_clear_data,S_clear_data_1,S_clear_data_2,E_clear_data,ROOT_cmd_int_list,AL_cmd_int_list,S_cmd_int_list,S_cmd_int_list_1,S_cmd_int_list_2,E_cmd_int_list,ROOT_command,AL_command,S_command,S_command_1,S_command_2,E_command,ROOT_command_data,AL_command_data,S_command_data,S_command_data_1,S_command_data_2,E_command_data,ROOT_commands,AL_commands,S_commands,S_commands_1,S_commands_2,E_commands,ROOT_cons_list,AL_cons_list,S_cons_list,S_cons_list_1,S_cons_list_2,E_cons_list,ROOT_cons_list_entry,AL_cons_list_entry,E_cons_list_entry,ROOT_constant_data,AL_constant_data,E_constant_data,ROOT_convert,AL_convert,S_convert,S_convert_1,S_convert_2,E_convert,ROOT_dt_display,AL_dt_display,S_dt_display,S_dt_display_1,S_dt_display_2,E_dt_display,ROOT_event_data,AL_event_data,S_event_data,S_event_data_1,S_event_data_2,E_event_data,ROOT_expr_str,AL_expr_str,S_expr_str,S_expr_str_1,S_expr_str_2,E_expr_str,ROOT_expr_str_list,AL_expr_str_list,S_expr_str_list,S_expr_str_list_1,S_expr_str_list_2,E_expr_str_list,ROOT_fgl_comment,AL_fgl_comment,E_fgl_comment,ROOT_fh_field_entry,AL_fh_field_entry,S_fh_field_entry,S_fh_field_entry_1,S_fh_field_entry_2,E_fh_field_entry,ROOT_fh_field_list,AL_fh_field_list,S_fh_field_list,S_fh_field_list_1,S_fh_field_list_2,E_fh_field_list,ROOT_field,AL_field,E_field,ROOT_file_description,AL_file_description,S_file_description,S_file_description_1,S_file_description_2,E_file_description,ROOT_flist,AL_flist,E_flist,ROOT_form_field,AL_form_field,S_form_field,S_form_field_1,S_form_field_2,E_form_field,ROOT_funcname,AL_funcname,E_funcname,ROOT_funcname_list,AL_funcname_list,S_funcname_list,S_funcname_list_1,S_funcname_list_2,E_funcname_list,ROOT_globals_definition,AL_globals_definition,S_globals_definition,S_globals_definition_1,S_globals_definition_2,E_globals_definition,ROOT_if_cond,AL_if_cond,S_if_cond,S_if_cond_1,S_if_cond_2,E_if_cond,ROOT_if_conds,AL_if_conds,S_if_conds,S_if_conds_1,S_if_conds_2,E_if_conds,ROOT_ilist,AL_ilist,E_ilist,ROOT_int,AL_int,E_int,ROOT_linked_variable,AL_linked_variable,S_linked_variable,S_linked_variable_1,S_linked_variable_2,E_linked_variable,ROOT_lint_warning,AL_lint_warning,E_lint_warning,ROOT_list_of_integers,AL_list_of_integers,S_list_of_integers,S_list_of_integers_1,S_list_of_integers_2,E_list_of_integers,ROOT_locate_pos,AL_locate_pos,S_locate_pos,S_locate_pos_1,S_locate_pos_2,E_locate_pos,ROOT_long,AL_long,E_long,ROOT_manyoptions,AL_manyoptions,S_manyoptions,S_manyoptions_1,S_manyoptions_2,E_manyoptions,ROOT_menuoption,AL_menuoption,S_menuoption,S_menuoption_1,S_menuoption_2,E_menuoption,ROOT_module_definition,AL_module_definition,S_module_definition,S_module_definition_1,S_module_definition_2,E_module_definition,ROOT_module_entry,AL_module_entry,S_module_entry,S_module_entry_1,S_module_entry_2,E_module_entry,ROOT_object_variable,AL_object_variable,S_object_variable,S_object_variable_1,S_object_variable_2,E_object_variable,ROOT_on_event,AL_on_event,S_on_event,S_on_event_1,S_on_event_2,E_on_event,ROOT_on_events,AL_on_events,S_on_events,S_on_events_1,S_on_events_2,E_on_events,ROOT_pdf_startrep,AL_pdf_startrep,S_pdf_startrep,S_pdf_startrep_1,S_pdf_startrep_2,E_pdf_startrep,ROOT_program_definition,AL_program_definition,S_program_definition,S_program_definition_1,S_program_definition_2,E_program_definition,ROOT_record_variable,AL_record_variable,S_record_variable,S_record_variable_1,S_record_variable_2,E_record_variable,ROOT_report_block_data,AL_report_block_data,S_report_block_data,S_report_block_data_1,S_report_block_data_2,E_report_block_data,ROOT_report_format_section,AL_report_format_section,S_report_format_section,S_report_format_section_1,S_report_format_section_2,E_report_format_section,ROOT_report_format_section_entry,AL_report_format_section_entry,S_report_format_section_entry,S_report_format_section_entry_1,S_report_format_section_entry_2,E_report_format_section_entry,ROOT_report_orderby_section,AL_report_orderby_section,S_report_orderby_section,S_report_orderby_section_1,S_report_orderby_section_2,E_report_orderby_section,ROOT_rowscols,AL_rowscols,S_rowscols,S_rowscols_1,S_rowscols_2,E_rowscols,ROOT_s_class_definition,AL_s_class_definition,S_s_class_definition,S_s_class_definition_1,S_s_class_definition_2,E_s_class_definition,ROOT_s_cur_def,AL_s_cur_def,S_s_cur_def,S_s_cur_def_1,S_s_cur_def_2,E_s_cur_def,ROOT_s_dependant_tables,AL_s_dependant_tables,E_s_dependant_tables,ROOT_s_exchange_clobber,AL_s_exchange_clobber,E_s_exchange_clobber,ROOT_s_expr_agg,AL_s_expr_agg,S_s_expr_agg,S_s_expr_agg_1,S_s_expr_agg_2,E_s_expr_agg,ROOT_s_expr_aligned,AL_s_expr_aligned,S_s_expr_aligned,S_s_expr_aligned_1,S_s_expr_aligned_2,E_s_expr_aligned,ROOT_s_expr_bound_fcall,AL_s_expr_bound_fcall,S_s_expr_bound_fcall,S_s_expr_bound_fcall_1,S_s_expr_bound_fcall_2,E_s_expr_bound_fcall,ROOT_s_expr_cached,AL_s_expr_cached,E_s_expr_cached,ROOT_s_expr_cast,AL_s_expr_cast,S_s_expr_cast,S_s_expr_cast_1,S_s_expr_cast_2,E_s_expr_cast,ROOT_s_expr_current,AL_s_expr_current,E_s_expr_current,ROOT_s_expr_datetime,AL_s_expr_datetime,E_s_expr_datetime,ROOT_s_expr_dynarr_extent,AL_s_expr_dynarr_extent,S_s_expr_dynarr_extent,S_s_expr_dynarr_extent_1,S_s_expr_dynarr_extent_2,E_s_expr_dynarr_extent,ROOT_s_expr_dynarr_function_call_n,AL_s_expr_dynarr_function_call_n,S_s_expr_dynarr_function_call_n,S_s_expr_dynarr_function_call_n_1,S_s_expr_dynarr_function_call_n_2,E_s_expr_dynarr_function_call_n,ROOT_s_expr_exists_sq,AL_s_expr_exists_sq,S_s_expr_exists_sq,S_s_expr_exists_sq_1,S_s_expr_exists_sq_2,E_s_expr_exists_sq,ROOT_s_expr_extend,AL_s_expr_extend,S_s_expr_extend,S_s_expr_extend_1,S_s_expr_extend_2,E_s_expr_extend,ROOT_s_expr_external_call,AL_s_expr_external_call,S_s_expr_external_call,S_s_expr_external_call_1,S_s_expr_external_call_2,E_s_expr_external_call,ROOT_s_expr_field_touched,AL_s_expr_field_touched,S_s_expr_field_touched,S_s_expr_field_touched_1,S_s_expr_field_touched_2,E_s_expr_field_touched,ROOT_s_expr_form_is_compiled,AL_s_expr_form_is_compiled,S_s_expr_form_is_compiled,S_s_expr_form_is_compiled_1,S_s_expr_form_is_compiled_2,E_s_expr_form_is_compiled,ROOT_s_expr_function_call,AL_s_expr_function_call,S_s_expr_function_call,S_s_expr_function_call_1,S_s_expr_function_call_2,E_s_expr_function_call,ROOT_s_expr_get_fldbuf,AL_s_expr_get_fldbuf,S_s_expr_get_fldbuf,S_s_expr_get_fldbuf_1,S_s_expr_get_fldbuf_2,E_s_expr_get_fldbuf,ROOT_s_expr_in,AL_s_expr_in,S_s_expr_in,S_s_expr_in_1,S_s_expr_in_2,E_s_expr_in,ROOT_s_expr_in_sq,AL_s_expr_in_sq,S_s_expr_in_sq,S_s_expr_in_sq_1,S_s_expr_in_sq_2,E_s_expr_in_sq,ROOT_s_expr_infield,AL_s_expr_infield,S_s_expr_infield,S_s_expr_infield_1,S_s_expr_infield_2,E_s_expr_infield,ROOT_s_expr_interval,AL_s_expr_interval,E_s_expr_interval,ROOT_s_expr_member_function_call_n,AL_s_expr_member_function_call_n,S_s_expr_member_function_call_n,S_s_expr_member_function_call_n_1,S_s_expr_member_function_call_n_2,E_s_expr_member_function_call_n,ROOT_s_expr_op,AL_s_expr_op,S_s_expr_op,S_s_expr_op_1,S_s_expr_op_2,E_s_expr_op,ROOT_s_expr_parameter,AL_s_expr_parameter,E_s_expr_parameter,ROOT_s_expr_pdf_function_call,AL_s_expr_pdf_function_call,S_s_expr_pdf_function_call,S_s_expr_pdf_function_call_1,S_s_expr_pdf_function_call_2,E_s_expr_pdf_function_call,ROOT_s_expr_shared_function_call,AL_s_expr_shared_function_call,S_s_expr_shared_function_call,S_s_expr_shared_function_call_1,S_s_expr_shared_function_call_2,E_s_expr_shared_function_call,ROOT_s_expr_tag,AL_s_expr_tag,S_s_expr_tag,S_s_expr_tag_1,S_s_expr_tag_2,E_s_expr_tag,ROOT_s_expr_tmp,AL_s_expr_tmp,E_s_expr_tmp,ROOT_s_expr_wordwrap,AL_s_expr_wordwrap,S_s_expr_wordwrap,S_s_expr_wordwrap_1,S_s_expr_wordwrap_2,E_s_expr_wordwrap,ROOT_s_fetch,AL_s_fetch,S_s_fetch,S_s_fetch_1,S_s_fetch_2,E_s_fetch,ROOT_s_fetch_place,AL_s_fetch_place,S_s_fetch_place,S_s_fetch_place_1,S_s_fetch_place_2,E_s_fetch_place,ROOT_s_formhandler_definition,AL_s_formhandler_definition,S_s_formhandler_definition,S_s_formhandler_definition_1,S_s_formhandler_definition_2,E_s_formhandler_definition,ROOT_s_full_col,AL_s_full_col,E_s_full_col,ROOT_s_func,AL_s_func,E_s_func,ROOT_s_function_definition,AL_s_function_definition,S_s_function_definition,S_s_function_definition_1,S_s_function_definition_2,E_s_function_definition,ROOT_s_import_datatype,AL_s_import_datatype,E_s_import_datatype,ROOT_s_import_function_definition,AL_s_import_function_definition,E_s_import_function_definition,ROOT_s_import_legacy_definition,AL_s_import_legacy_definition,E_s_import_legacy_definition,ROOT_s_import_package,AL_s_import_package,E_s_import_package,ROOT_s_limit,AL_s_limit,E_s_limit,ROOT_s_module_entry_ptr_list,AL_s_module_entry_ptr_list,S_s_module_entry_ptr_list,S_s_module_entry_ptr_list_1,S_s_module_entry_ptr_list_2,E_s_module_entry_ptr_list,ROOT_s_pdf_report_definition,AL_s_pdf_report_definition,S_s_pdf_report_definition,S_s_pdf_report_definition_1,S_s_pdf_report_definition_2,E_s_pdf_report_definition,ROOT_s_report_definition,AL_s_report_definition,S_s_report_definition,S_s_report_definition_1,S_s_report_definition_2,E_s_report_definition,ROOT_s_select,AL_s_select,S_s_select,S_s_select_1,S_s_select_2,E_s_select,ROOT_s_select_finish,AL_s_select_finish,S_s_select_finish,S_s_select_finish_1,S_s_select_finish_2,E_s_select_finish,ROOT_s_select_list_item,AL_s_select_list_item,S_s_select_list_item,S_s_select_list_item_1,S_s_select_list_item_2,E_s_select_list_item,ROOT_s_select_list_item_agg_expr,AL_s_select_list_item_agg_expr,S_s_select_list_item_agg_expr,S_s_select_list_item_agg_expr_1,S_s_select_list_item_agg_expr_2,E_s_select_list_item_agg_expr,ROOT_s_select_list_item_between_expr,AL_s_select_list_item_between_expr,S_s_select_list_item_between_expr,S_s_select_list_item_between_expr_1,S_s_select_list_item_between_expr_2,E_s_select_list_item_between_expr,ROOT_s_select_list_item_builtin_fcall,AL_s_select_list_item_builtin_fcall,S_s_select_list_item_builtin_fcall,S_s_select_list_item_builtin_fcall_1,S_s_select_list_item_builtin_fcall_2,E_s_select_list_item_builtin_fcall,ROOT_s_select_list_item_column,AL_s_select_list_item_column,S_s_select_list_item_column,S_s_select_list_item_column_1,S_s_select_list_item_column_2,E_s_select_list_item_column,ROOT_s_select_list_item_complex_expr,AL_s_select_list_item_complex_expr,S_s_select_list_item_complex_expr,S_s_select_list_item_complex_expr_1,S_s_select_list_item_complex_expr_2,E_s_select_list_item_complex_expr,ROOT_s_select_list_item_data,AL_s_select_list_item_data,S_s_select_list_item_data,S_s_select_list_item_data_1,S_s_select_list_item_data_2,E_s_select_list_item_data,ROOT_s_select_list_item_extend,AL_s_select_list_item_extend,S_s_select_list_item_extend,S_s_select_list_item_extend_1,S_s_select_list_item_extend_2,E_s_select_list_item_extend,ROOT_s_select_list_item_fcall,AL_s_select_list_item_fcall,S_s_select_list_item_fcall,S_s_select_list_item_fcall_1,S_s_select_list_item_fcall_2,E_s_select_list_item_fcall,ROOT_s_select_list_item_list,AL_s_select_list_item_list,S_s_select_list_item_list,S_s_select_list_item_list_1,S_s_select_list_item_list_2,E_s_select_list_item_list,ROOT_s_select_list_item_regex,AL_s_select_list_item_regex,S_s_select_list_item_regex,S_s_select_list_item_regex_1,S_s_select_list_item_regex_2,E_s_select_list_item_regex,ROOT_s_select_list_item_sli_expr,AL_s_select_list_item_sli_expr,S_s_select_list_item_sli_expr,S_s_select_list_item_sli_expr_1,S_s_select_list_item_sli_expr_2,E_s_select_list_item_sli_expr,ROOT_s_select_list_item_slil_expr,AL_s_select_list_item_slil_expr,S_s_select_list_item_slil_expr,S_s_select_list_item_slil_expr_1,S_s_select_list_item_slil_expr_2,E_s_select_list_item_slil_expr,ROOT_s_select_list_item_sq_expression,AL_s_select_list_item_sq_expression,S_s_select_list_item_sq_expression,S_s_select_list_item_sq_expression_1,S_s_select_list_item_sq_expression_2,E_s_select_list_item_sq_expression,ROOT_s_sli_case,AL_s_sli_case,S_s_sli_case,S_s_sli_case_1,S_s_sli_case_2,E_s_sli_case,ROOT_s_sli_case_element,AL_s_sli_case_element,S_s_sli_case_element,S_s_sli_case_element_1,S_s_sli_case_element_2,E_s_sli_case_element,ROOT_s_sli_cast,AL_s_sli_cast,S_s_sli_cast,S_s_sli_cast_1,S_s_sli_cast_2,E_s_sli_cast,ROOT_s_source_code,AL_s_source_code,S_s_source_code,S_s_source_code_1,S_s_source_code_2,E_s_source_code,ROOT_s_table,AL_s_table,S_s_table,S_s_table_1,S_s_table_2,E_s_table,ROOT_s_table_list,AL_s_table_list,S_s_table_list,S_s_table_list_1,S_s_table_list_2,E_s_table_list,ROOT_s_table_list_element,AL_s_table_list_element,S_s_table_list_element,S_s_table_list_element_1,S_s_table_list_element_2,E_s_table_list_element,ROOT_s_update_pair,AL_s_update_pair,S_s_update_pair,S_s_update_pair_1,S_s_update_pair_2,E_s_update_pair,ROOT_short,AL_short,E_short,ROOT_simple_variable,AL_simple_variable,E_simple_variable,ROOT_single_option,AL_single_option,S_single_option,S_single_option_1,S_single_option_2,E_single_option,ROOT_sq_subquery,AL_sq_subquery,S_sq_subquery,S_sq_subquery_1,S_sq_subquery_2,E_sq_subquery,ROOT_sql_statement,AL_sql_statement,S_sql_statement,S_sql_statement_1,S_sql_statement_2,E_sql_statement,ROOT_startrep,AL_startrep,S_startrep,S_startrep_1,S_startrep_2,E_startrep,ROOT_str,AL_str,E_str,ROOT_str_list,AL_str_list,S_str_list,S_str_list_1,S_str_list_2,E_str_list,ROOT_struct_alloc_arr_cmd,AL_struct_alloc_arr_cmd,S_struct_alloc_arr_cmd,S_struct_alloc_arr_cmd_1,S_struct_alloc_arr_cmd_2,E_struct_alloc_arr_cmd,ROOT_struct_at_term_cmd,AL_struct_at_term_cmd,E_struct_at_term_cmd,ROOT_struct_call_cmd,AL_struct_call_cmd,S_struct_call_cmd,S_struct_call_cmd_1,S_struct_call_cmd_2,E_struct_call_cmd,ROOT_struct_call_shared_cmd,AL_struct_call_shared_cmd,E_struct_call_shared_cmd,ROOT_struct_cancel_cmd,AL_struct_cancel_cmd,E_struct_cancel_cmd,ROOT_struct_case_cmd,AL_struct_case_cmd,S_struct_case_cmd,S_struct_case_cmd_1,S_struct_case_cmd_2,E_struct_case_cmd,ROOT_struct_check_menu_cmd,AL_struct_check_menu_cmd,S_struct_check_menu_cmd,S_struct_check_menu_cmd_1,S_struct_check_menu_cmd_2,E_struct_check_menu_cmd,ROOT_struct_clear_cmd,AL_struct_clear_cmd,S_struct_clear_cmd,S_struct_clear_cmd_1,S_struct_clear_cmd_2,E_struct_clear_cmd,ROOT_struct_close_cmd,AL_struct_close_cmd,S_struct_close_cmd,S_struct_close_cmd_1,S_struct_close_cmd_2,E_struct_close_cmd,ROOT_struct_close_sql_cmd,AL_struct_close_sql_cmd,S_struct_close_sql_cmd,S_struct_close_sql_cmd_1,S_struct_close_sql_cmd_2,E_struct_close_sql_cmd,ROOT_struct_code_cmd,AL_struct_code_cmd,E_struct_code_cmd,ROOT_struct_connect_cmd,AL_struct_connect_cmd,S_struct_connect_cmd,S_struct_connect_cmd_1,S_struct_connect_cmd_2,E_struct_connect_cmd,ROOT_struct_construct_cmd,AL_struct_construct_cmd,S_struct_construct_cmd,S_struct_construct_cmd_1,S_struct_construct_cmd_2,E_struct_construct_cmd,ROOT_struct_continue_cmd,AL_struct_continue_cmd,E_struct_continue_cmd,ROOT_struct_convert_cmd,AL_struct_convert_cmd,S_struct_convert_cmd,S_struct_convert_cmd_1,S_struct_convert_cmd_2,E_struct_convert_cmd,ROOT_struct_current_win_cmd,AL_struct_current_win_cmd,S_struct_current_win_cmd,S_struct_current_win_cmd_1,S_struct_current_win_cmd_2,E_struct_current_win_cmd,ROOT_struct_dealloc_arr_cmd,AL_struct_dealloc_arr_cmd,S_struct_dealloc_arr_cmd,S_struct_dealloc_arr_cmd_1,S_struct_dealloc_arr_cmd_2,E_struct_dealloc_arr_cmd,ROOT_struct_declare_cmd,AL_struct_declare_cmd,S_struct_declare_cmd,S_struct_declare_cmd_1,S_struct_declare_cmd_2,E_struct_declare_cmd,ROOT_struct_defer_cmd,AL_struct_defer_cmd,E_struct_defer_cmd,ROOT_struct_delete_cmd,AL_struct_delete_cmd,S_struct_delete_cmd,S_struct_delete_cmd_1,S_struct_delete_cmd_2,E_struct_delete_cmd,ROOT_struct_disable_cmd,AL_struct_disable_cmd,S_struct_disable_cmd,S_struct_disable_cmd_1,S_struct_disable_cmd_2,E_struct_disable_cmd,ROOT_struct_disable_form_cmd,AL_struct_disable_form_cmd,S_struct_disable_form_cmd,S_struct_disable_form_cmd_1,S_struct_disable_form_cmd_2,E_struct_disable_form_cmd,ROOT_struct_disable_menu_cmd,AL_struct_disable_menu_cmd,S_struct_disable_menu_cmd,S_struct_disable_menu_cmd_1,S_struct_disable_menu_cmd_2,E_struct_disable_menu_cmd,ROOT_struct_display_array_cmd,AL_struct_display_array_cmd,S_struct_display_array_cmd,S_struct_display_array_cmd_1,S_struct_display_array_cmd_2,E_struct_display_array_cmd,ROOT_struct_display_b_n_cmd,AL_struct_display_b_n_cmd,S_struct_display_b_n_cmd,S_struct_display_b_n_cmd_1,S_struct_display_b_n_cmd_2,E_struct_display_b_n_cmd,ROOT_struct_display_cmd,AL_struct_display_cmd,S_struct_display_cmd,S_struct_display_cmd_1,S_struct_display_cmd_2,E_struct_display_cmd,ROOT_struct_display_form_cmd,AL_struct_display_form_cmd,S_struct_display_form_cmd,S_struct_display_form_cmd_1,S_struct_display_form_cmd_2,E_struct_display_form_cmd,ROOT_struct_enable_cmd,AL_struct_enable_cmd,S_struct_enable_cmd,S_struct_enable_cmd_1,S_struct_enable_cmd_2,E_struct_enable_cmd,ROOT_struct_enable_form_cmd,AL_struct_enable_form_cmd,S_struct_enable_form_cmd,S_struct_enable_form_cmd_1,S_struct_enable_form_cmd_2,E_struct_enable_form_cmd,ROOT_struct_enable_menu_cmd,AL_struct_enable_menu_cmd,S_struct_enable_menu_cmd,S_struct_enable_menu_cmd_1,S_struct_enable_menu_cmd_2,E_struct_enable_menu_cmd,ROOT_struct_error_cmd,AL_struct_error_cmd,S_struct_error_cmd,S_struct_error_cmd_1,S_struct_error_cmd_2,E_struct_error_cmd,ROOT_struct_execute_cmd,AL_struct_execute_cmd,S_struct_execute_cmd,S_struct_execute_cmd_1,S_struct_execute_cmd_2,E_struct_execute_cmd,ROOT_struct_execute_immediate_cmd,AL_struct_execute_immediate_cmd,S_struct_execute_immediate_cmd,S_struct_execute_immediate_cmd_1,S_struct_execute_immediate_cmd_2,E_struct_execute_immediate_cmd,ROOT_struct_exit_prog_cmd,AL_struct_exit_prog_cmd,S_struct_exit_prog_cmd,S_struct_exit_prog_cmd_1,S_struct_exit_prog_cmd_2,E_struct_exit_prog_cmd,ROOT_struct_ext_cmd,AL_struct_ext_cmd,E_struct_ext_cmd,ROOT_struct_fetch_cmd,AL_struct_fetch_cmd,S_struct_fetch_cmd,S_struct_fetch_cmd_1,S_struct_fetch_cmd_2,E_struct_fetch_cmd,ROOT_struct_finish_cmd,AL_struct_finish_cmd,S_struct_finish_cmd,S_struct_finish_cmd_1,S_struct_finish_cmd_2,E_struct_finish_cmd,ROOT_struct_flush_cmd,AL_struct_flush_cmd,S_struct_flush_cmd,S_struct_flush_cmd_1,S_struct_flush_cmd_2,E_struct_flush_cmd,ROOT_struct_for_cmd,AL_struct_for_cmd,S_struct_for_cmd,S_struct_for_cmd_1,S_struct_for_cmd_2,E_struct_for_cmd,ROOT_struct_foreach_cmd,AL_struct_foreach_cmd,S_struct_foreach_cmd,S_struct_foreach_cmd_1,S_struct_foreach_cmd_2,E_struct_foreach_cmd,ROOT_struct_free_cmd,AL_struct_free_cmd,S_struct_free_cmd,S_struct_free_cmd_1,S_struct_free_cmd_2,E_struct_free_cmd,ROOT_struct_free_rep_cmd,AL_struct_free_rep_cmd,E_struct_free_rep_cmd,ROOT_struct_goto_cmd,AL_struct_goto_cmd,E_struct_goto_cmd,ROOT_struct_hide_cmd,AL_struct_hide_cmd,S_struct_hide_cmd,S_struct_hide_cmd_1,S_struct_hide_cmd_2,E_struct_hide_cmd,ROOT_struct_hide_option_cmd,AL_struct_hide_option_cmd,S_struct_hide_option_cmd,S_struct_hide_option_cmd_1,S_struct_hide_option_cmd_2,E_struct_hide_option_cmd,ROOT_struct_if_cmd,AL_struct_if_cmd,S_struct_if_cmd,S_struct_if_cmd_1,S_struct_if_cmd_2,E_struct_if_cmd,ROOT_struct_init_cmd,AL_struct_init_cmd,S_struct_init_cmd,S_struct_init_cmd_1,S_struct_init_cmd_2,E_struct_init_cmd,ROOT_struct_input_array_cmd,AL_struct_input_array_cmd,S_struct_input_array_cmd,S_struct_input_array_cmd_1,S_struct_input_array_cmd_2,E_struct_input_array_cmd,ROOT_struct_input_cmd,AL_struct_input_cmd,S_struct_input_cmd,S_struct_input_cmd_1,S_struct_input_cmd_2,E_struct_input_cmd,ROOT_struct_insert_cmd,AL_struct_insert_cmd,S_struct_insert_cmd,S_struct_insert_cmd_1,S_struct_insert_cmd_2,E_struct_insert_cmd,ROOT_struct_label_cmd,AL_struct_label_cmd,E_struct_label_cmd,ROOT_struct_let_cmd,AL_struct_let_cmd,S_struct_let_cmd,S_struct_let_cmd_1,S_struct_let_cmd_2,E_struct_let_cmd,ROOT_struct_lint_expect_cmd,AL_struct_lint_expect_cmd,S_struct_lint_expect_cmd,S_struct_lint_expect_cmd_1,S_struct_lint_expect_cmd_2,E_struct_lint_expect_cmd,ROOT_struct_lint_ignore_cmd,AL_struct_lint_ignore_cmd,S_struct_lint_ignore_cmd,S_struct_lint_ignore_cmd_1,S_struct_lint_ignore_cmd_2,E_struct_lint_ignore_cmd,ROOT_struct_load_cmd,AL_struct_load_cmd,S_struct_load_cmd,S_struct_load_cmd_1,S_struct_load_cmd_2,E_struct_load_cmd,ROOT_struct_locate_cmd,AL_struct_locate_cmd,S_struct_locate_cmd,S_struct_locate_cmd_1,S_struct_locate_cmd_2,E_struct_locate_cmd,ROOT_struct_menu_cmd,AL_struct_menu_cmd,S_struct_menu_cmd,S_struct_menu_cmd_1,S_struct_menu_cmd_2,E_struct_menu_cmd,ROOT_struct_message_cmd,AL_struct_message_cmd,S_struct_message_cmd,S_struct_message_cmd_1,S_struct_message_cmd_2,E_struct_message_cmd,ROOT_struct_move_cmd,AL_struct_move_cmd,S_struct_move_cmd,S_struct_move_cmd_1,S_struct_move_cmd_2,E_struct_move_cmd,ROOT_struct_msg_box_cmd,AL_struct_msg_box_cmd,S_struct_msg_box_cmd,S_struct_msg_box_cmd_1,S_struct_msg_box_cmd_2,E_struct_msg_box_cmd,ROOT_struct_need_cmd,AL_struct_need_cmd,S_struct_need_cmd,S_struct_need_cmd_1,S_struct_need_cmd_2,E_struct_need_cmd,ROOT_struct_next_field_cmd,AL_struct_next_field_cmd,S_struct_next_field_cmd,S_struct_next_field_cmd_1,S_struct_next_field_cmd_2,E_struct_next_field_cmd,ROOT_struct_next_form_cmd,AL_struct_next_form_cmd,E_struct_next_form_cmd,ROOT_struct_next_option_cmd,AL_struct_next_option_cmd,S_struct_next_option_cmd,S_struct_next_option_cmd_1,S_struct_next_option_cmd_2,E_struct_next_option_cmd,ROOT_struct_open_cursor_cmd,AL_struct_open_cursor_cmd,S_struct_open_cursor_cmd,S_struct_open_cursor_cmd_1,S_struct_open_cursor_cmd_2,E_struct_open_cursor_cmd,ROOT_struct_open_form_cmd,AL_struct_open_form_cmd,S_struct_open_form_cmd,S_struct_open_form_cmd_1,S_struct_open_form_cmd_2,E_struct_open_form_cmd,ROOT_struct_open_form_gui_cmd,AL_struct_open_form_gui_cmd,S_struct_open_form_gui_cmd,S_struct_open_form_gui_cmd_1,S_struct_open_form_gui_cmd_2,E_struct_open_form_gui_cmd,ROOT_struct_open_statusbox_cmd,AL_struct_open_statusbox_cmd,S_struct_open_statusbox_cmd,S_struct_open_statusbox_cmd_1,S_struct_open_statusbox_cmd_2,E_struct_open_statusbox_cmd,ROOT_struct_open_window_cmd,AL_struct_open_window_cmd,S_struct_open_window_cmd,S_struct_open_window_cmd_1,S_struct_open_window_cmd_2,E_struct_open_window_cmd,ROOT_struct_options_cmd,AL_struct_options_cmd,S_struct_options_cmd,S_struct_options_cmd_1,S_struct_options_cmd_2,E_struct_options_cmd,ROOT_struct_output_cmd,AL_struct_output_cmd,S_struct_output_cmd,S_struct_output_cmd_1,S_struct_output_cmd_2,E_struct_output_cmd,ROOT_struct_pause_cmd,AL_struct_pause_cmd,S_struct_pause_cmd,S_struct_pause_cmd_1,S_struct_pause_cmd_2,E_struct_pause_cmd,ROOT_struct_pdf_call_cmd,AL_struct_pdf_call_cmd,S_struct_pdf_call_cmd,S_struct_pdf_call_cmd_1,S_struct_pdf_call_cmd_2,E_struct_pdf_call_cmd,ROOT_struct_prepare_cmd,AL_struct_prepare_cmd,S_struct_prepare_cmd,S_struct_prepare_cmd_1,S_struct_prepare_cmd_2,E_struct_prepare_cmd,ROOT_struct_print_cmd,AL_struct_print_cmd,S_struct_print_cmd,S_struct_print_cmd_1,S_struct_print_cmd_2,E_struct_print_cmd,ROOT_struct_print_file_cmd,AL_struct_print_file_cmd,S_struct_print_file_cmd,S_struct_print_file_cmd_1,S_struct_print_file_cmd_2,E_struct_print_file_cmd,ROOT_struct_print_img_cmd,AL_struct_print_img_cmd,S_struct_print_img_cmd,S_struct_print_img_cmd_1,S_struct_print_img_cmd_2,E_struct_print_img_cmd,ROOT_struct_prompt_cmd,AL_struct_prompt_cmd,S_struct_prompt_cmd,S_struct_prompt_cmd_1,S_struct_prompt_cmd_2,E_struct_prompt_cmd,ROOT_struct_put_cmd,AL_struct_put_cmd,S_struct_put_cmd,S_struct_put_cmd_1,S_struct_put_cmd_2,E_struct_put_cmd,ROOT_struct_resize_arr_cmd,AL_struct_resize_arr_cmd,S_struct_resize_arr_cmd,S_struct_resize_arr_cmd_1,S_struct_resize_arr_cmd_2,E_struct_resize_arr_cmd,ROOT_struct_return_cmd,AL_struct_return_cmd,S_struct_return_cmd,S_struct_return_cmd_1,S_struct_return_cmd_2,E_struct_return_cmd,ROOT_struct_run_cmd,AL_struct_run_cmd,S_struct_run_cmd,S_struct_run_cmd_1,S_struct_run_cmd_2,E_struct_run_cmd,ROOT_struct_run_waiting_for_cmd,AL_struct_run_waiting_for_cmd,S_struct_run_waiting_for_cmd,S_struct_run_waiting_for_cmd_1,S_struct_run_waiting_for_cmd_2,E_struct_run_waiting_for_cmd,ROOT_struct_scroll_cmd,AL_struct_scroll_cmd,S_struct_scroll_cmd,S_struct_scroll_cmd_1,S_struct_scroll_cmd_2,E_struct_scroll_cmd,ROOT_struct_select_cmd,AL_struct_select_cmd,S_struct_select_cmd,S_struct_select_cmd_1,S_struct_select_cmd_2,E_struct_select_cmd,ROOT_struct_set_database_cmd,AL_struct_set_database_cmd,S_struct_set_database_cmd,S_struct_set_database_cmd_1,S_struct_set_database_cmd_2,E_struct_set_database_cmd,ROOT_struct_set_session_cmd,AL_struct_set_session_cmd,S_struct_set_session_cmd,S_struct_set_session_cmd_1,S_struct_set_session_cmd_2,E_struct_set_session_cmd,ROOT_struct_show_cmd,AL_struct_show_cmd,S_struct_show_cmd,S_struct_show_cmd_1,S_struct_show_cmd_2,E_struct_show_cmd,ROOT_struct_show_menu_cmd,AL_struct_show_menu_cmd,S_struct_show_menu_cmd,S_struct_show_menu_cmd_1,S_struct_show_menu_cmd_2,E_struct_show_menu_cmd,ROOT_struct_show_option_cmd,AL_struct_show_option_cmd,S_struct_show_option_cmd,S_struct_show_option_cmd_1,S_struct_show_option_cmd_2,E_struct_show_option_cmd,ROOT_struct_skip_by_cmd,AL_struct_skip_by_cmd,S_struct_skip_by_cmd,S_struct_skip_by_cmd_1,S_struct_skip_by_cmd_2,E_struct_skip_by_cmd,ROOT_struct_skip_cmd,AL_struct_skip_cmd,S_struct_skip_cmd,S_struct_skip_cmd_1,S_struct_skip_cmd_2,E_struct_skip_cmd,ROOT_struct_skip_to_cmd,AL_struct_skip_to_cmd,S_struct_skip_to_cmd,S_struct_skip_to_cmd_1,S_struct_skip_to_cmd_2,E_struct_skip_to_cmd,ROOT_struct_sleep_cmd,AL_struct_sleep_cmd,S_struct_sleep_cmd,S_struct_sleep_cmd_1,S_struct_sleep_cmd_2,E_struct_sleep_cmd,ROOT_struct_sql_block_cmd,AL_struct_sql_block_cmd,S_struct_sql_block_cmd,S_struct_sql_block_cmd_1,S_struct_sql_block_cmd_2,E_struct_sql_block_cmd,ROOT_struct_sql_cmd,AL_struct_sql_cmd,S_struct_sql_cmd,S_struct_sql_cmd_1,S_struct_sql_cmd_2,E_struct_sql_cmd,ROOT_struct_sql_transact_cmd,AL_struct_sql_transact_cmd,S_struct_sql_transact_cmd,S_struct_sql_transact_cmd_1,S_struct_sql_transact_cmd_2,E_struct_sql_transact_cmd,ROOT_struct_start_cmd,AL_struct_start_cmd,S_struct_start_cmd,S_struct_start_cmd_1,S_struct_start_cmd_2,E_struct_start_cmd,ROOT_struct_start_rpc_cmd,AL_struct_start_rpc_cmd,S_struct_start_rpc_cmd,S_struct_start_rpc_cmd_1,S_struct_start_rpc_cmd_2,E_struct_start_rpc_cmd,ROOT_struct_term_rep_cmd,AL_struct_term_rep_cmd,E_struct_term_rep_cmd,ROOT_struct_uncheck_menu_cmd,AL_struct_uncheck_menu_cmd,S_struct_uncheck_menu_cmd,S_struct_uncheck_menu_cmd_1,S_struct_uncheck_menu_cmd_2,E_struct_uncheck_menu_cmd,ROOT_struct_unload_cmd,AL_struct_unload_cmd,S_struct_unload_cmd,S_struct_unload_cmd_1,S_struct_unload_cmd_2,E_struct_unload_cmd,ROOT_struct_update_cmd,AL_struct_update_cmd,S_struct_update_cmd,S_struct_update_cmd_1,S_struct_update_cmd_2,E_struct_update_cmd,ROOT_struct_validate_cmd,AL_struct_validate_cmd,S_struct_validate_cmd,S_struct_validate_cmd_1,S_struct_validate_cmd_2,E_struct_validate_cmd,ROOT_struct_whenever_cmd,AL_struct_whenever_cmd,E_struct_whenever_cmd,ROOT_struct_while_cmd,AL_struct_while_cmd,S_struct_while_cmd,S_struct_while_cmd_1,S_struct_while_cmd_2,E_struct_while_cmd,ROOT_user_details,AL_user_details,S_user_details,S_user_details_1,S_user_details_2,E_user_details,ROOT_variable,AL_variable,S_variable,S_variable_1,S_variable_2,E_variable,ROOT_variable_data,AL_variable_data,S_variable_data,S_variable_data_1,S_variable_data_2,E_variable_data,ROOT_variable_list,AL_variable_list,S_variable_list,S_variable_list_1,S_variable_list_2,E_variable_list,ROOT_variable_usage,AL_variable_usage,S_variable_usage,S_variable_usage_1,S_variable_usage_2,E_variable_usage,ROOT_variable_usage_with_asc_desc,AL_variable_usage_with_asc_desc,S_variable_usage_with_asc_desc,S_variable_usage_with_asc_desc_1,S_variable_usage_with_asc_desc_2,E_variable_usage_with_asc_desc,ROOT_vname,AL_vname,E_vname,ROOT_vname_name_list,AL_vname_name_list,S_vname_name_list,S_vname_name_list_1,S_vname_name_list_2,E_vname_name_list,ROOT_when,AL_when,S_when,S_when_1,S_when_2,E_when,ROOT_whens,AL_whens,S_whens,S_whens_1,S_whens_2,E_whens,ROOT_windowtype,AL_windowtype,S_windowtype,S_windowtype_1,S_windowtype_2,E_windowtype,ROOT_x_y,AL_x_y,S_x_y,S_x_y_1,S_x_y_2,E_x_y,PROLOG,DOCTYPE,EPILOG>{S} SKIP;

 /* PROLOG: determine root element and process it. */

<PROLOG>{
 "<?xml"({S}version{Eq}(\'{VersionNum}\'|\"{VersionNum}\"))?({S}encoding{Eq}(\'[^']*\'|\"[^"]*\"))?"?>" SET(DOCTYPE); 
 "<?xml"[^>]*">" FAIL("Bad declaration %s.",yytext);
}

<PROLOG,DOCTYPE>{
 "<!DOCTYPE"{S}"s_expr_exists_sq"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_exists_sq);
 "<!DOCTYPE"{S}"s_select_finish"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_finish);
 "<!DOCTYPE"{S}"s_expr_function_call"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_function_call);
 "<!DOCTYPE"{S}"s_expr_interval"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_interval);
 "<!DOCTYPE"{S}"s_expr_cast"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_cast);
 "<!DOCTYPE"{S}"struct_connect_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_connect_cmd);
 "<!DOCTYPE"{S}"struct_sleep_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_sleep_cmd);
 "<!DOCTYPE"{S}"s_cur_def"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_cur_def);
 "<!DOCTYPE"{S}"struct_show_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_show_cmd);
 "<!DOCTYPE"{S}"struct_disable_menu_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_disable_menu_cmd);
 "<!DOCTYPE"{S}"s_sli_case"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_sli_case);
 "<!DOCTYPE"{S}"s_select"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select);
 "<!DOCTYPE"{S}"struct_let_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_let_cmd);
 "<!DOCTYPE"{S}"s_select_list_item_builtin_fcall"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_builtin_fcall);
 "<!DOCTYPE"{S}"rowscols"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_rowscols);
 "<!DOCTYPE"{S}"str"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_str);
 "<!DOCTYPE"{S}"s_select_list_item_column"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_column);
 "<!DOCTYPE"{S}"s_import_function_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_import_function_definition);
 "<!DOCTYPE"{S}"report_block_data"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_report_block_data);
 "<!DOCTYPE"{S}"globals_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_globals_definition);
 "<!DOCTYPE"{S}"struct_clear_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_clear_cmd);
 "<!DOCTYPE"{S}"s_sli_cast"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_sli_cast);
 "<!DOCTYPE"{S}"object_variable"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_object_variable);
 "<!DOCTYPE"{S}"struct_call_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_call_cmd);
 "<!DOCTYPE"{S}"struct_declare_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_declare_cmd);
 "<!DOCTYPE"{S}"attrib"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_attrib);
 "<!DOCTYPE"{S}"struct_set_database_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_set_database_cmd);
 "<!DOCTYPE"{S}"struct_menu_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_menu_cmd);
 "<!DOCTYPE"{S}"struct_open_statusbox_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_open_statusbox_cmd);
 "<!DOCTYPE"{S}"s_expr_bound_fcall"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_bound_fcall);
 "<!DOCTYPE"{S}"variable"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_variable);
 "<!DOCTYPE"{S}"s_import_legacy_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_import_legacy_definition);
 "<!DOCTYPE"{S}"s_expr_op"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_op);
 "<!DOCTYPE"{S}"struct_free_rep_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_free_rep_cmd);
 "<!DOCTYPE"{S}"s_select_list_item_slil_expr"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_slil_expr);
 "<!DOCTYPE"{S}"windowtype"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_windowtype);
 "<!DOCTYPE"{S}"s_expr_infield"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_infield);
 "<!DOCTYPE"{S}"struct_goto_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_goto_cmd);
 "<!DOCTYPE"{S}"struct_finish_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_finish_cmd);
 "<!DOCTYPE"{S}"struct_locate_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_locate_cmd);
 "<!DOCTYPE"{S}"struct_skip_by_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_skip_by_cmd);
 "<!DOCTYPE"{S}"struct_show_menu_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_show_menu_cmd);
 "<!DOCTYPE"{S}"simple_variable"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_simple_variable);
 "<!DOCTYPE"{S}"struct_input_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_input_cmd);
 "<!DOCTYPE"{S}"s_select_list_item_complex_expr"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_complex_expr);
 "<!DOCTYPE"{S}"assoc_array_variable"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_assoc_array_variable);
 "<!DOCTYPE"{S}"s_expr_extend"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_extend);
 "<!DOCTYPE"{S}"command"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_command);
 "<!DOCTYPE"{S}"clear_data"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_clear_data);
 "<!DOCTYPE"{S}"ilist"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_ilist);
 "<!DOCTYPE"{S}"when"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_when);
 "<!DOCTYPE"{S}"struct_current_win_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_current_win_cmd);
 "<!DOCTYPE"{S}"expr_str"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_expr_str);
 "<!DOCTYPE"{S}"variable_data"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_variable_data);
 "<!DOCTYPE"{S}"report_orderby_section"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_report_orderby_section);
 "<!DOCTYPE"{S}"struct_msg_box_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_msg_box_cmd);
 "<!DOCTYPE"{S}"struct_unload_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_unload_cmd);
 "<!DOCTYPE"{S}"s_limit"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_limit);
 "<!DOCTYPE"{S}"struct_hide_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_hide_cmd);
 "<!DOCTYPE"{S}"struct_enable_form_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_enable_form_cmd);
 "<!DOCTYPE"{S}"linked_variable"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_linked_variable);
 "<!DOCTYPE"{S}"struct_check_menu_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_check_menu_cmd);
 "<!DOCTYPE"{S}"menuoption"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_menuoption);
 "<!DOCTYPE"{S}"struct_close_sql_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_close_sql_cmd);
 "<!DOCTYPE"{S}"single_option"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_single_option);
 "<!DOCTYPE"{S}"on_event"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_on_event);
 "<!DOCTYPE"{S}"if_cond"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_if_cond);
 "<!DOCTYPE"{S}"struct_uncheck_menu_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_uncheck_menu_cmd);
 "<!DOCTYPE"{S}"struct_display_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_display_cmd);
 "<!DOCTYPE"{S}"struct_print_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_print_cmd);
 "<!DOCTYPE"{S}"s_expr_form_is_compiled"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_form_is_compiled);
 "<!DOCTYPE"{S}"struct_sql_block_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_sql_block_cmd);
 "<!DOCTYPE"{S}"s_dependant_tables"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_dependant_tables);
 "<!DOCTYPE"{S}"fh_field_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_fh_field_list);
 "<!DOCTYPE"{S}"struct_disable_form_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_disable_form_cmd);
 "<!DOCTYPE"{S}"struct_exit_prog_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_exit_prog_cmd);
 "<!DOCTYPE"{S}"struct_pause_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_pause_cmd);
 "<!DOCTYPE"{S}"struct_lint_expect_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_lint_expect_cmd);
 "<!DOCTYPE"{S}"vname_name_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_vname_name_list);
 "<!DOCTYPE"{S}"on_events"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_on_events);
 "<!DOCTYPE"{S}"s_expr_external_call"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_external_call);
 "<!DOCTYPE"{S}"struct_open_form_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_open_form_cmd);
 "<!DOCTYPE"{S}"struct_continue_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_continue_cmd);
 "<!DOCTYPE"{S}"s_expr_tmp"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_tmp);
 "<!DOCTYPE"{S}"struct_flush_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_flush_cmd);
 "<!DOCTYPE"{S}"struct_init_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_init_cmd);
 "<!DOCTYPE"{S}"x_y"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_x_y);
 "<!DOCTYPE"{S}"s_module_entry_ptr_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_module_entry_ptr_list);
 "<!DOCTYPE"{S}"s_expr_shared_function_call"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_shared_function_call);
 "<!DOCTYPE"{S}"struct_for_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_for_cmd);
 "<!DOCTYPE"{S}"s_expr_current"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_current);
 "<!DOCTYPE"{S}"s_sli_case_element"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_sli_case_element);
 "<!DOCTYPE"{S}"struct_label_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_label_cmd);
 "<!DOCTYPE"{S}"s_expr_in_sq"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_in_sq);
 "<!DOCTYPE"{S}"assoc_subscript"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_assoc_subscript);
 "<!DOCTYPE"{S}"s_function_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_function_definition);
 "<!DOCTYPE"{S}"struct_ext_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_ext_cmd);
 "<!DOCTYPE"{S}"s_select_list_item_agg_expr"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_agg_expr);
 "<!DOCTYPE"{S}"struct_construct_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_construct_cmd);
 "<!DOCTYPE"{S}"struct_load_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_load_cmd);
 "<!DOCTYPE"{S}"struct_alloc_arr_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_alloc_arr_cmd);
 "<!DOCTYPE"{S}"s_expr_field_touched"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_field_touched);
 "<!DOCTYPE"{S}"module_entry"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_module_entry);
 "<!DOCTYPE"{S}"struct_display_b_n_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_display_b_n_cmd);
 "<!DOCTYPE"{S}"struct_execute_immediate_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_execute_immediate_cmd);
 "<!DOCTYPE"{S}"struct_update_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_update_cmd);
 "<!DOCTYPE"{S}"variable_usage_with_asc_desc"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_variable_usage_with_asc_desc);
 "<!DOCTYPE"{S}"convert"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_convert);
 "<!DOCTYPE"{S}"s_expr_datetime"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_datetime);
 "<!DOCTYPE"{S}"s_expr_parameter"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_parameter);
 "<!DOCTYPE"{S}"s_expr_dynarr_extent"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_dynarr_extent);
 "<!DOCTYPE"{S}"struct_start_rpc_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_start_rpc_cmd);
 "<!DOCTYPE"{S}"variable_usage"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_variable_usage);
 "<!DOCTYPE"{S}"struct_prepare_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_prepare_cmd);
 "<!DOCTYPE"{S}"struct_hide_option_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_hide_option_cmd);
 "<!DOCTYPE"{S}"struct_display_array_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_display_array_cmd);
 "<!DOCTYPE"{S}"struct_skip_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_skip_cmd);
 "<!DOCTYPE"{S}"struct_fetch_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_fetch_cmd);
 "<!DOCTYPE"{S}"struct_delete_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_delete_cmd);
 "<!DOCTYPE"{S}"s_select_list_item_sq_expression"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_sq_expression);
 "<!DOCTYPE"{S}"funcname"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_funcname);
 "<!DOCTYPE"{S}"s_table_list_element"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_table_list_element);
 "<!DOCTYPE"{S}"struct_start_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_start_cmd);
 "<!DOCTYPE"{S}"locate_pos"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_locate_pos);
 "<!DOCTYPE"{S}"s_exchange_clobber"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_exchange_clobber);
 "<!DOCTYPE"{S}"struct_sql_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_sql_cmd);
 "<!DOCTYPE"{S}"struct_pdf_call_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_pdf_call_cmd);
 "<!DOCTYPE"{S}"s_select_list_item_regex"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_regex);
 "<!DOCTYPE"{S}"fh_field_entry"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_fh_field_entry);
 "<!DOCTYPE"{S}"cons_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_cons_list);
 "<!DOCTYPE"{S}"dt_display"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_dt_display);
 "<!DOCTYPE"{S}"struct_message_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_message_cmd);
 "<!DOCTYPE"{S}"struct_defer_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_defer_cmd);
 "<!DOCTYPE"{S}"if_conds"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_if_conds);
 "<!DOCTYPE"{S}"report_format_section_entry"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_report_format_section_entry);
 "<!DOCTYPE"{S}"s_import_datatype"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_import_datatype);
 "<!DOCTYPE"{S}"struct_cancel_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_cancel_cmd);
 "<!DOCTYPE"{S}"struct_insert_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_insert_cmd);
 "<!DOCTYPE"{S}"struct_next_form_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_next_form_cmd);
 "<!DOCTYPE"{S}"form_field"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_form_field);
 "<!DOCTYPE"{S}"s_select_list_item_sli_expr"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_sli_expr);
 "<!DOCTYPE"{S}"s_expr_member_function_call_n"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_member_function_call_n);
 "<!DOCTYPE"{S}"s_func"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_func);
 "<!DOCTYPE"{S}"flist"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_flist);
 "<!DOCTYPE"{S}"manyoptions"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_manyoptions);
 "<!DOCTYPE"{S}"s_expr_pdf_function_call"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_pdf_function_call);
 "<!DOCTYPE"{S}"struct_if_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_if_cmd);
 "<!DOCTYPE"{S}"struct_close_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_close_cmd);
 "<!DOCTYPE"{S}"struct_lint_ignore_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_lint_ignore_cmd);
 "<!DOCTYPE"{S}"lint_warning"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_lint_warning);
 "<!DOCTYPE"{S}"command_data"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_command_data);
 "<!DOCTYPE"{S}"struct_need_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_need_cmd);
 "<!DOCTYPE"{S}"s_update_pair"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_update_pair);
 "<!DOCTYPE"{S}"struct_prompt_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_prompt_cmd);
 "<!DOCTYPE"{S}"struct_foreach_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_foreach_cmd);
 "<!DOCTYPE"{S}"sql_statement"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_sql_statement);
 "<!DOCTYPE"{S}"int"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_int);
 "<!DOCTYPE"{S}"struct_validate_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_validate_cmd);
 "<!DOCTYPE"{S}"s_import_package"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_import_package);
 "<!DOCTYPE"{S}"struct_run_waiting_for_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_run_waiting_for_cmd);
 "<!DOCTYPE"{S}"struct_disable_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_disable_cmd);
 "<!DOCTYPE"{S}"struct_whenever_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_whenever_cmd);
 "<!DOCTYPE"{S}"expr_str_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_expr_str_list);
 "<!DOCTYPE"{S}"variable_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_variable_list);
 "<!DOCTYPE"{S}"struct_call_shared_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_call_shared_cmd);
 "<!DOCTYPE"{S}"s_fetch_place"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_fetch_place);
 "<!DOCTYPE"{S}"struct_show_option_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_show_option_cmd);
 "<!DOCTYPE"{S}"s_table"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_table);
 "<!DOCTYPE"{S}"record_variable"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_record_variable);
 "<!DOCTYPE"{S}"s_select_list_item_between_expr"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_between_expr);
 "<!DOCTYPE"{S}"cons_list_entry"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_cons_list_entry);
 "<!DOCTYPE"{S}"s_fetch"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_fetch);
 "<!DOCTYPE"{S}"struct_open_cursor_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_open_cursor_cmd);
 "<!DOCTYPE"{S}"s_expr_cached"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_cached);
 "<!DOCTYPE"{S}"s_formhandler_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_formhandler_definition);
 "<!DOCTYPE"{S}"struct_error_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_error_cmd);
 "<!DOCTYPE"{S}"struct_case_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_case_cmd);
 "<!DOCTYPE"{S}"s_full_col"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_full_col);
 "<!DOCTYPE"{S}"struct_print_file_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_print_file_cmd);
 "<!DOCTYPE"{S}"struct_open_form_gui_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_open_form_gui_cmd);
 "<!DOCTYPE"{S}"bluebar"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_bluebar);
 "<!DOCTYPE"{S}"struct_sql_transact_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_sql_transact_cmd);
 "<!DOCTYPE"{S}"s_select_list_item_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_list);
 "<!DOCTYPE"{S}"s_report_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_report_definition);
 "<!DOCTYPE"{S}"struct_print_img_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_print_img_cmd);
 "<!DOCTYPE"{S}"struct_next_option_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_next_option_cmd);
 "<!DOCTYPE"{S}"struct_output_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_output_cmd);
 "<!DOCTYPE"{S}"constant_data"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_constant_data);
 "<!DOCTYPE"{S}"struct_convert_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_convert_cmd);
 "<!DOCTYPE"{S}"report_format_section"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_report_format_section);
 "<!DOCTYPE"{S}"s_select_list_item_fcall"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_fcall);
 "<!DOCTYPE"{S}"struct_free_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_free_cmd);
 "<!DOCTYPE"{S}"s_source_code"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_source_code);
 "<!DOCTYPE"{S}"list_of_integers"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_list_of_integers);
 "<!DOCTYPE"{S}"field"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_field);
 "<!DOCTYPE"{S}"s_class_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_class_definition);
 "<!DOCTYPE"{S}"s_expr_dynarr_function_call_n"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_dynarr_function_call_n);
 "<!DOCTYPE"{S}"s_expr_tag"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_tag);
 "<!DOCTYPE"{S}"struct_code_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_code_cmd);
 "<!DOCTYPE"{S}"s_expr_aligned"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_aligned);
 "<!DOCTYPE"{S}"struct_enable_menu_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_enable_menu_cmd);
 "<!DOCTYPE"{S}"s_expr_wordwrap"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_wordwrap);
 "<!DOCTYPE"{S}"whens"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_whens);
 "<!DOCTYPE"{S}"startrep"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_startrep);
 "<!DOCTYPE"{S}"struct_move_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_move_cmd);
 "<!DOCTYPE"{S}"struct_enable_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_enable_cmd);
 "<!DOCTYPE"{S}"struct_input_array_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_input_array_cmd);
 "<!DOCTYPE"{S}"struct_display_form_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_display_form_cmd);
 "<!DOCTYPE"{S}"struct_dealloc_arr_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_dealloc_arr_cmd);
 "<!DOCTYPE"{S}"struct_options_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_options_cmd);
 "<!DOCTYPE"{S}"s_pdf_report_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_pdf_report_definition);
 "<!DOCTYPE"{S}"struct_set_session_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_set_session_cmd);
 "<!DOCTYPE"{S}"struct_put_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_put_cmd);
 "<!DOCTYPE"{S}"cmd_int_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_cmd_int_list);
 "<!DOCTYPE"{S}"funcname_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_funcname_list);
 "<!DOCTYPE"{S}"s_expr_in"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_in);
 "<!DOCTYPE"{S}"commands"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_commands);
 "<!DOCTYPE"{S}"user_details"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_user_details);
 "<!DOCTYPE"{S}"struct_term_rep_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_term_rep_cmd);
 "<!DOCTYPE"{S}"struct_next_field_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_next_field_cmd);
 "<!DOCTYPE"{S}"s_expr_agg"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_agg);
 "<!DOCTYPE"{S}"struct_run_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_run_cmd);
 "<!DOCTYPE"{S}"struct_at_term_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_at_term_cmd);
 "<!DOCTYPE"{S}"short"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_short);
 "<!DOCTYPE"{S}"call_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_call_list);
 "<!DOCTYPE"{S}"struct_skip_to_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_skip_to_cmd);
 "<!DOCTYPE"{S}"struct_execute_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_execute_cmd);
 "<!DOCTYPE"{S}"long"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_long);
 "<!DOCTYPE"{S}"struct_return_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_return_cmd);
 "<!DOCTYPE"{S}"str_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_str_list);
 "<!DOCTYPE"{S}"file_description"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_file_description);
 "<!DOCTYPE"{S}"sq_subquery"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_sq_subquery);
 "<!DOCTYPE"{S}"fgl_comment"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_fgl_comment);
 "<!DOCTYPE"{S}"event_data"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_event_data);
 "<!DOCTYPE"{S}"s_select_list_item_extend"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_extend);
 "<!DOCTYPE"{S}"module_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_module_definition);
 "<!DOCTYPE"{S}"s_select_list_item_data"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item_data);
 "<!DOCTYPE"{S}"struct_resize_arr_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_resize_arr_cmd);
 "<!DOCTYPE"{S}"struct_open_window_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_open_window_cmd);
 "<!DOCTYPE"{S}"s_table_list"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_table_list);
 "<!DOCTYPE"{S}"program_definition"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_program_definition);
 "<!DOCTYPE"{S}"struct_while_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_while_cmd);
 "<!DOCTYPE"{S}"struct_select_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_select_cmd);
 "<!DOCTYPE"{S}"struct_scroll_cmd"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_struct_scroll_cmd);
 "<!DOCTYPE"{S}"vname"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_vname);
 "<!DOCTYPE"{S}"pdf_startrep"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_pdf_startrep);
 "<!DOCTYPE"{S}"s_expr_get_fldbuf"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_expr_get_fldbuf);
 "<!DOCTYPE"{S}"s_select_list_item"{S}SYSTEM{S}("'module_def.dtd'"|"\"module_def.dtd\""){s}">" SET(ROOT_s_select_list_item);
 "<!"[^>-][^>]*">" FAIL("Bad declaration %s.",yytext);
 . 		FAIL("Unexpected character `%c' in prolog.", yytext[0]);
 <<EOF>> 	FAIL("EOF in prolog.");
}

 /* RULES DERIVED FROM DTD. */

<ROOT_assoc_array_variable,S_variable_data_2,S_variable_data,S_variable_data_1>"<assoc_array_variable"{s} {
  AX_assoc_array_variable_char_size = 0;
  AX_assoc_array_variable_nm = 0;
  AX_assoc_array_variable_size = 0;
  ENTER(AL_assoc_array_variable); pushbuffer(0);
  }

<AL_assoc_array_variable>{
 "char_size"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_assoc_array_variable_char_size);
 "char_size"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_assoc_array_variable_char_size);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_assoc_array_variable_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_assoc_array_variable_nm);

 "size"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_assoc_array_variable_size);
 "size"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_assoc_array_variable_size);

 ">" {
  LEAVE; STag_assoc_array_variable();pcdata_ix = 0; ENTER(S_assoc_array_variable);
 }
 "/>" {
  LEAVE; STag_assoc_array_variable(); pcdata_ix = 0; ETag_assoc_array_variable(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_assoc_array_variable: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of assoc_array_variable element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `assoc_array_variable' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `assoc_array_variable' element.");
}

<S_assoc_array_variable_2,E_assoc_array_variable,S_assoc_array_variable>{
 "</assoc_array_variable"{s}">" {
  LEAVE;
  ETag_assoc_array_variable();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_assoc_array_variable: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</assoc_array_variable>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</assoc_array_variable>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</assoc_array_variable>' expected.");
}

<ROOT_assoc_subscript,S_expr_str_2,S_expr_str,S_expr_str_1>"<assoc_subscript"{s} {
  AX_assoc_subscript_nm = 0;
  AX_assoc_subscript_subscript_string = 0;
  ENTER(AL_assoc_subscript); pushbuffer(0);
  }

<AL_assoc_subscript>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_assoc_subscript_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_assoc_subscript_nm);

 "subscript_string"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_assoc_subscript_subscript_string);
 "subscript_string"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_assoc_subscript_subscript_string);

 ">" {
  LEAVE; STag_assoc_subscript();pcdata_ix = 0; ENTER(S_assoc_subscript);
 }
 "/>" {
  LEAVE; STag_assoc_subscript(); pcdata_ix = 0; ETag_assoc_subscript(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_expr_str_2: case S_expr_str: case S_expr_str_1: SET(S_expr_str_2); break;
   case ROOT_assoc_subscript: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of assoc_subscript element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `assoc_subscript' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `assoc_subscript' element.");
}

<E_assoc_subscript,S_assoc_subscript_2,S_assoc_subscript>{
 "</assoc_subscript"{s}">" {
  LEAVE;
  ETag_assoc_subscript();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_expr_str_2: case S_expr_str: case S_expr_str_1: SET(S_expr_str_2); break;
   case ROOT_assoc_subscript: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</assoc_subscript>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</assoc_subscript>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</assoc_subscript>' expected.");
}

<ROOT_attrib,S_struct_error_cmd_2,S_struct_display_cmd,S_struct_prompt_cmd_2,S_struct_construct_cmd,S_struct_prompt_cmd,S_struct_display_array_cmd_2,S_struct_error_cmd,S_struct_construct_cmd_2,S_struct_display_cmd_2,S_struct_display_array_cmd,S_struct_menu_cmd_2,S_struct_input_array_cmd_1,S_struct_display_b_n_cmd_2,S_struct_display_form_cmd_2,S_struct_construct_cmd_1,S_struct_open_window_cmd_2,S_struct_prompt_cmd_1,S_struct_input_cmd,S_struct_display_b_n_cmd_1,S_struct_open_window_cmd_1,S_struct_error_cmd_1,S_struct_input_cmd_1,S_struct_menu_cmd,S_struct_input_cmd_2,S_struct_message_cmd_2,S_struct_display_array_cmd_1,S_struct_message_cmd_1,S_struct_display_b_n_cmd,S_struct_display_form_cmd,S_struct_display_cmd_1,S_struct_message_cmd,S_struct_input_array_cmd_2,S_struct_display_form_cmd_1,S_struct_open_window_cmd,S_struct_menu_cmd_1,S_struct_input_array_cmd>"<attrib"{s} {
  AX_attrib_allow_delete = 0;
  AX_attrib_allow_insert = 0;
  AX_attrib_blink = 0;
  AX_attrib_bold = 0;
  AX_attrib_border = 0;
  AX_attrib_color = 0;
  AX_attrib_dim = 0;
  AX_attrib_invisible = 0;
  AX_attrib_nm = 0;
  AX_attrib_no_new_lines = 0;
  AX_attrib_nonewlines = 0;
  AX_attrib_normal = 0;
  AX_attrib_pad = 0;
  AX_attrib_reverse = 0;
  AX_attrib_text = 0;
  AX_attrib_underline = 0;
  ENTER(AL_attrib); pushbuffer(0);
  }

<AL_attrib>{
 "allow_delete"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_allow_delete);
 "allow_delete"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_allow_delete);

 "allow_insert"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_allow_insert);
 "allow_insert"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_allow_insert);

 "blink"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_blink);
 "blink"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_blink);

 "bold"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_bold);
 "bold"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_bold);

 "border"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_border);
 "border"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_border);

 "color"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_color);
 "color"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_color);

 "dim"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_dim);
 "dim"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_dim);

 "invisible"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_invisible);
 "invisible"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_invisible);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_nm);

 "no_new_lines"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_no_new_lines);
 "no_new_lines"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_no_new_lines);

 "nonewlines"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_nonewlines);
 "nonewlines"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_nonewlines);

 "normal"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_normal);
 "normal"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_normal);

 "pad"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_pad);
 "pad"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_pad);

 "reverse"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_reverse);
 "reverse"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_reverse);

 "text"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_text);
 "text"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_text);

 "underline"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_attrib_underline);
 "underline"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_attrib_underline);

 ">" {
  LEAVE; STag_attrib();pcdata_ix = 0; ENTER(S_attrib);
 }
 "/>" {
  LEAVE; STag_attrib(); pcdata_ix = 0; ETag_attrib(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_menu_cmd_2: case S_struct_menu_cmd: case S_struct_menu_cmd_1: SET(S_struct_menu_cmd_2); break;
   case S_struct_construct_cmd: case S_struct_construct_cmd_2: case S_struct_construct_cmd_1: SET(S_struct_construct_cmd_2); break;
   case S_struct_display_cmd: case S_struct_display_cmd_2: case S_struct_display_cmd_1: SET(S_struct_display_cmd_2); break;
   case S_struct_open_window_cmd_2: case S_struct_open_window_cmd_1: case S_struct_open_window_cmd: SET(S_struct_open_window_cmd_2); break;
   case S_struct_error_cmd_2: case S_struct_error_cmd: case S_struct_error_cmd_1: SET(S_struct_error_cmd_2); break;
   case S_struct_input_array_cmd_1: case S_struct_input_array_cmd_2: case S_struct_input_array_cmd: SET(S_struct_input_array_cmd_2); break;
   case S_struct_prompt_cmd_2: case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: SET(S_struct_prompt_cmd_2); break;
   case S_struct_display_b_n_cmd_2: case S_struct_display_b_n_cmd_1: case S_struct_display_b_n_cmd: SET(S_struct_display_b_n_cmd_2); break;
   case S_struct_display_form_cmd_2: case S_struct_display_form_cmd: case S_struct_display_form_cmd_1: SET(S_struct_display_form_cmd_2); break;
   case S_struct_message_cmd_2: case S_struct_message_cmd_1: case S_struct_message_cmd: SET(S_struct_message_cmd_2); break;
   case S_struct_input_cmd: case S_struct_input_cmd_1: case S_struct_input_cmd_2: SET(S_struct_input_cmd_2); break;
   case S_struct_display_array_cmd_2: case S_struct_display_array_cmd: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case ROOT_attrib: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of attrib element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `attrib' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `attrib' element.");
}

<S_attrib_2,S_attrib,E_attrib>{
 "</attrib"{s}">" {
  LEAVE;
  ETag_attrib();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_menu_cmd_2: case S_struct_menu_cmd: case S_struct_menu_cmd_1: SET(S_struct_menu_cmd_2); break;
   case S_struct_construct_cmd: case S_struct_construct_cmd_2: case S_struct_construct_cmd_1: SET(S_struct_construct_cmd_2); break;
   case S_struct_display_cmd: case S_struct_display_cmd_2: case S_struct_display_cmd_1: SET(S_struct_display_cmd_2); break;
   case S_struct_open_window_cmd_2: case S_struct_open_window_cmd_1: case S_struct_open_window_cmd: SET(S_struct_open_window_cmd_2); break;
   case S_struct_error_cmd_2: case S_struct_error_cmd: case S_struct_error_cmd_1: SET(S_struct_error_cmd_2); break;
   case S_struct_input_array_cmd_1: case S_struct_input_array_cmd_2: case S_struct_input_array_cmd: SET(S_struct_input_array_cmd_2); break;
   case S_struct_prompt_cmd_2: case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: SET(S_struct_prompt_cmd_2); break;
   case S_struct_display_b_n_cmd_2: case S_struct_display_b_n_cmd_1: case S_struct_display_b_n_cmd: SET(S_struct_display_b_n_cmd_2); break;
   case S_struct_display_form_cmd_2: case S_struct_display_form_cmd: case S_struct_display_form_cmd_1: SET(S_struct_display_form_cmd_2); break;
   case S_struct_message_cmd_2: case S_struct_message_cmd_1: case S_struct_message_cmd: SET(S_struct_message_cmd_2); break;
   case S_struct_input_cmd: case S_struct_input_cmd_1: case S_struct_input_cmd_2: SET(S_struct_input_cmd_2); break;
   case S_struct_display_array_cmd_2: case S_struct_display_array_cmd: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case ROOT_attrib: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</attrib>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</attrib>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</attrib>' expected.");
}

<ROOT_bluebar,S_pdf_startrep,S_pdf_startrep_1,S_pdf_startrep_2>"<bluebar"{s} {
  AX_bluebar_b = 0;
  AX_bluebar_g = 0;
  AX_bluebar_nm = 0;
  AX_bluebar_r = 0;
  AX_bluebar_style = 0;
  ENTER(AL_bluebar); pushbuffer(0);
  }

<AL_bluebar>{
 "b"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_bluebar_b);
 "b"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_bluebar_b);

 "g"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_bluebar_g);
 "g"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_bluebar_g);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_bluebar_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_bluebar_nm);

 "r"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_bluebar_r);
 "r"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_bluebar_r);

 "style"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_bluebar_style);
 "style"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_bluebar_style);

 ">" {
  LEAVE; STag_bluebar();pcdata_ix = 0; ENTER(E_bluebar);
 }
 "/>" {
  LEAVE; STag_bluebar(); pcdata_ix = 0; ETag_bluebar(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_pdf_startrep: case S_pdf_startrep_1: case S_pdf_startrep_2: SET(S_pdf_startrep_2); break;
   case ROOT_bluebar: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of bluebar element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `bluebar' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `bluebar' element.");
}

<E_bluebar>{
 "</bluebar"{s}">" {
  LEAVE;
  ETag_bluebar();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_pdf_startrep: case S_pdf_startrep_1: case S_pdf_startrep_2: SET(S_pdf_startrep_2); break;
   case ROOT_bluebar: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</bluebar>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</bluebar>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</bluebar>' expected.");
}

<ROOT_call_list,S_s_function_definition_1,S_s_function_definition_2,S_s_report_definition,S_s_report_definition_1,S_s_pdf_report_definition_1,S_s_report_definition_2,S_s_pdf_report_definition_2,S_s_pdf_report_definition,S_s_function_definition>"<call_list"{s} {
  AX_call_list_nm = 0;
  ENTER(AL_call_list); pushbuffer(0);
  }

<AL_call_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_call_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_call_list_nm);

 ">" {
  LEAVE; STag_call_list();pcdata_ix = 0; ENTER(S_call_list);
 }
 "/>" {
  LEAVE; STag_call_list(); pcdata_ix = 0; ETag_call_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_function_definition_1: case S_s_function_definition_2: case S_s_function_definition: SET(S_s_function_definition_2); break;
   case S_s_report_definition: case S_s_report_definition_1: case S_s_report_definition_2: SET(S_s_report_definition_2); break;
   case S_s_pdf_report_definition_1: case S_s_pdf_report_definition_2: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_call_list: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of call_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `call_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `call_list' element.");
}

<E_call_list,S_call_list_2,S_call_list>{
 "</call_list"{s}">" {
  LEAVE;
  ETag_call_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_function_definition_1: case S_s_function_definition_2: case S_s_function_definition: SET(S_s_function_definition_2); break;
   case S_s_report_definition: case S_s_report_definition_1: case S_s_report_definition_2: SET(S_s_report_definition_2); break;
   case S_s_pdf_report_definition_1: case S_s_pdf_report_definition_2: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_call_list: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</call_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</call_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</call_list>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_clear_data,S_struct_clear_cmd,S_struct_clear_cmd_2,S_struct_clear_cmd_1>"<clear_data"{s} {
  AX_clear_data_e_clear = 0;
  AX_clear_data_nm = 0;
  ENTER(AL_clear_data); pushbuffer(0);
  }

<AL_clear_data>{
 "e_clear"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_clear_data_e_clear);
 "e_clear"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_clear_data_e_clear);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_clear_data_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_clear_data_nm);

 ">" {
  if (!AX_clear_data_e_clear) FAIL("Required attribute `e_clear' not set for `clear_data' element.");
  LEAVE; STag_clear_data();pcdata_ix = 0; ENTER(S_clear_data);
 }
 "/>" {
  if (!AX_clear_data_e_clear) FAIL("Required attribute `e_clear' not set for `clear_data' element.");
  LEAVE; STag_clear_data(); pcdata_ix = 0; ETag_clear_data(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_clear_cmd: case S_struct_clear_cmd_2: case S_struct_clear_cmd_1: SET(S_struct_clear_cmd_2); break;
   case ROOT_clear_data: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of clear_data element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `clear_data' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `clear_data' element.");
}

<S_clear_data,E_clear_data,S_clear_data_2,S_clear_data_1>{
 "</clear_data"{s}">" {
  LEAVE;
  ETag_clear_data();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_clear_cmd: case S_struct_clear_cmd_2: case S_struct_clear_cmd_1: SET(S_struct_clear_cmd_2); break;
   case ROOT_clear_data: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</clear_data>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</clear_data>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</clear_data>' expected.");
}

<ROOT_cmd_int_list,S_command,S_command_1,S_command_2>"<cmd_int_list"{s} {
  AX_cmd_int_list_nm = 0;
  ENTER(AL_cmd_int_list); pushbuffer(0);
  }

<AL_cmd_int_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_cmd_int_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_cmd_int_list_nm);

 ">" {
  LEAVE; STag_cmd_int_list();pcdata_ix = 0; ENTER(S_cmd_int_list);
 }
 "/>" {
  LEAVE; STag_cmd_int_list(); pcdata_ix = 0; ETag_cmd_int_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_command: case S_command_1: case S_command_2: SET(S_command_2); break;
   case ROOT_cmd_int_list: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of cmd_int_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `cmd_int_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `cmd_int_list' element.");
}

<E_cmd_int_list,S_cmd_int_list_2,S_cmd_int_list>{
 "</cmd_int_list"{s}">" {
  LEAVE;
  ETag_cmd_int_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_command: case S_command_1: case S_command_2: SET(S_command_2); break;
   case ROOT_cmd_int_list: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</cmd_int_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</cmd_int_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</cmd_int_list>' expected.");
}

<ROOT_command,S_call_list_1,S_call_list_2,S_module_entry,S_module_entry_1,S_commands_1,S_commands_2,S_call_list,S_commands,S_module_entry_2>"<command"{s} {
  AX_command_colno = 0;
  AX_command_comment = 0;
  AX_command_lineno = 0;
  AX_command_module = 0;
  AX_command_nm = 0;
  ENTER(AL_command); pushbuffer(0);
  }

<AL_command>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_command_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_command_colno);

 "comment"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_command_comment);
 "comment"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_command_comment);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_command_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_command_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_command_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_command_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_command_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_command_nm);

 ">" {
  LEAVE; STag_command();pcdata_ix = 0; ENTER(S_command);
 }
 "/>" {
  LEAVE; STag_command(); pcdata_ix = 0; ETag_command(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry: case S_module_entry_1: case S_module_entry_2: SET(S_module_entry_2); break;
   case S_call_list_1: case S_call_list_2: case S_call_list: SET(S_call_list_2); break;
   case S_commands_1: case S_commands_2: case S_commands: SET(S_commands_2); break;
   case ROOT_command: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of command element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `command' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `command' element.");
}

<S_command,S_command_2,E_command>{
 "</command"{s}">" {
  LEAVE;
  ETag_command();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry: case S_module_entry_1: case S_module_entry_2: SET(S_module_entry_2); break;
   case S_call_list_1: case S_call_list_2: case S_call_list: SET(S_call_list_2); break;
   case S_commands_1: case S_commands_2: case S_commands: SET(S_commands_2); break;
   case ROOT_command: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</command>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</command>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</command>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_command_data,S_command,S_command_1,S_command_2>"<command_data"{s} {
  AX_command_data_cmd_type = 0;
  AX_command_data_nm = 0;
  ENTER(AL_command_data); pushbuffer(0);
  }

<AL_command_data>{
 "cmd_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_command_data_cmd_type);
 "cmd_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_command_data_cmd_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_command_data_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_command_data_nm);

 ">" {
  if (!AX_command_data_cmd_type) FAIL("Required attribute `cmd_type' not set for `command_data' element.");
  LEAVE; STag_command_data();pcdata_ix = 0; ENTER(S_command_data);
 }
 "/>" {
  if (!AX_command_data_cmd_type) FAIL("Required attribute `cmd_type' not set for `command_data' element.");
  LEAVE; STag_command_data(); pcdata_ix = 0; ETag_command_data(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_command: case S_command_1: case S_command_2: SET(S_command_2); break;
   case ROOT_command_data: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of command_data element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `command_data' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `command_data' element.");
}

<S_command_data_1,S_command_data,E_command_data,S_command_data_2>{
 "</command_data"{s}">" {
  LEAVE;
  ETag_command_data();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_command: case S_command_1: case S_command_2: SET(S_command_2); break;
   case ROOT_command_data: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</command_data>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</command_data>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</command_data>' expected.");
}

<ROOT_commands,S_s_function_definition_1,S_s_function_definition_2,S_struct_foreach_cmd_1,S_struct_case_cmd_1,S_when,S_struct_if_cmd,S_report_format_section_entry_1,S_report_format_section_entry_2,S_struct_for_cmd,S_when_1,S_struct_foreach_cmd,S_struct_if_cmd_2,S_struct_for_cmd_1,S_struct_if_cmd_1,S_if_cond_2,S_if_cond_1,S_on_event_1,S_struct_case_cmd_2,S_when_2,S_struct_foreach_cmd_2,S_report_format_section_entry,S_struct_while_cmd_2,S_on_event,S_struct_while_cmd_1,S_if_cond,S_on_event_2,S_s_function_definition,S_struct_while_cmd,S_struct_case_cmd,S_struct_for_cmd_2>"<commands"{s} {
  AX_commands_nm = 0;
  ENTER(AL_commands); pushbuffer(0);
  }

<AL_commands>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_commands_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_commands_nm);

 ">" {
  LEAVE; STag_commands();pcdata_ix = 0; ENTER(S_commands);
 }
 "/>" {
  LEAVE; STag_commands(); pcdata_ix = 0; ETag_commands(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_when: case S_when_1: case S_when_2: SET(S_when_2); break;
   case S_struct_case_cmd_1: case S_struct_case_cmd_2: case S_struct_case_cmd: SET(S_struct_case_cmd_2); break;
   case S_struct_foreach_cmd_1: case S_struct_foreach_cmd: case S_struct_foreach_cmd_2: SET(S_struct_foreach_cmd_2); break;
   case S_s_function_definition_1: case S_s_function_definition_2: case S_s_function_definition: SET(S_s_function_definition_2); break;
   case S_if_cond_2: case S_if_cond_1: case S_if_cond: SET(S_if_cond_2); break;
   case S_struct_if_cmd: case S_struct_if_cmd_2: case S_struct_if_cmd_1: SET(S_struct_if_cmd_2); break;
   case S_struct_while_cmd_2: case S_struct_while_cmd_1: case S_struct_while_cmd: SET(S_struct_while_cmd_2); break;
   case S_on_event_1: case S_on_event: case S_on_event_2: SET(S_on_event_2); break;
   case ROOT_commands: SET(EPILOG); break;
   case S_struct_for_cmd: case S_struct_for_cmd_1: case S_struct_for_cmd_2: SET(S_struct_for_cmd_2); break;
   case S_report_format_section_entry_1: case S_report_format_section_entry_2: case S_report_format_section_entry: SET(S_report_format_section_entry_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of commands element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `commands' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `commands' element.");
}

<S_commands,E_commands,S_commands_2>{
 "</commands"{s}">" {
  LEAVE;
  ETag_commands();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_when: case S_when_1: case S_when_2: SET(S_when_2); break;
   case S_struct_case_cmd_1: case S_struct_case_cmd_2: case S_struct_case_cmd: SET(S_struct_case_cmd_2); break;
   case S_struct_foreach_cmd_1: case S_struct_foreach_cmd: case S_struct_foreach_cmd_2: SET(S_struct_foreach_cmd_2); break;
   case S_s_function_definition_1: case S_s_function_definition_2: case S_s_function_definition: SET(S_s_function_definition_2); break;
   case S_if_cond_2: case S_if_cond_1: case S_if_cond: SET(S_if_cond_2); break;
   case S_struct_if_cmd: case S_struct_if_cmd_2: case S_struct_if_cmd_1: SET(S_struct_if_cmd_2); break;
   case S_struct_while_cmd_2: case S_struct_while_cmd_1: case S_struct_while_cmd: SET(S_struct_while_cmd_2); break;
   case S_on_event_1: case S_on_event: case S_on_event_2: SET(S_on_event_2); break;
   case ROOT_commands: SET(EPILOG); break;
   case S_struct_for_cmd: case S_struct_for_cmd_1: case S_struct_for_cmd_2: SET(S_struct_for_cmd_2); break;
   case S_report_format_section_entry_1: case S_report_format_section_entry_2: case S_report_format_section_entry: SET(S_report_format_section_entry_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</commands>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</commands>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</commands>' expected.");
}

<ROOT_cons_list,S_struct_construct_cmd,S_struct_construct_cmd_2,S_struct_construct_cmd_1>"<cons_list"{s} {
  AX_cons_list_nm = 0;
  ENTER(AL_cons_list); pushbuffer(0);
  }

<AL_cons_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_cons_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_cons_list_nm);

 ">" {
  LEAVE; STag_cons_list();pcdata_ix = 0; ENTER(S_cons_list);
 }
 "/>" {
  LEAVE; STag_cons_list(); pcdata_ix = 0; ETag_cons_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_construct_cmd: case S_struct_construct_cmd_2: case S_struct_construct_cmd_1: SET(S_struct_construct_cmd_2); break;
   case ROOT_cons_list: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of cons_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `cons_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `cons_list' element.");
}

<S_cons_list,E_cons_list,S_cons_list_2>{
 "</cons_list"{s}">" {
  LEAVE;
  ETag_cons_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_construct_cmd: case S_struct_construct_cmd_2: case S_struct_construct_cmd_1: SET(S_struct_construct_cmd_2); break;
   case ROOT_cons_list: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</cons_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</cons_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</cons_list>' expected.");
}

<ROOT_cons_list_entry,S_cons_list_2,S_cons_list,S_cons_list_1>"<cons_list_entry"{s} {
  AX_cons_list_entry_colname = 0;
  AX_cons_list_entry_nm = 0;
  AX_cons_list_entry_tabname = 0;
  ENTER(AL_cons_list_entry); pushbuffer(0);
  }

<AL_cons_list_entry>{
 "colname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_cons_list_entry_colname);
 "colname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_cons_list_entry_colname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_cons_list_entry_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_cons_list_entry_nm);

 "tabname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_cons_list_entry_tabname);
 "tabname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_cons_list_entry_tabname);

 ">" {
  LEAVE; STag_cons_list_entry();pcdata_ix = 0; ENTER(E_cons_list_entry);
 }
 "/>" {
  LEAVE; STag_cons_list_entry(); pcdata_ix = 0; ETag_cons_list_entry(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_cons_list_2: case S_cons_list: case S_cons_list_1: SET(S_cons_list_2); break;
   case ROOT_cons_list_entry: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of cons_list_entry element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `cons_list_entry' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `cons_list_entry' element.");
}

<E_cons_list_entry>{
 "</cons_list_entry"{s}">" {
  LEAVE;
  ETag_cons_list_entry();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_cons_list_2: case S_cons_list: case S_cons_list_1: SET(S_cons_list_2); break;
   case ROOT_cons_list_entry: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</cons_list_entry>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</cons_list_entry>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</cons_list_entry>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_constant_data,S_variable_data_1,S_variable_data,S_variable_data_2>"<constant_data"{s} {
  AX_constant_data_data_c = 0;
  AX_constant_data_data_f = 0;
  AX_constant_data_data_i = 0;
  AX_constant_data_data_ident = 0;
  AX_constant_data_e_constant_type = 0;
  AX_constant_data_nm = 0;
  ENTER(AL_constant_data); pushbuffer(0);
  }

<AL_constant_data>{
 "data_c"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_constant_data_data_c);
 "data_c"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_constant_data_data_c);

 "data_f"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_constant_data_data_f);
 "data_f"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_constant_data_data_f);

 "data_i"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_constant_data_data_i);
 "data_i"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_constant_data_data_i);

 "data_ident"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_constant_data_data_ident);
 "data_ident"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_constant_data_data_ident);

 "e_constant_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_constant_data_e_constant_type);
 "e_constant_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_constant_data_e_constant_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_constant_data_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_constant_data_nm);

 ">" {
  if (!AX_constant_data_e_constant_type) FAIL("Required attribute `e_constant_type' not set for `constant_data' element.");
  LEAVE; STag_constant_data();pcdata_ix = 0; ENTER(E_constant_data);
 }
 "/>" {
  if (!AX_constant_data_e_constant_type) FAIL("Required attribute `e_constant_type' not set for `constant_data' element.");
  LEAVE; STag_constant_data(); pcdata_ix = 0; ETag_constant_data(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_1: case S_variable_data: case S_variable_data_2: SET(S_variable_data_2); break;
   case ROOT_constant_data: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of constant_data element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `constant_data' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `constant_data' element.");
}

<E_constant_data>{
 "</constant_data"{s}">" {
  LEAVE;
  ETag_constant_data();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_1: case S_variable_data: case S_variable_data_2: SET(S_variable_data_2); break;
   case ROOT_constant_data: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</constant_data>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</constant_data>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</constant_data>' expected.");
}

<ROOT_convert,S_struct_convert_cmd_1,S_struct_finish_cmd_2,S_struct_finish_cmd,S_struct_convert_cmd,S_struct_finish_cmd_1,S_struct_convert_cmd_2>"<convert"{s} {
  AX_convert_nm = 0;
  AX_convert_towhat = 0;
  ENTER(AL_convert); pushbuffer(0);
  }

<AL_convert>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_convert_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_convert_nm);

 "towhat"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_convert_towhat);
 "towhat"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_convert_towhat);

 ">" {
  LEAVE; STag_convert();pcdata_ix = 0; ENTER(S_convert);
 }
 "/>" {
  LEAVE; STag_convert(); pcdata_ix = 0; ETag_convert(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_finish_cmd_2: case S_struct_finish_cmd: case S_struct_finish_cmd_1: SET(S_struct_finish_cmd_2); break;
   case S_struct_convert_cmd_1: case S_struct_convert_cmd: case S_struct_convert_cmd_2: SET(S_struct_convert_cmd_2); break;
   case ROOT_convert: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of convert element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `convert' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `convert' element.");
}

<S_convert,S_convert_2,E_convert>{
 "</convert"{s}">" {
  LEAVE;
  ETag_convert();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_finish_cmd_2: case S_struct_finish_cmd: case S_struct_finish_cmd_1: SET(S_struct_finish_cmd_2); break;
   case S_struct_convert_cmd_1: case S_struct_convert_cmd: case S_struct_convert_cmd_2: SET(S_struct_convert_cmd_2); break;
   case ROOT_convert: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</convert>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</convert>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</convert>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_dt_display,S_struct_display_cmd,S_struct_display_cmd_2,S_struct_display_cmd_1>"<dt_display"{s} {
  AX_dt_display_caption = 0;
  AX_dt_display_dt_display_type = 0;
  AX_dt_display_nm = 0;
  ENTER(AL_dt_display); pushbuffer(0);
  }

<AL_dt_display>{
 "caption"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_dt_display_caption);
 "caption"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_dt_display_caption);

 "dt_display_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_dt_display_dt_display_type);
 "dt_display_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_dt_display_dt_display_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_dt_display_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_dt_display_nm);

 ">" {
  if (!AX_dt_display_dt_display_type) FAIL("Required attribute `dt_display_type' not set for `dt_display' element.");
  LEAVE; STag_dt_display();pcdata_ix = 0; ENTER(S_dt_display);
 }
 "/>" {
  if (!AX_dt_display_dt_display_type) FAIL("Required attribute `dt_display_type' not set for `dt_display' element.");
  LEAVE; STag_dt_display(); pcdata_ix = 0; ETag_dt_display(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_display_cmd: case S_struct_display_cmd_2: case S_struct_display_cmd_1: SET(S_struct_display_cmd_2); break;
   case ROOT_dt_display: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of dt_display element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `dt_display' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `dt_display' element.");
}

<S_dt_display_1,S_dt_display_2,S_dt_display,E_dt_display>{
 "</dt_display"{s}">" {
  LEAVE;
  ETag_dt_display();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_display_cmd: case S_struct_display_cmd_2: case S_struct_display_cmd_1: SET(S_struct_display_cmd_2); break;
   case ROOT_dt_display: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</dt_display>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</dt_display>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</dt_display>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_event_data,S_on_event_1,S_on_event,S_on_event_2>"<event_data"{s} {
  AX_event_data_e_event = 0;
  AX_event_data_idle_n = 0;
  AX_event_data_interval_n = 0;
  AX_event_data_nm = 0;
  AX_event_data_on_action = 0;
  AX_event_data_time_n = 0;
  ENTER(AL_event_data); pushbuffer(0);
  }

<AL_event_data>{
 "e_event"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_event_data_e_event);
 "e_event"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_event_data_e_event);

 "idle_n"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_event_data_idle_n);
 "idle_n"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_event_data_idle_n);

 "interval_n"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_event_data_interval_n);
 "interval_n"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_event_data_interval_n);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_event_data_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_event_data_nm);

 "on_action"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_event_data_on_action);
 "on_action"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_event_data_on_action);

 "time_n"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_event_data_time_n);
 "time_n"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_event_data_time_n);

 ">" {
  if (!AX_event_data_e_event) FAIL("Required attribute `e_event' not set for `event_data' element.");
  LEAVE; STag_event_data();pcdata_ix = 0; ENTER(S_event_data);
 }
 "/>" {
  if (!AX_event_data_e_event) FAIL("Required attribute `e_event' not set for `event_data' element.");
  LEAVE; STag_event_data(); pcdata_ix = 0; ETag_event_data(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_on_event_1: case S_on_event: case S_on_event_2: SET(S_on_event_2); break;
   case ROOT_event_data: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of event_data element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `event_data' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `event_data' element.");
}

<S_event_data_2,S_event_data,E_event_data,S_event_data_1>{
 "</event_data"{s}">" {
  LEAVE;
  ETag_event_data();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_on_event_1: case S_on_event: case S_on_event_2: SET(S_on_event_2); break;
   case ROOT_event_data: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</event_data>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</event_data>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</event_data>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_expr_str,S_struct_delete_cmd_1,S_struct_run_cmd_1,S_struct_flush_cmd_1,S_struct_print_file_cmd_2,S_struct_put_cmd,S_locate_pos_1,S_struct_pdf_call_cmd,S_assoc_subscript,S_struct_display_array_cmd,S_struct_load_cmd_1,S_struct_for_cmd,S_s_expr_aligned_2,S_struct_open_form_cmd_2,S_s_expr_op_1,S_struct_put_cmd_2,S_struct_display_form_cmd_2,S_pdf_startrep_1,S_struct_construct_cmd_1,S_expr_str_1,S_struct_open_window_cmd_2,S_struct_dealloc_arr_cmd_2,S_windowtype_1,S_struct_run_waiting_for_cmd_1,S_struct_disable_form_cmd_1,S_s_expr_op_2,S_locate_pos,S_s_expr_tag_1,S_s_fetch_place_2,S_s_cur_def_2,S_struct_enable_form_cmd_2,S_struct_sql_block_cmd_1,S_struct_pause_cmd_1,S_struct_declare_cmd_1,S_struct_for_cmd_2,S_menuoption_2,S_struct_skip_cmd_1,S_struct_foreach_cmd_1,S_struct_msg_box_cmd,S_s_fetch_1,S_call_list_1,S_struct_select_cmd_2,S_struct_resize_arr_cmd_2,S_call_list_2,S_struct_skip_cmd,S_struct_start_rpc_cmd_1,S_windowtype_2,S_s_expr_form_is_compiled,S_struct_menu_cmd_2,S_struct_select_cmd,S_s_fetch_place,S_struct_exit_prog_cmd_2,S_struct_pause_cmd_2,S_struct_prepare_cmd,S_struct_unload_cmd,S_struct_print_img_cmd_2,S_s_expr_agg_1,S_struct_scroll_cmd,S_s_expr_in_sq,S_struct_enable_form_cmd,S_struct_execute_immediate_cmd_2,S_s_expr_dynarr_extent_1,S_s_expr_external_call_1,S_expr_str_2,S_struct_call_cmd,S_struct_menu_cmd,S_s_expr_in_1,S_report_block_data_1,S_struct_dealloc_arr_cmd_1,S_struct_scroll_cmd_1,S_struct_hide_cmd,S_if_cond,S_single_option,S_report_block_data,S_struct_insert_cmd_2,S_s_expr_tag_2,S_struct_case_cmd_1,S_struct_open_statusbox_cmd,S_struct_execute_cmd_1,S_single_option_2,S_struct_construct_cmd,S_struct_put_cmd_1,S_struct_need_cmd,S_struct_skip_to_cmd,S_struct_dealloc_arr_cmd,S_struct_close_cmd,S_x_y_1,S_startrep_2,S_struct_execute_immediate_cmd,S_struct_pause_cmd,S_struct_enable_form_cmd_1,S_struct_skip_to_cmd_2,S_struct_free_cmd_2,S_struct_open_window_cmd_1,S_s_expr_agg_2,S_windowtype,S_struct_skip_by_cmd_1,S_struct_set_session_cmd_2,S_struct_open_form_gui_cmd_2,S_struct_skip_by_cmd,S_struct_menu_cmd_1,S_struct_show_cmd_1,S_single_option_1,S_s_cur_def,S_struct_sql_block_cmd_2,S_s_expr_dynarr_function_call_n_2,S_struct_set_session_cmd,S_struct_load_cmd,S_when,S_convert_1,S_struct_resize_arr_cmd,S_s_expr_dynarr_function_call_n,S_struct_sql_cmd_1,S_struct_prompt_cmd,S_struct_display_array_cmd_2,S_fh_field_entry_1,S_struct_disable_form_cmd_2,S_struct_set_database_cmd_2,S_struct_delete_cmd_2,S_struct_prepare_cmd_2,S_struct_connect_cmd,S_struct_exit_prog_cmd,S_struct_select_cmd_1,S_struct_for_cmd_1,S_assoc_subscript_2,S_struct_open_form_gui_cmd,S_struct_set_session_cmd_1,S_s_expr_member_function_call_n,S_expr_str,S_s_expr_extend_2,S_struct_prompt_cmd_1,S_s_expr_dynarr_extent_2,S_clear_data,S_s_expr_aligned,S_call_list,S_struct_declare_cmd_2,S_when_2,S_struct_hide_cmd_1,S_x_y,S_s_expr_op,S_s_expr_in_sq_2,S_struct_scroll_cmd_2,S_s_expr_member_function_call_n_2,S_struct_sql_transact_cmd_1,S_clear_data_1,S_startrep,S_struct_show_cmd_2,S_struct_need_cmd_1,S_struct_open_statusbox_cmd_2,S_struct_free_cmd,S_struct_alloc_arr_cmd_2,S_startrep_1,S_s_expr_external_call_2,S_struct_fetch_cmd_1,S_struct_open_form_gui_cmd_1,S_struct_print_img_cmd,S_struct_move_cmd,S_struct_skip_to_cmd_1,S_struct_free_cmd_1,S_struct_sql_cmd,S_struct_skip_by_cmd_2,S_struct_flush_cmd,S_expr_str_list_2,S_struct_connect_cmd_1,S_variable_usage_1,S_s_expr_dynarr_extent,S_struct_exit_prog_cmd_1,S_struct_call_cmd_1,S_struct_current_win_cmd,S_if_cond_1,S_struct_pdf_call_cmd_1,S_struct_update_cmd_2,S_struct_display_array_cmd_1,S_user_details_1,S_struct_show_menu_cmd_2,S_struct_unload_cmd_1,S_struct_input_array_cmd,S_struct_load_cmd_2,S_struct_case_cmd,S_struct_next_option_cmd_1,S_struct_close_cmd_2,S_struct_declare_cmd,S_struct_prompt_cmd_2,S_struct_update_cmd,S_struct_set_database_cmd,S_s_expr_form_is_compiled_2,S_s_expr_wordwrap_2,S_struct_call_cmd_2,S_struct_input_array_cmd_1,S_struct_sleep_cmd_1,S_struct_move_cmd_1,S_pdf_startrep,S_struct_fetch_cmd_2,S_struct_foreach_cmd,S_rowscols_2,S_struct_open_form_cmd,S_fh_field_entry_2,S_rowscols,S_attrib,S_attrib_1,S_s_expr_in_2,S_struct_print_file_cmd_1,S_pdf_startrep_2,S_x_y_2,S_user_details,S_struct_start_rpc_cmd,S_struct_insert_cmd,S_struct_next_option_cmd,S_struct_sleep_cmd_2,S_s_expr_extend,S_struct_prepare_cmd_1,S_s_expr_extend_1,S_struct_hide_cmd_2,S_struct_case_cmd_2,S_struct_close_sql_cmd_1,S_struct_sql_cmd_2,S_struct_execute_cmd,S_variable_usage_2,S_struct_run_waiting_for_cmd_2,S_struct_sql_transact_cmd_2,S_struct_sql_block_cmd,S_struct_while_cmd_1,S_s_expr_in_sq_1,S_s_expr_cast,S_struct_current_win_cmd_2,S_locate_pos_2,S_s_expr_wordwrap_1,S_struct_alloc_arr_cmd_1,S_struct_open_statusbox_cmd_1,S_s_cur_def_1,S_s_expr_agg,S_menuoption,S_struct_disable_form_cmd,S_struct_sql_transact_cmd,S_s_expr_dynarr_function_call_n_1,S_struct_execute_immediate_cmd_1,S_convert_2,S_s_expr_tag,S_s_expr_external_call,S_struct_current_win_cmd_1,S_struct_construct_cmd_2,S_struct_show_cmd,S_struct_update_cmd_1,S_when_1,S_struct_open_cursor_cmd_2,S_struct_print_file_cmd,S_struct_msg_box_cmd_1,S_s_expr_aligned_1,S_struct_open_cursor_cmd_1,S_struct_open_cursor_cmd,S_struct_show_menu_cmd_1,S_s_expr_cast_1,S_fh_field_entry,S_struct_pdf_call_cmd_2,S_s_expr_member_function_call_n_1,S_struct_print_img_cmd_1,S_struct_next_option_cmd_2,S_struct_display_form_cmd,S_struct_move_cmd_2,S_struct_skip_cmd_2,S_clear_data_2,S_struct_fetch_cmd,S_struct_sleep_cmd,S_struct_close_sql_cmd,S_struct_alloc_arr_cmd,S_user_details_2,S_struct_input_array_cmd_2,S_s_fetch,S_assoc_subscript_1,S_struct_connect_cmd_2,S_s_expr_form_is_compiled_1,S_struct_need_cmd_2,S_struct_show_menu_cmd,S_struct_open_form_cmd_1,S_attrib_2,S_struct_run_cmd,S_struct_unload_cmd_2,S_convert,S_struct_start_rpc_cmd_2,S_expr_str_list,S_struct_set_database_cmd_1,S_variable_usage,S_s_expr_in,S_rowscols_1,S_expr_str_list_1,S_struct_resize_arr_cmd_1,S_s_fetch_2,S_s_expr_cast_2,S_if_cond_2,S_struct_close_sql_cmd_2,S_struct_execute_cmd_2,S_s_expr_wordwrap,S_report_block_data_2,S_struct_flush_cmd_2,S_struct_close_cmd_1,S_menuoption_1,S_s_fetch_place_1,S_struct_foreach_cmd_2,S_struct_delete_cmd,S_struct_run_cmd_2,S_struct_insert_cmd_1,S_struct_while_cmd_2,S_struct_display_form_cmd_1,S_struct_open_window_cmd,S_struct_run_waiting_for_cmd,S_struct_msg_box_cmd_2,S_struct_while_cmd>"<expr_str"{s} {
  AX_expr_str_e_expr_type = 0;
  AX_expr_str_expr_long = 0;
  AX_expr_str_expr_string = 0;
  AX_expr_str_i = 0;
  AX_expr_str_nm = 0;
  AX_expr_str_s = 0;
  AX_expr_str_si = 0;
  AX_expr_str_sv = 0;
  ENTER(AL_expr_str); pushbuffer(0);
  }

<AL_expr_str>{
 "e_expr_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_e_expr_type);
 "e_expr_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_e_expr_type);

 "expr_long"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_expr_long);
 "expr_long"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_expr_long);

 "expr_string"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_expr_string);
 "expr_string"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_expr_string);

 "i"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_i);
 "i"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_i);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_nm);

 "s"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_s);
 "s"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_s);

 "si"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_si);
 "si"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_si);

 "sv"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_sv);
 "sv"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_sv);

 ">" {
  if (!AX_expr_str_e_expr_type) FAIL("Required attribute `e_expr_type' not set for `expr_str' element.");
  LEAVE; STag_expr_str();pcdata_ix = 0; ENTER(S_expr_str);
 }
 "/>" {
  if (!AX_expr_str_e_expr_type) FAIL("Required attribute `e_expr_type' not set for `expr_str' element.");
  LEAVE; STag_expr_str(); pcdata_ix = 0; ETag_expr_str(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_alloc_arr_cmd_2: case S_struct_alloc_arr_cmd_1: case S_struct_alloc_arr_cmd: SET(S_struct_alloc_arr_cmd_2); break;
   case S_struct_open_statusbox_cmd: case S_struct_open_statusbox_cmd_2: case S_struct_open_statusbox_cmd_1: SET(S_struct_open_statusbox_cmd_2); break;
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_s_expr_external_call_1: case S_s_expr_external_call_2: case S_s_expr_external_call: SET(S_s_expr_external_call_2); break;
   case S_s_expr_tag_1: case S_s_expr_tag_2: case S_s_expr_tag: SET(S_s_expr_tag_2); break;
   case S_single_option: case S_single_option_2: case S_single_option_1: SET(S_single_option_2); break;
   case S_struct_print_file_cmd_2: case S_struct_print_file_cmd_1: case S_struct_print_file_cmd: SET(S_struct_print_file_cmd_2); break;
   case S_convert_1: case S_convert_2: case S_convert: SET(S_convert_2); break;
   case S_struct_skip_by_cmd_1: case S_struct_skip_by_cmd: case S_struct_skip_by_cmd_2: SET(S_struct_skip_by_cmd_2); break;
   case S_struct_construct_cmd_1: case S_struct_construct_cmd: case S_struct_construct_cmd_2: SET(S_struct_construct_cmd_2); break;
   case S_expr_str_list_2: case S_expr_str_list: case S_expr_str_list_1: SET(S_expr_str_list_2); break;
   case S_struct_open_cursor_cmd_2: case S_struct_open_cursor_cmd_1: case S_struct_open_cursor_cmd: SET(S_struct_open_cursor_cmd_2); break;
   case S_s_expr_aligned_2: case S_s_expr_aligned: case S_s_expr_aligned_1: SET(S_s_expr_aligned_2); break;
   case S_struct_open_form_cmd_2: case S_struct_open_form_cmd: case S_struct_open_form_cmd_1: SET(S_struct_open_form_cmd_2); break;
   case S_struct_put_cmd: case S_struct_put_cmd_2: case S_struct_put_cmd_1: SET(S_struct_put_cmd_2); break;
   case S_startrep_2: case S_startrep: case S_startrep_1: SET(S_startrep_2); break;
   case S_struct_display_form_cmd_2: case S_struct_display_form_cmd: case S_struct_display_form_cmd_1: SET(S_struct_display_form_cmd_2); break;
   case S_struct_open_window_cmd_2: case S_struct_open_window_cmd_1: case S_struct_open_window_cmd: SET(S_struct_open_window_cmd_2); break;
   case S_struct_dealloc_arr_cmd_2: case S_struct_dealloc_arr_cmd_1: case S_struct_dealloc_arr_cmd: SET(S_struct_dealloc_arr_cmd_2); break;
   case S_struct_skip_to_cmd: case S_struct_skip_to_cmd_2: case S_struct_skip_to_cmd_1: SET(S_struct_skip_to_cmd_2); break;
   case S_struct_free_cmd_2: case S_struct_free_cmd: case S_struct_free_cmd_1: SET(S_struct_free_cmd_2); break;
   case S_s_expr_agg_1: case S_s_expr_agg_2: case S_s_expr_agg: SET(S_s_expr_agg_2); break;
   case S_s_expr_op_1: case S_s_expr_op_2: case S_s_expr_op: SET(S_s_expr_op_2); break;
   case S_struct_update_cmd_2: case S_struct_update_cmd: case S_struct_update_cmd_1: SET(S_struct_update_cmd_2); break;
   case S_s_fetch_place_2: case S_s_fetch_place: case S_s_fetch_place_1: SET(S_s_fetch_place_2); break;
   case S_struct_pdf_call_cmd: case S_struct_pdf_call_cmd_1: case S_struct_pdf_call_cmd_2: SET(S_struct_pdf_call_cmd_2); break;
   case S_s_cur_def_2: case S_s_cur_def: case S_s_cur_def_1: SET(S_s_cur_def_2); break;
   case S_struct_enable_form_cmd_2: case S_struct_enable_form_cmd: case S_struct_enable_form_cmd_1: SET(S_struct_enable_form_cmd_2); break;
   case S_struct_next_option_cmd_1: case S_struct_next_option_cmd: case S_struct_next_option_cmd_2: SET(S_struct_next_option_cmd_2); break;
   case S_struct_move_cmd: case S_struct_move_cmd_1: case S_struct_move_cmd_2: SET(S_struct_move_cmd_2); break;
   case S_struct_skip_cmd_1: case S_struct_skip_cmd: case S_struct_skip_cmd_2: SET(S_struct_skip_cmd_2); break;
   case S_clear_data: case S_clear_data_1: case S_clear_data_2: SET(S_clear_data_2); break;
   case S_user_details_1: case S_user_details: case S_user_details_2: SET(S_user_details_2); break;
   case S_struct_input_array_cmd: case S_struct_input_array_cmd_1: case S_struct_input_array_cmd_2: SET(S_struct_input_array_cmd_2); break;
   case S_struct_show_menu_cmd_2: case S_struct_show_menu_cmd_1: case S_struct_show_menu_cmd: SET(S_struct_show_menu_cmd_2); break;
   case S_struct_set_session_cmd_2: case S_struct_set_session_cmd: case S_struct_set_session_cmd_1: SET(S_struct_set_session_cmd_2); break;
   case S_struct_open_form_gui_cmd_2: case S_struct_open_form_gui_cmd: case S_struct_open_form_gui_cmd_1: SET(S_struct_open_form_gui_cmd_2); break;
   case S_struct_connect_cmd: case S_struct_connect_cmd_1: case S_struct_connect_cmd_2: SET(S_struct_connect_cmd_2); break;
   case S_struct_load_cmd_1: case S_struct_load_cmd: case S_struct_load_cmd_2: SET(S_struct_load_cmd_2); break;
   case S_struct_need_cmd: case S_struct_need_cmd_1: case S_struct_need_cmd_2: SET(S_struct_need_cmd_2); break;
   case S_struct_for_cmd: case S_struct_for_cmd_2: case S_struct_for_cmd_1: SET(S_struct_for_cmd_2); break;
   case S_attrib: case S_attrib_1: case S_attrib_2: SET(S_attrib_2); break;
   case S_menuoption_2: case S_menuoption: case S_menuoption_1: SET(S_menuoption_2); break;
   case S_struct_sql_block_cmd_1: case S_struct_sql_block_cmd_2: case S_struct_sql_block_cmd: SET(S_struct_sql_block_cmd_2); break;
   case S_struct_close_cmd: case S_struct_close_cmd_2: case S_struct_close_cmd_1: SET(S_struct_close_cmd_2); break;
   case S_s_expr_dynarr_function_call_n_2: case S_s_expr_dynarr_function_call_n: case S_s_expr_dynarr_function_call_n_1: SET(S_s_expr_dynarr_function_call_n_2); break;
   case S_struct_unload_cmd: case S_struct_unload_cmd_1: case S_struct_unload_cmd_2: SET(S_struct_unload_cmd_2); break;
   case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: case S_struct_prompt_cmd_2: SET(S_struct_prompt_cmd_2); break;
   case S_struct_select_cmd_2: case S_struct_select_cmd: case S_struct_select_cmd_1: SET(S_struct_select_cmd_2); break;
   case S_struct_start_rpc_cmd_1: case S_struct_start_rpc_cmd: case S_struct_start_rpc_cmd_2: SET(S_struct_start_rpc_cmd_2); break;
   case S_struct_resize_arr_cmd_2: case S_struct_resize_arr_cmd: case S_struct_resize_arr_cmd_1: SET(S_struct_resize_arr_cmd_2); break;
   case S_call_list_1: case S_call_list_2: case S_call_list: SET(S_call_list_2); break;
   case S_s_expr_form_is_compiled: case S_s_expr_form_is_compiled_2: case S_s_expr_form_is_compiled_1: SET(S_s_expr_form_is_compiled_2); break;
   case S_struct_display_array_cmd: case S_struct_display_array_cmd_2: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case S_windowtype_1: case S_windowtype_2: case S_windowtype: SET(S_windowtype_2); break;
   case S_struct_set_database_cmd_2: case S_struct_set_database_cmd: case S_struct_set_database_cmd_1: SET(S_struct_set_database_cmd_2); break;
   case S_struct_disable_form_cmd_1: case S_struct_disable_form_cmd_2: case S_struct_disable_form_cmd: SET(S_struct_disable_form_cmd_2); break;
   case S_s_expr_wordwrap_2: case S_s_expr_wordwrap_1: case S_s_expr_wordwrap: SET(S_s_expr_wordwrap_2); break;
   case S_struct_menu_cmd_2: case S_struct_menu_cmd: case S_struct_menu_cmd_1: SET(S_struct_menu_cmd_2); break;
   case S_struct_call_cmd: case S_struct_call_cmd_1: case S_struct_call_cmd_2: SET(S_struct_call_cmd_2); break;
   case S_struct_delete_cmd_1: case S_struct_delete_cmd_2: case S_struct_delete_cmd: SET(S_struct_delete_cmd_2); break;
   case S_struct_prepare_cmd: case S_struct_prepare_cmd_2: case S_struct_prepare_cmd_1: SET(S_struct_prepare_cmd_2); break;
   case S_struct_fetch_cmd_1: case S_struct_fetch_cmd_2: case S_struct_fetch_cmd: SET(S_struct_fetch_cmd_2); break;
   case S_struct_exit_prog_cmd_2: case S_struct_exit_prog_cmd: case S_struct_exit_prog_cmd_1: SET(S_struct_exit_prog_cmd_2); break;
   case S_rowscols_2: case S_rowscols: case S_rowscols_1: SET(S_rowscols_2); break;
   case S_struct_pause_cmd_1: case S_struct_pause_cmd_2: case S_struct_pause_cmd: SET(S_struct_pause_cmd_2); break;
   case S_fh_field_entry_1: case S_fh_field_entry_2: case S_fh_field_entry: SET(S_fh_field_entry_2); break;
   case S_assoc_subscript: case S_assoc_subscript_2: case S_assoc_subscript_1: SET(S_assoc_subscript_2); break;
   case S_struct_print_img_cmd_2: case S_struct_print_img_cmd: case S_struct_print_img_cmd_1: SET(S_struct_print_img_cmd_2); break;
   case S_s_expr_cast: case S_s_expr_cast_1: case S_s_expr_cast_2: SET(S_s_expr_cast_2); break;
   case ROOT_expr_str: SET(EPILOG); break;
   case S_s_fetch_1: case S_s_fetch: case S_s_fetch_2: SET(S_s_fetch_2); break;
   case S_s_expr_in_1: case S_s_expr_in_2: case S_s_expr_in: SET(S_s_expr_in_2); break;
   case S_pdf_startrep_1: case S_pdf_startrep: case S_pdf_startrep_2: SET(S_pdf_startrep_2); break;
   case S_x_y_1: case S_x_y: case S_x_y_2: SET(S_x_y_2); break;
   case S_s_expr_extend_2: case S_s_expr_extend: case S_s_expr_extend_1: SET(S_s_expr_extend_2); break;
   case S_struct_execute_immediate_cmd_2: case S_struct_execute_immediate_cmd: case S_struct_execute_immediate_cmd_1: SET(S_struct_execute_immediate_cmd_2); break;
   case S_if_cond: case S_if_cond_1: case S_if_cond_2: SET(S_if_cond_2); break;
   case S_struct_close_sql_cmd_1: case S_struct_close_sql_cmd: case S_struct_close_sql_cmd_2: SET(S_struct_close_sql_cmd_2); break;
   case S_s_expr_dynarr_extent_1: case S_s_expr_dynarr_extent_2: case S_s_expr_dynarr_extent: SET(S_s_expr_dynarr_extent_2); break;
   case S_struct_sleep_cmd_1: case S_struct_sleep_cmd_2: case S_struct_sleep_cmd: SET(S_struct_sleep_cmd_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_struct_execute_cmd_1: case S_struct_execute_cmd: case S_struct_execute_cmd_2: SET(S_struct_execute_cmd_2); break;
   case S_struct_flush_cmd_1: case S_struct_flush_cmd: case S_struct_flush_cmd_2: SET(S_struct_flush_cmd_2); break;
   case S_report_block_data_1: case S_report_block_data: case S_report_block_data_2: SET(S_report_block_data_2); break;
   case S_struct_declare_cmd_1: case S_struct_declare_cmd_2: case S_struct_declare_cmd: SET(S_struct_declare_cmd_2); break;
   case S_struct_hide_cmd: case S_struct_hide_cmd_1: case S_struct_hide_cmd_2: SET(S_struct_hide_cmd_2); break;
   case S_when: case S_when_2: case S_when_1: SET(S_when_2); break;
   case S_struct_case_cmd_1: case S_struct_case_cmd: case S_struct_case_cmd_2: SET(S_struct_case_cmd_2); break;
   case S_struct_sql_cmd_1: case S_struct_sql_cmd: case S_struct_sql_cmd_2: SET(S_struct_sql_cmd_2); break;
   case S_struct_foreach_cmd_1: case S_struct_foreach_cmd: case S_struct_foreach_cmd_2: SET(S_struct_foreach_cmd_2); break;
   case S_struct_run_cmd_1: case S_struct_run_cmd: case S_struct_run_cmd_2: SET(S_struct_run_cmd_2); break;
   case S_variable_usage_1: case S_variable_usage_2: case S_variable_usage: SET(S_variable_usage_2); break;
   case S_struct_run_waiting_for_cmd_1: case S_struct_run_waiting_for_cmd_2: case S_struct_run_waiting_for_cmd: SET(S_struct_run_waiting_for_cmd_2); break;
   case S_struct_while_cmd_1: case S_struct_while_cmd_2: case S_struct_while_cmd: SET(S_struct_while_cmd_2); break;
   case S_struct_scroll_cmd: case S_struct_scroll_cmd_1: case S_struct_scroll_cmd_2: SET(S_struct_scroll_cmd_2); break;
   case S_s_expr_in_sq: case S_s_expr_in_sq_2: case S_s_expr_in_sq_1: SET(S_s_expr_in_sq_2); break;
   case S_struct_sql_transact_cmd_1: case S_struct_sql_transact_cmd_2: case S_struct_sql_transact_cmd: SET(S_struct_sql_transact_cmd_2); break;
   case S_struct_current_win_cmd: case S_struct_current_win_cmd_2: case S_struct_current_win_cmd_1: SET(S_struct_current_win_cmd_2); break;
   case S_s_expr_member_function_call_n: case S_s_expr_member_function_call_n_2: case S_s_expr_member_function_call_n_1: SET(S_s_expr_member_function_call_n_2); break;
   case S_struct_msg_box_cmd: case S_struct_msg_box_cmd_1: case S_struct_msg_box_cmd_2: SET(S_struct_msg_box_cmd_2); break;
   case S_struct_show_cmd_1: case S_struct_show_cmd_2: case S_struct_show_cmd: SET(S_struct_show_cmd_2); break;
   case S_locate_pos_1: case S_locate_pos: case S_locate_pos_2: SET(S_locate_pos_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of expr_str element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `expr_str' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `expr_str' element.");
}

<S_expr_str_2,E_expr_str,S_expr_str,S_expr_str_1>{
 "</expr_str"{s}">" {
  LEAVE;
  ETag_expr_str();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_alloc_arr_cmd_2: case S_struct_alloc_arr_cmd_1: case S_struct_alloc_arr_cmd: SET(S_struct_alloc_arr_cmd_2); break;
   case S_struct_open_statusbox_cmd: case S_struct_open_statusbox_cmd_2: case S_struct_open_statusbox_cmd_1: SET(S_struct_open_statusbox_cmd_2); break;
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_s_expr_external_call_1: case S_s_expr_external_call_2: case S_s_expr_external_call: SET(S_s_expr_external_call_2); break;
   case S_s_expr_tag_1: case S_s_expr_tag_2: case S_s_expr_tag: SET(S_s_expr_tag_2); break;
   case S_single_option: case S_single_option_2: case S_single_option_1: SET(S_single_option_2); break;
   case S_struct_print_file_cmd_2: case S_struct_print_file_cmd_1: case S_struct_print_file_cmd: SET(S_struct_print_file_cmd_2); break;
   case S_convert_1: case S_convert_2: case S_convert: SET(S_convert_2); break;
   case S_struct_skip_by_cmd_1: case S_struct_skip_by_cmd: case S_struct_skip_by_cmd_2: SET(S_struct_skip_by_cmd_2); break;
   case S_struct_construct_cmd_1: case S_struct_construct_cmd: case S_struct_construct_cmd_2: SET(S_struct_construct_cmd_2); break;
   case S_expr_str_list_2: case S_expr_str_list: case S_expr_str_list_1: SET(S_expr_str_list_2); break;
   case S_struct_open_cursor_cmd_2: case S_struct_open_cursor_cmd_1: case S_struct_open_cursor_cmd: SET(S_struct_open_cursor_cmd_2); break;
   case S_s_expr_aligned_2: case S_s_expr_aligned: case S_s_expr_aligned_1: SET(S_s_expr_aligned_2); break;
   case S_struct_open_form_cmd_2: case S_struct_open_form_cmd: case S_struct_open_form_cmd_1: SET(S_struct_open_form_cmd_2); break;
   case S_struct_put_cmd: case S_struct_put_cmd_2: case S_struct_put_cmd_1: SET(S_struct_put_cmd_2); break;
   case S_startrep_2: case S_startrep: case S_startrep_1: SET(S_startrep_2); break;
   case S_struct_display_form_cmd_2: case S_struct_display_form_cmd: case S_struct_display_form_cmd_1: SET(S_struct_display_form_cmd_2); break;
   case S_struct_open_window_cmd_2: case S_struct_open_window_cmd_1: case S_struct_open_window_cmd: SET(S_struct_open_window_cmd_2); break;
   case S_struct_dealloc_arr_cmd_2: case S_struct_dealloc_arr_cmd_1: case S_struct_dealloc_arr_cmd: SET(S_struct_dealloc_arr_cmd_2); break;
   case S_struct_skip_to_cmd: case S_struct_skip_to_cmd_2: case S_struct_skip_to_cmd_1: SET(S_struct_skip_to_cmd_2); break;
   case S_struct_free_cmd_2: case S_struct_free_cmd: case S_struct_free_cmd_1: SET(S_struct_free_cmd_2); break;
   case S_s_expr_agg_1: case S_s_expr_agg_2: case S_s_expr_agg: SET(S_s_expr_agg_2); break;
   case S_s_expr_op_1: case S_s_expr_op_2: case S_s_expr_op: SET(S_s_expr_op_2); break;
   case S_struct_update_cmd_2: case S_struct_update_cmd: case S_struct_update_cmd_1: SET(S_struct_update_cmd_2); break;
   case S_s_fetch_place_2: case S_s_fetch_place: case S_s_fetch_place_1: SET(S_s_fetch_place_2); break;
   case S_struct_pdf_call_cmd: case S_struct_pdf_call_cmd_1: case S_struct_pdf_call_cmd_2: SET(S_struct_pdf_call_cmd_2); break;
   case S_s_cur_def_2: case S_s_cur_def: case S_s_cur_def_1: SET(S_s_cur_def_2); break;
   case S_struct_enable_form_cmd_2: case S_struct_enable_form_cmd: case S_struct_enable_form_cmd_1: SET(S_struct_enable_form_cmd_2); break;
   case S_struct_next_option_cmd_1: case S_struct_next_option_cmd: case S_struct_next_option_cmd_2: SET(S_struct_next_option_cmd_2); break;
   case S_struct_move_cmd: case S_struct_move_cmd_1: case S_struct_move_cmd_2: SET(S_struct_move_cmd_2); break;
   case S_struct_skip_cmd_1: case S_struct_skip_cmd: case S_struct_skip_cmd_2: SET(S_struct_skip_cmd_2); break;
   case S_clear_data: case S_clear_data_1: case S_clear_data_2: SET(S_clear_data_2); break;
   case S_user_details_1: case S_user_details: case S_user_details_2: SET(S_user_details_2); break;
   case S_struct_input_array_cmd: case S_struct_input_array_cmd_1: case S_struct_input_array_cmd_2: SET(S_struct_input_array_cmd_2); break;
   case S_struct_show_menu_cmd_2: case S_struct_show_menu_cmd_1: case S_struct_show_menu_cmd: SET(S_struct_show_menu_cmd_2); break;
   case S_struct_set_session_cmd_2: case S_struct_set_session_cmd: case S_struct_set_session_cmd_1: SET(S_struct_set_session_cmd_2); break;
   case S_struct_open_form_gui_cmd_2: case S_struct_open_form_gui_cmd: case S_struct_open_form_gui_cmd_1: SET(S_struct_open_form_gui_cmd_2); break;
   case S_struct_connect_cmd: case S_struct_connect_cmd_1: case S_struct_connect_cmd_2: SET(S_struct_connect_cmd_2); break;
   case S_struct_load_cmd_1: case S_struct_load_cmd: case S_struct_load_cmd_2: SET(S_struct_load_cmd_2); break;
   case S_struct_need_cmd: case S_struct_need_cmd_1: case S_struct_need_cmd_2: SET(S_struct_need_cmd_2); break;
   case S_struct_for_cmd: case S_struct_for_cmd_2: case S_struct_for_cmd_1: SET(S_struct_for_cmd_2); break;
   case S_attrib: case S_attrib_1: case S_attrib_2: SET(S_attrib_2); break;
   case S_menuoption_2: case S_menuoption: case S_menuoption_1: SET(S_menuoption_2); break;
   case S_struct_sql_block_cmd_1: case S_struct_sql_block_cmd_2: case S_struct_sql_block_cmd: SET(S_struct_sql_block_cmd_2); break;
   case S_struct_close_cmd: case S_struct_close_cmd_2: case S_struct_close_cmd_1: SET(S_struct_close_cmd_2); break;
   case S_s_expr_dynarr_function_call_n_2: case S_s_expr_dynarr_function_call_n: case S_s_expr_dynarr_function_call_n_1: SET(S_s_expr_dynarr_function_call_n_2); break;
   case S_struct_unload_cmd: case S_struct_unload_cmd_1: case S_struct_unload_cmd_2: SET(S_struct_unload_cmd_2); break;
   case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: case S_struct_prompt_cmd_2: SET(S_struct_prompt_cmd_2); break;
   case S_struct_select_cmd_2: case S_struct_select_cmd: case S_struct_select_cmd_1: SET(S_struct_select_cmd_2); break;
   case S_struct_start_rpc_cmd_1: case S_struct_start_rpc_cmd: case S_struct_start_rpc_cmd_2: SET(S_struct_start_rpc_cmd_2); break;
   case S_struct_resize_arr_cmd_2: case S_struct_resize_arr_cmd: case S_struct_resize_arr_cmd_1: SET(S_struct_resize_arr_cmd_2); break;
   case S_call_list_1: case S_call_list_2: case S_call_list: SET(S_call_list_2); break;
   case S_s_expr_form_is_compiled: case S_s_expr_form_is_compiled_2: case S_s_expr_form_is_compiled_1: SET(S_s_expr_form_is_compiled_2); break;
   case S_struct_display_array_cmd: case S_struct_display_array_cmd_2: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case S_windowtype_1: case S_windowtype_2: case S_windowtype: SET(S_windowtype_2); break;
   case S_struct_set_database_cmd_2: case S_struct_set_database_cmd: case S_struct_set_database_cmd_1: SET(S_struct_set_database_cmd_2); break;
   case S_struct_disable_form_cmd_1: case S_struct_disable_form_cmd_2: case S_struct_disable_form_cmd: SET(S_struct_disable_form_cmd_2); break;
   case S_s_expr_wordwrap_2: case S_s_expr_wordwrap_1: case S_s_expr_wordwrap: SET(S_s_expr_wordwrap_2); break;
   case S_struct_menu_cmd_2: case S_struct_menu_cmd: case S_struct_menu_cmd_1: SET(S_struct_menu_cmd_2); break;
   case S_struct_call_cmd: case S_struct_call_cmd_1: case S_struct_call_cmd_2: SET(S_struct_call_cmd_2); break;
   case S_struct_delete_cmd_1: case S_struct_delete_cmd_2: case S_struct_delete_cmd: SET(S_struct_delete_cmd_2); break;
   case S_struct_prepare_cmd: case S_struct_prepare_cmd_2: case S_struct_prepare_cmd_1: SET(S_struct_prepare_cmd_2); break;
   case S_struct_fetch_cmd_1: case S_struct_fetch_cmd_2: case S_struct_fetch_cmd: SET(S_struct_fetch_cmd_2); break;
   case S_struct_exit_prog_cmd_2: case S_struct_exit_prog_cmd: case S_struct_exit_prog_cmd_1: SET(S_struct_exit_prog_cmd_2); break;
   case S_rowscols_2: case S_rowscols: case S_rowscols_1: SET(S_rowscols_2); break;
   case S_struct_pause_cmd_1: case S_struct_pause_cmd_2: case S_struct_pause_cmd: SET(S_struct_pause_cmd_2); break;
   case S_fh_field_entry_1: case S_fh_field_entry_2: case S_fh_field_entry: SET(S_fh_field_entry_2); break;
   case S_assoc_subscript: case S_assoc_subscript_2: case S_assoc_subscript_1: SET(S_assoc_subscript_2); break;
   case S_struct_print_img_cmd_2: case S_struct_print_img_cmd: case S_struct_print_img_cmd_1: SET(S_struct_print_img_cmd_2); break;
   case S_s_expr_cast: case S_s_expr_cast_1: case S_s_expr_cast_2: SET(S_s_expr_cast_2); break;
   case ROOT_expr_str: SET(EPILOG); break;
   case S_s_fetch_1: case S_s_fetch: case S_s_fetch_2: SET(S_s_fetch_2); break;
   case S_s_expr_in_1: case S_s_expr_in_2: case S_s_expr_in: SET(S_s_expr_in_2); break;
   case S_pdf_startrep_1: case S_pdf_startrep: case S_pdf_startrep_2: SET(S_pdf_startrep_2); break;
   case S_x_y_1: case S_x_y: case S_x_y_2: SET(S_x_y_2); break;
   case S_s_expr_extend_2: case S_s_expr_extend: case S_s_expr_extend_1: SET(S_s_expr_extend_2); break;
   case S_struct_execute_immediate_cmd_2: case S_struct_execute_immediate_cmd: case S_struct_execute_immediate_cmd_1: SET(S_struct_execute_immediate_cmd_2); break;
   case S_if_cond: case S_if_cond_1: case S_if_cond_2: SET(S_if_cond_2); break;
   case S_struct_close_sql_cmd_1: case S_struct_close_sql_cmd: case S_struct_close_sql_cmd_2: SET(S_struct_close_sql_cmd_2); break;
   case S_s_expr_dynarr_extent_1: case S_s_expr_dynarr_extent_2: case S_s_expr_dynarr_extent: SET(S_s_expr_dynarr_extent_2); break;
   case S_struct_sleep_cmd_1: case S_struct_sleep_cmd_2: case S_struct_sleep_cmd: SET(S_struct_sleep_cmd_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_struct_execute_cmd_1: case S_struct_execute_cmd: case S_struct_execute_cmd_2: SET(S_struct_execute_cmd_2); break;
   case S_struct_flush_cmd_1: case S_struct_flush_cmd: case S_struct_flush_cmd_2: SET(S_struct_flush_cmd_2); break;
   case S_report_block_data_1: case S_report_block_data: case S_report_block_data_2: SET(S_report_block_data_2); break;
   case S_struct_declare_cmd_1: case S_struct_declare_cmd_2: case S_struct_declare_cmd: SET(S_struct_declare_cmd_2); break;
   case S_struct_hide_cmd: case S_struct_hide_cmd_1: case S_struct_hide_cmd_2: SET(S_struct_hide_cmd_2); break;
   case S_when: case S_when_2: case S_when_1: SET(S_when_2); break;
   case S_struct_case_cmd_1: case S_struct_case_cmd: case S_struct_case_cmd_2: SET(S_struct_case_cmd_2); break;
   case S_struct_sql_cmd_1: case S_struct_sql_cmd: case S_struct_sql_cmd_2: SET(S_struct_sql_cmd_2); break;
   case S_struct_foreach_cmd_1: case S_struct_foreach_cmd: case S_struct_foreach_cmd_2: SET(S_struct_foreach_cmd_2); break;
   case S_struct_run_cmd_1: case S_struct_run_cmd: case S_struct_run_cmd_2: SET(S_struct_run_cmd_2); break;
   case S_variable_usage_1: case S_variable_usage_2: case S_variable_usage: SET(S_variable_usage_2); break;
   case S_struct_run_waiting_for_cmd_1: case S_struct_run_waiting_for_cmd_2: case S_struct_run_waiting_for_cmd: SET(S_struct_run_waiting_for_cmd_2); break;
   case S_struct_while_cmd_1: case S_struct_while_cmd_2: case S_struct_while_cmd: SET(S_struct_while_cmd_2); break;
   case S_struct_scroll_cmd: case S_struct_scroll_cmd_1: case S_struct_scroll_cmd_2: SET(S_struct_scroll_cmd_2); break;
   case S_s_expr_in_sq: case S_s_expr_in_sq_2: case S_s_expr_in_sq_1: SET(S_s_expr_in_sq_2); break;
   case S_struct_sql_transact_cmd_1: case S_struct_sql_transact_cmd_2: case S_struct_sql_transact_cmd: SET(S_struct_sql_transact_cmd_2); break;
   case S_struct_current_win_cmd: case S_struct_current_win_cmd_2: case S_struct_current_win_cmd_1: SET(S_struct_current_win_cmd_2); break;
   case S_s_expr_member_function_call_n: case S_s_expr_member_function_call_n_2: case S_s_expr_member_function_call_n_1: SET(S_s_expr_member_function_call_n_2); break;
   case S_struct_msg_box_cmd: case S_struct_msg_box_cmd_1: case S_struct_msg_box_cmd_2: SET(S_struct_msg_box_cmd_2); break;
   case S_struct_show_cmd_1: case S_struct_show_cmd_2: case S_struct_show_cmd: SET(S_struct_show_cmd_2); break;
   case S_locate_pos_1: case S_locate_pos: case S_locate_pos_2: SET(S_locate_pos_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</expr_str>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</expr_str>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</expr_str>' expected.");
}

<ROOT_expr_str_list,S_struct_put_cmd,S_struct_pdf_call_cmd,S_struct_return_cmd_1,S_struct_output_cmd_1,S_s_expr_pdf_function_call,S_struct_put_cmd_2,S_sql_statement_2,S_expr_str_1,S_struct_output_cmd,S_struct_sql_block_cmd_1,S_s_expr_function_call,S_s_pdf_report_definition_2,S_struct_foreach_cmd_1,S_struct_hide_option_cmd,S_struct_msg_box_cmd,S_struct_print_cmd,S_s_expr_form_is_compiled,S_struct_return_cmd,S_struct_locate_cmd,S_struct_let_cmd_2,S_s_expr_external_call_1,S_struct_error_cmd_1,S_expr_str_2,S_struct_call_cmd,S_s_expr_in_1,S_report_block_data_1,S_struct_init_cmd_2,S_s_formhandler_definition,S_report_block_data,S_struct_return_cmd_2,S_struct_execute_cmd_1,S_struct_validate_cmd,S_struct_put_cmd_1,S_s_select_1,S_s_expr_shared_function_call_1,S_struct_show_option_cmd,S_report_orderby_section_1,S_struct_let_cmd_1,S_struct_show_option_cmd_1,S_report_orderby_section,S_s_expr_bound_fcall_2,S_struct_init_cmd,S_struct_display_cmd_1,S_s_pdf_report_definition_1,S_struct_sql_block_cmd_2,S_struct_validate_cmd_2,S_s_expr_dynarr_function_call_n_2,S_struct_hide_option_cmd_2,S_struct_locate_cmd_1,S_s_expr_dynarr_function_call_n,S_s_expr_bound_fcall,S_struct_prompt_cmd,S_s_expr_member_function_call_n,S_s_expr_function_call_2,S_expr_str,S_struct_let_cmd,S_struct_prompt_cmd_1,S_struct_input_cmd_2,S_s_report_definition_2,S_s_expr_shared_function_call,S_s_expr_member_function_call_n_2,S_s_function_definition_1,S_s_expr_external_call_2,S_struct_error_cmd_2,S_struct_fetch_cmd_1,S_struct_init_cmd_1,S_s_select_2,S_struct_call_cmd_1,S_struct_input_cmd,S_struct_display_b_n_cmd_1,S_struct_pdf_call_cmd_1,S_s_class_definition_1,S_s_expr_shared_function_call_2,S_s_function_definition,S_s_function_definition_2,S_s_formhandler_definition_2,S_struct_validate_cmd_1,S_struct_prompt_cmd_2,S_sql_statement,S_s_expr_form_is_compiled_2,S_s_report_definition,S_struct_display_cmd_2,S_struct_call_cmd_2,S_s_expr_pdf_function_call_1,S_struct_fetch_cmd_2,S_struct_print_cmd_2,S_struct_foreach_cmd,S_s_expr_in_2,S_s_report_definition_1,S_struct_input_cmd_1,S_struct_message_cmd_2,S_s_select,S_struct_execute_cmd,S_struct_message_cmd,S_struct_locate_cmd_2,S_struct_show_option_cmd_2,S_struct_sql_block_cmd,S_s_expr_function_call_1,S_struct_hide_option_cmd_1,S_struct_display_cmd,S_s_expr_dynarr_function_call_n_1,S_s_expr_external_call,S_struct_error_cmd,S_struct_print_cmd_1,S_s_expr_pdf_function_call_2,S_struct_open_cursor_cmd_2,S_struct_msg_box_cmd_1,S_struct_open_cursor_cmd_1,S_struct_open_cursor_cmd,S_report_orderby_section_2,S_sql_statement_1,S_struct_pdf_call_cmd_2,S_s_expr_member_function_call_n_1,S_struct_fetch_cmd,S_s_expr_bound_fcall_1,S_s_expr_form_is_compiled_1,S_struct_output_cmd_2,S_s_expr_in,S_s_class_definition_2,S_struct_display_b_n_cmd_2,S_s_class_definition,S_struct_execute_cmd_2,S_report_block_data_2,S_struct_message_cmd_1,S_struct_display_b_n_cmd,S_struct_foreach_cmd_2,S_s_pdf_report_definition,S_struct_msg_box_cmd_2,S_s_formhandler_definition_1>"<expr_str_list"{s} {
  AX_expr_str_list_nm = 0;
  ENTER(AL_expr_str_list); pushbuffer(0);
  }

<AL_expr_str_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_expr_str_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_expr_str_list_nm);

 ">" {
  LEAVE; STag_expr_str_list();pcdata_ix = 0; ENTER(S_expr_str_list);
 }
 "/>" {
  LEAVE; STag_expr_str_list(); pcdata_ix = 0; ETag_expr_str_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_return_cmd_1: case S_struct_return_cmd: case S_struct_return_cmd_2: SET(S_struct_return_cmd_2); break;
   case S_s_expr_external_call_1: case S_s_expr_external_call_2: case S_s_expr_external_call: SET(S_s_expr_external_call_2); break;
   case S_struct_error_cmd_1: case S_struct_error_cmd_2: case S_struct_error_cmd: SET(S_struct_error_cmd_2); break;
   case S_struct_open_cursor_cmd_2: case S_struct_open_cursor_cmd_1: case S_struct_open_cursor_cmd: SET(S_struct_open_cursor_cmd_2); break;
   case S_s_expr_pdf_function_call: case S_s_expr_pdf_function_call_1: case S_s_expr_pdf_function_call_2: SET(S_s_expr_pdf_function_call_2); break;
   case S_struct_put_cmd: case S_struct_put_cmd_2: case S_struct_put_cmd_1: SET(S_struct_put_cmd_2); break;
   case S_sql_statement_2: case S_sql_statement: case S_sql_statement_1: SET(S_sql_statement_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_report_orderby_section_1: case S_report_orderby_section: case S_report_orderby_section_2: SET(S_report_orderby_section_2); break;
   case S_struct_pdf_call_cmd: case S_struct_pdf_call_cmd_1: case S_struct_pdf_call_cmd_2: SET(S_struct_pdf_call_cmd_2); break;
   case S_s_expr_bound_fcall_2: case S_s_expr_bound_fcall: case S_s_expr_bound_fcall_1: SET(S_s_expr_bound_fcall_2); break;
   case S_s_expr_shared_function_call_1: case S_s_expr_shared_function_call: case S_s_expr_shared_function_call_2: SET(S_s_expr_shared_function_call_2); break;
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case S_struct_validate_cmd: case S_struct_validate_cmd_2: case S_struct_validate_cmd_1: SET(S_struct_validate_cmd_2); break;
   case S_struct_sql_block_cmd_1: case S_struct_sql_block_cmd_2: case S_struct_sql_block_cmd: SET(S_struct_sql_block_cmd_2); break;
   case S_s_function_definition_1: case S_s_function_definition: case S_s_function_definition_2: SET(S_s_function_definition_2); break;
   case S_s_expr_dynarr_function_call_n_2: case S_s_expr_dynarr_function_call_n: case S_s_expr_dynarr_function_call_n_1: SET(S_s_expr_dynarr_function_call_n_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_struct_hide_option_cmd: case S_struct_hide_option_cmd_2: case S_struct_hide_option_cmd_1: SET(S_struct_hide_option_cmd_2); break;
   case S_struct_output_cmd_1: case S_struct_output_cmd: case S_struct_output_cmd_2: SET(S_struct_output_cmd_2); break;
   case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: case S_struct_prompt_cmd_2: SET(S_struct_prompt_cmd_2); break;
   case S_s_expr_form_is_compiled: case S_s_expr_form_is_compiled_2: case S_s_expr_form_is_compiled_1: SET(S_s_expr_form_is_compiled_2); break;
   case S_struct_display_cmd_1: case S_struct_display_cmd_2: case S_struct_display_cmd: SET(S_struct_display_cmd_2); break;
   case S_struct_call_cmd: case S_struct_call_cmd_1: case S_struct_call_cmd_2: SET(S_struct_call_cmd_2); break;
   case S_s_class_definition_1: case S_s_class_definition_2: case S_s_class_definition: SET(S_s_class_definition_2); break;
   case S_struct_fetch_cmd_1: case S_struct_fetch_cmd_2: case S_struct_fetch_cmd: SET(S_struct_fetch_cmd_2); break;
   case S_struct_print_cmd: case S_struct_print_cmd_2: case S_struct_print_cmd_1: SET(S_struct_print_cmd_2); break;
   case S_struct_display_b_n_cmd_1: case S_struct_display_b_n_cmd_2: case S_struct_display_b_n_cmd: SET(S_struct_display_b_n_cmd_2); break;
   case S_s_expr_function_call: case S_s_expr_function_call_2: case S_s_expr_function_call_1: SET(S_s_expr_function_call_2); break;
   case ROOT_expr_str_list: SET(EPILOG); break;
   case S_s_expr_in_1: case S_s_expr_in_2: case S_s_expr_in: SET(S_s_expr_in_2); break;
   case S_struct_let_cmd_2: case S_struct_let_cmd_1: case S_struct_let_cmd: SET(S_struct_let_cmd_2); break;
   case S_struct_execute_cmd_1: case S_struct_execute_cmd: case S_struct_execute_cmd_2: SET(S_struct_execute_cmd_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_report_block_data_1: case S_report_block_data: case S_report_block_data_2: SET(S_report_block_data_2); break;
   case S_struct_message_cmd_2: case S_struct_message_cmd: case S_struct_message_cmd_1: SET(S_struct_message_cmd_2); break;
   case S_struct_input_cmd_2: case S_struct_input_cmd: case S_struct_input_cmd_1: SET(S_struct_input_cmd_2); break;
   case S_struct_foreach_cmd_1: case S_struct_foreach_cmd: case S_struct_foreach_cmd_2: SET(S_struct_foreach_cmd_2); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
   case S_struct_locate_cmd: case S_struct_locate_cmd_1: case S_struct_locate_cmd_2: SET(S_struct_locate_cmd_2); break;
   case S_struct_init_cmd_2: case S_struct_init_cmd: case S_struct_init_cmd_1: SET(S_struct_init_cmd_2); break;
   case S_struct_show_option_cmd: case S_struct_show_option_cmd_1: case S_struct_show_option_cmd_2: SET(S_struct_show_option_cmd_2); break;
   case S_s_expr_member_function_call_n: case S_s_expr_member_function_call_n_2: case S_s_expr_member_function_call_n_1: SET(S_s_expr_member_function_call_n_2); break;
   case S_struct_msg_box_cmd: case S_struct_msg_box_cmd_1: case S_struct_msg_box_cmd_2: SET(S_struct_msg_box_cmd_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of expr_str_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `expr_str_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `expr_str_list' element.");
}

<S_expr_str_list,S_expr_str_list_2,E_expr_str_list>{
 "</expr_str_list"{s}">" {
  LEAVE;
  ETag_expr_str_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_return_cmd_1: case S_struct_return_cmd: case S_struct_return_cmd_2: SET(S_struct_return_cmd_2); break;
   case S_s_expr_external_call_1: case S_s_expr_external_call_2: case S_s_expr_external_call: SET(S_s_expr_external_call_2); break;
   case S_struct_error_cmd_1: case S_struct_error_cmd_2: case S_struct_error_cmd: SET(S_struct_error_cmd_2); break;
   case S_struct_open_cursor_cmd_2: case S_struct_open_cursor_cmd_1: case S_struct_open_cursor_cmd: SET(S_struct_open_cursor_cmd_2); break;
   case S_s_expr_pdf_function_call: case S_s_expr_pdf_function_call_1: case S_s_expr_pdf_function_call_2: SET(S_s_expr_pdf_function_call_2); break;
   case S_struct_put_cmd: case S_struct_put_cmd_2: case S_struct_put_cmd_1: SET(S_struct_put_cmd_2); break;
   case S_sql_statement_2: case S_sql_statement: case S_sql_statement_1: SET(S_sql_statement_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_report_orderby_section_1: case S_report_orderby_section: case S_report_orderby_section_2: SET(S_report_orderby_section_2); break;
   case S_struct_pdf_call_cmd: case S_struct_pdf_call_cmd_1: case S_struct_pdf_call_cmd_2: SET(S_struct_pdf_call_cmd_2); break;
   case S_s_expr_bound_fcall_2: case S_s_expr_bound_fcall: case S_s_expr_bound_fcall_1: SET(S_s_expr_bound_fcall_2); break;
   case S_s_expr_shared_function_call_1: case S_s_expr_shared_function_call: case S_s_expr_shared_function_call_2: SET(S_s_expr_shared_function_call_2); break;
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case S_struct_validate_cmd: case S_struct_validate_cmd_2: case S_struct_validate_cmd_1: SET(S_struct_validate_cmd_2); break;
   case S_struct_sql_block_cmd_1: case S_struct_sql_block_cmd_2: case S_struct_sql_block_cmd: SET(S_struct_sql_block_cmd_2); break;
   case S_s_function_definition_1: case S_s_function_definition: case S_s_function_definition_2: SET(S_s_function_definition_2); break;
   case S_s_expr_dynarr_function_call_n_2: case S_s_expr_dynarr_function_call_n: case S_s_expr_dynarr_function_call_n_1: SET(S_s_expr_dynarr_function_call_n_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_struct_hide_option_cmd: case S_struct_hide_option_cmd_2: case S_struct_hide_option_cmd_1: SET(S_struct_hide_option_cmd_2); break;
   case S_struct_output_cmd_1: case S_struct_output_cmd: case S_struct_output_cmd_2: SET(S_struct_output_cmd_2); break;
   case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: case S_struct_prompt_cmd_2: SET(S_struct_prompt_cmd_2); break;
   case S_s_expr_form_is_compiled: case S_s_expr_form_is_compiled_2: case S_s_expr_form_is_compiled_1: SET(S_s_expr_form_is_compiled_2); break;
   case S_struct_display_cmd_1: case S_struct_display_cmd_2: case S_struct_display_cmd: SET(S_struct_display_cmd_2); break;
   case S_struct_call_cmd: case S_struct_call_cmd_1: case S_struct_call_cmd_2: SET(S_struct_call_cmd_2); break;
   case S_s_class_definition_1: case S_s_class_definition_2: case S_s_class_definition: SET(S_s_class_definition_2); break;
   case S_struct_fetch_cmd_1: case S_struct_fetch_cmd_2: case S_struct_fetch_cmd: SET(S_struct_fetch_cmd_2); break;
   case S_struct_print_cmd: case S_struct_print_cmd_2: case S_struct_print_cmd_1: SET(S_struct_print_cmd_2); break;
   case S_struct_display_b_n_cmd_1: case S_struct_display_b_n_cmd_2: case S_struct_display_b_n_cmd: SET(S_struct_display_b_n_cmd_2); break;
   case S_s_expr_function_call: case S_s_expr_function_call_2: case S_s_expr_function_call_1: SET(S_s_expr_function_call_2); break;
   case ROOT_expr_str_list: SET(EPILOG); break;
   case S_s_expr_in_1: case S_s_expr_in_2: case S_s_expr_in: SET(S_s_expr_in_2); break;
   case S_struct_let_cmd_2: case S_struct_let_cmd_1: case S_struct_let_cmd: SET(S_struct_let_cmd_2); break;
   case S_struct_execute_cmd_1: case S_struct_execute_cmd: case S_struct_execute_cmd_2: SET(S_struct_execute_cmd_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_report_block_data_1: case S_report_block_data: case S_report_block_data_2: SET(S_report_block_data_2); break;
   case S_struct_message_cmd_2: case S_struct_message_cmd: case S_struct_message_cmd_1: SET(S_struct_message_cmd_2); break;
   case S_struct_input_cmd_2: case S_struct_input_cmd: case S_struct_input_cmd_1: SET(S_struct_input_cmd_2); break;
   case S_struct_foreach_cmd_1: case S_struct_foreach_cmd: case S_struct_foreach_cmd_2: SET(S_struct_foreach_cmd_2); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
   case S_struct_locate_cmd: case S_struct_locate_cmd_1: case S_struct_locate_cmd_2: SET(S_struct_locate_cmd_2); break;
   case S_struct_init_cmd_2: case S_struct_init_cmd: case S_struct_init_cmd_1: SET(S_struct_init_cmd_2); break;
   case S_struct_show_option_cmd: case S_struct_show_option_cmd_1: case S_struct_show_option_cmd_2: SET(S_struct_show_option_cmd_2); break;
   case S_s_expr_member_function_call_n: case S_s_expr_member_function_call_n_2: case S_s_expr_member_function_call_n_1: SET(S_s_expr_member_function_call_n_2); break;
   case S_struct_msg_box_cmd: case S_struct_msg_box_cmd_1: case S_struct_msg_box_cmd_2: SET(S_struct_msg_box_cmd_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</expr_str_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</expr_str_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</expr_str_list>' expected.");
}

<ROOT_fgl_comment,S_module_definition,S_module_definition_1,S_module_definition_2>"<fgl_comment"{s} {
  AX_fgl_comment_colno = 0;
  AX_fgl_comment_comment = 0;
  AX_fgl_comment_lineno = 0;
  AX_fgl_comment_nm = 0;
  AX_fgl_comment_printed = 0;
  AX_fgl_comment_type = 0;
  ENTER(AL_fgl_comment); pushbuffer(0);
  }

<AL_fgl_comment>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fgl_comment_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fgl_comment_colno);

 "comment"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fgl_comment_comment);
 "comment"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fgl_comment_comment);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fgl_comment_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fgl_comment_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fgl_comment_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fgl_comment_nm);

 "printed"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fgl_comment_printed);
 "printed"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fgl_comment_printed);

 "type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fgl_comment_type);
 "type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fgl_comment_type);

 ">" {
  LEAVE; STag_fgl_comment();pcdata_ix = 0; ENTER(E_fgl_comment);
 }
 "/>" {
  LEAVE; STag_fgl_comment(); pcdata_ix = 0; ETag_fgl_comment(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_fgl_comment: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of fgl_comment element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `fgl_comment' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `fgl_comment' element.");
}

<E_fgl_comment>{
 "</fgl_comment"{s}">" {
  LEAVE;
  ETag_fgl_comment();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_fgl_comment: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</fgl_comment>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</fgl_comment>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</fgl_comment>' expected.");
}

<ROOT_fh_field_entry,S_struct_display_array_cmd,S_expr_str_1,S_expr_str_2,S_struct_next_field_cmd_2,S_struct_display_array_cmd_2,S_expr_str,S_struct_display_array_cmd_1,S_fh_field_list,S_struct_next_field_cmd,S_fh_field_list_1,S_struct_next_field_cmd_1,S_fh_field_list_2>"<fh_field_entry"{s} {
  AX_fh_field_entry_nm = 0;
  ENTER(AL_fh_field_entry); pushbuffer(0);
  }

<AL_fh_field_entry>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fh_field_entry_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fh_field_entry_nm);

 ">" {
  LEAVE; STag_fh_field_entry();pcdata_ix = 0; ENTER(S_fh_field_entry);
 }
 "/>" {
  LEAVE; STag_fh_field_entry(); pcdata_ix = 0; ETag_fh_field_entry(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_next_field_cmd_2: case S_struct_next_field_cmd: case S_struct_next_field_cmd_1: SET(S_struct_next_field_cmd_2); break;
   case S_struct_display_array_cmd: case S_struct_display_array_cmd_2: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case ROOT_fh_field_entry: SET(EPILOG); break;
   case S_fh_field_list: case S_fh_field_list_1: case S_fh_field_list_2: SET(S_fh_field_list_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of fh_field_entry element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `fh_field_entry' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `fh_field_entry' element.");
}

<E_fh_field_entry,S_fh_field_entry_2,S_fh_field_entry>{
 "</fh_field_entry"{s}">" {
  LEAVE;
  ETag_fh_field_entry();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_next_field_cmd_2: case S_struct_next_field_cmd: case S_struct_next_field_cmd_1: SET(S_struct_next_field_cmd_2); break;
   case S_struct_display_array_cmd: case S_struct_display_array_cmd_2: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case ROOT_fh_field_entry: SET(EPILOG); break;
   case S_fh_field_list: case S_fh_field_list_1: case S_fh_field_list_2: SET(S_fh_field_list_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</fh_field_entry>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</fh_field_entry>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</fh_field_entry>' expected.");
}

<ROOT_fh_field_list,S_struct_disable_cmd_2,S_struct_construct_cmd_1,S_struct_disable_form_cmd_1,S_struct_enable_form_cmd_2,S_form_field_2,S_event_data,S_struct_scroll_cmd,S_struct_enable_form_cmd,S_s_expr_field_touched_2,S_struct_scroll_cmd_1,S_event_data_2,S_struct_construct_cmd,S_s_expr_infield,S_struct_enable_cmd,S_struct_enable_form_cmd_1,S_struct_disable_cmd,S_struct_disable_cmd_1,S_struct_enable_cmd_2,S_struct_disable_form_cmd_2,S_event_data_1,S_clear_data,S_struct_input_cmd_2,S_s_expr_field_touched_1,S_struct_scroll_cmd_2,S_s_expr_field_touched,S_clear_data_1,S_dt_display_1,S_s_expr_infield_2,S_struct_input_cmd,S_dt_display,S_s_expr_get_fldbuf_1,S_dt_display_2,S_struct_enable_cmd_1,S_s_expr_get_fldbuf,S_struct_input_cmd_1,S_struct_disable_form_cmd,S_struct_construct_cmd_2,S_form_field,S_clear_data_2,S_form_field_1,S_s_expr_get_fldbuf_2,S_s_expr_infield_1>"<fh_field_list"{s} {
  AX_fh_field_list_nm = 0;
  ENTER(AL_fh_field_list); pushbuffer(0);
  }

<AL_fh_field_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_fh_field_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_fh_field_list_nm);

 ">" {
  LEAVE; STag_fh_field_list();pcdata_ix = 0; ENTER(S_fh_field_list);
 }
 "/>" {
  LEAVE; STag_fh_field_list(); pcdata_ix = 0; ETag_fh_field_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_disable_cmd_2: case S_struct_disable_cmd: case S_struct_disable_cmd_1: SET(S_struct_disable_cmd_2); break;
   case S_struct_construct_cmd_1: case S_struct_construct_cmd: case S_struct_construct_cmd_2: SET(S_struct_construct_cmd_2); break;
   case S_s_expr_infield: case S_s_expr_infield_2: case S_s_expr_infield_1: SET(S_s_expr_infield_2); break;
   case S_struct_enable_form_cmd_2: case S_struct_enable_form_cmd: case S_struct_enable_form_cmd_1: SET(S_struct_enable_form_cmd_2); break;
   case S_clear_data: case S_clear_data_1: case S_clear_data_2: SET(S_clear_data_2); break;
   case S_struct_enable_cmd: case S_struct_enable_cmd_2: case S_struct_enable_cmd_1: SET(S_struct_enable_cmd_2); break;
   case S_form_field_2: case S_form_field: case S_form_field_1: SET(S_form_field_2); break;
   case S_dt_display_1: case S_dt_display: case S_dt_display_2: SET(S_dt_display_2); break;
   case S_struct_disable_form_cmd_1: case S_struct_disable_form_cmd_2: case S_struct_disable_form_cmd: SET(S_struct_disable_form_cmd_2); break;
   case ROOT_fh_field_list: SET(EPILOG); break;
   case S_s_expr_field_touched_2: case S_s_expr_field_touched_1: case S_s_expr_field_touched: SET(S_s_expr_field_touched_2); break;
   case S_struct_input_cmd_2: case S_struct_input_cmd: case S_struct_input_cmd_1: SET(S_struct_input_cmd_2); break;
   case S_struct_scroll_cmd: case S_struct_scroll_cmd_1: case S_struct_scroll_cmd_2: SET(S_struct_scroll_cmd_2); break;
   case S_event_data: case S_event_data_2: case S_event_data_1: SET(S_event_data_2); break;
   case S_s_expr_get_fldbuf_1: case S_s_expr_get_fldbuf: case S_s_expr_get_fldbuf_2: SET(S_s_expr_get_fldbuf_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of fh_field_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `fh_field_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `fh_field_list' element.");
}

<S_fh_field_list_2,S_fh_field_list,E_fh_field_list>{
 "</fh_field_list"{s}">" {
  LEAVE;
  ETag_fh_field_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_disable_cmd_2: case S_struct_disable_cmd: case S_struct_disable_cmd_1: SET(S_struct_disable_cmd_2); break;
   case S_struct_construct_cmd_1: case S_struct_construct_cmd: case S_struct_construct_cmd_2: SET(S_struct_construct_cmd_2); break;
   case S_s_expr_infield: case S_s_expr_infield_2: case S_s_expr_infield_1: SET(S_s_expr_infield_2); break;
   case S_struct_enable_form_cmd_2: case S_struct_enable_form_cmd: case S_struct_enable_form_cmd_1: SET(S_struct_enable_form_cmd_2); break;
   case S_clear_data: case S_clear_data_1: case S_clear_data_2: SET(S_clear_data_2); break;
   case S_struct_enable_cmd: case S_struct_enable_cmd_2: case S_struct_enable_cmd_1: SET(S_struct_enable_cmd_2); break;
   case S_form_field_2: case S_form_field: case S_form_field_1: SET(S_form_field_2); break;
   case S_dt_display_1: case S_dt_display: case S_dt_display_2: SET(S_dt_display_2); break;
   case S_struct_disable_form_cmd_1: case S_struct_disable_form_cmd_2: case S_struct_disable_form_cmd: SET(S_struct_disable_form_cmd_2); break;
   case ROOT_fh_field_list: SET(EPILOG); break;
   case S_s_expr_field_touched_2: case S_s_expr_field_touched_1: case S_s_expr_field_touched: SET(S_s_expr_field_touched_2); break;
   case S_struct_input_cmd_2: case S_struct_input_cmd: case S_struct_input_cmd_1: SET(S_struct_input_cmd_2); break;
   case S_struct_scroll_cmd: case S_struct_scroll_cmd_1: case S_struct_scroll_cmd_2: SET(S_struct_scroll_cmd_2); break;
   case S_event_data: case S_event_data_2: case S_event_data_1: SET(S_event_data_2); break;
   case S_s_expr_get_fldbuf_1: case S_s_expr_get_fldbuf: case S_s_expr_get_fldbuf_2: SET(S_s_expr_get_fldbuf_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</fh_field_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</fh_field_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</fh_field_list>' expected.");
}

<ROOT_field>"<field"{s} {
  AX_field_fieldname = 0;
  AX_field_nm = 0;
  AX_field_subscript = 0;
  ENTER(AL_field); pushbuffer(0);
  }

<AL_field>{
 "fieldname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_field_fieldname);
 "fieldname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_field_fieldname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_field_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_field_nm);

 "subscript"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_field_subscript);
 "subscript"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_field_subscript);

 ">" {
  LEAVE; STag_field();pcdata_ix = 0; ENTER(E_field);
 }
 "/>" {
  LEAVE; STag_field(); pcdata_ix = 0; ETag_field(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_field: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of field element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `field' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `field' element.");
}

<E_field>{
 "</field"{s}">" {
  LEAVE;
  ETag_field();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_field: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</field>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</field>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</field>' expected.");
}

<ROOT_file_description,S_module_definition,S_module_definition_1,S_module_definition_2>"<file_description"{s} {
  AX_file_description_name = 0;
  AX_file_description_nm = 0;
  ENTER(AL_file_description); pushbuffer(0);
  }

<AL_file_description>{
 "name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_file_description_name);
 "name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_file_description_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_file_description_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_file_description_nm);

 ">" {
  LEAVE; STag_file_description();pcdata_ix = 0; ENTER(S_file_description);
 }
 "/>" {
  LEAVE; STag_file_description(); pcdata_ix = 0; ETag_file_description(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_file_description: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of file_description element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `file_description' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `file_description' element.");
}

<S_file_description_2,S_file_description,E_file_description>{
 "</file_description"{s}">" {
  LEAVE;
  ETag_file_description();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_file_description: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</file_description>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</file_description>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</file_description>' expected.");
}

<ROOT_flist,S_file_description_2,S_file_description,S_file_description_1>"<flist"{s} {
  AX_flist_name = 0;
  AX_flist_nm = 0;
  AX_flist_special = 0;
  AX_flist_type = 0;
  ENTER(AL_flist); pushbuffer(0);
  }

<AL_flist>{
 "name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_flist_name);
 "name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_flist_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_flist_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_flist_nm);

 "special"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_flist_special);
 "special"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_flist_special);

 "type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_flist_type);
 "type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_flist_type);

 ">" {
  LEAVE; STag_flist();pcdata_ix = 0; ENTER(E_flist);
 }
 "/>" {
  LEAVE; STag_flist(); pcdata_ix = 0; ETag_flist(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_flist: SET(EPILOG); break;
   case S_file_description_2: case S_file_description: case S_file_description_1: SET(S_file_description_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of flist element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `flist' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `flist' element.");
}

<E_flist>{
 "</flist"{s}">" {
  LEAVE;
  ETag_flist();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_flist: SET(EPILOG); break;
   case S_file_description_2: case S_file_description: case S_file_description_1: SET(S_file_description_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</flist>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</flist>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</flist>' expected.");
}

<ROOT_form_field,S_dt_display_1,S_dt_display,S_dt_display_2>"<form_field"{s} {
  AX_form_field_form = 0;
  AX_form_field_nm = 0;
  ENTER(AL_form_field); pushbuffer(0);
  }

<AL_form_field>{
 "form"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_form_field_form);
 "form"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_form_field_form);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_form_field_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_form_field_nm);

 ">" {
  LEAVE; STag_form_field();pcdata_ix = 0; ENTER(S_form_field);
 }
 "/>" {
  LEAVE; STag_form_field(); pcdata_ix = 0; ETag_form_field(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_dt_display_1: case S_dt_display: case S_dt_display_2: SET(S_dt_display_2); break;
   case ROOT_form_field: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of form_field element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `form_field' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `form_field' element.");
}

<S_form_field,E_form_field,S_form_field_2>{
 "</form_field"{s}">" {
  LEAVE;
  ETag_form_field();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_dt_display_1: case S_dt_display: case S_dt_display_2: SET(S_dt_display_2); break;
   case ROOT_form_field: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</form_field>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</form_field>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</form_field>' expected.");
}

<ROOT_funcname>"<funcname"{s} {
  AX_funcname_nm = 0;
  AX_funcname_value = 0;
  ENTER(AL_funcname); pushbuffer(0);
  }

<AL_funcname>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_funcname_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_funcname_nm);

 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_funcname_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_funcname_value);

 ">" {
  LEAVE; STag_funcname();pcdata_ix = 0; ENTER(E_funcname);
 }
 "/>" {
  LEAVE; STag_funcname(); pcdata_ix = 0; ETag_funcname(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_funcname: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of funcname element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `funcname' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `funcname' element.");
}

<E_funcname>{
 "</funcname"{s}">" {
  LEAVE;
  ETag_funcname();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_funcname: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</funcname>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</funcname>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</funcname>' expected.");
}

<ROOT_funcname_list,S_struct_start_rpc_cmd_1,S_struct_start_rpc_cmd,S_struct_start_rpc_cmd_2>"<funcname_list"{s} {
  AX_funcname_list_nm = 0;
  ENTER(AL_funcname_list); pushbuffer(0);
  }

<AL_funcname_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_funcname_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_funcname_list_nm);

 ">" {
  LEAVE; STag_funcname_list();pcdata_ix = 0; ENTER(S_funcname_list);
 }
 "/>" {
  LEAVE; STag_funcname_list(); pcdata_ix = 0; ETag_funcname_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_start_rpc_cmd_1: case S_struct_start_rpc_cmd: case S_struct_start_rpc_cmd_2: SET(S_struct_start_rpc_cmd_2); break;
   case ROOT_funcname_list: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of funcname_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `funcname_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `funcname_list' element.");
}

<S_funcname_list,E_funcname_list,S_funcname_list_2>{
 "</funcname_list"{s}">" {
  LEAVE;
  ETag_funcname_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_start_rpc_cmd_1: case S_struct_start_rpc_cmd: case S_struct_start_rpc_cmd_2: SET(S_struct_start_rpc_cmd_2); break;
   case ROOT_funcname_list: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</funcname_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</funcname_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</funcname_list>' expected.");
}

<ROOT_globals_definition>"<globals_definition"{s} {
  AX_globals_definition_compiled_time = 0;
  AX_globals_definition_mod_dbname = 0;
  AX_globals_definition_nm = 0;
  AX_globals_definition_schema_only = 0;
  ENTER(AL_globals_definition); pushbuffer(0);
  }

<AL_globals_definition>{
 "compiled_time"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_globals_definition_compiled_time);
 "compiled_time"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_globals_definition_compiled_time);

 "mod_dbname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_globals_definition_mod_dbname);
 "mod_dbname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_globals_definition_mod_dbname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_globals_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_globals_definition_nm);

 "schema_only"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_globals_definition_schema_only);
 "schema_only"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_globals_definition_schema_only);

 ">" {
  LEAVE; STag_globals_definition();pcdata_ix = 0; ENTER(S_globals_definition);
 }
 "/>" {
  LEAVE; STag_globals_definition(); pcdata_ix = 0; ETag_globals_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_globals_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of globals_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `globals_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `globals_definition' element.");
}

<S_globals_definition_2,S_globals_definition,E_globals_definition>{
 "</globals_definition"{s}">" {
  LEAVE;
  ETag_globals_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_globals_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</globals_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</globals_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</globals_definition>' expected.");
}

<ROOT_if_cond,S_if_conds_2,S_if_conds_1,S_if_conds>"<if_cond"{s} {
  AX_if_cond_lineno = 0;
  AX_if_cond_nm = 0;
  ENTER(AL_if_cond); pushbuffer(0);
  }

<AL_if_cond>{
 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_if_cond_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_if_cond_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_if_cond_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_if_cond_nm);

 ">" {
  LEAVE; STag_if_cond();pcdata_ix = 0; ENTER(S_if_cond);
 }
 "/>" {
  LEAVE; STag_if_cond(); pcdata_ix = 0; ETag_if_cond(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_if_conds_2: case S_if_conds_1: case S_if_conds: SET(S_if_conds_2); break;
   case ROOT_if_cond: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of if_cond element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `if_cond' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `if_cond' element.");
}

<S_if_cond_2,S_if_cond,E_if_cond>{
 "</if_cond"{s}">" {
  LEAVE;
  ETag_if_cond();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_if_conds_2: case S_if_conds_1: case S_if_conds: SET(S_if_conds_2); break;
   case ROOT_if_cond: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</if_cond>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</if_cond>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</if_cond>' expected.");
}

<ROOT_if_conds,S_struct_if_cmd_1,S_struct_if_cmd,S_struct_if_cmd_2>"<if_conds"{s} {
  AX_if_conds_nm = 0;
  ENTER(AL_if_conds); pushbuffer(0);
  }

<AL_if_conds>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_if_conds_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_if_conds_nm);

 ">" {
  LEAVE; STag_if_conds();pcdata_ix = 0; ENTER(S_if_conds);
 }
 "/>" {
  LEAVE; STag_if_conds(); pcdata_ix = 0; ETag_if_conds(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_if_cmd_1: case S_struct_if_cmd: case S_struct_if_cmd_2: SET(S_struct_if_cmd_2); break;
   case ROOT_if_conds: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of if_conds element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `if_conds' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `if_conds' element.");
}

<S_if_conds,S_if_conds_2,E_if_conds>{
 "</if_conds"{s}">" {
  LEAVE;
  ETag_if_conds();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_if_cmd_1: case S_struct_if_cmd: case S_struct_if_cmd_2: SET(S_struct_if_cmd_2); break;
   case ROOT_if_conds: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</if_conds>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</if_conds>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</if_conds>' expected.");
}

<ROOT_ilist,S_s_select_list_item_column,S_s_select_list_item_column_2,S_s_select_list_item_column_1>"<ilist"{s} {
  AX_ilist_i0 = 0;
  AX_ilist_i1 = 0;
  AX_ilist_i2 = 0;
  AX_ilist_i3 = 0;
  AX_ilist_i4 = 0;
  AX_ilist_i5 = 0;
  AX_ilist_nm = 0;
  ENTER(AL_ilist); pushbuffer(0);
  }

<AL_ilist>{
 "i0"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_ilist_i0);
 "i0"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_ilist_i0);

 "i1"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_ilist_i1);
 "i1"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_ilist_i1);

 "i2"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_ilist_i2);
 "i2"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_ilist_i2);

 "i3"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_ilist_i3);
 "i3"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_ilist_i3);

 "i4"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_ilist_i4);
 "i4"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_ilist_i4);

 "i5"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_ilist_i5);
 "i5"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_ilist_i5);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_ilist_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_ilist_nm);

 ">" {
  LEAVE; STag_ilist();pcdata_ix = 0; ENTER(E_ilist);
 }
 "/>" {
  LEAVE; STag_ilist(); pcdata_ix = 0; ETag_ilist(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_ilist: SET(EPILOG); break;
   case S_s_select_list_item_column: case S_s_select_list_item_column_2: case S_s_select_list_item_column_1: SET(S_s_select_list_item_column_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of ilist element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `ilist' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `ilist' element.");
}

<E_ilist>{
 "</ilist"{s}">" {
  LEAVE;
  ETag_ilist();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_ilist: SET(EPILOG); break;
   case S_s_select_list_item_column: case S_s_select_list_item_column_2: case S_s_select_list_item_column_1: SET(S_s_select_list_item_column_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</ilist>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</ilist>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</ilist>' expected.");
}

<ROOT_int,S_variable_2,S_list_of_integers_1,S_variable_1,S_cmd_int_list_1,S_cmd_int_list,S_list_of_integers_2,S_list_of_integers,S_variable,S_cmd_int_list_2>"<int"{s} {
  AX_int_nm = 0;
  AX_int_value = 0;
  ENTER(AL_int); pushbuffer(0);
  }

<AL_int>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_int_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_int_nm);

 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_int_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_int_value);

 ">" {
  LEAVE; STag_int();pcdata_ix = 0; ENTER(E_int);
 }
 "/>" {
  LEAVE; STag_int(); pcdata_ix = 0; ETag_int(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_2: case S_variable_1: case S_variable: SET(S_variable_2); break;
   case ROOT_int: SET(EPILOG); break;
   case S_cmd_int_list_1: case S_cmd_int_list: case S_cmd_int_list_2: SET(S_cmd_int_list_2); break;
   case S_list_of_integers_1: case S_list_of_integers_2: case S_list_of_integers: SET(S_list_of_integers_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of int element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `int' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `int' element.");
}

<E_int>{
 "</int"{s}">" {
  LEAVE;
  ETag_int();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_2: case S_variable_1: case S_variable: SET(S_variable_2); break;
   case ROOT_int: SET(EPILOG); break;
   case S_cmd_int_list_1: case S_cmd_int_list: case S_cmd_int_list_2: SET(S_cmd_int_list_2); break;
   case S_list_of_integers_1: case S_list_of_integers_2: case S_list_of_integers: SET(S_list_of_integers_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</int>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</int>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</int>' expected.");
}

<ROOT_linked_variable,S_record_variable_2,S_record_variable_1,S_record_variable>"<linked_variable"{s} {
  AX_linked_variable_nm = 0;
  AX_linked_variable_tabname = 0;
  ENTER(AL_linked_variable); pushbuffer(0);
  }

<AL_linked_variable>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_linked_variable_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_linked_variable_nm);

 "tabname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_linked_variable_tabname);
 "tabname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_linked_variable_tabname);

 ">" {
  LEAVE; STag_linked_variable();pcdata_ix = 0; ENTER(S_linked_variable);
 }
 "/>" {
  LEAVE; STag_linked_variable(); pcdata_ix = 0; ETag_linked_variable(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_linked_variable: SET(EPILOG); break;
   case S_record_variable_2: case S_record_variable_1: case S_record_variable: SET(S_record_variable_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of linked_variable element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `linked_variable' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `linked_variable' element.");
}

<S_linked_variable_2,S_linked_variable,E_linked_variable>{
 "</linked_variable"{s}">" {
  LEAVE;
  ETag_linked_variable();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_linked_variable: SET(EPILOG); break;
   case S_record_variable_2: case S_record_variable_1: case S_record_variable: SET(S_record_variable_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</linked_variable>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</linked_variable>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</linked_variable>' expected.");
}

<ROOT_lint_warning,S_s_pdf_report_definition_2,S_s_formhandler_definition,S_s_pdf_report_definition_1,S_s_report_definition_2,S_s_function_definition_1,S_s_function_definition,S_s_function_definition_2,S_s_formhandler_definition_2,S_s_report_definition,S_s_report_definition_1,S_s_pdf_report_definition,S_s_formhandler_definition_1>"<lint_warning"{s} {
  AX_lint_warning_lineno = 0;
  AX_lint_warning_nm = 0;
  AX_lint_warning_warning = 0;
  ENTER(AL_lint_warning); pushbuffer(0);
  }

<AL_lint_warning>{
 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_lint_warning_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_lint_warning_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_lint_warning_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_lint_warning_nm);

 "warning"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_lint_warning_warning);
 "warning"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_lint_warning_warning);

 ">" {
  LEAVE; STag_lint_warning();pcdata_ix = 0; ENTER(E_lint_warning);
 }
 "/>" {
  LEAVE; STag_lint_warning(); pcdata_ix = 0; ETag_lint_warning(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case S_s_function_definition_1: case S_s_function_definition: case S_s_function_definition_2: SET(S_s_function_definition_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case ROOT_lint_warning: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of lint_warning element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `lint_warning' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `lint_warning' element.");
}

<E_lint_warning>{
 "</lint_warning"{s}">" {
  LEAVE;
  ETag_lint_warning();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case S_s_function_definition_1: case S_s_function_definition: case S_s_function_definition_2: SET(S_s_function_definition_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case ROOT_lint_warning: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</lint_warning>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</lint_warning>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</lint_warning>' expected.");
}

<ROOT_list_of_integers>"<list_of_integers"{s} {
  AX_list_of_integers_nm = 0;
  ENTER(AL_list_of_integers); pushbuffer(0);
  }

<AL_list_of_integers>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_list_of_integers_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_list_of_integers_nm);

 ">" {
  LEAVE; STag_list_of_integers();pcdata_ix = 0; ENTER(S_list_of_integers);
 }
 "/>" {
  LEAVE; STag_list_of_integers(); pcdata_ix = 0; ETag_list_of_integers(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_list_of_integers: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of list_of_integers element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `list_of_integers' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `list_of_integers' element.");
}

<S_list_of_integers,E_list_of_integers,S_list_of_integers_2>{
 "</list_of_integers"{s}">" {
  LEAVE;
  ETag_list_of_integers();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_list_of_integers: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</list_of_integers>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</list_of_integers>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</list_of_integers>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_locate_pos,S_struct_locate_cmd,S_struct_locate_cmd_1,S_struct_locate_cmd_2>"<locate_pos"{s} {
  AX_locate_pos_e_location = 0;
  AX_locate_pos_nm = 0;
  ENTER(AL_locate_pos); pushbuffer(0);
  }

<AL_locate_pos>{
 "e_location"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_locate_pos_e_location);
 "e_location"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_locate_pos_e_location);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_locate_pos_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_locate_pos_nm);

 ">" {
  if (!AX_locate_pos_e_location) FAIL("Required attribute `e_location' not set for `locate_pos' element.");
  LEAVE; STag_locate_pos();pcdata_ix = 0; ENTER(S_locate_pos);
 }
 "/>" {
  if (!AX_locate_pos_e_location) FAIL("Required attribute `e_location' not set for `locate_pos' element.");
  LEAVE; STag_locate_pos(); pcdata_ix = 0; ETag_locate_pos(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_locate_pos: SET(EPILOG); break;
   case S_struct_locate_cmd: case S_struct_locate_cmd_1: case S_struct_locate_cmd_2: SET(S_struct_locate_cmd_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of locate_pos element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `locate_pos' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `locate_pos' element.");
}

<E_locate_pos,S_locate_pos,S_locate_pos_2>{
 "</locate_pos"{s}">" {
  LEAVE;
  ETag_locate_pos();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_locate_pos: SET(EPILOG); break;
   case S_struct_locate_cmd: case S_struct_locate_cmd_1: case S_struct_locate_cmd_2: SET(S_struct_locate_cmd_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</locate_pos>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</locate_pos>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</locate_pos>' expected.");
}

<ROOT_long>"<long"{s} {
  AX_long_nm = 0;
  AX_long_value = 0;
  ENTER(AL_long); pushbuffer(0);
  }

<AL_long>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_long_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_long_nm);

 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_long_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_long_value);

 ">" {
  LEAVE; STag_long();pcdata_ix = 0; ENTER(E_long);
 }
 "/>" {
  LEAVE; STag_long(); pcdata_ix = 0; ETag_long(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_long: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of long element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `long' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `long' element.");
}

<E_long>{
 "</long"{s}">" {
  LEAVE;
  ETag_long();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_long: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</long>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</long>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</long>' expected.");
}

<ROOT_manyoptions,S_struct_options_cmd_2,S_struct_options_cmd,S_struct_options_cmd_1>"<manyoptions"{s} {
  AX_manyoptions_nm = 0;
  ENTER(AL_manyoptions); pushbuffer(0);
  }

<AL_manyoptions>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_manyoptions_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_manyoptions_nm);

 ">" {
  LEAVE; STag_manyoptions();pcdata_ix = 0; ENTER(S_manyoptions);
 }
 "/>" {
  LEAVE; STag_manyoptions(); pcdata_ix = 0; ETag_manyoptions(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_options_cmd_2: case S_struct_options_cmd: case S_struct_options_cmd_1: SET(S_struct_options_cmd_2); break;
   case ROOT_manyoptions: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of manyoptions element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `manyoptions' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `manyoptions' element.");
}

<S_manyoptions,E_manyoptions,S_manyoptions_2>{
 "</manyoptions"{s}">" {
  LEAVE;
  ETag_manyoptions();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_options_cmd_2: case S_struct_options_cmd: case S_struct_options_cmd_1: SET(S_struct_options_cmd_2); break;
   case ROOT_manyoptions: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</manyoptions>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</manyoptions>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</manyoptions>' expected.");
}

<ROOT_menuoption,S_event_data,S_event_data_2,S_event_data_1>"<menuoption"{s} {
  AX_menuoption_helpno = 0;
  AX_menuoption_nm = 0;
  ENTER(AL_menuoption); pushbuffer(0);
  }

<AL_menuoption>{
 "helpno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_menuoption_helpno);
 "helpno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_menuoption_helpno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_menuoption_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_menuoption_nm);

 ">" {
  LEAVE; STag_menuoption();pcdata_ix = 0; ENTER(S_menuoption);
 }
 "/>" {
  LEAVE; STag_menuoption(); pcdata_ix = 0; ETag_menuoption(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_menuoption: SET(EPILOG); break;
   case S_event_data: case S_event_data_2: case S_event_data_1: SET(S_event_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of menuoption element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `menuoption' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `menuoption' element.");
}

<S_menuoption_2,E_menuoption,S_menuoption>{
 "</menuoption"{s}">" {
  LEAVE;
  ETag_menuoption();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_menuoption: SET(EPILOG); break;
   case S_event_data: case S_event_data_2: case S_event_data_1: SET(S_event_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</menuoption>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</menuoption>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</menuoption>' expected.");
}

<ROOT_module_definition,S_program_definition_2,S_program_definition,S_program_definition_1>"<module_definition"{s} {
  AX_module_definition_compile_time_sqltype = 0;
  AX_module_definition_compiled_time = 0;
  AX_module_definition_debug_filename = 0;
  AX_module_definition_force_ui = 0;
  AX_module_definition_full_path_filename = 0;
  AX_module_definition_genStackInfo = 0;
  AX_module_definition_mod_dbname = 0;
  AX_module_definition_moduleIsInLibrary = 0;
  AX_module_definition_module_name = 0;
  AX_module_definition_namespace = 0;
  AX_module_definition_nm = 0;
  AX_module_definition_schema_only = 0;
  ENTER(AL_module_definition); pushbuffer(0);
  }

<AL_module_definition>{
 "compile_time_sqltype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_compile_time_sqltype);
 "compile_time_sqltype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_compile_time_sqltype);

 "compiled_time"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_compiled_time);
 "compiled_time"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_compiled_time);

 "debug_filename"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_debug_filename);
 "debug_filename"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_debug_filename);

 "force_ui"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_force_ui);
 "force_ui"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_force_ui);

 "full_path_filename"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_full_path_filename);
 "full_path_filename"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_full_path_filename);

 "genStackInfo"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_genStackInfo);
 "genStackInfo"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_genStackInfo);

 "mod_dbname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_mod_dbname);
 "mod_dbname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_mod_dbname);

 "moduleIsInLibrary"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_moduleIsInLibrary);
 "moduleIsInLibrary"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_moduleIsInLibrary);

 "module_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_module_name);
 "module_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_module_name);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_nm);

 "schema_only"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_definition_schema_only);
 "schema_only"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_definition_schema_only);

 ">" {
  LEAVE; STag_module_definition();pcdata_ix = 0; ENTER(S_module_definition);
 }
 "/>" {
  LEAVE; STag_module_definition(); pcdata_ix = 0; ETag_module_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_program_definition_2: case S_program_definition: case S_program_definition_1: SET(S_program_definition_2); break;
   case ROOT_module_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of module_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `module_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `module_definition' element.");
}

<S_module_definition_2,S_module_definition,E_module_definition>{
 "</module_definition"{s}">" {
  LEAVE;
  ETag_module_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_program_definition_2: case S_program_definition: case S_program_definition_1: SET(S_program_definition_2); break;
   case ROOT_module_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</module_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</module_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</module_definition>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_module_entry,S_module_definition,S_s_module_entry_ptr_list_1,S_s_class_definition_1,S_module_definition_1,S_s_module_entry_ptr_list_2,S_module_definition_2,S_s_module_entry_ptr_list,S_s_class_definition_2,S_s_class_definition>"<module_entry"{s} {
  AX_module_entry_module_entry_type = 0;
  AX_module_entry_nm = 0;
  ENTER(AL_module_entry); pushbuffer(0);
  }

<AL_module_entry>{
 "module_entry_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_entry_module_entry_type);
 "module_entry_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_entry_module_entry_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_module_entry_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_module_entry_nm);

 ">" {
  if (!AX_module_entry_module_entry_type) FAIL("Required attribute `module_entry_type' not set for `module_entry' element.");
  LEAVE; STag_module_entry();pcdata_ix = 0; ENTER(S_module_entry);
 }
 "/>" {
  if (!AX_module_entry_module_entry_type) FAIL("Required attribute `module_entry_type' not set for `module_entry' element.");
  LEAVE; STag_module_entry(); pcdata_ix = 0; ETag_module_entry(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case S_s_class_definition_1: case S_s_class_definition_2: case S_s_class_definition: SET(S_s_class_definition_2); break;
   case ROOT_module_entry: SET(EPILOG); break;
   case S_s_module_entry_ptr_list_1: case S_s_module_entry_ptr_list_2: case S_s_module_entry_ptr_list: SET(S_s_module_entry_ptr_list_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of module_entry element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `module_entry' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `module_entry' element.");
}

<S_module_entry_2,E_module_entry,S_module_entry,S_module_entry_1>{
 "</module_entry"{s}">" {
  LEAVE;
  ETag_module_entry();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case S_s_class_definition_1: case S_s_class_definition_2: case S_s_class_definition: SET(S_s_class_definition_2); break;
   case ROOT_module_entry: SET(EPILOG); break;
   case S_s_module_entry_ptr_list_1: case S_s_module_entry_ptr_list_2: case S_s_module_entry_ptr_list: SET(S_s_module_entry_ptr_list_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</module_entry>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</module_entry>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</module_entry>' expected.");
}

<ROOT_object_variable,S_variable_data_2,S_variable_data,S_variable_data_1>"<object_variable"{s} {
  AX_object_variable_class_name = 0;
  AX_object_variable_nm = 0;
  ENTER(AL_object_variable); pushbuffer(0);
  }

<AL_object_variable>{
 "class_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_object_variable_class_name);
 "class_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_object_variable_class_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_object_variable_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_object_variable_nm);

 ">" {
  LEAVE; STag_object_variable();pcdata_ix = 0; ENTER(S_object_variable);
 }
 "/>" {
  LEAVE; STag_object_variable(); pcdata_ix = 0; ETag_object_variable(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_object_variable: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of object_variable element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `object_variable' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `object_variable' element.");
}

<S_object_variable_2,S_object_variable,E_object_variable>{
 "</object_variable"{s}">" {
  LEAVE;
  ETag_object_variable();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_object_variable: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</object_variable>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</object_variable>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</object_variable>' expected.");
}

<ROOT_on_event,S_on_events_2,S_on_events_1,S_on_events>"<on_event"{s} {
  AX_on_event_colno = 0;
  AX_on_event_lineno = 0;
  AX_on_event_nm = 0;
  ENTER(AL_on_event); pushbuffer(0);
  }

<AL_on_event>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_on_event_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_on_event_colno);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_on_event_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_on_event_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_on_event_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_on_event_nm);

 ">" {
  LEAVE; STag_on_event();pcdata_ix = 0; ENTER(S_on_event);
 }
 "/>" {
  LEAVE; STag_on_event(); pcdata_ix = 0; ETag_on_event(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_on_event: SET(EPILOG); break;
   case S_on_events_2: case S_on_events_1: case S_on_events: SET(S_on_events_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of on_event element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `on_event' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `on_event' element.");
}

<S_on_event,E_on_event,S_on_event_2>{
 "</on_event"{s}">" {
  LEAVE;
  ETag_on_event();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_on_event: SET(EPILOG); break;
   case S_on_events_2: case S_on_events_1: case S_on_events: SET(S_on_events_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</on_event>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</on_event>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</on_event>' expected.");
}

<ROOT_on_events,S_struct_display_array_cmd,S_struct_construct_cmd_1,S_struct_menu_cmd_2,S_struct_menu_cmd,S_s_formhandler_definition,S_struct_construct_cmd,S_struct_menu_cmd_1,S_struct_prompt_cmd,S_struct_display_array_cmd_2,S_struct_prompt_cmd_1,S_struct_input_cmd_2,S_struct_input_cmd,S_struct_display_array_cmd_1,S_struct_input_array_cmd,S_s_formhandler_definition_2,S_struct_prompt_cmd_2,S_struct_input_array_cmd_1,S_struct_input_cmd_1,S_struct_construct_cmd_2,S_struct_input_array_cmd_2,S_s_formhandler_definition_1>"<on_events"{s} {
  AX_on_events_nm = 0;
  ENTER(AL_on_events); pushbuffer(0);
  }

<AL_on_events>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_on_events_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_on_events_nm);

 ">" {
  LEAVE; STag_on_events();pcdata_ix = 0; ENTER(S_on_events);
 }
 "/>" {
  LEAVE; STag_on_events(); pcdata_ix = 0; ETag_on_events(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_construct_cmd_1: case S_struct_construct_cmd: case S_struct_construct_cmd_2: SET(S_struct_construct_cmd_2); break;
   case S_struct_input_array_cmd: case S_struct_input_array_cmd_1: case S_struct_input_array_cmd_2: SET(S_struct_input_array_cmd_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: case S_struct_prompt_cmd_2: SET(S_struct_prompt_cmd_2); break;
   case S_struct_display_array_cmd: case S_struct_display_array_cmd_2: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case S_struct_menu_cmd_2: case S_struct_menu_cmd: case S_struct_menu_cmd_1: SET(S_struct_menu_cmd_2); break;
   case ROOT_on_events: SET(EPILOG); break;
   case S_struct_input_cmd_2: case S_struct_input_cmd: case S_struct_input_cmd_1: SET(S_struct_input_cmd_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of on_events element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `on_events' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `on_events' element.");
}

<E_on_events,S_on_events,S_on_events_2>{
 "</on_events"{s}">" {
  LEAVE;
  ETag_on_events();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_construct_cmd_1: case S_struct_construct_cmd: case S_struct_construct_cmd_2: SET(S_struct_construct_cmd_2); break;
   case S_struct_input_array_cmd: case S_struct_input_array_cmd_1: case S_struct_input_array_cmd_2: SET(S_struct_input_array_cmd_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_struct_prompt_cmd: case S_struct_prompt_cmd_1: case S_struct_prompt_cmd_2: SET(S_struct_prompt_cmd_2); break;
   case S_struct_display_array_cmd: case S_struct_display_array_cmd_2: case S_struct_display_array_cmd_1: SET(S_struct_display_array_cmd_2); break;
   case S_struct_menu_cmd_2: case S_struct_menu_cmd: case S_struct_menu_cmd_1: SET(S_struct_menu_cmd_2); break;
   case ROOT_on_events: SET(EPILOG); break;
   case S_struct_input_cmd_2: case S_struct_input_cmd: case S_struct_input_cmd_1: SET(S_struct_input_cmd_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</on_events>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</on_events>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</on_events>' expected.");
}

<ROOT_pdf_startrep,S_s_pdf_report_definition_2,S_s_pdf_report_definition_1,S_s_pdf_report_definition>"<pdf_startrep"{s} {
  AX_pdf_startrep_ascii_height = 0;
  AX_pdf_startrep_ascii_width = 0;
  AX_pdf_startrep_firstpageheadersize = 0;
  AX_pdf_startrep_fontname = 0;
  AX_pdf_startrep_fontsize = 0;
  AX_pdf_startrep_isdefault = 0;
  AX_pdf_startrep_nm = 0;
  AX_pdf_startrep_pageheadersize = 0;
  AX_pdf_startrep_pagetrailersize = 0;
  AX_pdf_startrep_papersize = 0;
  AX_pdf_startrep_towhat = 0;
  AX_pdf_startrep_with_bottom_margin = 0;
  AX_pdf_startrep_with_left_margin = 0;
  AX_pdf_startrep_with_page_length = 0;
  AX_pdf_startrep_with_page_width = 0;
  AX_pdf_startrep_with_right_margin = 0;
  AX_pdf_startrep_with_top_margin = 0;
  ENTER(AL_pdf_startrep); pushbuffer(0);
  }

<AL_pdf_startrep>{
 "ascii_height"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_ascii_height);
 "ascii_height"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_ascii_height);

 "ascii_width"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_ascii_width);
 "ascii_width"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_ascii_width);

 "firstpageheadersize"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_firstpageheadersize);
 "firstpageheadersize"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_firstpageheadersize);

 "fontname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_fontname);
 "fontname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_fontname);

 "fontsize"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_fontsize);
 "fontsize"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_fontsize);

 "isdefault"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_isdefault);
 "isdefault"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_isdefault);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_nm);

 "pageheadersize"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_pageheadersize);
 "pageheadersize"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_pageheadersize);

 "pagetrailersize"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_pagetrailersize);
 "pagetrailersize"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_pagetrailersize);

 "papersize"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_papersize);
 "papersize"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_papersize);

 "towhat"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_towhat);
 "towhat"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_towhat);

 "with_bottom_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_with_bottom_margin);
 "with_bottom_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_with_bottom_margin);

 "with_left_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_with_left_margin);
 "with_left_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_with_left_margin);

 "with_page_length"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_with_page_length);
 "with_page_length"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_with_page_length);

 "with_page_width"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_with_page_width);
 "with_page_width"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_with_page_width);

 "with_right_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_with_right_margin);
 "with_right_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_with_right_margin);

 "with_top_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_pdf_startrep_with_top_margin);
 "with_top_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_pdf_startrep_with_top_margin);

 ">" {
  LEAVE; STag_pdf_startrep();pcdata_ix = 0; ENTER(S_pdf_startrep);
 }
 "/>" {
  LEAVE; STag_pdf_startrep(); pcdata_ix = 0; ETag_pdf_startrep(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_pdf_startrep: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of pdf_startrep element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `pdf_startrep' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `pdf_startrep' element.");
}

<S_pdf_startrep_2,S_pdf_startrep,E_pdf_startrep>{
 "</pdf_startrep"{s}">" {
  LEAVE;
  ETag_pdf_startrep();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_pdf_startrep: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</pdf_startrep>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</pdf_startrep>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</pdf_startrep>' expected.");
}

<ROOT_program_definition>"<program_definition"{s} {
  AX_program_definition_nm = 0;
  ENTER(AL_program_definition); pushbuffer(0);
  }

<AL_program_definition>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_program_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_program_definition_nm);

 ">" {
  LEAVE; STag_program_definition();pcdata_ix = 0; ENTER(S_program_definition);
 }
 "/>" {
  LEAVE; STag_program_definition(); pcdata_ix = 0; ETag_program_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_program_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of program_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `program_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `program_definition' element.");
}

<E_program_definition,S_program_definition_2,S_program_definition>{
 "</program_definition"{s}">" {
  LEAVE;
  ETag_program_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_program_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</program_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</program_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</program_definition>' expected.");
}

<ROOT_record_variable,S_variable_data_2,S_variable_data,S_variable_data_1>"<record_variable"{s} {
  AX_record_variable_nm = 0;
  AX_record_variable_record_alloc = 0;
  AX_record_variable_user_ptr = 0;
  ENTER(AL_record_variable); pushbuffer(0);
  }

<AL_record_variable>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_record_variable_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_record_variable_nm);

 "record_alloc"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_record_variable_record_alloc);
 "record_alloc"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_record_variable_record_alloc);

 "user_ptr"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_record_variable_user_ptr);
 "user_ptr"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_record_variable_user_ptr);

 ">" {
  LEAVE; STag_record_variable();pcdata_ix = 0; ENTER(S_record_variable);
 }
 "/>" {
  LEAVE; STag_record_variable(); pcdata_ix = 0; ETag_record_variable(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_record_variable: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of record_variable element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `record_variable' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `record_variable' element.");
}

<E_record_variable,S_record_variable,S_record_variable_2>{
 "</record_variable"{s}">" {
  LEAVE;
  ETag_record_variable();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_record_variable: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</record_variable>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</record_variable>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</record_variable>' expected.");
}

<ROOT_report_block_data,S_report_format_section_entry_2,S_report_format_section_entry_1,S_report_format_section_entry>"<report_block_data"{s} {
  AX_report_block_data_nm = 0;
  AX_report_block_data_report_blocks = 0;
  ENTER(AL_report_block_data); pushbuffer(0);
  }

<AL_report_block_data>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_block_data_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_block_data_nm);

 "report_blocks"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_block_data_report_blocks);
 "report_blocks"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_block_data_report_blocks);

 ">" {
  if (!AX_report_block_data_report_blocks) FAIL("Required attribute `report_blocks' not set for `report_block_data' element.");
  LEAVE; STag_report_block_data();pcdata_ix = 0; ENTER(S_report_block_data);
 }
 "/>" {
  if (!AX_report_block_data_report_blocks) FAIL("Required attribute `report_blocks' not set for `report_block_data' element.");
  LEAVE; STag_report_block_data(); pcdata_ix = 0; ETag_report_block_data(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_report_format_section_entry_2: case S_report_format_section_entry_1: case S_report_format_section_entry: SET(S_report_format_section_entry_2); break;
   case ROOT_report_block_data: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of report_block_data element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `report_block_data' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `report_block_data' element.");
}

<S_report_block_data,S_report_block_data_1,S_report_block_data_2,E_report_block_data>{
 "</report_block_data"{s}">" {
  LEAVE;
  ETag_report_block_data();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_report_format_section_entry_2: case S_report_format_section_entry_1: case S_report_format_section_entry: SET(S_report_format_section_entry_2); break;
   case ROOT_report_block_data: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</report_block_data>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</report_block_data>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</report_block_data>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_report_format_section,S_s_pdf_report_definition_2,S_s_pdf_report_definition_1,S_s_report_definition_2,S_s_report_definition,S_s_report_definition_1,S_s_pdf_report_definition>"<report_format_section"{s} {
  AX_report_format_section_lines_in_first_header = 0;
  AX_report_format_section_lines_in_header = 0;
  AX_report_format_section_lines_in_trailer = 0;
  AX_report_format_section_nm = 0;
  ENTER(AL_report_format_section); pushbuffer(0);
  }

<AL_report_format_section>{
 "lines_in_first_header"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_format_section_lines_in_first_header);
 "lines_in_first_header"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_format_section_lines_in_first_header);

 "lines_in_header"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_format_section_lines_in_header);
 "lines_in_header"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_format_section_lines_in_header);

 "lines_in_trailer"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_format_section_lines_in_trailer);
 "lines_in_trailer"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_format_section_lines_in_trailer);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_format_section_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_format_section_nm);

 ">" {
  LEAVE; STag_report_format_section();pcdata_ix = 0; ENTER(S_report_format_section);
 }
 "/>" {
  LEAVE; STag_report_format_section(); pcdata_ix = 0; ETag_report_format_section(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_report_format_section: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of report_format_section element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `report_format_section' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `report_format_section' element.");
}

<S_report_format_section,E_report_format_section,S_report_format_section_2>{
 "</report_format_section"{s}">" {
  LEAVE;
  ETag_report_format_section();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_report_format_section: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</report_format_section>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</report_format_section>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</report_format_section>' expected.");
}

<ROOT_report_format_section_entry,S_report_format_section_1,S_report_format_section,S_report_format_section_2>"<report_format_section_entry"{s} {
  AX_report_format_section_entry_lineno = 0;
  AX_report_format_section_entry_nm = 0;
  AX_report_format_section_entry_orderby_var_no = 0;
  ENTER(AL_report_format_section_entry); pushbuffer(0);
  }

<AL_report_format_section_entry>{
 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_format_section_entry_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_format_section_entry_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_format_section_entry_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_format_section_entry_nm);

 "orderby_var_no"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_format_section_entry_orderby_var_no);
 "orderby_var_no"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_format_section_entry_orderby_var_no);

 ">" {
  LEAVE; STag_report_format_section_entry();pcdata_ix = 0; ENTER(S_report_format_section_entry);
 }
 "/>" {
  LEAVE; STag_report_format_section_entry(); pcdata_ix = 0; ETag_report_format_section_entry(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_report_format_section_1: case S_report_format_section: case S_report_format_section_2: SET(S_report_format_section_2); break;
   case ROOT_report_format_section_entry: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of report_format_section_entry element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `report_format_section_entry' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `report_format_section_entry' element.");
}

<E_report_format_section_entry,S_report_format_section_entry,S_report_format_section_entry_2>{
 "</report_format_section_entry"{s}">" {
  LEAVE;
  ETag_report_format_section_entry();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_report_format_section_1: case S_report_format_section: case S_report_format_section_2: SET(S_report_format_section_2); break;
   case ROOT_report_format_section_entry: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</report_format_section_entry>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</report_format_section_entry>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</report_format_section_entry>' expected.");
}

<ROOT_report_orderby_section,S_s_pdf_report_definition_2,S_s_pdf_report_definition_1,S_s_report_definition_2,S_s_report_definition,S_s_report_definition_1,S_s_pdf_report_definition>"<report_orderby_section"{s} {
  AX_report_orderby_section_nm = 0;
  AX_report_orderby_section_rord_type = 0;
  ENTER(AL_report_orderby_section); pushbuffer(0);
  }

<AL_report_orderby_section>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_orderby_section_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_orderby_section_nm);

 "rord_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_report_orderby_section_rord_type);
 "rord_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_report_orderby_section_rord_type);

 ">" {
  LEAVE; STag_report_orderby_section();pcdata_ix = 0; ENTER(S_report_orderby_section);
 }
 "/>" {
  LEAVE; STag_report_orderby_section(); pcdata_ix = 0; ETag_report_orderby_section(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_report_orderby_section: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of report_orderby_section element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `report_orderby_section' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `report_orderby_section' element.");
}

<E_report_orderby_section,S_report_orderby_section,S_report_orderby_section_2>{
 "</report_orderby_section"{s}">" {
  LEAVE;
  ETag_report_orderby_section();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case ROOT_report_orderby_section: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</report_orderby_section>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</report_orderby_section>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</report_orderby_section>' expected.");
}

<ROOT_rowscols,S_windowtype_1,S_windowtype_2,S_windowtype>"<rowscols"{s} {
  AX_rowscols_nm = 0;
  ENTER(AL_rowscols); pushbuffer(0);
  }

<AL_rowscols>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_rowscols_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_rowscols_nm);

 ">" {
  LEAVE; STag_rowscols();pcdata_ix = 0; ENTER(S_rowscols);
 }
 "/>" {
  LEAVE; STag_rowscols(); pcdata_ix = 0; ETag_rowscols(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_windowtype_1: case S_windowtype_2: case S_windowtype: SET(S_windowtype_2); break;
   case ROOT_rowscols: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of rowscols element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `rowscols' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `rowscols' element.");
}

<S_rowscols,E_rowscols,S_rowscols_2>{
 "</rowscols"{s}">" {
  LEAVE;
  ETag_rowscols();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_windowtype_1: case S_windowtype_2: case S_windowtype: SET(S_windowtype_2); break;
   case ROOT_rowscols: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</rowscols>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</rowscols>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</rowscols>' expected.");
}

<ROOT_s_class_definition,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_class_definition"{s} {
  AX_s_class_definition_classname = 0;
  AX_s_class_definition_nm = 0;
  AX_s_class_definition_parentname = 0;
  ENTER(AL_s_class_definition); pushbuffer(0);
  }

<AL_s_class_definition>{
 "classname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_class_definition_classname);
 "classname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_class_definition_classname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_class_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_class_definition_nm);

 "parentname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_class_definition_parentname);
 "parentname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_class_definition_parentname);

 ">" {
  LEAVE; STag_s_class_definition();pcdata_ix = 0; ENTER(S_s_class_definition);
 }
 "/>" {
  LEAVE; STag_s_class_definition(); pcdata_ix = 0; ETag_s_class_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_class_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_class_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_class_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_class_definition' element.");
}

<E_s_class_definition,S_s_class_definition_2,S_s_class_definition>{
 "</s_class_definition"{s}">" {
  LEAVE;
  ETag_s_class_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_class_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_class_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_class_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_class_definition>' expected.");
}

<ROOT_s_cur_def,S_struct_declare_cmd_1,S_struct_declare_cmd_2,S_struct_declare_cmd>"<s_cur_def"{s} {
  AX_s_cur_def_forUpdate = 0;
  AX_s_cur_def_nm = 0;
  ENTER(AL_s_cur_def); pushbuffer(0);
  }

<AL_s_cur_def>{
 "forUpdate"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_cur_def_forUpdate);
 "forUpdate"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_cur_def_forUpdate);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_cur_def_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_cur_def_nm);

 ">" {
  LEAVE; STag_s_cur_def();pcdata_ix = 0; ENTER(S_s_cur_def);
 }
 "/>" {
  LEAVE; STag_s_cur_def(); pcdata_ix = 0; ETag_s_cur_def(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_cur_def: SET(EPILOG); break;
   case S_struct_declare_cmd_1: case S_struct_declare_cmd_2: case S_struct_declare_cmd: SET(S_struct_declare_cmd_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_cur_def element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_cur_def' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_cur_def' element.");
}

<S_s_cur_def,E_s_cur_def,S_s_cur_def_2>{
 "</s_cur_def"{s}">" {
  LEAVE;
  ETag_s_cur_def();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_cur_def: SET(EPILOG); break;
   case S_struct_declare_cmd_1: case S_struct_declare_cmd_2: case S_struct_declare_cmd: SET(S_struct_declare_cmd_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_cur_def>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_cur_def>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_cur_def>' expected.");
}

<ROOT_s_dependant_tables,S_module_definition,S_module_definition_1,S_module_definition_2>"<s_dependant_tables"{s} {
  AX_s_dependant_tables_checksuminfo = 0;
  AX_s_dependant_tables_nm = 0;
  AX_s_dependant_tables_tabname = 0;
  ENTER(AL_s_dependant_tables); pushbuffer(0);
  }

<AL_s_dependant_tables>{
 "checksuminfo"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_dependant_tables_checksuminfo);
 "checksuminfo"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_dependant_tables_checksuminfo);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_dependant_tables_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_dependant_tables_nm);

 "tabname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_dependant_tables_tabname);
 "tabname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_dependant_tables_tabname);

 ">" {
  LEAVE; STag_s_dependant_tables();pcdata_ix = 0; ENTER(E_s_dependant_tables);
 }
 "/>" {
  LEAVE; STag_s_dependant_tables(); pcdata_ix = 0; ETag_s_dependant_tables(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_s_dependant_tables: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_dependant_tables element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_dependant_tables' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_dependant_tables' element.");
}

<E_s_dependant_tables>{
 "</s_dependant_tables"{s}">" {
  LEAVE;
  ETag_s_dependant_tables();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_s_dependant_tables: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_dependant_tables>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_dependant_tables>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_dependant_tables>' expected.");
}

<ROOT_s_exchange_clobber,S_module_definition,S_module_definition_1,S_module_definition_2>"<s_exchange_clobber"{s} {
  AX_s_exchange_clobber_important = 0;
  AX_s_exchange_clobber_newval = 0;
  AX_s_exchange_clobber_nm = 0;
  AX_s_exchange_clobber_origval = 0;
  ENTER(AL_s_exchange_clobber); pushbuffer(0);
  }

<AL_s_exchange_clobber>{
 "important"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_exchange_clobber_important);
 "important"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_exchange_clobber_important);

 "newval"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_exchange_clobber_newval);
 "newval"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_exchange_clobber_newval);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_exchange_clobber_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_exchange_clobber_nm);

 "origval"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_exchange_clobber_origval);
 "origval"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_exchange_clobber_origval);

 ">" {
  LEAVE; STag_s_exchange_clobber();pcdata_ix = 0; ENTER(E_s_exchange_clobber);
 }
 "/>" {
  LEAVE; STag_s_exchange_clobber(); pcdata_ix = 0; ETag_s_exchange_clobber(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_s_exchange_clobber: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_exchange_clobber element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_exchange_clobber' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_exchange_clobber' element.");
}

<E_s_exchange_clobber>{
 "</s_exchange_clobber"{s}">" {
  LEAVE;
  ETag_s_exchange_clobber();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_s_exchange_clobber: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_exchange_clobber>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_exchange_clobber>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_exchange_clobber>' expected.");
}

<ROOT_s_expr_agg,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_agg"{s} {
  AX_s_expr_agg_agg_type = 0;
  AX_s_expr_agg_blockid = 0;
  AX_s_expr_agg_expr_num = 0;
  AX_s_expr_agg_in_group = 0;
  AX_s_expr_agg_nm = 0;
  ENTER(AL_s_expr_agg); pushbuffer(0);
  }

<AL_s_expr_agg>{
 "agg_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_agg_agg_type);
 "agg_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_agg_agg_type);

 "blockid"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_agg_blockid);
 "blockid"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_agg_blockid);

 "expr_num"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_agg_expr_num);
 "expr_num"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_agg_expr_num);

 "in_group"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_agg_in_group);
 "in_group"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_agg_in_group);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_agg_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_agg_nm);

 ">" {
  LEAVE; STag_s_expr_agg();pcdata_ix = 0; ENTER(S_s_expr_agg);
 }
 "/>" {
  LEAVE; STag_s_expr_agg(); pcdata_ix = 0; ETag_s_expr_agg(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_agg: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_agg element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_agg' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_agg' element.");
}

<S_s_expr_agg_2,E_s_expr_agg,S_s_expr_agg>{
 "</s_expr_agg"{s}">" {
  LEAVE;
  ETag_s_expr_agg();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_agg: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_agg>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_agg>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_agg>' expected.");
}

<ROOT_s_expr_aligned,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_aligned"{s} {
  AX_s_expr_aligned_nm = 0;
  ENTER(AL_s_expr_aligned); pushbuffer(0);
  }

<AL_s_expr_aligned>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_aligned_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_aligned_nm);

 ">" {
  LEAVE; STag_s_expr_aligned();pcdata_ix = 0; ENTER(S_s_expr_aligned);
 }
 "/>" {
  LEAVE; STag_s_expr_aligned(); pcdata_ix = 0; ETag_s_expr_aligned(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_aligned: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_aligned element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_aligned' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_aligned' element.");
}

<E_s_expr_aligned,S_s_expr_aligned,S_s_expr_aligned_2>{
 "</s_expr_aligned"{s}">" {
  LEAVE;
  ETag_s_expr_aligned();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_aligned: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_aligned>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_aligned>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_aligned>' expected.");
}

<ROOT_s_expr_bound_fcall,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_bound_fcall"{s} {
  AX_s_expr_bound_fcall_fname = 0;
  AX_s_expr_bound_fcall_lib = 0;
  AX_s_expr_bound_fcall_line = 0;
  AX_s_expr_bound_fcall_module = 0;
  AX_s_expr_bound_fcall_namespace = 0;
  AX_s_expr_bound_fcall_nm = 0;
  ENTER(AL_s_expr_bound_fcall); pushbuffer(0);
  }

<AL_s_expr_bound_fcall>{
 "fname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_bound_fcall_fname);
 "fname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_bound_fcall_fname);

 "lib"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_bound_fcall_lib);
 "lib"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_bound_fcall_lib);

 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_bound_fcall_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_bound_fcall_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_bound_fcall_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_bound_fcall_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_bound_fcall_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_bound_fcall_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_bound_fcall_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_bound_fcall_nm);

 ">" {
  LEAVE; STag_s_expr_bound_fcall();pcdata_ix = 0; ENTER(S_s_expr_bound_fcall);
 }
 "/>" {
  LEAVE; STag_s_expr_bound_fcall(); pcdata_ix = 0; ETag_s_expr_bound_fcall(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_bound_fcall: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_bound_fcall element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_bound_fcall' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_bound_fcall' element.");
}

<S_s_expr_bound_fcall,S_s_expr_bound_fcall_2,E_s_expr_bound_fcall>{
 "</s_expr_bound_fcall"{s}">" {
  LEAVE;
  ETag_s_expr_bound_fcall();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_bound_fcall: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_bound_fcall>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_bound_fcall>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_bound_fcall>' expected.");
}

<ROOT_s_expr_cached,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_cached"{s} {
  AX_s_expr_cached_cache_num = 0;
  AX_s_expr_cached_nm = 0;
  AX_s_expr_cached_ref_cnt = 0;
  ENTER(AL_s_expr_cached); pushbuffer(0);
  }

<AL_s_expr_cached>{
 "cache_num"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cached_cache_num);
 "cache_num"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cached_cache_num);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cached_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cached_nm);

 "ref_cnt"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cached_ref_cnt);
 "ref_cnt"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cached_ref_cnt);

 ">" {
  LEAVE; STag_s_expr_cached();pcdata_ix = 0; ENTER(E_s_expr_cached);
 }
 "/>" {
  LEAVE; STag_s_expr_cached(); pcdata_ix = 0; ETag_s_expr_cached(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_cached: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_cached element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_cached' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_cached' element.");
}

<E_s_expr_cached>{
 "</s_expr_cached"{s}">" {
  LEAVE;
  ETag_s_expr_cached();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_cached: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_cached>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_cached>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_cached>' expected.");
}

<ROOT_s_expr_cast,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_cast"{s} {
  AX_s_expr_cast_force = 0;
  AX_s_expr_cast_nm = 0;
  AX_s_expr_cast_notnull = 0;
  AX_s_expr_cast_src_dtype = 0;
  AX_s_expr_cast_target_dtype = 0;
  ENTER(AL_s_expr_cast); pushbuffer(0);
  }

<AL_s_expr_cast>{
 "force"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cast_force);
 "force"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cast_force);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cast_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cast_nm);

 "notnull"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cast_notnull);
 "notnull"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cast_notnull);

 "src_dtype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cast_src_dtype);
 "src_dtype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cast_src_dtype);

 "target_dtype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_cast_target_dtype);
 "target_dtype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_cast_target_dtype);

 ">" {
  LEAVE; STag_s_expr_cast();pcdata_ix = 0; ENTER(S_s_expr_cast);
 }
 "/>" {
  LEAVE; STag_s_expr_cast(); pcdata_ix = 0; ETag_s_expr_cast(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_cast: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_cast element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_cast' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_cast' element.");
}

<S_s_expr_cast,S_s_expr_cast_2,E_s_expr_cast>{
 "</s_expr_cast"{s}">" {
  LEAVE;
  ETag_s_expr_cast();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_cast: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_cast>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_cast>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_cast>' expected.");
}

<ROOT_s_expr_current,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_current"{s} {
  AX_s_expr_current_from = 0;
  AX_s_expr_current_nm = 0;
  AX_s_expr_current_to = 0;
  ENTER(AL_s_expr_current); pushbuffer(0);
  }

<AL_s_expr_current>{
 "from"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_current_from);
 "from"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_current_from);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_current_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_current_nm);

 "to"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_current_to);
 "to"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_current_to);

 ">" {
  LEAVE; STag_s_expr_current();pcdata_ix = 0; ENTER(E_s_expr_current);
 }
 "/>" {
  LEAVE; STag_s_expr_current(); pcdata_ix = 0; ETag_s_expr_current(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_current: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_current element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_current' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_current' element.");
}

<E_s_expr_current>{
 "</s_expr_current"{s}">" {
  LEAVE;
  ETag_s_expr_current();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_current: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_current>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_current>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_current>' expected.");
}

<ROOT_s_expr_datetime,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_datetime"{s} {
  AX_s_expr_datetime_dtval = 0;
  AX_s_expr_datetime_extend = 0;
  AX_s_expr_datetime_nm = 0;
  ENTER(AL_s_expr_datetime); pushbuffer(0);
  }

<AL_s_expr_datetime>{
 "dtval"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_datetime_dtval);
 "dtval"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_datetime_dtval);

 "extend"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_datetime_extend);
 "extend"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_datetime_extend);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_datetime_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_datetime_nm);

 ">" {
  LEAVE; STag_s_expr_datetime();pcdata_ix = 0; ENTER(E_s_expr_datetime);
 }
 "/>" {
  LEAVE; STag_s_expr_datetime(); pcdata_ix = 0; ETag_s_expr_datetime(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_datetime: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_datetime element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_datetime' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_datetime' element.");
}

<E_s_expr_datetime>{
 "</s_expr_datetime"{s}">" {
  LEAVE;
  ETag_s_expr_datetime();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_datetime: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_datetime>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_datetime>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_datetime>' expected.");
}

<ROOT_s_expr_dynarr_extent,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_dynarr_extent"{s} {
  AX_s_expr_dynarr_extent_n = 0;
  AX_s_expr_dynarr_extent_nm = 0;
  ENTER(AL_s_expr_dynarr_extent); pushbuffer(0);
  }

<AL_s_expr_dynarr_extent>{
 "n"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_dynarr_extent_n);
 "n"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_dynarr_extent_n);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_dynarr_extent_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_dynarr_extent_nm);

 ">" {
  LEAVE; STag_s_expr_dynarr_extent();pcdata_ix = 0; ENTER(S_s_expr_dynarr_extent);
 }
 "/>" {
  LEAVE; STag_s_expr_dynarr_extent(); pcdata_ix = 0; ETag_s_expr_dynarr_extent(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_dynarr_extent: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_dynarr_extent element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_dynarr_extent' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_dynarr_extent' element.");
}

<E_s_expr_dynarr_extent,S_s_expr_dynarr_extent,S_s_expr_dynarr_extent_2>{
 "</s_expr_dynarr_extent"{s}">" {
  LEAVE;
  ETag_s_expr_dynarr_extent();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_dynarr_extent: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_dynarr_extent>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_dynarr_extent>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_dynarr_extent>' expected.");
}

<ROOT_s_expr_dynarr_function_call_n,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_dynarr_function_call_n"{s} {
  AX_s_expr_dynarr_function_call_n_funcName = 0;
  AX_s_expr_dynarr_function_call_n_line = 0;
  AX_s_expr_dynarr_function_call_n_module = 0;
  AX_s_expr_dynarr_function_call_n_namespace = 0;
  AX_s_expr_dynarr_function_call_n_nm = 0;
  ENTER(AL_s_expr_dynarr_function_call_n); pushbuffer(0);
  }

<AL_s_expr_dynarr_function_call_n>{
 "funcName"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_dynarr_function_call_n_funcName);
 "funcName"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_dynarr_function_call_n_funcName);

 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_dynarr_function_call_n_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_dynarr_function_call_n_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_dynarr_function_call_n_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_dynarr_function_call_n_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_dynarr_function_call_n_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_dynarr_function_call_n_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_dynarr_function_call_n_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_dynarr_function_call_n_nm);

 ">" {
  LEAVE; STag_s_expr_dynarr_function_call_n();pcdata_ix = 0; ENTER(S_s_expr_dynarr_function_call_n);
 }
 "/>" {
  LEAVE; STag_s_expr_dynarr_function_call_n(); pcdata_ix = 0; ETag_s_expr_dynarr_function_call_n(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_dynarr_function_call_n: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_dynarr_function_call_n element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_dynarr_function_call_n' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_dynarr_function_call_n' element.");
}

<S_s_expr_dynarr_function_call_n,S_s_expr_dynarr_function_call_n_2,E_s_expr_dynarr_function_call_n>{
 "</s_expr_dynarr_function_call_n"{s}">" {
  LEAVE;
  ETag_s_expr_dynarr_function_call_n();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_dynarr_function_call_n: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_dynarr_function_call_n>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_dynarr_function_call_n>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_dynarr_function_call_n>' expected.");
}

<ROOT_s_expr_exists_sq,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_exists_sq"{s} {
  AX_s_expr_exists_sq_nm = 0;
  ENTER(AL_s_expr_exists_sq); pushbuffer(0);
  }

<AL_s_expr_exists_sq>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_exists_sq_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_exists_sq_nm);

 ">" {
  LEAVE; STag_s_expr_exists_sq();pcdata_ix = 0; ENTER(S_s_expr_exists_sq);
 }
 "/>" {
  LEAVE; STag_s_expr_exists_sq(); pcdata_ix = 0; ETag_s_expr_exists_sq(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_exists_sq: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_exists_sq element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_exists_sq' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_exists_sq' element.");
}

<S_s_expr_exists_sq_2,E_s_expr_exists_sq,S_s_expr_exists_sq>{
 "</s_expr_exists_sq"{s}">" {
  LEAVE;
  ETag_s_expr_exists_sq();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_exists_sq: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_exists_sq>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_exists_sq>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_exists_sq>' expected.");
}

<ROOT_s_expr_extend,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_extend"{s} {
  AX_s_expr_extend_nm = 0;
  AX_s_expr_extend_to = 0;
  ENTER(AL_s_expr_extend); pushbuffer(0);
  }

<AL_s_expr_extend>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_extend_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_extend_nm);

 "to"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_extend_to);
 "to"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_extend_to);

 ">" {
  LEAVE; STag_s_expr_extend();pcdata_ix = 0; ENTER(S_s_expr_extend);
 }
 "/>" {
  LEAVE; STag_s_expr_extend(); pcdata_ix = 0; ETag_s_expr_extend(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_extend: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_extend element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_extend' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_extend' element.");
}

<S_s_expr_extend_2,S_s_expr_extend,E_s_expr_extend>{
 "</s_expr_extend"{s}">" {
  LEAVE;
  ETag_s_expr_extend();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_extend: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_extend>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_extend>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_extend>' expected.");
}

<ROOT_s_expr_external_call,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_external_call"{s} {
  AX_s_expr_external_call_func = 0;
  AX_s_expr_external_call_host = 0;
  AX_s_expr_external_call_line = 0;
  AX_s_expr_external_call_module = 0;
  AX_s_expr_external_call_namespace = 0;
  AX_s_expr_external_call_nm = 0;
  AX_s_expr_external_call_without_waiting = 0;
  ENTER(AL_s_expr_external_call); pushbuffer(0);
  }

<AL_s_expr_external_call>{
 "func"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_external_call_func);
 "func"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_external_call_func);

 "host"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_external_call_host);
 "host"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_external_call_host);

 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_external_call_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_external_call_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_external_call_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_external_call_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_external_call_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_external_call_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_external_call_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_external_call_nm);

 "without_waiting"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_external_call_without_waiting);
 "without_waiting"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_external_call_without_waiting);

 ">" {
  LEAVE; STag_s_expr_external_call();pcdata_ix = 0; ENTER(S_s_expr_external_call);
 }
 "/>" {
  LEAVE; STag_s_expr_external_call(); pcdata_ix = 0; ETag_s_expr_external_call(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_external_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_external_call element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_external_call' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_external_call' element.");
}

<S_s_expr_external_call_2,S_s_expr_external_call,E_s_expr_external_call>{
 "</s_expr_external_call"{s}">" {
  LEAVE;
  ETag_s_expr_external_call();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_external_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_external_call>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_external_call>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_external_call>' expected.");
}

<ROOT_s_expr_field_touched,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_field_touched"{s} {
  AX_s_expr_field_touched_line = 0;
  AX_s_expr_field_touched_module = 0;
  AX_s_expr_field_touched_nm = 0;
  AX_s_expr_field_touched_sio_id = 0;
  ENTER(AL_s_expr_field_touched); pushbuffer(0);
  }

<AL_s_expr_field_touched>{
 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_field_touched_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_field_touched_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_field_touched_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_field_touched_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_field_touched_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_field_touched_nm);

 "sio_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_field_touched_sio_id);
 "sio_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_field_touched_sio_id);

 ">" {
  LEAVE; STag_s_expr_field_touched();pcdata_ix = 0; ENTER(S_s_expr_field_touched);
 }
 "/>" {
  LEAVE; STag_s_expr_field_touched(); pcdata_ix = 0; ETag_s_expr_field_touched(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_field_touched: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_field_touched element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_field_touched' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_field_touched' element.");
}

<E_s_expr_field_touched,S_s_expr_field_touched,S_s_expr_field_touched_2>{
 "</s_expr_field_touched"{s}">" {
  LEAVE;
  ETag_s_expr_field_touched();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_field_touched: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_field_touched>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_field_touched>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_field_touched>' expected.");
}

<ROOT_s_expr_form_is_compiled,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_form_is_compiled"{s} {
  AX_s_expr_form_is_compiled_line = 0;
  AX_s_expr_form_is_compiled_module = 0;
  AX_s_expr_form_is_compiled_nm = 0;
  ENTER(AL_s_expr_form_is_compiled); pushbuffer(0);
  }

<AL_s_expr_form_is_compiled>{
 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_form_is_compiled_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_form_is_compiled_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_form_is_compiled_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_form_is_compiled_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_form_is_compiled_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_form_is_compiled_nm);

 ">" {
  LEAVE; STag_s_expr_form_is_compiled();pcdata_ix = 0; ENTER(S_s_expr_form_is_compiled);
 }
 "/>" {
  LEAVE; STag_s_expr_form_is_compiled(); pcdata_ix = 0; ETag_s_expr_form_is_compiled(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_form_is_compiled: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_form_is_compiled element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_form_is_compiled' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_form_is_compiled' element.");
}

<S_s_expr_form_is_compiled,S_s_expr_form_is_compiled_2,E_s_expr_form_is_compiled>{
 "</s_expr_form_is_compiled"{s}">" {
  LEAVE;
  ETag_s_expr_form_is_compiled();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_form_is_compiled: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_form_is_compiled>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_form_is_compiled>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_form_is_compiled>' expected.");
}

<ROOT_s_expr_function_call,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_function_call"{s} {
  AX_s_expr_function_call_fname = 0;
  AX_s_expr_function_call_line = 0;
  AX_s_expr_function_call_module = 0;
  AX_s_expr_function_call_namespace = 0;
  AX_s_expr_function_call_nm = 0;
  ENTER(AL_s_expr_function_call); pushbuffer(0);
  }

<AL_s_expr_function_call>{
 "fname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_function_call_fname);
 "fname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_function_call_fname);

 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_function_call_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_function_call_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_function_call_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_function_call_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_function_call_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_function_call_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_function_call_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_function_call_nm);

 ">" {
  LEAVE; STag_s_expr_function_call();pcdata_ix = 0; ENTER(S_s_expr_function_call);
 }
 "/>" {
  LEAVE; STag_s_expr_function_call(); pcdata_ix = 0; ETag_s_expr_function_call(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_function_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_function_call element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_function_call' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_function_call' element.");
}

<S_s_expr_function_call,S_s_expr_function_call_2,E_s_expr_function_call>{
 "</s_expr_function_call"{s}">" {
  LEAVE;
  ETag_s_expr_function_call();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_function_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_function_call>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_function_call>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_function_call>' expected.");
}

<ROOT_s_expr_get_fldbuf,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_get_fldbuf"{s} {
  AX_s_expr_get_fldbuf_line = 0;
  AX_s_expr_get_fldbuf_module = 0;
  AX_s_expr_get_fldbuf_nm = 0;
  AX_s_expr_get_fldbuf_sio_id = 0;
  ENTER(AL_s_expr_get_fldbuf); pushbuffer(0);
  }

<AL_s_expr_get_fldbuf>{
 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_get_fldbuf_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_get_fldbuf_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_get_fldbuf_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_get_fldbuf_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_get_fldbuf_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_get_fldbuf_nm);

 "sio_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_get_fldbuf_sio_id);
 "sio_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_get_fldbuf_sio_id);

 ">" {
  LEAVE; STag_s_expr_get_fldbuf();pcdata_ix = 0; ENTER(S_s_expr_get_fldbuf);
 }
 "/>" {
  LEAVE; STag_s_expr_get_fldbuf(); pcdata_ix = 0; ETag_s_expr_get_fldbuf(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_get_fldbuf: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_get_fldbuf element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_get_fldbuf' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_get_fldbuf' element.");
}

<S_s_expr_get_fldbuf_2,S_s_expr_get_fldbuf,E_s_expr_get_fldbuf>{
 "</s_expr_get_fldbuf"{s}">" {
  LEAVE;
  ETag_s_expr_get_fldbuf();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_get_fldbuf: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_get_fldbuf>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_get_fldbuf>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_get_fldbuf>' expected.");
}

<ROOT_s_expr_in,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_in"{s} {
  AX_s_expr_in_nm = 0;
  ENTER(AL_s_expr_in); pushbuffer(0);
  }

<AL_s_expr_in>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_in_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_in_nm);

 ">" {
  LEAVE; STag_s_expr_in();pcdata_ix = 0; ENTER(S_s_expr_in);
 }
 "/>" {
  LEAVE; STag_s_expr_in(); pcdata_ix = 0; ETag_s_expr_in(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_in: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_in element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_in' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_in' element.");
}

<E_s_expr_in,S_s_expr_in,S_s_expr_in_2>{
 "</s_expr_in"{s}">" {
  LEAVE;
  ETag_s_expr_in();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_in: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_in>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_in>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_in>' expected.");
}

<ROOT_s_expr_in_sq,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_in_sq"{s} {
  AX_s_expr_in_sq_nm = 0;
  ENTER(AL_s_expr_in_sq); pushbuffer(0);
  }

<AL_s_expr_in_sq>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_in_sq_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_in_sq_nm);

 ">" {
  LEAVE; STag_s_expr_in_sq();pcdata_ix = 0; ENTER(S_s_expr_in_sq);
 }
 "/>" {
  LEAVE; STag_s_expr_in_sq(); pcdata_ix = 0; ETag_s_expr_in_sq(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_in_sq: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_in_sq element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_in_sq' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_in_sq' element.");
}

<S_s_expr_in_sq_2,S_s_expr_in_sq,E_s_expr_in_sq>{
 "</s_expr_in_sq"{s}">" {
  LEAVE;
  ETag_s_expr_in_sq();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_in_sq: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_in_sq>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_in_sq>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_in_sq>' expected.");
}

<ROOT_s_expr_infield,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_infield"{s} {
  AX_s_expr_infield_line = 0;
  AX_s_expr_infield_module = 0;
  AX_s_expr_infield_nm = 0;
  AX_s_expr_infield_sio_id = 0;
  ENTER(AL_s_expr_infield); pushbuffer(0);
  }

<AL_s_expr_infield>{
 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_infield_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_infield_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_infield_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_infield_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_infield_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_infield_nm);

 "sio_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_infield_sio_id);
 "sio_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_infield_sio_id);

 ">" {
  LEAVE; STag_s_expr_infield();pcdata_ix = 0; ENTER(S_s_expr_infield);
 }
 "/>" {
  LEAVE; STag_s_expr_infield(); pcdata_ix = 0; ETag_s_expr_infield(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_infield: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_infield element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_infield' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_infield' element.");
}

<S_s_expr_infield_2,S_s_expr_infield,E_s_expr_infield>{
 "</s_expr_infield"{s}">" {
  LEAVE;
  ETag_s_expr_infield();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_infield: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_infield>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_infield>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_infield>' expected.");
}

<ROOT_s_expr_interval,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_interval"{s} {
  AX_s_expr_interval_extend = 0;
  AX_s_expr_interval_intval = 0;
  AX_s_expr_interval_nm = 0;
  ENTER(AL_s_expr_interval); pushbuffer(0);
  }

<AL_s_expr_interval>{
 "extend"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_interval_extend);
 "extend"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_interval_extend);

 "intval"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_interval_intval);
 "intval"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_interval_intval);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_interval_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_interval_nm);

 ">" {
  LEAVE; STag_s_expr_interval();pcdata_ix = 0; ENTER(E_s_expr_interval);
 }
 "/>" {
  LEAVE; STag_s_expr_interval(); pcdata_ix = 0; ETag_s_expr_interval(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_interval: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_interval element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_interval' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_interval' element.");
}

<E_s_expr_interval>{
 "</s_expr_interval"{s}">" {
  LEAVE;
  ETag_s_expr_interval();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_interval: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_interval>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_interval>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_interval>' expected.");
}

<ROOT_s_expr_member_function_call_n,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_member_function_call_n"{s} {
  AX_s_expr_member_function_call_n_datatype = 0;
  AX_s_expr_member_function_call_n_funcName = 0;
  AX_s_expr_member_function_call_n_line = 0;
  AX_s_expr_member_function_call_n_module = 0;
  AX_s_expr_member_function_call_n_namespace = 0;
  AX_s_expr_member_function_call_n_nm = 0;
  AX_s_expr_member_function_call_n_objectType = 0;
  ENTER(AL_s_expr_member_function_call_n); pushbuffer(0);
  }

<AL_s_expr_member_function_call_n>{
 "datatype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_member_function_call_n_datatype);
 "datatype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_member_function_call_n_datatype);

 "funcName"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_member_function_call_n_funcName);
 "funcName"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_member_function_call_n_funcName);

 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_member_function_call_n_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_member_function_call_n_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_member_function_call_n_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_member_function_call_n_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_member_function_call_n_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_member_function_call_n_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_member_function_call_n_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_member_function_call_n_nm);

 "objectType"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_member_function_call_n_objectType);
 "objectType"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_member_function_call_n_objectType);

 ">" {
  LEAVE; STag_s_expr_member_function_call_n();pcdata_ix = 0; ENTER(S_s_expr_member_function_call_n);
 }
 "/>" {
  LEAVE; STag_s_expr_member_function_call_n(); pcdata_ix = 0; ETag_s_expr_member_function_call_n(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_member_function_call_n: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_member_function_call_n element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_member_function_call_n' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_member_function_call_n' element.");
}

<S_s_expr_member_function_call_n_2,S_s_expr_member_function_call_n,E_s_expr_member_function_call_n>{
 "</s_expr_member_function_call_n"{s}">" {
  LEAVE;
  ETag_s_expr_member_function_call_n();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_member_function_call_n: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_member_function_call_n>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_member_function_call_n>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_member_function_call_n>' expected.");
}

<ROOT_s_expr_op,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_op"{s} {
  AX_s_expr_op_nm = 0;
  ENTER(AL_s_expr_op); pushbuffer(0);
  }

<AL_s_expr_op>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_op_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_op_nm);

 ">" {
  LEAVE; STag_s_expr_op();pcdata_ix = 0; ENTER(S_s_expr_op);
 }
 "/>" {
  LEAVE; STag_s_expr_op(); pcdata_ix = 0; ETag_s_expr_op(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_op: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_op element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_op' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_op' element.");
}

<E_s_expr_op,S_s_expr_op_2,S_s_expr_op>{
 "</s_expr_op"{s}">" {
  LEAVE;
  ETag_s_expr_op();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_op: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_op>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_op>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_op>' expected.");
}

<ROOT_s_expr_parameter,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_parameter"{s} {
  AX_s_expr_parameter_expr_string = 0;
  AX_s_expr_parameter_isReference = 0;
  AX_s_expr_parameter_nm = 0;
  ENTER(AL_s_expr_parameter); pushbuffer(0);
  }

<AL_s_expr_parameter>{
 "expr_string"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_parameter_expr_string);
 "expr_string"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_parameter_expr_string);

 "isReference"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_parameter_isReference);
 "isReference"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_parameter_isReference);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_parameter_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_parameter_nm);

 ">" {
  LEAVE; STag_s_expr_parameter();pcdata_ix = 0; ENTER(E_s_expr_parameter);
 }
 "/>" {
  LEAVE; STag_s_expr_parameter(); pcdata_ix = 0; ETag_s_expr_parameter(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_parameter: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_parameter element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_parameter' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_parameter' element.");
}

<E_s_expr_parameter>{
 "</s_expr_parameter"{s}">" {
  LEAVE;
  ETag_s_expr_parameter();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_parameter: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_parameter>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_parameter>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_parameter>' expected.");
}

<ROOT_s_expr_pdf_function_call,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_pdf_function_call"{s} {
  AX_s_expr_pdf_function_call_fname = 0;
  AX_s_expr_pdf_function_call_line = 0;
  AX_s_expr_pdf_function_call_module = 0;
  AX_s_expr_pdf_function_call_namespace = 0;
  AX_s_expr_pdf_function_call_nm = 0;
  ENTER(AL_s_expr_pdf_function_call); pushbuffer(0);
  }

<AL_s_expr_pdf_function_call>{
 "fname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_pdf_function_call_fname);
 "fname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_pdf_function_call_fname);

 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_pdf_function_call_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_pdf_function_call_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_pdf_function_call_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_pdf_function_call_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_pdf_function_call_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_pdf_function_call_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_pdf_function_call_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_pdf_function_call_nm);

 ">" {
  LEAVE; STag_s_expr_pdf_function_call();pcdata_ix = 0; ENTER(S_s_expr_pdf_function_call);
 }
 "/>" {
  LEAVE; STag_s_expr_pdf_function_call(); pcdata_ix = 0; ETag_s_expr_pdf_function_call(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_pdf_function_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_pdf_function_call element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_pdf_function_call' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_pdf_function_call' element.");
}

<E_s_expr_pdf_function_call,S_s_expr_pdf_function_call_2,S_s_expr_pdf_function_call>{
 "</s_expr_pdf_function_call"{s}">" {
  LEAVE;
  ETag_s_expr_pdf_function_call();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_pdf_function_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_pdf_function_call>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_pdf_function_call>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_pdf_function_call>' expected.");
}

<ROOT_s_expr_shared_function_call,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_shared_function_call"{s} {
  AX_s_expr_shared_function_call_fname = 0;
  AX_s_expr_shared_function_call_lib = 0;
  AX_s_expr_shared_function_call_line = 0;
  AX_s_expr_shared_function_call_module = 0;
  AX_s_expr_shared_function_call_namespace = 0;
  AX_s_expr_shared_function_call_nm = 0;
  ENTER(AL_s_expr_shared_function_call); pushbuffer(0);
  }

<AL_s_expr_shared_function_call>{
 "fname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_shared_function_call_fname);
 "fname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_shared_function_call_fname);

 "lib"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_shared_function_call_lib);
 "lib"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_shared_function_call_lib);

 "line"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_shared_function_call_line);
 "line"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_shared_function_call_line);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_shared_function_call_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_shared_function_call_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_shared_function_call_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_shared_function_call_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_shared_function_call_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_shared_function_call_nm);

 ">" {
  LEAVE; STag_s_expr_shared_function_call();pcdata_ix = 0; ENTER(S_s_expr_shared_function_call);
 }
 "/>" {
  LEAVE; STag_s_expr_shared_function_call(); pcdata_ix = 0; ETag_s_expr_shared_function_call(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_shared_function_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_shared_function_call element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_shared_function_call' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_shared_function_call' element.");
}

<S_s_expr_shared_function_call,S_s_expr_shared_function_call_2,E_s_expr_shared_function_call>{
 "</s_expr_shared_function_call"{s}">" {
  LEAVE;
  ETag_s_expr_shared_function_call();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_shared_function_call: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_shared_function_call>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_shared_function_call>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_shared_function_call>' expected.");
}

<ROOT_s_expr_tag,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_tag"{s} {
  AX_s_expr_tag_nm = 0;
  ENTER(AL_s_expr_tag); pushbuffer(0);
  }

<AL_s_expr_tag>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_tag_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_tag_nm);

 ">" {
  LEAVE; STag_s_expr_tag();pcdata_ix = 0; ENTER(S_s_expr_tag);
 }
 "/>" {
  LEAVE; STag_s_expr_tag(); pcdata_ix = 0; ETag_s_expr_tag(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_tag: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_tag element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_tag' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_tag' element.");
}

<E_s_expr_tag,S_s_expr_tag_2,S_s_expr_tag>{
 "</s_expr_tag"{s}">" {
  LEAVE;
  ETag_s_expr_tag();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_tag: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_tag>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_tag>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_tag>' expected.");
}

<ROOT_s_expr_tmp,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_tmp"{s} {
  AX_s_expr_tmp_dtype = 0;
  AX_s_expr_tmp_nm = 0;
  AX_s_expr_tmp_str = 0;
  ENTER(AL_s_expr_tmp); pushbuffer(0);
  }

<AL_s_expr_tmp>{
 "dtype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_tmp_dtype);
 "dtype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_tmp_dtype);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_tmp_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_tmp_nm);

 "str"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_tmp_str);
 "str"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_tmp_str);

 ">" {
  LEAVE; STag_s_expr_tmp();pcdata_ix = 0; ENTER(E_s_expr_tmp);
 }
 "/>" {
  LEAVE; STag_s_expr_tmp(); pcdata_ix = 0; ETag_s_expr_tmp(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_tmp: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_tmp element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_tmp' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_tmp' element.");
}

<E_s_expr_tmp>{
 "</s_expr_tmp"{s}">" {
  LEAVE;
  ETag_s_expr_tmp();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_tmp: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_tmp>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_tmp>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_tmp>' expected.");
}

<ROOT_s_expr_wordwrap,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_expr_wordwrap"{s} {
  AX_s_expr_wordwrap_nm = 0;
  ENTER(AL_s_expr_wordwrap); pushbuffer(0);
  }

<AL_s_expr_wordwrap>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_expr_wordwrap_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_expr_wordwrap_nm);

 ">" {
  LEAVE; STag_s_expr_wordwrap();pcdata_ix = 0; ENTER(S_s_expr_wordwrap);
 }
 "/>" {
  LEAVE; STag_s_expr_wordwrap(); pcdata_ix = 0; ETag_s_expr_wordwrap(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_wordwrap: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_expr_wordwrap element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_expr_wordwrap' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_expr_wordwrap' element.");
}

<S_s_expr_wordwrap_2,S_s_expr_wordwrap,E_s_expr_wordwrap>{
 "</s_expr_wordwrap"{s}">" {
  LEAVE;
  ETag_s_expr_wordwrap();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_expr_wordwrap: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_expr_wordwrap>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_expr_wordwrap>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_expr_wordwrap>' expected.");
}

<ROOT_s_fetch,S_struct_fetch_cmd_1,S_struct_fetch_cmd_2,S_struct_fetch_cmd>"<s_fetch"{s} {
  AX_s_fetch_nm = 0;
  ENTER(AL_s_fetch); pushbuffer(0);
  }

<AL_s_fetch>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_fetch_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_fetch_nm);

 ">" {
  LEAVE; STag_s_fetch();pcdata_ix = 0; ENTER(S_s_fetch);
 }
 "/>" {
  LEAVE; STag_s_fetch(); pcdata_ix = 0; ETag_s_fetch(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_fetch_cmd_1: case S_struct_fetch_cmd_2: case S_struct_fetch_cmd: SET(S_struct_fetch_cmd_2); break;
   case ROOT_s_fetch: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_fetch element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_fetch' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_fetch' element.");
}

<S_s_fetch,E_s_fetch,S_s_fetch_2>{
 "</s_fetch"{s}">" {
  LEAVE;
  ETag_s_fetch();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_fetch_cmd_1: case S_struct_fetch_cmd_2: case S_struct_fetch_cmd: SET(S_struct_fetch_cmd_2); break;
   case ROOT_s_fetch: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_fetch>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_fetch>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_fetch>' expected.");
}

<ROOT_s_fetch_place,S_s_fetch_1,S_s_fetch,S_s_fetch_2>"<s_fetch_place"{s} {
  AX_s_fetch_place_ab_rel = 0;
  AX_s_fetch_place_nm = 0;
  ENTER(AL_s_fetch_place); pushbuffer(0);
  }

<AL_s_fetch_place>{
 "ab_rel"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_fetch_place_ab_rel);
 "ab_rel"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_fetch_place_ab_rel);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_fetch_place_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_fetch_place_nm);

 ">" {
  LEAVE; STag_s_fetch_place();pcdata_ix = 0; ENTER(S_s_fetch_place);
 }
 "/>" {
  LEAVE; STag_s_fetch_place(); pcdata_ix = 0; ETag_s_fetch_place(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_fetch_place: SET(EPILOG); break;
   case S_s_fetch_1: case S_s_fetch: case S_s_fetch_2: SET(S_s_fetch_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_fetch_place element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_fetch_place' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_fetch_place' element.");
}

<S_s_fetch_place,S_s_fetch_place_2,E_s_fetch_place>{
 "</s_fetch_place"{s}">" {
  LEAVE;
  ETag_s_fetch_place();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_fetch_place: SET(EPILOG); break;
   case S_s_fetch_1: case S_s_fetch: case S_s_fetch_2: SET(S_s_fetch_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_fetch_place>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_fetch_place>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_fetch_place>' expected.");
}

<ROOT_s_formhandler_definition,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_formhandler_definition"{s} {
  AX_s_formhandler_definition_formhandler_name = 0;
  AX_s_formhandler_definition_nm = 0;
  ENTER(AL_s_formhandler_definition); pushbuffer(0);
  }

<AL_s_formhandler_definition>{
 "formhandler_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_formhandler_definition_formhandler_name);
 "formhandler_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_formhandler_definition_formhandler_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_formhandler_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_formhandler_definition_nm);

 ">" {
  LEAVE; STag_s_formhandler_definition();pcdata_ix = 0; ENTER(S_s_formhandler_definition);
 }
 "/>" {
  LEAVE; STag_s_formhandler_definition(); pcdata_ix = 0; ETag_s_formhandler_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_formhandler_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_formhandler_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_formhandler_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_formhandler_definition' element.");
}

<E_s_formhandler_definition,S_s_formhandler_definition_2,S_s_formhandler_definition>{
 "</s_formhandler_definition"{s}">" {
  LEAVE;
  ETag_s_formhandler_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_formhandler_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_formhandler_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_formhandler_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_formhandler_definition>' expected.");
}

<ROOT_s_full_col>"<s_full_col"{s} {
  AX_s_full_col_col = 0;
  AX_s_full_col_nm = 0;
  AX_s_full_col_tab = 0;
  ENTER(AL_s_full_col); pushbuffer(0);
  }

<AL_s_full_col>{
 "col"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_full_col_col);
 "col"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_full_col_col);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_full_col_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_full_col_nm);

 "tab"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_full_col_tab);
 "tab"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_full_col_tab);

 ">" {
  LEAVE; STag_s_full_col();pcdata_ix = 0; ENTER(E_s_full_col);
 }
 "/>" {
  LEAVE; STag_s_full_col(); pcdata_ix = 0; ETag_s_full_col(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_full_col: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_full_col element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_full_col' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_full_col' element.");
}

<E_s_full_col>{
 "</s_full_col"{s}">" {
  LEAVE;
  ETag_s_full_col();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_full_col: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_full_col>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_full_col>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_full_col>' expected.");
}

<ROOT_s_func,S_expr_str_1,S_expr_str_2,S_expr_str>"<s_func"{s} {
  AX_s_func_funcname = 0;
  AX_s_func_namespace = 0;
  AX_s_func_nm = 0;
  ENTER(AL_s_func); pushbuffer(0);
  }

<AL_s_func>{
 "funcname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_func_funcname);
 "funcname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_func_funcname);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_func_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_func_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_func_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_func_nm);

 ">" {
  LEAVE; STag_s_func();pcdata_ix = 0; ENTER(E_s_func);
 }
 "/>" {
  LEAVE; STag_s_func(); pcdata_ix = 0; ETag_s_func(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_func: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_func element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_func' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_func' element.");
}

<E_s_func>{
 "</s_func"{s}">" {
  LEAVE;
  ETag_s_func();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_func: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_func>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_func>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_func>' expected.");
}

<ROOT_s_function_definition,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_function_definition"{s} {
  AX_s_function_definition_comment = 0;
  AX_s_function_definition_funcname = 0;
  AX_s_function_definition_isstatic = 0;
  AX_s_function_definition_lastlineno = 0;
  AX_s_function_definition_lineno = 0;
  AX_s_function_definition_module = 0;
  AX_s_function_definition_namespace = 0;
  AX_s_function_definition_nm = 0;
  ENTER(AL_s_function_definition); pushbuffer(0);
  }

<AL_s_function_definition>{
 "comment"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_comment);
 "comment"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_comment);

 "funcname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_funcname);
 "funcname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_funcname);

 "isstatic"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_isstatic);
 "isstatic"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_isstatic);

 "lastlineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_lastlineno);
 "lastlineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_lastlineno);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_function_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_function_definition_nm);

 ">" {
  LEAVE; STag_s_function_definition();pcdata_ix = 0; ENTER(S_s_function_definition);
 }
 "/>" {
  LEAVE; STag_s_function_definition(); pcdata_ix = 0; ETag_s_function_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_function_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_function_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_function_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_function_definition' element.");
}

<S_s_function_definition_2,E_s_function_definition,S_s_function_definition>{
 "</s_function_definition"{s}">" {
  LEAVE;
  ETag_s_function_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_function_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_function_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_function_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_function_definition>' expected.");
}

<ROOT_s_import_datatype,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_import_datatype"{s} {
  AX_s_import_datatype_dtype_name = 0;
  AX_s_import_datatype_lineno = 0;
  AX_s_import_datatype_module = 0;
  AX_s_import_datatype_nm = 0;
  ENTER(AL_s_import_datatype); pushbuffer(0);
  }

<AL_s_import_datatype>{
 "dtype_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_datatype_dtype_name);
 "dtype_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_datatype_dtype_name);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_datatype_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_datatype_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_datatype_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_datatype_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_datatype_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_datatype_nm);

 ">" {
  LEAVE; STag_s_import_datatype();pcdata_ix = 0; ENTER(E_s_import_datatype);
 }
 "/>" {
  LEAVE; STag_s_import_datatype(); pcdata_ix = 0; ETag_s_import_datatype(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_datatype: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_import_datatype element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_import_datatype' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_import_datatype' element.");
}

<E_s_import_datatype>{
 "</s_import_datatype"{s}">" {
  LEAVE;
  ETag_s_import_datatype();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_datatype: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_import_datatype>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_import_datatype>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_import_datatype>' expected.");
}

<ROOT_s_import_function_definition,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_import_function_definition"{s} {
  AX_s_import_function_definition_colno = 0;
  AX_s_import_function_definition_funcname = 0;
  AX_s_import_function_definition_lineno = 0;
  AX_s_import_function_definition_module = 0;
  AX_s_import_function_definition_nm = 0;
  AX_s_import_function_definition_nparam = 0;
  ENTER(AL_s_import_function_definition); pushbuffer(0);
  }

<AL_s_import_function_definition>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_function_definition_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_function_definition_colno);

 "funcname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_function_definition_funcname);
 "funcname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_function_definition_funcname);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_function_definition_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_function_definition_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_function_definition_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_function_definition_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_function_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_function_definition_nm);

 "nparam"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_function_definition_nparam);
 "nparam"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_function_definition_nparam);

 ">" {
  LEAVE; STag_s_import_function_definition();pcdata_ix = 0; ENTER(E_s_import_function_definition);
 }
 "/>" {
  LEAVE; STag_s_import_function_definition(); pcdata_ix = 0; ETag_s_import_function_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_function_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_import_function_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_import_function_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_import_function_definition' element.");
}

<E_s_import_function_definition>{
 "</s_import_function_definition"{s}">" {
  LEAVE;
  ETag_s_import_function_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_function_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_import_function_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_import_function_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_import_function_definition>' expected.");
}

<ROOT_s_import_legacy_definition,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_import_legacy_definition"{s} {
  AX_s_import_legacy_definition_colno = 0;
  AX_s_import_legacy_definition_funcname = 0;
  AX_s_import_legacy_definition_lineno = 0;
  AX_s_import_legacy_definition_module = 0;
  AX_s_import_legacy_definition_nm = 0;
  ENTER(AL_s_import_legacy_definition); pushbuffer(0);
  }

<AL_s_import_legacy_definition>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_legacy_definition_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_legacy_definition_colno);

 "funcname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_legacy_definition_funcname);
 "funcname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_legacy_definition_funcname);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_legacy_definition_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_legacy_definition_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_legacy_definition_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_legacy_definition_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_legacy_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_legacy_definition_nm);

 ">" {
  LEAVE; STag_s_import_legacy_definition();pcdata_ix = 0; ENTER(E_s_import_legacy_definition);
 }
 "/>" {
  LEAVE; STag_s_import_legacy_definition(); pcdata_ix = 0; ETag_s_import_legacy_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_legacy_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_import_legacy_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_import_legacy_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_import_legacy_definition' element.");
}

<E_s_import_legacy_definition>{
 "</s_import_legacy_definition"{s}">" {
  LEAVE;
  ETag_s_import_legacy_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_legacy_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_import_legacy_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_import_legacy_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_import_legacy_definition>' expected.");
}

<ROOT_s_import_package,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_import_package"{s} {
  AX_s_import_package_lineno = 0;
  AX_s_import_package_module = 0;
  AX_s_import_package_nm = 0;
  AX_s_import_package_package_name = 0;
  ENTER(AL_s_import_package); pushbuffer(0);
  }

<AL_s_import_package>{
 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_package_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_package_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_package_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_package_module);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_package_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_package_nm);

 "package_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_import_package_package_name);
 "package_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_import_package_package_name);

 ">" {
  LEAVE; STag_s_import_package();pcdata_ix = 0; ENTER(E_s_import_package);
 }
 "/>" {
  LEAVE; STag_s_import_package(); pcdata_ix = 0; ETag_s_import_package(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_package: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_import_package element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_import_package' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_import_package' element.");
}

<E_s_import_package>{
 "</s_import_package"{s}">" {
  LEAVE;
  ETag_s_import_package();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_import_package: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_import_package>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_import_package>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_import_package>' expected.");
}

<ROOT_s_limit,S_s_select_1,S_s_select_2,S_s_select>"<s_limit"{s} {
  AX_s_limit_end = 0;
  AX_s_limit_nm = 0;
  AX_s_limit_offset = 0;
  AX_s_limit_start = 0;
  ENTER(AL_s_limit); pushbuffer(0);
  }

<AL_s_limit>{
 "end"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_limit_end);
 "end"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_limit_end);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_limit_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_limit_nm);

 "offset"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_limit_offset);
 "offset"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_limit_offset);

 "start"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_limit_start);
 "start"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_limit_start);

 ">" {
  LEAVE; STag_s_limit();pcdata_ix = 0; ENTER(E_s_limit);
 }
 "/>" {
  LEAVE; STag_s_limit(); pcdata_ix = 0; ETag_s_limit(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case ROOT_s_limit: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_limit element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_limit' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_limit' element.");
}

<E_s_limit>{
 "</s_limit"{s}">" {
  LEAVE;
  ETag_s_limit();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case ROOT_s_limit: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_limit>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_limit>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_limit>' expected.");
}

<ROOT_s_module_entry_ptr_list>"<s_module_entry_ptr_list"{s} {
  AX_s_module_entry_ptr_list_nm = 0;
  ENTER(AL_s_module_entry_ptr_list); pushbuffer(0);
  }

<AL_s_module_entry_ptr_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_module_entry_ptr_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_module_entry_ptr_list_nm);

 ">" {
  LEAVE; STag_s_module_entry_ptr_list();pcdata_ix = 0; ENTER(S_s_module_entry_ptr_list);
 }
 "/>" {
  LEAVE; STag_s_module_entry_ptr_list(); pcdata_ix = 0; ETag_s_module_entry_ptr_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_module_entry_ptr_list: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_module_entry_ptr_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_module_entry_ptr_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_module_entry_ptr_list' element.");
}

<S_s_module_entry_ptr_list_2,S_s_module_entry_ptr_list,E_s_module_entry_ptr_list>{
 "</s_module_entry_ptr_list"{s}">" {
  LEAVE;
  ETag_s_module_entry_ptr_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_module_entry_ptr_list: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_module_entry_ptr_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_module_entry_ptr_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_module_entry_ptr_list>' expected.");
}

<ROOT_s_pdf_report_definition,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_pdf_report_definition"{s} {
  AX_s_pdf_report_definition_colno = 0;
  AX_s_pdf_report_definition_comment = 0;
  AX_s_pdf_report_definition_funcname = 0;
  AX_s_pdf_report_definition_isstatic = 0;
  AX_s_pdf_report_definition_lastlineno = 0;
  AX_s_pdf_report_definition_lineno = 0;
  AX_s_pdf_report_definition_module = 0;
  AX_s_pdf_report_definition_namespace = 0;
  AX_s_pdf_report_definition_nm = 0;
  ENTER(AL_s_pdf_report_definition); pushbuffer(0);
  }

<AL_s_pdf_report_definition>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_colno);

 "comment"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_comment);
 "comment"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_comment);

 "funcname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_funcname);
 "funcname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_funcname);

 "isstatic"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_isstatic);
 "isstatic"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_isstatic);

 "lastlineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_lastlineno);
 "lastlineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_lastlineno);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_pdf_report_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_pdf_report_definition_nm);

 ">" {
  LEAVE; STag_s_pdf_report_definition();pcdata_ix = 0; ENTER(S_s_pdf_report_definition);
 }
 "/>" {
  LEAVE; STag_s_pdf_report_definition(); pcdata_ix = 0; ETag_s_pdf_report_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_pdf_report_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_pdf_report_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_pdf_report_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_pdf_report_definition' element.");
}

<S_s_pdf_report_definition_2,S_s_pdf_report_definition,E_s_pdf_report_definition>{
 "</s_pdf_report_definition"{s}">" {
  LEAVE;
  ETag_s_pdf_report_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_pdf_report_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_pdf_report_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_pdf_report_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_pdf_report_definition>' expected.");
}

<ROOT_s_report_definition,S_module_entry_2,S_module_entry_1,S_module_entry>"<s_report_definition"{s} {
  AX_s_report_definition_colno = 0;
  AX_s_report_definition_comment = 0;
  AX_s_report_definition_funcname = 0;
  AX_s_report_definition_isstatic = 0;
  AX_s_report_definition_lastlineno = 0;
  AX_s_report_definition_lineno = 0;
  AX_s_report_definition_module = 0;
  AX_s_report_definition_namespace = 0;
  AX_s_report_definition_nm = 0;
  ENTER(AL_s_report_definition); pushbuffer(0);
  }

<AL_s_report_definition>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_colno);

 "comment"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_comment);
 "comment"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_comment);

 "funcname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_funcname);
 "funcname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_funcname);

 "isstatic"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_isstatic);
 "isstatic"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_isstatic);

 "lastlineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_lastlineno);
 "lastlineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_lastlineno);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_lineno);

 "module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_module);
 "module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_module);

 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_report_definition_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_report_definition_nm);

 ">" {
  LEAVE; STag_s_report_definition();pcdata_ix = 0; ENTER(S_s_report_definition);
 }
 "/>" {
  LEAVE; STag_s_report_definition(); pcdata_ix = 0; ETag_s_report_definition(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_report_definition: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_report_definition element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_report_definition' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_report_definition' element.");
}

<E_s_report_definition,S_s_report_definition_2,S_s_report_definition>{
 "</s_report_definition"{s}">" {
  LEAVE;
  ETag_s_report_definition();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_entry_2: case S_module_entry_1: case S_module_entry: SET(S_module_entry_2); break;
   case ROOT_s_report_definition: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_report_definition>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_report_definition>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_report_definition>' expected.");
}

<ROOT_s_select,S_s_cur_def_2,S_struct_select_cmd_2,S_struct_select_cmd,S_s_expr_in_sq,S_struct_insert_cmd_2,S_s_select_1,S_s_cur_def,S_s_expr_exists_sq,S_struct_select_cmd_1,S_s_expr_in_sq_2,S_s_select_2,S_s_expr_exists_sq_1,S_struct_insert_cmd,S_s_select,S_s_expr_in_sq_1,S_s_cur_def_1,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data,S_struct_insert_cmd_1,S_s_expr_exists_sq_2>"<s_select"{s} {
  AX_s_select_extra_statement = 0;
  AX_s_select_modifier = 0;
  AX_s_select_ncolumns = 0;
  AX_s_select_nm = 0;
  AX_s_select_union_op = 0;
  ENTER(AL_s_select); pushbuffer(0);
  }

<AL_s_select>{
 "extra_statement"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_extra_statement);
 "extra_statement"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_extra_statement);

 "modifier"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_modifier);
 "modifier"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_modifier);

 "ncolumns"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_ncolumns);
 "ncolumns"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_ncolumns);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_nm);

 "union_op"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_union_op);
 "union_op"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_union_op);

 ">" {
  LEAVE; STag_s_select();pcdata_ix = 0; ENTER(S_s_select);
 }
 "/>" {
  LEAVE; STag_s_select(); pcdata_ix = 0; ETag_s_select(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_s_cur_def_2: case S_s_cur_def: case S_s_cur_def_1: SET(S_s_cur_def_2); break;
   case S_struct_select_cmd_2: case S_struct_select_cmd: case S_struct_select_cmd_1: SET(S_struct_select_cmd_2); break;
   case ROOT_s_select: SET(EPILOG); break;
   case S_s_expr_in_sq: case S_s_expr_in_sq_2: case S_s_expr_in_sq_1: SET(S_s_expr_in_sq_2); break;
   case S_s_expr_exists_sq: case S_s_expr_exists_sq_1: case S_s_expr_exists_sq_2: SET(S_s_expr_exists_sq_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select' element.");
}

<S_s_select_2,E_s_select,S_s_select>{
 "</s_select"{s}">" {
  LEAVE;
  ETag_s_select();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_s_cur_def_2: case S_s_cur_def: case S_s_cur_def_1: SET(S_s_cur_def_2); break;
   case S_struct_select_cmd_2: case S_struct_select_cmd: case S_struct_select_cmd_1: SET(S_struct_select_cmd_2); break;
   case ROOT_s_select: SET(EPILOG); break;
   case S_s_expr_in_sq: case S_s_expr_in_sq_2: case S_s_expr_in_sq_1: SET(S_s_expr_in_sq_2); break;
   case S_s_expr_exists_sq: case S_s_expr_exists_sq_1: case S_s_expr_exists_sq_2: SET(S_s_expr_exists_sq_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select>' expected.");
}

<ROOT_s_select_finish,S_s_select_1,S_s_select_2,S_s_select>"<s_select_finish"{s} {
  AX_s_select_finish_insert_into = 0;
  AX_s_select_finish_into_temp = 0;
  AX_s_select_finish_nm = 0;
  AX_s_select_finish_nolog = 0;
  ENTER(AL_s_select_finish); pushbuffer(0);
  }

<AL_s_select_finish>{
 "insert_into"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_finish_insert_into);
 "insert_into"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_finish_insert_into);

 "into_temp"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_finish_into_temp);
 "into_temp"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_finish_into_temp);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_finish_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_finish_nm);

 "nolog"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_finish_nolog);
 "nolog"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_finish_nolog);

 ">" {
  LEAVE; STag_s_select_finish();pcdata_ix = 0; ENTER(S_s_select_finish);
 }
 "/>" {
  LEAVE; STag_s_select_finish(); pcdata_ix = 0; ETag_s_select_finish(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case ROOT_s_select_finish: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_finish element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_finish' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_finish' element.");
}

<S_s_select_finish_2,S_s_select_finish,E_s_select_finish>{
 "</s_select_finish"{s}">" {
  LEAVE;
  ETag_s_select_finish();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case ROOT_s_select_finish: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_finish>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_finish>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_finish>' expected.");
}

<ROOT_s_select_list_item,S_s_table,S_s_select_list_item_sq_expression,S_s_select_list_item_between_expr,S_s_update_pair_1,S_s_select_list_item_extend_1,S_expr_str_1,S_s_select_list_item_sli_expr_1,S_s_select_list_item_between_expr_1,S_s_table_1,S_expr_str_2,S_s_select_list_item_slil_expr,S_s_select_list_item_list_2,S_s_select_list_item_sq_expression_2,S_s_select_list_item_agg_expr,S_s_select_list_item_sli_expr_2,S_s_update_pair,S_s_select_list_item_agg_expr_2,S_s_select_1,S_s_select_list_item_list,S_s_select_list_item_regex,S_s_sli_case_1,S_s_select_list_item_between_expr_2,S_s_select_list_item_extend,S_s_sli_cast_1,S_expr_str,S_s_sli_case_element_1,S_s_sli_case,S_s_select_list_item_regex_2,S_s_sli_cast_2,S_s_sli_case_2,S_s_update_pair_2,S_s_select_list_item_list_1,S_s_select_list_item_sq_expression_1,S_s_select_list_item_agg_expr_1,S_s_select_list_item_regex_1,S_s_select_2,S_s_select_list_item_complex_expr_2,S_s_select_list_item_slil_expr_2,S_s_select_list_item_complex_expr,S_s_select,S_s_sli_case_element,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data,S_s_select_list_item_complex_expr_1,S_s_sli_case_element_2,S_s_select_list_item_slil_expr_1,S_s_table_2,S_s_select_list_item_sli_expr,S_s_select_list_item_extend_2,S_s_sli_cast>"<s_select_list_item"{s} {
  AX_s_select_list_item_alias = 0;
  AX_s_select_list_item_nm = 0;
  AX_s_select_list_item_sign = 0;
  ENTER(AL_s_select_list_item); pushbuffer(0);
  }

<AL_s_select_list_item>{
 "alias"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_alias);
 "alias"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_alias);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_nm);

 "sign"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_sign);
 "sign"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_sign);

 ">" {
  LEAVE; STag_s_select_list_item();pcdata_ix = 0; ENTER(S_s_select_list_item);
 }
 "/>" {
  LEAVE; STag_s_select_list_item(); pcdata_ix = 0; ETag_s_select_list_item(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_sli_case_1: case S_s_sli_case: case S_s_sli_case_2: SET(S_s_sli_case_2); break;
   case S_s_select_list_item_sq_expression: case S_s_select_list_item_sq_expression_2: case S_s_select_list_item_sq_expression_1: SET(S_s_select_list_item_sq_expression_2); break;
   case S_s_update_pair_1: case S_s_update_pair: case S_s_update_pair_2: SET(S_s_update_pair_2); break;
   case S_s_select_list_item_sli_expr_1: case S_s_select_list_item_sli_expr_2: case S_s_select_list_item_sli_expr: SET(S_s_select_list_item_sli_expr_2); break;
   case S_s_select_list_item_agg_expr: case S_s_select_list_item_agg_expr_2: case S_s_select_list_item_agg_expr_1: SET(S_s_select_list_item_agg_expr_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_s_select_list_item_complex_expr_2: case S_s_select_list_item_complex_expr: case S_s_select_list_item_complex_expr_1: SET(S_s_select_list_item_complex_expr_2); break;
   case S_s_select_list_item_slil_expr: case S_s_select_list_item_slil_expr_2: case S_s_select_list_item_slil_expr_1: SET(S_s_select_list_item_slil_expr_2); break;
   case S_s_sli_case_element_1: case S_s_sli_case_element: case S_s_sli_case_element_2: SET(S_s_sli_case_element_2); break;
   case S_s_select_list_item_between_expr: case S_s_select_list_item_between_expr_1: case S_s_select_list_item_between_expr_2: SET(S_s_select_list_item_between_expr_2); break;
   case S_s_table: case S_s_table_1: case S_s_table_2: SET(S_s_table_2); break;
   case ROOT_s_select_list_item: SET(EPILOG); break;
   case S_s_select_list_item_extend_1: case S_s_select_list_item_extend: case S_s_select_list_item_extend_2: SET(S_s_select_list_item_extend_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_s_sli_cast_1: case S_s_sli_cast_2: case S_s_sli_cast: SET(S_s_sli_cast_2); break;
   case S_s_select_list_item_regex: case S_s_select_list_item_regex_2: case S_s_select_list_item_regex_1: SET(S_s_select_list_item_regex_2); break;
   case S_s_select_list_item_list_2: case S_s_select_list_item_list: case S_s_select_list_item_list_1: SET(S_s_select_list_item_list_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item' element.");
}

<S_s_select_list_item_2,S_s_select_list_item,E_s_select_list_item>{
 "</s_select_list_item"{s}">" {
  LEAVE;
  ETag_s_select_list_item();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_sli_case_1: case S_s_sli_case: case S_s_sli_case_2: SET(S_s_sli_case_2); break;
   case S_s_select_list_item_sq_expression: case S_s_select_list_item_sq_expression_2: case S_s_select_list_item_sq_expression_1: SET(S_s_select_list_item_sq_expression_2); break;
   case S_s_update_pair_1: case S_s_update_pair: case S_s_update_pair_2: SET(S_s_update_pair_2); break;
   case S_s_select_list_item_sli_expr_1: case S_s_select_list_item_sli_expr_2: case S_s_select_list_item_sli_expr: SET(S_s_select_list_item_sli_expr_2); break;
   case S_s_select_list_item_agg_expr: case S_s_select_list_item_agg_expr_2: case S_s_select_list_item_agg_expr_1: SET(S_s_select_list_item_agg_expr_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_s_select_list_item_complex_expr_2: case S_s_select_list_item_complex_expr: case S_s_select_list_item_complex_expr_1: SET(S_s_select_list_item_complex_expr_2); break;
   case S_s_select_list_item_slil_expr: case S_s_select_list_item_slil_expr_2: case S_s_select_list_item_slil_expr_1: SET(S_s_select_list_item_slil_expr_2); break;
   case S_s_sli_case_element_1: case S_s_sli_case_element: case S_s_sli_case_element_2: SET(S_s_sli_case_element_2); break;
   case S_s_select_list_item_between_expr: case S_s_select_list_item_between_expr_1: case S_s_select_list_item_between_expr_2: SET(S_s_select_list_item_between_expr_2); break;
   case S_s_table: case S_s_table_1: case S_s_table_2: SET(S_s_table_2); break;
   case ROOT_s_select_list_item: SET(EPILOG); break;
   case S_s_select_list_item_extend_1: case S_s_select_list_item_extend: case S_s_select_list_item_extend_2: SET(S_s_select_list_item_extend_2); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_s_sli_cast_1: case S_s_sli_cast_2: case S_s_sli_cast: SET(S_s_sli_cast_2); break;
   case S_s_select_list_item_regex: case S_s_select_list_item_regex_2: case S_s_select_list_item_regex_1: SET(S_s_select_list_item_regex_2); break;
   case S_s_select_list_item_list_2: case S_s_select_list_item_list: case S_s_select_list_item_list_1: SET(S_s_select_list_item_list_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item>' expected.");
}

<ROOT_s_select_list_item_agg_expr,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_agg_expr"{s} {
  AX_s_select_list_item_agg_expr_aud = 0;
  AX_s_select_list_item_agg_expr_nm = 0;
  ENTER(AL_s_select_list_item_agg_expr); pushbuffer(0);
  }

<AL_s_select_list_item_agg_expr>{
 "aud"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_agg_expr_aud);
 "aud"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_agg_expr_aud);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_agg_expr_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_agg_expr_nm);

 ">" {
  LEAVE; STag_s_select_list_item_agg_expr();pcdata_ix = 0; ENTER(S_s_select_list_item_agg_expr);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_agg_expr(); pcdata_ix = 0; ETag_s_select_list_item_agg_expr(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_agg_expr: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_agg_expr element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_agg_expr' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_agg_expr' element.");
}

<S_s_select_list_item_agg_expr_2,E_s_select_list_item_agg_expr,S_s_select_list_item_agg_expr>{
 "</s_select_list_item_agg_expr"{s}">" {
  LEAVE;
  ETag_s_select_list_item_agg_expr();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_agg_expr: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_agg_expr>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_agg_expr>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_agg_expr>' expected.");
}

<ROOT_s_select_list_item_between_expr,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_between_expr"{s} {
  AX_s_select_list_item_between_expr_nm = 0;
  ENTER(AL_s_select_list_item_between_expr); pushbuffer(0);
  }

<AL_s_select_list_item_between_expr>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_between_expr_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_between_expr_nm);

 ">" {
  LEAVE; STag_s_select_list_item_between_expr();pcdata_ix = 0; ENTER(S_s_select_list_item_between_expr);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_between_expr(); pcdata_ix = 0; ETag_s_select_list_item_between_expr(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_between_expr: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_between_expr element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_between_expr' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_between_expr' element.");
}

<E_s_select_list_item_between_expr,S_s_select_list_item_between_expr_2,S_s_select_list_item_between_expr>{
 "</s_select_list_item_between_expr"{s}">" {
  LEAVE;
  ETag_s_select_list_item_between_expr();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_between_expr: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_between_expr>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_between_expr>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_between_expr>' expected.");
}

<ROOT_s_select_list_item_builtin_fcall,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_builtin_fcall"{s} {
  AX_s_select_list_item_builtin_fcall_fname = 0;
  AX_s_select_list_item_builtin_fcall_nm = 0;
  ENTER(AL_s_select_list_item_builtin_fcall); pushbuffer(0);
  }

<AL_s_select_list_item_builtin_fcall>{
 "fname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_builtin_fcall_fname);
 "fname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_builtin_fcall_fname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_builtin_fcall_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_builtin_fcall_nm);

 ">" {
  LEAVE; STag_s_select_list_item_builtin_fcall();pcdata_ix = 0; ENTER(S_s_select_list_item_builtin_fcall);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_builtin_fcall(); pcdata_ix = 0; ETag_s_select_list_item_builtin_fcall(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_builtin_fcall: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_builtin_fcall element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_builtin_fcall' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_builtin_fcall' element.");
}

<S_s_select_list_item_builtin_fcall,S_s_select_list_item_builtin_fcall_2,E_s_select_list_item_builtin_fcall>{
 "</s_select_list_item_builtin_fcall"{s}">" {
  LEAVE;
  ETag_s_select_list_item_builtin_fcall();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_builtin_fcall: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_builtin_fcall>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_builtin_fcall>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_builtin_fcall>' expected.");
}

<ROOT_s_select_list_item_column,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_column"{s} {
  AX_s_select_list_item_column_colname = 0;
  AX_s_select_list_item_column_nm = 0;
  AX_s_select_list_item_column_tabname = 0;
  ENTER(AL_s_select_list_item_column); pushbuffer(0);
  }

<AL_s_select_list_item_column>{
 "colname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_column_colname);
 "colname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_column_colname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_column_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_column_nm);

 "tabname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_column_tabname);
 "tabname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_column_tabname);

 ">" {
  LEAVE; STag_s_select_list_item_column();pcdata_ix = 0; ENTER(S_s_select_list_item_column);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_column(); pcdata_ix = 0; ETag_s_select_list_item_column(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_column: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_column element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_column' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_column' element.");
}

<S_s_select_list_item_column,E_s_select_list_item_column,S_s_select_list_item_column_2>{
 "</s_select_list_item_column"{s}">" {
  LEAVE;
  ETag_s_select_list_item_column();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_column: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_column>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_column>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_column>' expected.");
}

<ROOT_s_select_list_item_complex_expr,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_complex_expr"{s} {
  AX_s_select_list_item_complex_expr_nm = 0;
  AX_s_select_list_item_complex_expr_op = 0;
  ENTER(AL_s_select_list_item_complex_expr); pushbuffer(0);
  }

<AL_s_select_list_item_complex_expr>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_complex_expr_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_complex_expr_nm);

 "op"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_complex_expr_op);
 "op"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_complex_expr_op);

 ">" {
  LEAVE; STag_s_select_list_item_complex_expr();pcdata_ix = 0; ENTER(S_s_select_list_item_complex_expr);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_complex_expr(); pcdata_ix = 0; ETag_s_select_list_item_complex_expr(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_complex_expr: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_complex_expr element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_complex_expr' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_complex_expr' element.");
}

<E_s_select_list_item_complex_expr,S_s_select_list_item_complex_expr,S_s_select_list_item_complex_expr_2>{
 "</s_select_list_item_complex_expr"{s}">" {
  LEAVE;
  ETag_s_select_list_item_complex_expr();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_complex_expr: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_complex_expr>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_complex_expr>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_complex_expr>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_s_select_list_item_data,S_s_select_list_item_2,S_s_select_list_item_1,S_s_select_list_item>"<s_select_list_item_data"{s} {
  AX_s_select_list_item_data_e_sli = 0;
  AX_s_select_list_item_data_expression = 0;
  AX_s_select_list_item_data_nm = 0;
  ENTER(AL_s_select_list_item_data); pushbuffer(0);
  }

<AL_s_select_list_item_data>{
 "e_sli"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_data_e_sli);
 "e_sli"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_data_e_sli);

 "expression"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_data_expression);
 "expression"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_data_expression);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_data_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_data_nm);

 ">" {
  if (!AX_s_select_list_item_data_e_sli) FAIL("Required attribute `e_sli' not set for `s_select_list_item_data' element.");
  LEAVE; STag_s_select_list_item_data();pcdata_ix = 0; ENTER(S_s_select_list_item_data);
 }
 "/>" {
  if (!AX_s_select_list_item_data_e_sli) FAIL("Required attribute `e_sli' not set for `s_select_list_item_data' element.");
  LEAVE; STag_s_select_list_item_data(); pcdata_ix = 0; ETag_s_select_list_item_data(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_2: case S_s_select_list_item_1: case S_s_select_list_item: SET(S_s_select_list_item_2); break;
   case ROOT_s_select_list_item_data: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_data element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_data' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_data' element.");
}

<S_s_select_list_item_data_1,E_s_select_list_item_data,S_s_select_list_item_data,S_s_select_list_item_data_2>{
 "</s_select_list_item_data"{s}">" {
  LEAVE;
  ETag_s_select_list_item_data();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_2: case S_s_select_list_item_1: case S_s_select_list_item: SET(S_s_select_list_item_2); break;
   case ROOT_s_select_list_item_data: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_data>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_data>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_data>' expected.");
}

<ROOT_s_select_list_item_extend,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_extend"{s} {
  AX_s_select_list_item_extend_from = 0;
  AX_s_select_list_item_extend_nm = 0;
  AX_s_select_list_item_extend_to = 0;
  ENTER(AL_s_select_list_item_extend); pushbuffer(0);
  }

<AL_s_select_list_item_extend>{
 "from"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_extend_from);
 "from"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_extend_from);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_extend_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_extend_nm);

 "to"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_extend_to);
 "to"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_extend_to);

 ">" {
  LEAVE; STag_s_select_list_item_extend();pcdata_ix = 0; ENTER(S_s_select_list_item_extend);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_extend(); pcdata_ix = 0; ETag_s_select_list_item_extend(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_extend: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_extend element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_extend' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_extend' element.");
}

<S_s_select_list_item_extend_2,E_s_select_list_item_extend,S_s_select_list_item_extend>{
 "</s_select_list_item_extend"{s}">" {
  LEAVE;
  ETag_s_select_list_item_extend();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_extend: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_extend>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_extend>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_extend>' expected.");
}

<ROOT_s_select_list_item_fcall,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_fcall"{s} {
  AX_s_select_list_item_fcall_fname = 0;
  AX_s_select_list_item_fcall_nm = 0;
  ENTER(AL_s_select_list_item_fcall); pushbuffer(0);
  }

<AL_s_select_list_item_fcall>{
 "fname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_fcall_fname);
 "fname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_fcall_fname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_fcall_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_fcall_nm);

 ">" {
  LEAVE; STag_s_select_list_item_fcall();pcdata_ix = 0; ENTER(S_s_select_list_item_fcall);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_fcall(); pcdata_ix = 0; ETag_s_select_list_item_fcall(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_fcall: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_fcall element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_fcall' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_fcall' element.");
}

<S_s_select_list_item_fcall,E_s_select_list_item_fcall,S_s_select_list_item_fcall_2>{
 "</s_select_list_item_fcall"{s}">" {
  LEAVE;
  ETag_s_select_list_item_fcall();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_fcall: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_fcall>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_fcall>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_fcall>' expected.");
}

<ROOT_s_select_list_item_list,S_sq_subquery_1,S_s_select_finish,S_s_select_list_item_slil_expr,S_struct_insert_cmd_2,S_s_select_1,S_s_select_list_item_fcall,S_s_select_finish_2,S_s_select_list_item_fcall_2,S_s_select_finish_1,S_s_select_list_item_builtin_fcall_2,S_s_select_2,S_struct_update_cmd_2,S_s_select_list_item_slil_expr_2,S_s_select_list_item_fcall_1,S_struct_update_cmd,S_s_select_list_item_builtin_fcall,S_s_select_list_item_builtin_fcall_1,S_struct_insert_cmd,S_s_select,S_sq_subquery_2,S_s_select_list_item_data_1,S_struct_update_cmd_1,S_s_select_list_item_data_2,S_s_select_list_item_data,S_s_select_list_item_slil_expr_1,S_sq_subquery,S_struct_insert_cmd_1>"<s_select_list_item_list"{s} {
  AX_s_select_list_item_list_nm = 0;
  ENTER(AL_s_select_list_item_list); pushbuffer(0);
  }

<AL_s_select_list_item_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_list_nm);

 ">" {
  LEAVE; STag_s_select_list_item_list();pcdata_ix = 0; ENTER(S_s_select_list_item_list);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_list(); pcdata_ix = 0; ETag_s_select_list_item_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_struct_update_cmd_2: case S_struct_update_cmd: case S_struct_update_cmd_1: SET(S_struct_update_cmd_2); break;
   case S_s_select_list_item_slil_expr: case S_s_select_list_item_slil_expr_2: case S_s_select_list_item_slil_expr_1: SET(S_s_select_list_item_slil_expr_2); break;
   case S_s_select_finish: case S_s_select_finish_2: case S_s_select_finish_1: SET(S_s_select_finish_2); break;
   case S_s_select_list_item_fcall: case S_s_select_list_item_fcall_2: case S_s_select_list_item_fcall_1: SET(S_s_select_list_item_fcall_2); break;
   case ROOT_s_select_list_item_list: SET(EPILOG); break;
   case S_s_select_list_item_builtin_fcall_2: case S_s_select_list_item_builtin_fcall: case S_s_select_list_item_builtin_fcall_1: SET(S_s_select_list_item_builtin_fcall_2); break;
   case S_sq_subquery_1: case S_sq_subquery_2: case S_sq_subquery: SET(S_sq_subquery_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_list' element.");
}

<S_s_select_list_item_list,S_s_select_list_item_list_2,E_s_select_list_item_list>{
 "</s_select_list_item_list"{s}">" {
  LEAVE;
  ETag_s_select_list_item_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_struct_update_cmd_2: case S_struct_update_cmd: case S_struct_update_cmd_1: SET(S_struct_update_cmd_2); break;
   case S_s_select_list_item_slil_expr: case S_s_select_list_item_slil_expr_2: case S_s_select_list_item_slil_expr_1: SET(S_s_select_list_item_slil_expr_2); break;
   case S_s_select_finish: case S_s_select_finish_2: case S_s_select_finish_1: SET(S_s_select_finish_2); break;
   case S_s_select_list_item_fcall: case S_s_select_list_item_fcall_2: case S_s_select_list_item_fcall_1: SET(S_s_select_list_item_fcall_2); break;
   case ROOT_s_select_list_item_list: SET(EPILOG); break;
   case S_s_select_list_item_builtin_fcall_2: case S_s_select_list_item_builtin_fcall: case S_s_select_list_item_builtin_fcall_1: SET(S_s_select_list_item_builtin_fcall_2); break;
   case S_sq_subquery_1: case S_sq_subquery_2: case S_sq_subquery: SET(S_sq_subquery_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_list>' expected.");
}

<ROOT_s_select_list_item_regex,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_regex"{s} {
  AX_s_select_list_item_regex_escape = 0;
  AX_s_select_list_item_regex_nm = 0;
  ENTER(AL_s_select_list_item_regex); pushbuffer(0);
  }

<AL_s_select_list_item_regex>{
 "escape"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_regex_escape);
 "escape"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_regex_escape);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_regex_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_regex_nm);

 ">" {
  LEAVE; STag_s_select_list_item_regex();pcdata_ix = 0; ENTER(S_s_select_list_item_regex);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_regex(); pcdata_ix = 0; ETag_s_select_list_item_regex(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_regex: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_regex element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_regex' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_regex' element.");
}

<E_s_select_list_item_regex,S_s_select_list_item_regex_2,S_s_select_list_item_regex>{
 "</s_select_list_item_regex"{s}">" {
  LEAVE;
  ETag_s_select_list_item_regex();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_regex: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_regex>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_regex>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_regex>' expected.");
}

<ROOT_s_select_list_item_sli_expr,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_sli_expr"{s} {
  AX_s_select_list_item_sli_expr_nm = 0;
  ENTER(AL_s_select_list_item_sli_expr); pushbuffer(0);
  }

<AL_s_select_list_item_sli_expr>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_sli_expr_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_sli_expr_nm);

 ">" {
  LEAVE; STag_s_select_list_item_sli_expr();pcdata_ix = 0; ENTER(S_s_select_list_item_sli_expr);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_sli_expr(); pcdata_ix = 0; ETag_s_select_list_item_sli_expr(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_sli_expr: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_sli_expr element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_sli_expr' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_sli_expr' element.");
}

<S_s_select_list_item_sli_expr,S_s_select_list_item_sli_expr_2,E_s_select_list_item_sli_expr>{
 "</s_select_list_item_sli_expr"{s}">" {
  LEAVE;
  ETag_s_select_list_item_sli_expr();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_sli_expr: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_sli_expr>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_sli_expr>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_sli_expr>' expected.");
}

<ROOT_s_select_list_item_slil_expr,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_slil_expr"{s} {
  AX_s_select_list_item_slil_expr_nm = 0;
  ENTER(AL_s_select_list_item_slil_expr); pushbuffer(0);
  }

<AL_s_select_list_item_slil_expr>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_slil_expr_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_slil_expr_nm);

 ">" {
  LEAVE; STag_s_select_list_item_slil_expr();pcdata_ix = 0; ENTER(S_s_select_list_item_slil_expr);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_slil_expr(); pcdata_ix = 0; ETag_s_select_list_item_slil_expr(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_slil_expr: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_slil_expr element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_slil_expr' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_slil_expr' element.");
}

<S_s_select_list_item_slil_expr_2,S_s_select_list_item_slil_expr,E_s_select_list_item_slil_expr>{
 "</s_select_list_item_slil_expr"{s}">" {
  LEAVE;
  ETag_s_select_list_item_slil_expr();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_slil_expr: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_slil_expr>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_slil_expr>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_slil_expr>' expected.");
}

<ROOT_s_select_list_item_sq_expression,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_select_list_item_sq_expression"{s} {
  AX_s_select_list_item_sq_expression_nm = 0;
  AX_s_select_list_item_sq_expression_type = 0;
  ENTER(AL_s_select_list_item_sq_expression); pushbuffer(0);
  }

<AL_s_select_list_item_sq_expression>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_sq_expression_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_sq_expression_nm);

 "type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_select_list_item_sq_expression_type);
 "type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_select_list_item_sq_expression_type);

 ">" {
  LEAVE; STag_s_select_list_item_sq_expression();pcdata_ix = 0; ENTER(S_s_select_list_item_sq_expression);
 }
 "/>" {
  LEAVE; STag_s_select_list_item_sq_expression(); pcdata_ix = 0; ETag_s_select_list_item_sq_expression(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_sq_expression: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_select_list_item_sq_expression element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_select_list_item_sq_expression' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_select_list_item_sq_expression' element.");
}

<S_s_select_list_item_sq_expression,S_s_select_list_item_sq_expression_2,E_s_select_list_item_sq_expression>{
 "</s_select_list_item_sq_expression"{s}">" {
  LEAVE;
  ETag_s_select_list_item_sq_expression();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_select_list_item_sq_expression: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_select_list_item_sq_expression>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_select_list_item_sq_expression>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_select_list_item_sq_expression>' expected.");
}

<ROOT_s_sli_case,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_sli_case"{s} {
  AX_s_sli_case_nm = 0;
  ENTER(AL_s_sli_case); pushbuffer(0);
  }

<AL_s_sli_case>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_sli_case_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_sli_case_nm);

 ">" {
  LEAVE; STag_s_sli_case();pcdata_ix = 0; ENTER(S_s_sli_case);
 }
 "/>" {
  LEAVE; STag_s_sli_case(); pcdata_ix = 0; ETag_s_sli_case(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_sli_case: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_sli_case element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_sli_case' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_sli_case' element.");
}

<S_s_sli_case_2,S_s_sli_case,E_s_sli_case>{
 "</s_sli_case"{s}">" {
  LEAVE;
  ETag_s_sli_case();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_sli_case: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_sli_case>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_sli_case>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_sli_case>' expected.");
}

<ROOT_s_sli_case_element,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_sli_case_element"{s} {
  AX_s_sli_case_element_nm = 0;
  ENTER(AL_s_sli_case_element); pushbuffer(0);
  }

<AL_s_sli_case_element>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_sli_case_element_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_sli_case_element_nm);

 ">" {
  LEAVE; STag_s_sli_case_element();pcdata_ix = 0; ENTER(S_s_sli_case_element);
 }
 "/>" {
  LEAVE; STag_s_sli_case_element(); pcdata_ix = 0; ETag_s_sli_case_element(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_sli_case_element: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_sli_case_element element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_sli_case_element' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_sli_case_element' element.");
}

<E_s_sli_case_element,S_s_sli_case_element,S_s_sli_case_element_2>{
 "</s_sli_case_element"{s}">" {
  LEAVE;
  ETag_s_sli_case_element();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_sli_case_element: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_sli_case_element>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_sli_case_element>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_sli_case_element>' expected.");
}

<ROOT_s_sli_cast,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data>"<s_sli_cast"{s} {
  AX_s_sli_cast_datatype = 0;
  AX_s_sli_cast_nm = 0;
  ENTER(AL_s_sli_cast); pushbuffer(0);
  }

<AL_s_sli_cast>{
 "datatype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_sli_cast_datatype);
 "datatype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_sli_cast_datatype);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_sli_cast_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_sli_cast_nm);

 ">" {
  LEAVE; STag_s_sli_cast();pcdata_ix = 0; ENTER(S_s_sli_cast);
 }
 "/>" {
  LEAVE; STag_s_sli_cast(); pcdata_ix = 0; ETag_s_sli_cast(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_sli_cast: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_sli_cast element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_sli_cast' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_sli_cast' element.");
}

<S_s_sli_cast,S_s_sli_cast_2,E_s_sli_cast>{
 "</s_sli_cast"{s}">" {
  LEAVE;
  ETag_s_sli_cast();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_s_sli_cast: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_sli_cast>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_sli_cast>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_sli_cast>' expected.");
}

<ROOT_s_source_code,S_module_definition,S_module_definition_1,S_module_definition_2>"<s_source_code"{s} {
  AX_s_source_code_nm = 0;
  ENTER(AL_s_source_code); pushbuffer(0);
  }

<AL_s_source_code>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_source_code_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_source_code_nm);

 ">" {
  LEAVE; STag_s_source_code();pcdata_ix = 0; ENTER(S_s_source_code);
 }
 "/>" {
  LEAVE; STag_s_source_code(); pcdata_ix = 0; ETag_s_source_code(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_s_source_code: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_source_code element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_source_code' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_source_code' element.");
}

<S_s_source_code_2,E_s_source_code,S_s_source_code>{
 "</s_source_code"{s}">" {
  LEAVE;
  ETag_s_source_code();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_s_source_code: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_source_code>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_source_code>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_source_code>' expected.");
}

<ROOT_s_table,S_s_table,S_s_table_1,S_s_select_1,S_s_select_2,S_s_select,S_s_table_2>"<s_table"{s} {
  AX_s_table_alias = 0;
  AX_s_table_nm = 0;
  AX_s_table_outer_type = 0;
  AX_s_table_tabname = 0;
  ENTER(AL_s_table); pushbuffer(0);
  }

<AL_s_table>{
 "alias"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_alias);
 "alias"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_alias);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_nm);

 "outer_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_outer_type);
 "outer_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_outer_type);

 "tabname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_tabname);
 "tabname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_tabname);

 ">" {
  LEAVE; STag_s_table();pcdata_ix = 0; ENTER(S_s_table);
 }
 "/>" {
  LEAVE; STag_s_table(); pcdata_ix = 0; ETag_s_table(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_s_table: case S_s_table_1: case S_s_table_2: SET(S_s_table_2); break;
   case ROOT_s_table: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_table element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_table' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_table' element.");
}

<S_s_table,S_s_table_2,E_s_table>{
 "</s_table"{s}">" {
  LEAVE;
  ETag_s_table();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case S_s_table: case S_s_table_1: case S_s_table_2: SET(S_s_table_2); break;
   case ROOT_s_table: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_table>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_table>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_table>' expected.");
}

<ROOT_s_table_list,S_s_select_1,S_s_select_2,S_s_select>"<s_table_list"{s} {
  AX_s_table_list_nm = 0;
  ENTER(AL_s_table_list); pushbuffer(0);
  }

<AL_s_table_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_list_nm);

 ">" {
  LEAVE; STag_s_table_list();pcdata_ix = 0; ENTER(S_s_table_list);
 }
 "/>" {
  LEAVE; STag_s_table_list(); pcdata_ix = 0; ETag_s_table_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case ROOT_s_table_list: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_table_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_table_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_table_list' element.");
}

<S_s_table_list_2,E_s_table_list,S_s_table_list>{
 "</s_table_list"{s}">" {
  LEAVE;
  ETag_s_table_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_select_1: case S_s_select_2: case S_s_select: SET(S_s_select_2); break;
   case ROOT_s_table_list: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_table_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_table_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_table_list>' expected.");
}

<ROOT_s_table_list_element,S_s_table_list,S_s_table_list_2,S_s_table_list_1>"<s_table_list_element"{s} {
  AX_s_table_list_element_alias = 0;
  AX_s_table_list_element_nm = 0;
  AX_s_table_list_element_tabname = 0;
  ENTER(AL_s_table_list_element); pushbuffer(0);
  }

<AL_s_table_list_element>{
 "alias"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_list_element_alias);
 "alias"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_list_element_alias);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_list_element_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_list_element_nm);

 "tabname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_table_list_element_tabname);
 "tabname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_table_list_element_tabname);

 ">" {
  LEAVE; STag_s_table_list_element();pcdata_ix = 0; ENTER(S_s_table_list_element);
 }
 "/>" {
  LEAVE; STag_s_table_list_element(); pcdata_ix = 0; ETag_s_table_list_element(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_table_list: case S_s_table_list_2: case S_s_table_list_1: SET(S_s_table_list_2); break;
   case ROOT_s_table_list_element: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_table_list_element element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_table_list_element' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_table_list_element' element.");
}

<S_s_table_list_element,E_s_table_list_element,S_s_table_list_element_2>{
 "</s_table_list_element"{s}">" {
  LEAVE;
  ETag_s_table_list_element();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_table_list: case S_s_table_list_2: case S_s_table_list_1: SET(S_s_table_list_2); break;
   case ROOT_s_table_list_element: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_table_list_element>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_table_list_element>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_table_list_element>' expected.");
}

<ROOT_s_update_pair>"<s_update_pair"{s} {
  AX_s_update_pair_column_name = 0;
  AX_s_update_pair_nm = 0;
  ENTER(AL_s_update_pair); pushbuffer(0);
  }

<AL_s_update_pair>{
 "column_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_update_pair_column_name);
 "column_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_update_pair_column_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_s_update_pair_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_s_update_pair_nm);

 ">" {
  LEAVE; STag_s_update_pair();pcdata_ix = 0; ENTER(S_s_update_pair);
 }
 "/>" {
  LEAVE; STag_s_update_pair(); pcdata_ix = 0; ETag_s_update_pair(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_update_pair: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of s_update_pair element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `s_update_pair' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `s_update_pair' element.");
}

<S_s_update_pair,S_s_update_pair_2,E_s_update_pair>{
 "</s_update_pair"{s}">" {
  LEAVE;
  ETag_s_update_pair();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_s_update_pair: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</s_update_pair>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</s_update_pair>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</s_update_pair>' expected.");
}

<ROOT_short>"<short"{s} {
  AX_short_nm = 0;
  AX_short_value = 0;
  ENTER(AL_short); pushbuffer(0);
  }

<AL_short>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_short_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_short_nm);

 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_short_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_short_value);

 ">" {
  LEAVE; STag_short();pcdata_ix = 0; ENTER(E_short);
 }
 "/>" {
  LEAVE; STag_short(); pcdata_ix = 0; ETag_short(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_short: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of short element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `short' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `short' element.");
}

<E_short>{
 "</short"{s}">" {
  LEAVE;
  ETag_short();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_short: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</short>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</short>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</short>' expected.");
}

<ROOT_simple_variable,S_variable_data_2,S_variable_data,S_variable_data_1>"<simple_variable"{s} {
  AX_simple_variable_datatype = 0;
  AX_simple_variable_dimensions_0 = 0;
  AX_simple_variable_dimensions_1 = 0;
  AX_simple_variable_nm = 0;
  ENTER(AL_simple_variable); pushbuffer(0);
  }

<AL_simple_variable>{
 "datatype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_simple_variable_datatype);
 "datatype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_simple_variable_datatype);

 "dimensions_0"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_simple_variable_dimensions_0);
 "dimensions_0"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_simple_variable_dimensions_0);

 "dimensions_1"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_simple_variable_dimensions_1);
 "dimensions_1"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_simple_variable_dimensions_1);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_simple_variable_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_simple_variable_nm);

 ">" {
  LEAVE; STag_simple_variable();pcdata_ix = 0; ENTER(E_simple_variable);
 }
 "/>" {
  LEAVE; STag_simple_variable(); pcdata_ix = 0; ETag_simple_variable(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_simple_variable: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of simple_variable element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `simple_variable' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `simple_variable' element.");
}

<E_simple_variable>{
 "</simple_variable"{s}">" {
  LEAVE;
  ETag_simple_variable();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case ROOT_simple_variable: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</simple_variable>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</simple_variable>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</simple_variable>' expected.");
}

<ROOT_single_option,S_manyoptions_2,S_manyoptions,S_manyoptions_1>"<single_option"{s} {
  AX_single_option_isKey = 0;
  AX_single_option_nm = 0;
  AX_single_option_option = 0;
  AX_single_option_value = 0;
  ENTER(AL_single_option); pushbuffer(0);
  }

<AL_single_option>{
 "isKey"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_single_option_isKey);
 "isKey"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_single_option_isKey);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_single_option_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_single_option_nm);

 "option"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_single_option_option);
 "option"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_single_option_option);

 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_single_option_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_single_option_value);

 ">" {
  LEAVE; STag_single_option();pcdata_ix = 0; ENTER(S_single_option);
 }
 "/>" {
  LEAVE; STag_single_option(); pcdata_ix = 0; ETag_single_option(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_single_option: SET(EPILOG); break;
   case S_manyoptions_2: case S_manyoptions: case S_manyoptions_1: SET(S_manyoptions_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of single_option element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `single_option' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `single_option' element.");
}

<E_single_option,S_single_option_2,S_single_option>{
 "</single_option"{s}">" {
  LEAVE;
  ETag_single_option();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_single_option: SET(EPILOG); break;
   case S_manyoptions_2: case S_manyoptions: case S_manyoptions_1: SET(S_manyoptions_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</single_option>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</single_option>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</single_option>' expected.");
}

<ROOT_sq_subquery>"<sq_subquery"{s} {
  AX_sq_subquery_aud = 0;
  AX_sq_subquery_nm = 0;
  ENTER(AL_sq_subquery); pushbuffer(0);
  }

<AL_sq_subquery>{
 "aud"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_sq_subquery_aud);
 "aud"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_sq_subquery_aud);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_sq_subquery_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_sq_subquery_nm);

 ">" {
  LEAVE; STag_sq_subquery();pcdata_ix = 0; ENTER(S_sq_subquery);
 }
 "/>" {
  LEAVE; STag_sq_subquery(); pcdata_ix = 0; ETag_sq_subquery(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_sq_subquery: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of sq_subquery element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `sq_subquery' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `sq_subquery' element.");
}

<S_sq_subquery_2,E_sq_subquery,S_sq_subquery>{
 "</sq_subquery"{s}">" {
  LEAVE;
  ETag_sq_subquery();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_sq_subquery: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</sq_subquery>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</sq_subquery>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</sq_subquery>' expected.");
}

<ROOT_sql_statement>"<sql_statement"{s} {
  AX_sql_statement_nibind = 0;
  AX_sql_statement_nm = 0;
  AX_sql_statement_nobind = 0;
  AX_sql_statement_sql_string = 0;
  AX_sql_statement_stmt_type = 0;
  ENTER(AL_sql_statement); pushbuffer(0);
  }

<AL_sql_statement>{
 "nibind"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_sql_statement_nibind);
 "nibind"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_sql_statement_nibind);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_sql_statement_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_sql_statement_nm);

 "nobind"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_sql_statement_nobind);
 "nobind"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_sql_statement_nobind);

 "sql_string"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_sql_statement_sql_string);
 "sql_string"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_sql_statement_sql_string);

 "stmt_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_sql_statement_stmt_type);
 "stmt_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_sql_statement_stmt_type);

 ">" {
  LEAVE; STag_sql_statement();pcdata_ix = 0; ENTER(S_sql_statement);
 }
 "/>" {
  LEAVE; STag_sql_statement(); pcdata_ix = 0; ETag_sql_statement(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_sql_statement: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of sql_statement element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `sql_statement' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `sql_statement' element.");
}

<S_sql_statement,E_sql_statement,S_sql_statement_2>{
 "</sql_statement"{s}">" {
  LEAVE;
  ETag_sql_statement();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_sql_statement: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</sql_statement>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</sql_statement>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</sql_statement>' expected.");
}

<ROOT_startrep,S_struct_start_cmd_2,S_s_report_definition_2,S_struct_start_cmd,S_s_report_definition,S_s_report_definition_1,S_struct_start_cmd_1>"<startrep"{s} {
  AX_startrep_nm = 0;
  AX_startrep_towhat = 0;
  AX_startrep_with_bottom_margin = 0;
  AX_startrep_with_left_margin = 0;
  AX_startrep_with_page_length = 0;
  AX_startrep_with_right_margin = 0;
  AX_startrep_with_top_margin = 0;
  AX_startrep_with_top_of_page = 0;
  ENTER(AL_startrep); pushbuffer(0);
  }

<AL_startrep>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_nm);

 "towhat"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_towhat);
 "towhat"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_towhat);

 "with_bottom_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_with_bottom_margin);
 "with_bottom_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_with_bottom_margin);

 "with_left_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_with_left_margin);
 "with_left_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_with_left_margin);

 "with_page_length"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_with_page_length);
 "with_page_length"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_with_page_length);

 "with_right_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_with_right_margin);
 "with_right_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_with_right_margin);

 "with_top_margin"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_with_top_margin);
 "with_top_margin"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_with_top_margin);

 "with_top_of_page"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_startrep_with_top_of_page);
 "with_top_of_page"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_startrep_with_top_of_page);

 ">" {
  LEAVE; STag_startrep();pcdata_ix = 0; ENTER(S_startrep);
 }
 "/>" {
  LEAVE; STag_startrep(); pcdata_ix = 0; ETag_startrep(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_start_cmd_2: case S_struct_start_cmd: case S_struct_start_cmd_1: SET(S_struct_start_cmd_2); break;
   case ROOT_startrep: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of startrep element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `startrep' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `startrep' element.");
}

<S_startrep_2,S_startrep,E_startrep>{
 "</startrep"{s}">" {
  LEAVE;
  ETag_startrep();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_start_cmd_2: case S_struct_start_cmd: case S_struct_start_cmd_1: SET(S_struct_start_cmd_2); break;
   case ROOT_startrep: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</startrep>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</startrep>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</startrep>' expected.");
}

<ROOT_str,S_str_list,S_globals_definition,S_str_list_1,S_module_definition,S_str_list_2,S_s_source_code_1,S_s_table_list_element_2,S_funcname_list_1,S_globals_definition_1,S_s_source_code,S_module_definition_1,S_funcname_list,S_funcname_list_2,S_s_table_list_element_1,S_s_source_code_2,S_globals_definition_2,S_s_table_list_element,S_module_definition_2>"<str"{s} {
  AX_str_nm = 0;
  AX_str_value = 0;
  ENTER(AL_str); pushbuffer(0);
  }

<AL_str>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_str_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_str_nm);

 "value"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_str_value);
 "value"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_str_value);

 ">" {
  LEAVE; STag_str();pcdata_ix = 0; ENTER(E_str);
 }
 "/>" {
  LEAVE; STag_str(); pcdata_ix = 0; ETag_str(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_source_code_1: case S_s_source_code: case S_s_source_code_2: SET(S_s_source_code_2); break;
   case S_globals_definition: case S_globals_definition_1: case S_globals_definition_2: SET(S_globals_definition_2); break;
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_str: SET(EPILOG); break;
   case S_funcname_list_1: case S_funcname_list: case S_funcname_list_2: SET(S_funcname_list_2); break;
   case S_str_list: case S_str_list_1: case S_str_list_2: SET(S_str_list_2); break;
   case S_s_table_list_element_2: case S_s_table_list_element_1: case S_s_table_list_element: SET(S_s_table_list_element_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of str element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `str' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `str' element.");
}

<E_str>{
 "</str"{s}">" {
  LEAVE;
  ETag_str();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_source_code_1: case S_s_source_code: case S_s_source_code_2: SET(S_s_source_code_2); break;
   case S_globals_definition: case S_globals_definition_1: case S_globals_definition_2: SET(S_globals_definition_2); break;
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case ROOT_str: SET(EPILOG); break;
   case S_funcname_list_1: case S_funcname_list: case S_funcname_list_2: SET(S_funcname_list_2); break;
   case S_str_list: case S_str_list_1: case S_str_list_2: SET(S_str_list_2); break;
   case S_s_table_list_element_2: case S_s_table_list_element_1: case S_s_table_list_element: SET(S_s_table_list_element_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</str>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</str>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</str>' expected.");
}

<ROOT_str_list,S_struct_check_menu_cmd,S_struct_lint_ignore_cmd,S_struct_load_cmd_1,S_struct_lint_ignore_cmd_2,S_struct_enable_menu_cmd_1,S_menuoption_2,S_struct_lint_expect_cmd_1,S_event_data,S_struct_check_menu_cmd_1,S_event_data_2,S_struct_init_cmd_2,S_s_formhandler_definition,S_struct_disable_menu_cmd_1,S_module_definition,S_struct_insert_cmd_2,S_struct_validate_cmd,S_struct_lint_expect_cmd,S_struct_init_cmd,S_struct_validate_cmd_2,S_struct_load_cmd,S_struct_lint_expect_cmd_2,S_event_data_1,S_struct_init_cmd_1,S_struct_disable_menu_cmd_2,S_struct_uncheck_menu_cmd_1,S_struct_update_cmd_2,S_module_definition_1,S_struct_load_cmd_2,S_s_formhandler_definition_2,S_struct_uncheck_menu_cmd,S_struct_validate_cmd_1,S_struct_update_cmd,S_struct_insert_cmd,S_struct_enable_menu_cmd,S_menuoption,S_struct_update_cmd_1,S_struct_enable_menu_cmd_2,S_struct_uncheck_menu_cmd_2,S_module_definition_2,S_struct_disable_menu_cmd,S_struct_lint_ignore_cmd_1,S_menuoption_1,S_struct_check_menu_cmd_2,S_struct_insert_cmd_1,S_s_formhandler_definition_1>"<str_list"{s} {
  AX_str_list_nm = 0;
  ENTER(AL_str_list); pushbuffer(0);
  }

<AL_str_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_str_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_str_list_nm);

 ">" {
  LEAVE; STag_str_list();pcdata_ix = 0; ENTER(S_str_list);
 }
 "/>" {
  LEAVE; STag_str_list(); pcdata_ix = 0; ETag_str_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_struct_enable_menu_cmd_1: case S_struct_enable_menu_cmd: case S_struct_enable_menu_cmd_2: SET(S_struct_enable_menu_cmd_2); break;
   case S_struct_lint_ignore_cmd: case S_struct_lint_ignore_cmd_2: case S_struct_lint_ignore_cmd_1: SET(S_struct_lint_ignore_cmd_2); break;
   case S_struct_disable_menu_cmd_1: case S_struct_disable_menu_cmd_2: case S_struct_disable_menu_cmd: SET(S_struct_disable_menu_cmd_2); break;
   case S_struct_uncheck_menu_cmd_1: case S_struct_uncheck_menu_cmd: case S_struct_uncheck_menu_cmd_2: SET(S_struct_uncheck_menu_cmd_2); break;
   case S_struct_update_cmd_2: case S_struct_update_cmd: case S_struct_update_cmd_1: SET(S_struct_update_cmd_2); break;
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case S_struct_load_cmd_1: case S_struct_load_cmd: case S_struct_load_cmd_2: SET(S_struct_load_cmd_2); break;
   case S_menuoption_2: case S_menuoption: case S_menuoption_1: SET(S_menuoption_2); break;
   case S_struct_validate_cmd: case S_struct_validate_cmd_2: case S_struct_validate_cmd_1: SET(S_struct_validate_cmd_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_struct_lint_expect_cmd_1: case S_struct_lint_expect_cmd: case S_struct_lint_expect_cmd_2: SET(S_struct_lint_expect_cmd_2); break;
   case ROOT_str_list: SET(EPILOG); break;
   case S_struct_check_menu_cmd: case S_struct_check_menu_cmd_1: case S_struct_check_menu_cmd_2: SET(S_struct_check_menu_cmd_2); break;
   case S_event_data: case S_event_data_2: case S_event_data_1: SET(S_event_data_2); break;
   case S_struct_init_cmd_2: case S_struct_init_cmd: case S_struct_init_cmd_1: SET(S_struct_init_cmd_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of str_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `str_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `str_list' element.");
}

<S_str_list,S_str_list_2,E_str_list>{
 "</str_list"{s}">" {
  LEAVE;
  ETag_str_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_insert_cmd_2: case S_struct_insert_cmd: case S_struct_insert_cmd_1: SET(S_struct_insert_cmd_2); break;
   case S_struct_enable_menu_cmd_1: case S_struct_enable_menu_cmd: case S_struct_enable_menu_cmd_2: SET(S_struct_enable_menu_cmd_2); break;
   case S_struct_lint_ignore_cmd: case S_struct_lint_ignore_cmd_2: case S_struct_lint_ignore_cmd_1: SET(S_struct_lint_ignore_cmd_2); break;
   case S_struct_disable_menu_cmd_1: case S_struct_disable_menu_cmd_2: case S_struct_disable_menu_cmd: SET(S_struct_disable_menu_cmd_2); break;
   case S_struct_uncheck_menu_cmd_1: case S_struct_uncheck_menu_cmd: case S_struct_uncheck_menu_cmd_2: SET(S_struct_uncheck_menu_cmd_2); break;
   case S_struct_update_cmd_2: case S_struct_update_cmd: case S_struct_update_cmd_1: SET(S_struct_update_cmd_2); break;
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case S_struct_load_cmd_1: case S_struct_load_cmd: case S_struct_load_cmd_2: SET(S_struct_load_cmd_2); break;
   case S_menuoption_2: case S_menuoption: case S_menuoption_1: SET(S_menuoption_2); break;
   case S_struct_validate_cmd: case S_struct_validate_cmd_2: case S_struct_validate_cmd_1: SET(S_struct_validate_cmd_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_struct_lint_expect_cmd_1: case S_struct_lint_expect_cmd: case S_struct_lint_expect_cmd_2: SET(S_struct_lint_expect_cmd_2); break;
   case ROOT_str_list: SET(EPILOG); break;
   case S_struct_check_menu_cmd: case S_struct_check_menu_cmd_1: case S_struct_check_menu_cmd_2: SET(S_struct_check_menu_cmd_2); break;
   case S_event_data: case S_event_data_2: case S_event_data_1: SET(S_event_data_2); break;
   case S_struct_init_cmd_2: case S_struct_init_cmd: case S_struct_init_cmd_1: SET(S_struct_init_cmd_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</str_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</str_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</str_list>' expected.");
}

<ROOT_struct_alloc_arr_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_alloc_arr_cmd"{s} {
  AX_struct_alloc_arr_cmd_nm = 0;
  ENTER(AL_struct_alloc_arr_cmd); pushbuffer(0);
  }

<AL_struct_alloc_arr_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_alloc_arr_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_alloc_arr_cmd_nm);

 ">" {
  LEAVE; STag_struct_alloc_arr_cmd();pcdata_ix = 0; ENTER(S_struct_alloc_arr_cmd);
 }
 "/>" {
  LEAVE; STag_struct_alloc_arr_cmd(); pcdata_ix = 0; ETag_struct_alloc_arr_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_alloc_arr_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_alloc_arr_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_alloc_arr_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_alloc_arr_cmd' element.");
}

<S_struct_alloc_arr_cmd_2,S_struct_alloc_arr_cmd,E_struct_alloc_arr_cmd>{
 "</struct_alloc_arr_cmd"{s}">" {
  LEAVE;
  ETag_struct_alloc_arr_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_alloc_arr_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_alloc_arr_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_alloc_arr_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_alloc_arr_cmd>' expected.");
}

<ROOT_struct_at_term_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_at_term_cmd"{s} {
  AX_struct_at_term_cmd_funcname = 0;
  AX_struct_at_term_cmd_nm = 0;
  ENTER(AL_struct_at_term_cmd); pushbuffer(0);
  }

<AL_struct_at_term_cmd>{
 "funcname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_at_term_cmd_funcname);
 "funcname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_at_term_cmd_funcname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_at_term_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_at_term_cmd_nm);

 ">" {
  LEAVE; STag_struct_at_term_cmd();pcdata_ix = 0; ENTER(E_struct_at_term_cmd);
 }
 "/>" {
  LEAVE; STag_struct_at_term_cmd(); pcdata_ix = 0; ETag_struct_at_term_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_at_term_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_at_term_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_at_term_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_at_term_cmd' element.");
}

<E_struct_at_term_cmd>{
 "</struct_at_term_cmd"{s}">" {
  LEAVE;
  ETag_struct_at_term_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_at_term_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_at_term_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_at_term_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_at_term_cmd>' expected.");
}

<ROOT_struct_call_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_call_cmd"{s} {
  AX_struct_call_cmd_nm = 0;
  ENTER(AL_struct_call_cmd); pushbuffer(0);
  }

<AL_struct_call_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_call_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_call_cmd_nm);

 ">" {
  LEAVE; STag_struct_call_cmd();pcdata_ix = 0; ENTER(S_struct_call_cmd);
 }
 "/>" {
  LEAVE; STag_struct_call_cmd(); pcdata_ix = 0; ETag_struct_call_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_call_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_call_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_call_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_call_cmd' element.");
}

<S_struct_call_cmd_2,S_struct_call_cmd,E_struct_call_cmd>{
 "</struct_call_cmd"{s}">" {
  LEAVE;
  ETag_struct_call_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_call_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_call_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_call_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_call_cmd>' expected.");
}

<ROOT_struct_call_shared_cmd>"<struct_call_shared_cmd"{s} {
  AX_struct_call_shared_cmd_niy = 0;
  AX_struct_call_shared_cmd_nm = 0;
  ENTER(AL_struct_call_shared_cmd); pushbuffer(0);
  }

<AL_struct_call_shared_cmd>{
 "niy"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_call_shared_cmd_niy);
 "niy"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_call_shared_cmd_niy);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_call_shared_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_call_shared_cmd_nm);

 ">" {
  LEAVE; STag_struct_call_shared_cmd();pcdata_ix = 0; ENTER(E_struct_call_shared_cmd);
 }
 "/>" {
  LEAVE; STag_struct_call_shared_cmd(); pcdata_ix = 0; ETag_struct_call_shared_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_call_shared_cmd: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_call_shared_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_call_shared_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_call_shared_cmd' element.");
}

<E_struct_call_shared_cmd>{
 "</struct_call_shared_cmd"{s}">" {
  LEAVE;
  ETag_struct_call_shared_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_call_shared_cmd: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_call_shared_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_call_shared_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_call_shared_cmd>' expected.");
}

<ROOT_struct_cancel_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_cancel_cmd"{s} {
  AX_struct_cancel_cmd_c = 0;
  AX_struct_cancel_cmd_nm = 0;
  ENTER(AL_struct_cancel_cmd); pushbuffer(0);
  }

<AL_struct_cancel_cmd>{
 "c"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_cancel_cmd_c);
 "c"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_cancel_cmd_c);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_cancel_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_cancel_cmd_nm);

 ">" {
  LEAVE; STag_struct_cancel_cmd();pcdata_ix = 0; ENTER(E_struct_cancel_cmd);
 }
 "/>" {
  LEAVE; STag_struct_cancel_cmd(); pcdata_ix = 0; ETag_struct_cancel_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_cancel_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_cancel_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_cancel_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_cancel_cmd' element.");
}

<E_struct_cancel_cmd>{
 "</struct_cancel_cmd"{s}">" {
  LEAVE;
  ETag_struct_cancel_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_cancel_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_cancel_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_cancel_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_cancel_cmd>' expected.");
}

<ROOT_struct_case_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_case_cmd"{s} {
  AX_struct_case_cmd_block_id = 0;
  AX_struct_case_cmd_nm = 0;
  ENTER(AL_struct_case_cmd); pushbuffer(0);
  }

<AL_struct_case_cmd>{
 "block_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_case_cmd_block_id);
 "block_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_case_cmd_block_id);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_case_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_case_cmd_nm);

 ">" {
  LEAVE; STag_struct_case_cmd();pcdata_ix = 0; ENTER(S_struct_case_cmd);
 }
 "/>" {
  LEAVE; STag_struct_case_cmd(); pcdata_ix = 0; ETag_struct_case_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_case_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_case_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_case_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_case_cmd' element.");
}

<E_struct_case_cmd,S_struct_case_cmd_2,S_struct_case_cmd>{
 "</struct_case_cmd"{s}">" {
  LEAVE;
  ETag_struct_case_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_case_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_case_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_case_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_case_cmd>' expected.");
}

<ROOT_struct_check_menu_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_check_menu_cmd"{s} {
  AX_struct_check_menu_cmd_nm = 0;
  ENTER(AL_struct_check_menu_cmd); pushbuffer(0);
  }

<AL_struct_check_menu_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_check_menu_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_check_menu_cmd_nm);

 ">" {
  LEAVE; STag_struct_check_menu_cmd();pcdata_ix = 0; ENTER(S_struct_check_menu_cmd);
 }
 "/>" {
  LEAVE; STag_struct_check_menu_cmd(); pcdata_ix = 0; ETag_struct_check_menu_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_check_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_check_menu_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_check_menu_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_check_menu_cmd' element.");
}

<S_struct_check_menu_cmd,E_struct_check_menu_cmd,S_struct_check_menu_cmd_2>{
 "</struct_check_menu_cmd"{s}">" {
  LEAVE;
  ETag_struct_check_menu_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_check_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_check_menu_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_check_menu_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_check_menu_cmd>' expected.");
}

<ROOT_struct_clear_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_clear_cmd"{s} {
  AX_struct_clear_cmd_nm = 0;
  AX_struct_clear_cmd_todefaults = 0;
  ENTER(AL_struct_clear_cmd); pushbuffer(0);
  }

<AL_struct_clear_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_clear_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_clear_cmd_nm);

 "todefaults"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_clear_cmd_todefaults);
 "todefaults"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_clear_cmd_todefaults);

 ">" {
  LEAVE; STag_struct_clear_cmd();pcdata_ix = 0; ENTER(S_struct_clear_cmd);
 }
 "/>" {
  LEAVE; STag_struct_clear_cmd(); pcdata_ix = 0; ETag_struct_clear_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_clear_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_clear_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_clear_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_clear_cmd' element.");
}

<S_struct_clear_cmd,S_struct_clear_cmd_2,E_struct_clear_cmd>{
 "</struct_clear_cmd"{s}">" {
  LEAVE;
  ETag_struct_clear_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_clear_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_clear_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_clear_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_clear_cmd>' expected.");
}

<ROOT_struct_close_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_close_cmd"{s} {
  AX_struct_close_cmd_cl_type = 0;
  AX_struct_close_cmd_nm = 0;
  ENTER(AL_struct_close_cmd); pushbuffer(0);
  }

<AL_struct_close_cmd>{
 "cl_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_close_cmd_cl_type);
 "cl_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_close_cmd_cl_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_close_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_close_cmd_nm);

 ">" {
  LEAVE; STag_struct_close_cmd();pcdata_ix = 0; ENTER(S_struct_close_cmd);
 }
 "/>" {
  LEAVE; STag_struct_close_cmd(); pcdata_ix = 0; ETag_struct_close_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_close_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_close_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_close_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_close_cmd' element.");
}

<E_struct_close_cmd,S_struct_close_cmd_2,S_struct_close_cmd>{
 "</struct_close_cmd"{s}">" {
  LEAVE;
  ETag_struct_close_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_close_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_close_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_close_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_close_cmd>' expected.");
}

<ROOT_struct_close_sql_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_close_sql_cmd"{s} {
  AX_struct_close_sql_cmd_cl_type = 0;
  AX_struct_close_sql_cmd_nm = 0;
  ENTER(AL_struct_close_sql_cmd); pushbuffer(0);
  }

<AL_struct_close_sql_cmd>{
 "cl_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_close_sql_cmd_cl_type);
 "cl_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_close_sql_cmd_cl_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_close_sql_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_close_sql_cmd_nm);

 ">" {
  LEAVE; STag_struct_close_sql_cmd();pcdata_ix = 0; ENTER(S_struct_close_sql_cmd);
 }
 "/>" {
  LEAVE; STag_struct_close_sql_cmd(); pcdata_ix = 0; ETag_struct_close_sql_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_close_sql_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_close_sql_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_close_sql_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_close_sql_cmd' element.");
}

<E_struct_close_sql_cmd,S_struct_close_sql_cmd,S_struct_close_sql_cmd_2>{
 "</struct_close_sql_cmd"{s}">" {
  LEAVE;
  ETag_struct_close_sql_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_close_sql_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_close_sql_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_close_sql_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_close_sql_cmd>' expected.");
}

<ROOT_struct_code_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_code_cmd"{s} {
  AX_struct_code_cmd_contents = 0;
  AX_struct_code_cmd_nm = 0;
  ENTER(AL_struct_code_cmd); pushbuffer(0);
  }

<AL_struct_code_cmd>{
 "contents"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_code_cmd_contents);
 "contents"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_code_cmd_contents);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_code_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_code_cmd_nm);

 ">" {
  LEAVE; STag_struct_code_cmd();pcdata_ix = 0; ENTER(E_struct_code_cmd);
 }
 "/>" {
  LEAVE; STag_struct_code_cmd(); pcdata_ix = 0; ETag_struct_code_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_code_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_code_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_code_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_code_cmd' element.");
}

<E_struct_code_cmd>{
 "</struct_code_cmd"{s}">" {
  LEAVE;
  ETag_struct_code_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_code_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_code_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_code_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_code_cmd>' expected.");
}

<ROOT_struct_connect_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_connect_cmd"{s} {
  AX_struct_connect_cmd_nm = 0;
  ENTER(AL_struct_connect_cmd); pushbuffer(0);
  }

<AL_struct_connect_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_connect_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_connect_cmd_nm);

 ">" {
  LEAVE; STag_struct_connect_cmd();pcdata_ix = 0; ENTER(S_struct_connect_cmd);
 }
 "/>" {
  LEAVE; STag_struct_connect_cmd(); pcdata_ix = 0; ETag_struct_connect_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_connect_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_connect_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_connect_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_connect_cmd' element.");
}

<E_struct_connect_cmd,S_struct_connect_cmd_2,S_struct_connect_cmd>{
 "</struct_connect_cmd"{s}">" {
  LEAVE;
  ETag_struct_connect_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_connect_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_connect_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_connect_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_connect_cmd>' expected.");
}

<ROOT_struct_construct_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_construct_cmd"{s} {
  AX_struct_construct_cmd_blockid = 0;
  AX_struct_construct_cmd_by_name = 0;
  AX_struct_construct_cmd_helpno = 0;
  AX_struct_construct_cmd_nm = 0;
  AX_struct_construct_cmd_sio = 0;
  AX_struct_construct_cmd_without_defaults = 0;
  ENTER(AL_struct_construct_cmd); pushbuffer(0);
  }

<AL_struct_construct_cmd>{
 "blockid"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_construct_cmd_blockid);
 "blockid"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_construct_cmd_blockid);

 "by_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_construct_cmd_by_name);
 "by_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_construct_cmd_by_name);

 "helpno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_construct_cmd_helpno);
 "helpno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_construct_cmd_helpno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_construct_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_construct_cmd_nm);

 "sio"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_construct_cmd_sio);
 "sio"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_construct_cmd_sio);

 "without_defaults"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_construct_cmd_without_defaults);
 "without_defaults"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_construct_cmd_without_defaults);

 ">" {
  LEAVE; STag_struct_construct_cmd();pcdata_ix = 0; ENTER(S_struct_construct_cmd);
 }
 "/>" {
  LEAVE; STag_struct_construct_cmd(); pcdata_ix = 0; ETag_struct_construct_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_construct_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_construct_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_construct_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_construct_cmd' element.");
}

<S_struct_construct_cmd_2,S_struct_construct_cmd,E_struct_construct_cmd>{
 "</struct_construct_cmd"{s}">" {
  LEAVE;
  ETag_struct_construct_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_construct_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_construct_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_construct_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_construct_cmd>' expected.");
}

<ROOT_struct_continue_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_continue_cmd"{s} {
  AX_struct_continue_cmd_block_id = 0;
  AX_struct_continue_cmd_nm = 0;
  AX_struct_continue_cmd_sio_id = 0;
  AX_struct_continue_cmd_what = 0;
  ENTER(AL_struct_continue_cmd); pushbuffer(0);
  }

<AL_struct_continue_cmd>{
 "block_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_continue_cmd_block_id);
 "block_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_continue_cmd_block_id);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_continue_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_continue_cmd_nm);

 "sio_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_continue_cmd_sio_id);
 "sio_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_continue_cmd_sio_id);

 "what"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_continue_cmd_what);
 "what"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_continue_cmd_what);

 ">" {
  LEAVE; STag_struct_continue_cmd();pcdata_ix = 0; ENTER(E_struct_continue_cmd);
 }
 "/>" {
  LEAVE; STag_struct_continue_cmd(); pcdata_ix = 0; ETag_struct_continue_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_continue_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_continue_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_continue_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_continue_cmd' element.");
}

<E_struct_continue_cmd>{
 "</struct_continue_cmd"{s}">" {
  LEAVE;
  ETag_struct_continue_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_continue_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_continue_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_continue_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_continue_cmd>' expected.");
}

<ROOT_struct_convert_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_convert_cmd"{s} {
  AX_struct_convert_cmd_namespace = 0;
  AX_struct_convert_cmd_nm = 0;
  AX_struct_convert_cmd_repname = 0;
  ENTER(AL_struct_convert_cmd); pushbuffer(0);
  }

<AL_struct_convert_cmd>{
 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_convert_cmd_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_convert_cmd_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_convert_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_convert_cmd_nm);

 "repname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_convert_cmd_repname);
 "repname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_convert_cmd_repname);

 ">" {
  LEAVE; STag_struct_convert_cmd();pcdata_ix = 0; ENTER(S_struct_convert_cmd);
 }
 "/>" {
  LEAVE; STag_struct_convert_cmd(); pcdata_ix = 0; ETag_struct_convert_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_convert_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_convert_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_convert_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_convert_cmd' element.");
}

<S_struct_convert_cmd,S_struct_convert_cmd_2,E_struct_convert_cmd>{
 "</struct_convert_cmd"{s}">" {
  LEAVE;
  ETag_struct_convert_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_convert_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_convert_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_convert_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_convert_cmd>' expected.");
}

<ROOT_struct_current_win_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_current_win_cmd"{s} {
  AX_struct_current_win_cmd_nm = 0;
  ENTER(AL_struct_current_win_cmd); pushbuffer(0);
  }

<AL_struct_current_win_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_current_win_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_current_win_cmd_nm);

 ">" {
  LEAVE; STag_struct_current_win_cmd();pcdata_ix = 0; ENTER(S_struct_current_win_cmd);
 }
 "/>" {
  LEAVE; STag_struct_current_win_cmd(); pcdata_ix = 0; ETag_struct_current_win_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_current_win_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_current_win_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_current_win_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_current_win_cmd' element.");
}

<S_struct_current_win_cmd,S_struct_current_win_cmd_2,E_struct_current_win_cmd>{
 "</struct_current_win_cmd"{s}">" {
  LEAVE;
  ETag_struct_current_win_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_current_win_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_current_win_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_current_win_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_current_win_cmd>' expected.");
}

<ROOT_struct_dealloc_arr_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_dealloc_arr_cmd"{s} {
  AX_struct_dealloc_arr_cmd_nm = 0;
  ENTER(AL_struct_dealloc_arr_cmd); pushbuffer(0);
  }

<AL_struct_dealloc_arr_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_dealloc_arr_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_dealloc_arr_cmd_nm);

 ">" {
  LEAVE; STag_struct_dealloc_arr_cmd();pcdata_ix = 0; ENTER(S_struct_dealloc_arr_cmd);
 }
 "/>" {
  LEAVE; STag_struct_dealloc_arr_cmd(); pcdata_ix = 0; ETag_struct_dealloc_arr_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_dealloc_arr_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_dealloc_arr_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_dealloc_arr_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_dealloc_arr_cmd' element.");
}

<S_struct_dealloc_arr_cmd,S_struct_dealloc_arr_cmd_2,E_struct_dealloc_arr_cmd>{
 "</struct_dealloc_arr_cmd"{s}">" {
  LEAVE;
  ETag_struct_dealloc_arr_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_dealloc_arr_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_dealloc_arr_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_dealloc_arr_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_dealloc_arr_cmd>' expected.");
}

<ROOT_struct_declare_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_declare_cmd"{s} {
  AX_struct_declare_cmd_cursor_type = 0;
  AX_struct_declare_cmd_isstmt = 0;
  AX_struct_declare_cmd_nm = 0;
  AX_struct_declare_cmd_scroll = 0;
  AX_struct_declare_cmd_with_hold = 0;
  ENTER(AL_struct_declare_cmd); pushbuffer(0);
  }

<AL_struct_declare_cmd>{
 "cursor_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_declare_cmd_cursor_type);
 "cursor_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_declare_cmd_cursor_type);

 "isstmt"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_declare_cmd_isstmt);
 "isstmt"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_declare_cmd_isstmt);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_declare_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_declare_cmd_nm);

 "scroll"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_declare_cmd_scroll);
 "scroll"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_declare_cmd_scroll);

 "with_hold"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_declare_cmd_with_hold);
 "with_hold"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_declare_cmd_with_hold);

 ">" {
  LEAVE; STag_struct_declare_cmd();pcdata_ix = 0; ENTER(S_struct_declare_cmd);
 }
 "/>" {
  LEAVE; STag_struct_declare_cmd(); pcdata_ix = 0; ETag_struct_declare_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_declare_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_declare_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_declare_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_declare_cmd' element.");
}

<S_struct_declare_cmd_2,S_struct_declare_cmd,E_struct_declare_cmd>{
 "</struct_declare_cmd"{s}">" {
  LEAVE;
  ETag_struct_declare_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_declare_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_declare_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_declare_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_declare_cmd>' expected.");
}

<ROOT_struct_defer_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_defer_cmd"{s} {
  AX_struct_defer_cmd_nm = 0;
  AX_struct_defer_cmd_what = 0;
  ENTER(AL_struct_defer_cmd); pushbuffer(0);
  }

<AL_struct_defer_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_defer_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_defer_cmd_nm);

 "what"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_defer_cmd_what);
 "what"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_defer_cmd_what);

 ">" {
  LEAVE; STag_struct_defer_cmd();pcdata_ix = 0; ENTER(E_struct_defer_cmd);
 }
 "/>" {
  LEAVE; STag_struct_defer_cmd(); pcdata_ix = 0; ETag_struct_defer_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_defer_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_defer_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_defer_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_defer_cmd' element.");
}

<E_struct_defer_cmd>{
 "</struct_defer_cmd"{s}">" {
  LEAVE;
  ETag_struct_defer_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_defer_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_defer_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_defer_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_defer_cmd>' expected.");
}

<ROOT_struct_delete_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_delete_cmd"{s} {
  AX_struct_delete_cmd_nm = 0;
  AX_struct_delete_cmd_table = 0;
  ENTER(AL_struct_delete_cmd); pushbuffer(0);
  }

<AL_struct_delete_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_delete_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_delete_cmd_nm);

 "table"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_delete_cmd_table);
 "table"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_delete_cmd_table);

 ">" {
  LEAVE; STag_struct_delete_cmd();pcdata_ix = 0; ENTER(S_struct_delete_cmd);
 }
 "/>" {
  LEAVE; STag_struct_delete_cmd(); pcdata_ix = 0; ETag_struct_delete_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_delete_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_delete_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_delete_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_delete_cmd' element.");
}

<E_struct_delete_cmd,S_struct_delete_cmd_2,S_struct_delete_cmd>{
 "</struct_delete_cmd"{s}">" {
  LEAVE;
  ETag_struct_delete_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_delete_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_delete_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_delete_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_delete_cmd>' expected.");
}

<ROOT_struct_disable_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_disable_cmd"{s} {
  AX_struct_disable_cmd_nm = 0;
  ENTER(AL_struct_disable_cmd); pushbuffer(0);
  }

<AL_struct_disable_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_disable_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_disable_cmd_nm);

 ">" {
  LEAVE; STag_struct_disable_cmd();pcdata_ix = 0; ENTER(S_struct_disable_cmd);
 }
 "/>" {
  LEAVE; STag_struct_disable_cmd(); pcdata_ix = 0; ETag_struct_disable_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_disable_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_disable_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_disable_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_disable_cmd' element.");
}

<E_struct_disable_cmd,S_struct_disable_cmd_2,S_struct_disable_cmd>{
 "</struct_disable_cmd"{s}">" {
  LEAVE;
  ETag_struct_disable_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_disable_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_disable_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_disable_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_disable_cmd>' expected.");
}

<ROOT_struct_disable_form_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_disable_form_cmd"{s} {
  AX_struct_disable_form_cmd_nm = 0;
  ENTER(AL_struct_disable_form_cmd); pushbuffer(0);
  }

<AL_struct_disable_form_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_disable_form_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_disable_form_cmd_nm);

 ">" {
  LEAVE; STag_struct_disable_form_cmd();pcdata_ix = 0; ENTER(S_struct_disable_form_cmd);
 }
 "/>" {
  LEAVE; STag_struct_disable_form_cmd(); pcdata_ix = 0; ETag_struct_disable_form_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_disable_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_disable_form_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_disable_form_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_disable_form_cmd' element.");
}

<S_struct_disable_form_cmd_2,E_struct_disable_form_cmd,S_struct_disable_form_cmd>{
 "</struct_disable_form_cmd"{s}">" {
  LEAVE;
  ETag_struct_disable_form_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_disable_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_disable_form_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_disable_form_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_disable_form_cmd>' expected.");
}

<ROOT_struct_disable_menu_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_disable_menu_cmd"{s} {
  AX_struct_disable_menu_cmd_nm = 0;
  ENTER(AL_struct_disable_menu_cmd); pushbuffer(0);
  }

<AL_struct_disable_menu_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_disable_menu_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_disable_menu_cmd_nm);

 ">" {
  LEAVE; STag_struct_disable_menu_cmd();pcdata_ix = 0; ENTER(S_struct_disable_menu_cmd);
 }
 "/>" {
  LEAVE; STag_struct_disable_menu_cmd(); pcdata_ix = 0; ETag_struct_disable_menu_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_disable_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_disable_menu_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_disable_menu_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_disable_menu_cmd' element.");
}

<S_struct_disable_menu_cmd,S_struct_disable_menu_cmd_2,E_struct_disable_menu_cmd>{
 "</struct_disable_menu_cmd"{s}">" {
  LEAVE;
  ETag_struct_disable_menu_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_disable_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_disable_menu_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_disable_menu_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_disable_menu_cmd>' expected.");
}

<ROOT_struct_display_array_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_display_array_cmd"{s} {
  AX_struct_display_array_cmd_blockid = 0;
  AX_struct_display_array_cmd_helpno = 0;
  AX_struct_display_array_cmd_nm = 0;
  AX_struct_display_array_cmd_sio = 0;
  AX_struct_display_array_cmd_slice = 0;
  AX_struct_display_array_cmd_slice_end = 0;
  AX_struct_display_array_cmd_slice_start = 0;
  ENTER(AL_struct_display_array_cmd); pushbuffer(0);
  }

<AL_struct_display_array_cmd>{
 "blockid"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_array_cmd_blockid);
 "blockid"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_array_cmd_blockid);

 "helpno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_array_cmd_helpno);
 "helpno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_array_cmd_helpno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_array_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_array_cmd_nm);

 "sio"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_array_cmd_sio);
 "sio"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_array_cmd_sio);

 "slice"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_array_cmd_slice);
 "slice"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_array_cmd_slice);

 "slice_end"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_array_cmd_slice_end);
 "slice_end"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_array_cmd_slice_end);

 "slice_start"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_array_cmd_slice_start);
 "slice_start"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_array_cmd_slice_start);

 ">" {
  LEAVE; STag_struct_display_array_cmd();pcdata_ix = 0; ENTER(S_struct_display_array_cmd);
 }
 "/>" {
  LEAVE; STag_struct_display_array_cmd(); pcdata_ix = 0; ETag_struct_display_array_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_array_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_display_array_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_display_array_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_display_array_cmd' element.");
}

<S_struct_display_array_cmd,S_struct_display_array_cmd_2,E_struct_display_array_cmd>{
 "</struct_display_array_cmd"{s}">" {
  LEAVE;
  ETag_struct_display_array_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_array_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_display_array_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_display_array_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_display_array_cmd>' expected.");
}

<ROOT_struct_display_b_n_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_display_b_n_cmd"{s} {
  AX_struct_display_b_n_cmd_nm = 0;
  ENTER(AL_struct_display_b_n_cmd); pushbuffer(0);
  }

<AL_struct_display_b_n_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_b_n_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_b_n_cmd_nm);

 ">" {
  LEAVE; STag_struct_display_b_n_cmd();pcdata_ix = 0; ENTER(S_struct_display_b_n_cmd);
 }
 "/>" {
  LEAVE; STag_struct_display_b_n_cmd(); pcdata_ix = 0; ETag_struct_display_b_n_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_b_n_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_display_b_n_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_display_b_n_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_display_b_n_cmd' element.");
}

<S_struct_display_b_n_cmd,S_struct_display_b_n_cmd_2,E_struct_display_b_n_cmd>{
 "</struct_display_b_n_cmd"{s}">" {
  LEAVE;
  ETag_struct_display_b_n_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_b_n_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_display_b_n_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_display_b_n_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_display_b_n_cmd>' expected.");
}

<ROOT_struct_display_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_display_cmd"{s} {
  AX_struct_display_cmd_by_name = 0;
  AX_struct_display_cmd_nm = 0;
  ENTER(AL_struct_display_cmd); pushbuffer(0);
  }

<AL_struct_display_cmd>{
 "by_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_cmd_by_name);
 "by_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_cmd_by_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_cmd_nm);

 ">" {
  LEAVE; STag_struct_display_cmd();pcdata_ix = 0; ENTER(S_struct_display_cmd);
 }
 "/>" {
  LEAVE; STag_struct_display_cmd(); pcdata_ix = 0; ETag_struct_display_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_display_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_display_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_display_cmd' element.");
}

<S_struct_display_cmd_2,S_struct_display_cmd,E_struct_display_cmd>{
 "</struct_display_cmd"{s}">" {
  LEAVE;
  ETag_struct_display_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_display_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_display_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_display_cmd>' expected.");
}

<ROOT_struct_display_form_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_display_form_cmd"{s} {
  AX_struct_display_form_cmd_nm = 0;
  ENTER(AL_struct_display_form_cmd); pushbuffer(0);
  }

<AL_struct_display_form_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_display_form_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_display_form_cmd_nm);

 ">" {
  LEAVE; STag_struct_display_form_cmd();pcdata_ix = 0; ENTER(S_struct_display_form_cmd);
 }
 "/>" {
  LEAVE; STag_struct_display_form_cmd(); pcdata_ix = 0; ETag_struct_display_form_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_display_form_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_display_form_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_display_form_cmd' element.");
}

<S_struct_display_form_cmd,E_struct_display_form_cmd,S_struct_display_form_cmd_2>{
 "</struct_display_form_cmd"{s}">" {
  LEAVE;
  ETag_struct_display_form_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_display_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_display_form_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_display_form_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_display_form_cmd>' expected.");
}

<ROOT_struct_enable_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_enable_cmd"{s} {
  AX_struct_enable_cmd_nm = 0;
  ENTER(AL_struct_enable_cmd); pushbuffer(0);
  }

<AL_struct_enable_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_enable_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_enable_cmd_nm);

 ">" {
  LEAVE; STag_struct_enable_cmd();pcdata_ix = 0; ENTER(S_struct_enable_cmd);
 }
 "/>" {
  LEAVE; STag_struct_enable_cmd(); pcdata_ix = 0; ETag_struct_enable_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_enable_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_enable_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_enable_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_enable_cmd' element.");
}

<S_struct_enable_cmd,E_struct_enable_cmd,S_struct_enable_cmd_2>{
 "</struct_enable_cmd"{s}">" {
  LEAVE;
  ETag_struct_enable_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_enable_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_enable_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_enable_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_enable_cmd>' expected.");
}

<ROOT_struct_enable_form_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_enable_form_cmd"{s} {
  AX_struct_enable_form_cmd_nm = 0;
  ENTER(AL_struct_enable_form_cmd); pushbuffer(0);
  }

<AL_struct_enable_form_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_enable_form_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_enable_form_cmd_nm);

 ">" {
  LEAVE; STag_struct_enable_form_cmd();pcdata_ix = 0; ENTER(S_struct_enable_form_cmd);
 }
 "/>" {
  LEAVE; STag_struct_enable_form_cmd(); pcdata_ix = 0; ETag_struct_enable_form_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_enable_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_enable_form_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_enable_form_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_enable_form_cmd' element.");
}

<S_struct_enable_form_cmd,E_struct_enable_form_cmd,S_struct_enable_form_cmd_2>{
 "</struct_enable_form_cmd"{s}">" {
  LEAVE;
  ETag_struct_enable_form_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_enable_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_enable_form_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_enable_form_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_enable_form_cmd>' expected.");
}

<ROOT_struct_enable_menu_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_enable_menu_cmd"{s} {
  AX_struct_enable_menu_cmd_nm = 0;
  ENTER(AL_struct_enable_menu_cmd); pushbuffer(0);
  }

<AL_struct_enable_menu_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_enable_menu_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_enable_menu_cmd_nm);

 ">" {
  LEAVE; STag_struct_enable_menu_cmd();pcdata_ix = 0; ENTER(S_struct_enable_menu_cmd);
 }
 "/>" {
  LEAVE; STag_struct_enable_menu_cmd(); pcdata_ix = 0; ETag_struct_enable_menu_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_enable_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_enable_menu_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_enable_menu_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_enable_menu_cmd' element.");
}

<E_struct_enable_menu_cmd,S_struct_enable_menu_cmd,S_struct_enable_menu_cmd_2>{
 "</struct_enable_menu_cmd"{s}">" {
  LEAVE;
  ETag_struct_enable_menu_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_enable_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_enable_menu_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_enable_menu_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_enable_menu_cmd>' expected.");
}

<ROOT_struct_error_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_error_cmd"{s} {
  AX_struct_error_cmd_nm = 0;
  AX_struct_error_cmd_wait_for_key = 0;
  ENTER(AL_struct_error_cmd); pushbuffer(0);
  }

<AL_struct_error_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_error_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_error_cmd_nm);

 "wait_for_key"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_error_cmd_wait_for_key);
 "wait_for_key"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_error_cmd_wait_for_key);

 ">" {
  LEAVE; STag_struct_error_cmd();pcdata_ix = 0; ENTER(S_struct_error_cmd);
 }
 "/>" {
  LEAVE; STag_struct_error_cmd(); pcdata_ix = 0; ETag_struct_error_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_error_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_error_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_error_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_error_cmd' element.");
}

<S_struct_error_cmd_2,S_struct_error_cmd,E_struct_error_cmd>{
 "</struct_error_cmd"{s}">" {
  LEAVE;
  ETag_struct_error_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_error_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_error_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_error_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_error_cmd>' expected.");
}

<ROOT_struct_execute_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_execute_cmd"{s} {
  AX_struct_execute_cmd_nm = 0;
  ENTER(AL_struct_execute_cmd); pushbuffer(0);
  }

<AL_struct_execute_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_execute_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_execute_cmd_nm);

 ">" {
  LEAVE; STag_struct_execute_cmd();pcdata_ix = 0; ENTER(S_struct_execute_cmd);
 }
 "/>" {
  LEAVE; STag_struct_execute_cmd(); pcdata_ix = 0; ETag_struct_execute_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_execute_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_execute_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_execute_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_execute_cmd' element.");
}

<E_struct_execute_cmd,S_struct_execute_cmd_2,S_struct_execute_cmd>{
 "</struct_execute_cmd"{s}">" {
  LEAVE;
  ETag_struct_execute_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_execute_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_execute_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_execute_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_execute_cmd>' expected.");
}

<ROOT_struct_execute_immediate_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_execute_immediate_cmd"{s} {
  AX_struct_execute_immediate_cmd_nm = 0;
  ENTER(AL_struct_execute_immediate_cmd); pushbuffer(0);
  }

<AL_struct_execute_immediate_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_execute_immediate_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_execute_immediate_cmd_nm);

 ">" {
  LEAVE; STag_struct_execute_immediate_cmd();pcdata_ix = 0; ENTER(S_struct_execute_immediate_cmd);
 }
 "/>" {
  LEAVE; STag_struct_execute_immediate_cmd(); pcdata_ix = 0; ETag_struct_execute_immediate_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_execute_immediate_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_execute_immediate_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_execute_immediate_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_execute_immediate_cmd' element.");
}

<S_struct_execute_immediate_cmd_2,E_struct_execute_immediate_cmd,S_struct_execute_immediate_cmd>{
 "</struct_execute_immediate_cmd"{s}">" {
  LEAVE;
  ETag_struct_execute_immediate_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_execute_immediate_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_execute_immediate_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_execute_immediate_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_execute_immediate_cmd>' expected.");
}

<ROOT_struct_exit_prog_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_exit_prog_cmd"{s} {
  AX_struct_exit_prog_cmd_nm = 0;
  ENTER(AL_struct_exit_prog_cmd); pushbuffer(0);
  }

<AL_struct_exit_prog_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_exit_prog_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_exit_prog_cmd_nm);

 ">" {
  LEAVE; STag_struct_exit_prog_cmd();pcdata_ix = 0; ENTER(S_struct_exit_prog_cmd);
 }
 "/>" {
  LEAVE; STag_struct_exit_prog_cmd(); pcdata_ix = 0; ETag_struct_exit_prog_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_exit_prog_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_exit_prog_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_exit_prog_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_exit_prog_cmd' element.");
}

<S_struct_exit_prog_cmd,E_struct_exit_prog_cmd,S_struct_exit_prog_cmd_2>{
 "</struct_exit_prog_cmd"{s}">" {
  LEAVE;
  ETag_struct_exit_prog_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_exit_prog_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_exit_prog_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_exit_prog_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_exit_prog_cmd>' expected.");
}

<ROOT_struct_ext_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_ext_cmd"{s} {
  AX_struct_ext_cmd_block_id = 0;
  AX_struct_ext_cmd_nm = 0;
  AX_struct_ext_cmd_what = 0;
  ENTER(AL_struct_ext_cmd); pushbuffer(0);
  }

<AL_struct_ext_cmd>{
 "block_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_ext_cmd_block_id);
 "block_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_ext_cmd_block_id);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_ext_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_ext_cmd_nm);

 "what"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_ext_cmd_what);
 "what"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_ext_cmd_what);

 ">" {
  LEAVE; STag_struct_ext_cmd();pcdata_ix = 0; ENTER(E_struct_ext_cmd);
 }
 "/>" {
  LEAVE; STag_struct_ext_cmd(); pcdata_ix = 0; ETag_struct_ext_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_ext_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_ext_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_ext_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_ext_cmd' element.");
}

<E_struct_ext_cmd>{
 "</struct_ext_cmd"{s}">" {
  LEAVE;
  ETag_struct_ext_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_ext_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_ext_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_ext_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_ext_cmd>' expected.");
}

<ROOT_struct_fetch_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_fetch_cmd"{s} {
  AX_struct_fetch_cmd_nm = 0;
  ENTER(AL_struct_fetch_cmd); pushbuffer(0);
  }

<AL_struct_fetch_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_fetch_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_fetch_cmd_nm);

 ">" {
  LEAVE; STag_struct_fetch_cmd();pcdata_ix = 0; ENTER(S_struct_fetch_cmd);
 }
 "/>" {
  LEAVE; STag_struct_fetch_cmd(); pcdata_ix = 0; ETag_struct_fetch_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_fetch_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_fetch_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_fetch_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_fetch_cmd' element.");
}

<S_struct_fetch_cmd,S_struct_fetch_cmd_2,E_struct_fetch_cmd>{
 "</struct_fetch_cmd"{s}">" {
  LEAVE;
  ETag_struct_fetch_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_fetch_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_fetch_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_fetch_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_fetch_cmd>' expected.");
}

<ROOT_struct_finish_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_finish_cmd"{s} {
  AX_struct_finish_cmd_namespace = 0;
  AX_struct_finish_cmd_nm = 0;
  AX_struct_finish_cmd_repname = 0;
  ENTER(AL_struct_finish_cmd); pushbuffer(0);
  }

<AL_struct_finish_cmd>{
 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_finish_cmd_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_finish_cmd_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_finish_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_finish_cmd_nm);

 "repname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_finish_cmd_repname);
 "repname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_finish_cmd_repname);

 ">" {
  LEAVE; STag_struct_finish_cmd();pcdata_ix = 0; ENTER(S_struct_finish_cmd);
 }
 "/>" {
  LEAVE; STag_struct_finish_cmd(); pcdata_ix = 0; ETag_struct_finish_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_finish_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_finish_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_finish_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_finish_cmd' element.");
}

<S_struct_finish_cmd,S_struct_finish_cmd_2,E_struct_finish_cmd>{
 "</struct_finish_cmd"{s}">" {
  LEAVE;
  ETag_struct_finish_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_finish_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_finish_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_finish_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_finish_cmd>' expected.");
}

<ROOT_struct_flush_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_flush_cmd"{s} {
  AX_struct_flush_cmd_nm = 0;
  ENTER(AL_struct_flush_cmd); pushbuffer(0);
  }

<AL_struct_flush_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_flush_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_flush_cmd_nm);

 ">" {
  LEAVE; STag_struct_flush_cmd();pcdata_ix = 0; ENTER(S_struct_flush_cmd);
 }
 "/>" {
  LEAVE; STag_struct_flush_cmd(); pcdata_ix = 0; ETag_struct_flush_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_flush_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_flush_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_flush_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_flush_cmd' element.");
}

<S_struct_flush_cmd,S_struct_flush_cmd_2,E_struct_flush_cmd>{
 "</struct_flush_cmd"{s}">" {
  LEAVE;
  ETag_struct_flush_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_flush_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_flush_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_flush_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_flush_cmd>' expected.");
}

<ROOT_struct_for_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_for_cmd"{s} {
  AX_struct_for_cmd_block_id = 0;
  AX_struct_for_cmd_nm = 0;
  ENTER(AL_struct_for_cmd); pushbuffer(0);
  }

<AL_struct_for_cmd>{
 "block_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_for_cmd_block_id);
 "block_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_for_cmd_block_id);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_for_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_for_cmd_nm);

 ">" {
  LEAVE; STag_struct_for_cmd();pcdata_ix = 0; ENTER(S_struct_for_cmd);
 }
 "/>" {
  LEAVE; STag_struct_for_cmd(); pcdata_ix = 0; ETag_struct_for_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_for_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_for_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_for_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_for_cmd' element.");
}

<S_struct_for_cmd,E_struct_for_cmd,S_struct_for_cmd_2>{
 "</struct_for_cmd"{s}">" {
  LEAVE;
  ETag_struct_for_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_for_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_for_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_for_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_for_cmd>' expected.");
}

<ROOT_struct_foreach_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_foreach_cmd"{s} {
  AX_struct_foreach_cmd_block_id = 0;
  AX_struct_foreach_cmd_nm = 0;
  ENTER(AL_struct_foreach_cmd); pushbuffer(0);
  }

<AL_struct_foreach_cmd>{
 "block_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_foreach_cmd_block_id);
 "block_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_foreach_cmd_block_id);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_foreach_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_foreach_cmd_nm);

 ">" {
  LEAVE; STag_struct_foreach_cmd();pcdata_ix = 0; ENTER(S_struct_foreach_cmd);
 }
 "/>" {
  LEAVE; STag_struct_foreach_cmd(); pcdata_ix = 0; ETag_struct_foreach_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_foreach_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_foreach_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_foreach_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_foreach_cmd' element.");
}

<E_struct_foreach_cmd,S_struct_foreach_cmd_2,S_struct_foreach_cmd>{
 "</struct_foreach_cmd"{s}">" {
  LEAVE;
  ETag_struct_foreach_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_foreach_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_foreach_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_foreach_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_foreach_cmd>' expected.");
}

<ROOT_struct_free_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_free_cmd"{s} {
  AX_struct_free_cmd_nm = 0;
  ENTER(AL_struct_free_cmd); pushbuffer(0);
  }

<AL_struct_free_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_free_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_free_cmd_nm);

 ">" {
  LEAVE; STag_struct_free_cmd();pcdata_ix = 0; ENTER(S_struct_free_cmd);
 }
 "/>" {
  LEAVE; STag_struct_free_cmd(); pcdata_ix = 0; ETag_struct_free_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_free_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_free_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_free_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_free_cmd' element.");
}

<S_struct_free_cmd,E_struct_free_cmd,S_struct_free_cmd_2>{
 "</struct_free_cmd"{s}">" {
  LEAVE;
  ETag_struct_free_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_free_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_free_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_free_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_free_cmd>' expected.");
}

<ROOT_struct_free_rep_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_free_rep_cmd"{s} {
  AX_struct_free_rep_cmd_namespace = 0;
  AX_struct_free_rep_cmd_nm = 0;
  AX_struct_free_rep_cmd_repname = 0;
  ENTER(AL_struct_free_rep_cmd); pushbuffer(0);
  }

<AL_struct_free_rep_cmd>{
 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_free_rep_cmd_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_free_rep_cmd_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_free_rep_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_free_rep_cmd_nm);

 "repname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_free_rep_cmd_repname);
 "repname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_free_rep_cmd_repname);

 ">" {
  LEAVE; STag_struct_free_rep_cmd();pcdata_ix = 0; ENTER(E_struct_free_rep_cmd);
 }
 "/>" {
  LEAVE; STag_struct_free_rep_cmd(); pcdata_ix = 0; ETag_struct_free_rep_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_free_rep_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_free_rep_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_free_rep_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_free_rep_cmd' element.");
}

<E_struct_free_rep_cmd>{
 "</struct_free_rep_cmd"{s}">" {
  LEAVE;
  ETag_struct_free_rep_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_free_rep_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_free_rep_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_free_rep_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_free_rep_cmd>' expected.");
}

<ROOT_struct_goto_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_goto_cmd"{s} {
  AX_struct_goto_cmd_label = 0;
  AX_struct_goto_cmd_nm = 0;
  ENTER(AL_struct_goto_cmd); pushbuffer(0);
  }

<AL_struct_goto_cmd>{
 "label"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_goto_cmd_label);
 "label"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_goto_cmd_label);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_goto_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_goto_cmd_nm);

 ">" {
  LEAVE; STag_struct_goto_cmd();pcdata_ix = 0; ENTER(E_struct_goto_cmd);
 }
 "/>" {
  LEAVE; STag_struct_goto_cmd(); pcdata_ix = 0; ETag_struct_goto_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_goto_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_goto_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_goto_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_goto_cmd' element.");
}

<E_struct_goto_cmd>{
 "</struct_goto_cmd"{s}">" {
  LEAVE;
  ETag_struct_goto_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_goto_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_goto_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_goto_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_goto_cmd>' expected.");
}

<ROOT_struct_hide_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_hide_cmd"{s} {
  AX_struct_hide_cmd_nm = 0;
  ENTER(AL_struct_hide_cmd); pushbuffer(0);
  }

<AL_struct_hide_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_hide_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_hide_cmd_nm);

 ">" {
  LEAVE; STag_struct_hide_cmd();pcdata_ix = 0; ENTER(S_struct_hide_cmd);
 }
 "/>" {
  LEAVE; STag_struct_hide_cmd(); pcdata_ix = 0; ETag_struct_hide_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_hide_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_hide_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_hide_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_hide_cmd' element.");
}

<S_struct_hide_cmd_2,E_struct_hide_cmd,S_struct_hide_cmd>{
 "</struct_hide_cmd"{s}">" {
  LEAVE;
  ETag_struct_hide_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_hide_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_hide_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_hide_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_hide_cmd>' expected.");
}

<ROOT_struct_hide_option_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_hide_option_cmd"{s} {
  AX_struct_hide_option_cmd_nm = 0;
  ENTER(AL_struct_hide_option_cmd); pushbuffer(0);
  }

<AL_struct_hide_option_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_hide_option_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_hide_option_cmd_nm);

 ">" {
  LEAVE; STag_struct_hide_option_cmd();pcdata_ix = 0; ENTER(S_struct_hide_option_cmd);
 }
 "/>" {
  LEAVE; STag_struct_hide_option_cmd(); pcdata_ix = 0; ETag_struct_hide_option_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_hide_option_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_hide_option_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_hide_option_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_hide_option_cmd' element.");
}

<S_struct_hide_option_cmd_2,E_struct_hide_option_cmd,S_struct_hide_option_cmd>{
 "</struct_hide_option_cmd"{s}">" {
  LEAVE;
  ETag_struct_hide_option_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_hide_option_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_hide_option_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_hide_option_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_hide_option_cmd>' expected.");
}

<ROOT_struct_if_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_if_cmd"{s} {
  AX_struct_if_cmd_else_lineno = 0;
  AX_struct_if_cmd_lineno = 0;
  AX_struct_if_cmd_nm = 0;
  ENTER(AL_struct_if_cmd); pushbuffer(0);
  }

<AL_struct_if_cmd>{
 "else_lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_if_cmd_else_lineno);
 "else_lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_if_cmd_else_lineno);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_if_cmd_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_if_cmd_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_if_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_if_cmd_nm);

 ">" {
  LEAVE; STag_struct_if_cmd();pcdata_ix = 0; ENTER(S_struct_if_cmd);
 }
 "/>" {
  LEAVE; STag_struct_if_cmd(); pcdata_ix = 0; ETag_struct_if_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_if_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_if_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_if_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_if_cmd' element.");
}

<E_struct_if_cmd,S_struct_if_cmd_2,S_struct_if_cmd>{
 "</struct_if_cmd"{s}">" {
  LEAVE;
  ETag_struct_if_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_if_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_if_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_if_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_if_cmd>' expected.");
}

<ROOT_struct_init_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_init_cmd"{s} {
  AX_struct_init_cmd_nm = 0;
  AX_struct_init_cmd_tonull = 0;
  ENTER(AL_struct_init_cmd); pushbuffer(0);
  }

<AL_struct_init_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_init_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_init_cmd_nm);

 "tonull"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_init_cmd_tonull);
 "tonull"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_init_cmd_tonull);

 ">" {
  LEAVE; STag_struct_init_cmd();pcdata_ix = 0; ENTER(S_struct_init_cmd);
 }
 "/>" {
  LEAVE; STag_struct_init_cmd(); pcdata_ix = 0; ETag_struct_init_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_init_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_init_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_init_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_init_cmd' element.");
}

<S_struct_init_cmd_2,S_struct_init_cmd,E_struct_init_cmd>{
 "</struct_init_cmd"{s}">" {
  LEAVE;
  ETag_struct_init_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_init_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_init_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_init_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_init_cmd>' expected.");
}

<ROOT_struct_input_array_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_input_array_cmd"{s} {
  AX_struct_input_array_cmd_blockid = 0;
  AX_struct_input_array_cmd_helpno = 0;
  AX_struct_input_array_cmd_nm = 0;
  AX_struct_input_array_cmd_sio = 0;
  AX_struct_input_array_cmd_slice = 0;
  AX_struct_input_array_cmd_slice_end = 0;
  AX_struct_input_array_cmd_slice_start = 0;
  AX_struct_input_array_cmd_without_defaults = 0;
  ENTER(AL_struct_input_array_cmd); pushbuffer(0);
  }

<AL_struct_input_array_cmd>{
 "blockid"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_blockid);
 "blockid"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_blockid);

 "helpno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_helpno);
 "helpno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_helpno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_nm);

 "sio"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_sio);
 "sio"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_sio);

 "slice"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_slice);
 "slice"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_slice);

 "slice_end"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_slice_end);
 "slice_end"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_slice_end);

 "slice_start"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_slice_start);
 "slice_start"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_slice_start);

 "without_defaults"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_array_cmd_without_defaults);
 "without_defaults"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_array_cmd_without_defaults);

 ">" {
  LEAVE; STag_struct_input_array_cmd();pcdata_ix = 0; ENTER(S_struct_input_array_cmd);
 }
 "/>" {
  LEAVE; STag_struct_input_array_cmd(); pcdata_ix = 0; ETag_struct_input_array_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_input_array_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_input_array_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_input_array_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_input_array_cmd' element.");
}

<E_struct_input_array_cmd,S_struct_input_array_cmd,S_struct_input_array_cmd_2>{
 "</struct_input_array_cmd"{s}">" {
  LEAVE;
  ETag_struct_input_array_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_input_array_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_input_array_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_input_array_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_input_array_cmd>' expected.");
}

<ROOT_struct_input_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_input_cmd"{s} {
  AX_struct_input_cmd_blockid = 0;
  AX_struct_input_cmd_by_name = 0;
  AX_struct_input_cmd_helpno = 0;
  AX_struct_input_cmd_nm = 0;
  AX_struct_input_cmd_sio = 0;
  AX_struct_input_cmd_without_defaults = 0;
  ENTER(AL_struct_input_cmd); pushbuffer(0);
  }

<AL_struct_input_cmd>{
 "blockid"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_cmd_blockid);
 "blockid"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_cmd_blockid);

 "by_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_cmd_by_name);
 "by_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_cmd_by_name);

 "helpno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_cmd_helpno);
 "helpno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_cmd_helpno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_cmd_nm);

 "sio"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_cmd_sio);
 "sio"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_cmd_sio);

 "without_defaults"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_input_cmd_without_defaults);
 "without_defaults"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_input_cmd_without_defaults);

 ">" {
  LEAVE; STag_struct_input_cmd();pcdata_ix = 0; ENTER(S_struct_input_cmd);
 }
 "/>" {
  LEAVE; STag_struct_input_cmd(); pcdata_ix = 0; ETag_struct_input_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_input_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_input_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_input_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_input_cmd' element.");
}

<S_struct_input_cmd,S_struct_input_cmd_2,E_struct_input_cmd>{
 "</struct_input_cmd"{s}">" {
  LEAVE;
  ETag_struct_input_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_input_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_input_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_input_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_input_cmd>' expected.");
}

<ROOT_struct_insert_cmd,S_s_cur_def_2,S_command_data_2,S_s_cur_def,S_command_data,S_s_cur_def_1,S_command_data_1>"<struct_insert_cmd"{s} {
  AX_struct_insert_cmd_nm = 0;
  AX_struct_insert_cmd_table = 0;
  ENTER(AL_struct_insert_cmd); pushbuffer(0);
  }

<AL_struct_insert_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_insert_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_insert_cmd_nm);

 "table"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_insert_cmd_table);
 "table"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_insert_cmd_table);

 ">" {
  LEAVE; STag_struct_insert_cmd();pcdata_ix = 0; ENTER(S_struct_insert_cmd);
 }
 "/>" {
  LEAVE; STag_struct_insert_cmd(); pcdata_ix = 0; ETag_struct_insert_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_cur_def_2: case S_s_cur_def: case S_s_cur_def_1: SET(S_s_cur_def_2); break;
   case ROOT_struct_insert_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_insert_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_insert_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_insert_cmd' element.");
}

<S_struct_insert_cmd_2,E_struct_insert_cmd,S_struct_insert_cmd>{
 "</struct_insert_cmd"{s}">" {
  LEAVE;
  ETag_struct_insert_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_s_cur_def_2: case S_s_cur_def: case S_s_cur_def_1: SET(S_s_cur_def_2); break;
   case ROOT_struct_insert_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_insert_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_insert_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_insert_cmd>' expected.");
}

<ROOT_struct_label_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_label_cmd"{s} {
  AX_struct_label_cmd_label = 0;
  AX_struct_label_cmd_nm = 0;
  ENTER(AL_struct_label_cmd); pushbuffer(0);
  }

<AL_struct_label_cmd>{
 "label"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_label_cmd_label);
 "label"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_label_cmd_label);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_label_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_label_cmd_nm);

 ">" {
  LEAVE; STag_struct_label_cmd();pcdata_ix = 0; ENTER(E_struct_label_cmd);
 }
 "/>" {
  LEAVE; STag_struct_label_cmd(); pcdata_ix = 0; ETag_struct_label_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_label_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_label_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_label_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_label_cmd' element.");
}

<E_struct_label_cmd>{
 "</struct_label_cmd"{s}">" {
  LEAVE;
  ETag_struct_label_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_label_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_label_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_label_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_label_cmd>' expected.");
}

<ROOT_struct_let_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_let_cmd"{s} {
  AX_struct_let_cmd_nm = 0;
  ENTER(AL_struct_let_cmd); pushbuffer(0);
  }

<AL_struct_let_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_let_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_let_cmd_nm);

 ">" {
  LEAVE; STag_struct_let_cmd();pcdata_ix = 0; ENTER(S_struct_let_cmd);
 }
 "/>" {
  LEAVE; STag_struct_let_cmd(); pcdata_ix = 0; ETag_struct_let_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_let_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_let_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_let_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_let_cmd' element.");
}

<S_struct_let_cmd_2,S_struct_let_cmd,E_struct_let_cmd>{
 "</struct_let_cmd"{s}">" {
  LEAVE;
  ETag_struct_let_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_let_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_let_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_let_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_let_cmd>' expected.");
}

<ROOT_struct_lint_expect_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_lint_expect_cmd"{s} {
  AX_struct_lint_expect_cmd_nm = 0;
  ENTER(AL_struct_lint_expect_cmd); pushbuffer(0);
  }

<AL_struct_lint_expect_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_lint_expect_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_lint_expect_cmd_nm);

 ">" {
  LEAVE; STag_struct_lint_expect_cmd();pcdata_ix = 0; ENTER(S_struct_lint_expect_cmd);
 }
 "/>" {
  LEAVE; STag_struct_lint_expect_cmd(); pcdata_ix = 0; ETag_struct_lint_expect_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_lint_expect_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_lint_expect_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_lint_expect_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_lint_expect_cmd' element.");
}

<S_struct_lint_expect_cmd_2,E_struct_lint_expect_cmd,S_struct_lint_expect_cmd>{
 "</struct_lint_expect_cmd"{s}">" {
  LEAVE;
  ETag_struct_lint_expect_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_lint_expect_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_lint_expect_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_lint_expect_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_lint_expect_cmd>' expected.");
}

<ROOT_struct_lint_ignore_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_lint_ignore_cmd"{s} {
  AX_struct_lint_ignore_cmd_nm = 0;
  ENTER(AL_struct_lint_ignore_cmd); pushbuffer(0);
  }

<AL_struct_lint_ignore_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_lint_ignore_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_lint_ignore_cmd_nm);

 ">" {
  LEAVE; STag_struct_lint_ignore_cmd();pcdata_ix = 0; ENTER(S_struct_lint_ignore_cmd);
 }
 "/>" {
  LEAVE; STag_struct_lint_ignore_cmd(); pcdata_ix = 0; ETag_struct_lint_ignore_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_lint_ignore_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_lint_ignore_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_lint_ignore_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_lint_ignore_cmd' element.");
}

<S_struct_lint_ignore_cmd,S_struct_lint_ignore_cmd_2,E_struct_lint_ignore_cmd>{
 "</struct_lint_ignore_cmd"{s}">" {
  LEAVE;
  ETag_struct_lint_ignore_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_lint_ignore_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_lint_ignore_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_lint_ignore_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_lint_ignore_cmd>' expected.");
}

<ROOT_struct_load_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_load_cmd"{s} {
  AX_struct_load_cmd_nm = 0;
  AX_struct_load_cmd_tabname = 0;
  ENTER(AL_struct_load_cmd); pushbuffer(0);
  }

<AL_struct_load_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_load_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_load_cmd_nm);

 "tabname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_load_cmd_tabname);
 "tabname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_load_cmd_tabname);

 ">" {
  LEAVE; STag_struct_load_cmd();pcdata_ix = 0; ENTER(S_struct_load_cmd);
 }
 "/>" {
  LEAVE; STag_struct_load_cmd(); pcdata_ix = 0; ETag_struct_load_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_load_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_load_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_load_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_load_cmd' element.");
}

<S_struct_load_cmd,S_struct_load_cmd_2,E_struct_load_cmd>{
 "</struct_load_cmd"{s}">" {
  LEAVE;
  ETag_struct_load_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_load_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_load_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_load_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_load_cmd>' expected.");
}

<ROOT_struct_locate_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_locate_cmd"{s} {
  AX_struct_locate_cmd_nm = 0;
  ENTER(AL_struct_locate_cmd); pushbuffer(0);
  }

<AL_struct_locate_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_locate_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_locate_cmd_nm);

 ">" {
  LEAVE; STag_struct_locate_cmd();pcdata_ix = 0; ENTER(S_struct_locate_cmd);
 }
 "/>" {
  LEAVE; STag_struct_locate_cmd(); pcdata_ix = 0; ETag_struct_locate_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_locate_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_locate_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_locate_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_locate_cmd' element.");
}

<S_struct_locate_cmd_2,S_struct_locate_cmd,E_struct_locate_cmd>{
 "</struct_locate_cmd"{s}">" {
  LEAVE;
  ETag_struct_locate_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_locate_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_locate_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_locate_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_locate_cmd>' expected.");
}

<ROOT_struct_menu_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_menu_cmd"{s} {
  AX_struct_menu_cmd_blockid = 0;
  AX_struct_menu_cmd_nm = 0;
  AX_struct_menu_cmd_sio = 0;
  ENTER(AL_struct_menu_cmd); pushbuffer(0);
  }

<AL_struct_menu_cmd>{
 "blockid"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_menu_cmd_blockid);
 "blockid"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_menu_cmd_blockid);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_menu_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_menu_cmd_nm);

 "sio"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_menu_cmd_sio);
 "sio"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_menu_cmd_sio);

 ">" {
  LEAVE; STag_struct_menu_cmd();pcdata_ix = 0; ENTER(S_struct_menu_cmd);
 }
 "/>" {
  LEAVE; STag_struct_menu_cmd(); pcdata_ix = 0; ETag_struct_menu_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_menu_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_menu_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_menu_cmd' element.");
}

<S_struct_menu_cmd_2,S_struct_menu_cmd,E_struct_menu_cmd>{
 "</struct_menu_cmd"{s}">" {
  LEAVE;
  ETag_struct_menu_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_menu_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_menu_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_menu_cmd>' expected.");
}

<ROOT_struct_message_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_message_cmd"{s} {
  AX_struct_message_cmd_nm = 0;
  AX_struct_message_cmd_wait = 0;
  ENTER(AL_struct_message_cmd); pushbuffer(0);
  }

<AL_struct_message_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_message_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_message_cmd_nm);

 "wait"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_message_cmd_wait);
 "wait"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_message_cmd_wait);

 ">" {
  LEAVE; STag_struct_message_cmd();pcdata_ix = 0; ENTER(S_struct_message_cmd);
 }
 "/>" {
  LEAVE; STag_struct_message_cmd(); pcdata_ix = 0; ETag_struct_message_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_message_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_message_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_message_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_message_cmd' element.");
}

<S_struct_message_cmd,S_struct_message_cmd_2,E_struct_message_cmd>{
 "</struct_message_cmd"{s}">" {
  LEAVE;
  ETag_struct_message_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_message_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_message_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_message_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_message_cmd>' expected.");
}

<ROOT_struct_move_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_move_cmd"{s} {
  AX_struct_move_cmd_nm = 0;
  AX_struct_move_cmd_relative = 0;
  ENTER(AL_struct_move_cmd); pushbuffer(0);
  }

<AL_struct_move_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_move_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_move_cmd_nm);

 "relative"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_move_cmd_relative);
 "relative"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_move_cmd_relative);

 ">" {
  LEAVE; STag_struct_move_cmd();pcdata_ix = 0; ENTER(S_struct_move_cmd);
 }
 "/>" {
  LEAVE; STag_struct_move_cmd(); pcdata_ix = 0; ETag_struct_move_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_move_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_move_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_move_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_move_cmd' element.");
}

<S_struct_move_cmd,S_struct_move_cmd_2,E_struct_move_cmd>{
 "</struct_move_cmd"{s}">" {
  LEAVE;
  ETag_struct_move_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_move_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_move_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_move_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_move_cmd>' expected.");
}

<ROOT_struct_msg_box_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_msg_box_cmd"{s} {
  AX_struct_msg_box_cmd_buttons = 0;
  AX_struct_msg_box_cmd_default_button = 0;
  AX_struct_msg_box_cmd_disable = 0;
  AX_struct_msg_box_cmd_icon = 0;
  AX_struct_msg_box_cmd_nm = 0;
  ENTER(AL_struct_msg_box_cmd); pushbuffer(0);
  }

<AL_struct_msg_box_cmd>{
 "buttons"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_msg_box_cmd_buttons);
 "buttons"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_msg_box_cmd_buttons);

 "default_button"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_msg_box_cmd_default_button);
 "default_button"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_msg_box_cmd_default_button);

 "disable"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_msg_box_cmd_disable);
 "disable"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_msg_box_cmd_disable);

 "icon"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_msg_box_cmd_icon);
 "icon"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_msg_box_cmd_icon);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_msg_box_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_msg_box_cmd_nm);

 ">" {
  LEAVE; STag_struct_msg_box_cmd();pcdata_ix = 0; ENTER(S_struct_msg_box_cmd);
 }
 "/>" {
  LEAVE; STag_struct_msg_box_cmd(); pcdata_ix = 0; ETag_struct_msg_box_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_msg_box_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_msg_box_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_msg_box_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_msg_box_cmd' element.");
}

<S_struct_msg_box_cmd,S_struct_msg_box_cmd_2,E_struct_msg_box_cmd>{
 "</struct_msg_box_cmd"{s}">" {
  LEAVE;
  ETag_struct_msg_box_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_msg_box_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_msg_box_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_msg_box_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_msg_box_cmd>' expected.");
}

<ROOT_struct_need_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_need_cmd"{s} {
  AX_struct_need_cmd_nm = 0;
  ENTER(AL_struct_need_cmd); pushbuffer(0);
  }

<AL_struct_need_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_need_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_need_cmd_nm);

 ">" {
  LEAVE; STag_struct_need_cmd();pcdata_ix = 0; ENTER(S_struct_need_cmd);
 }
 "/>" {
  LEAVE; STag_struct_need_cmd(); pcdata_ix = 0; ETag_struct_need_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_need_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_need_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_need_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_need_cmd' element.");
}

<S_struct_need_cmd,E_struct_need_cmd,S_struct_need_cmd_2>{
 "</struct_need_cmd"{s}">" {
  LEAVE;
  ETag_struct_need_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_need_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_need_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_need_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_need_cmd>' expected.");
}

<ROOT_struct_next_field_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_next_field_cmd"{s} {
  AX_struct_next_field_cmd_nm = 0;
  AX_struct_next_field_cmd_rel = 0;
  AX_struct_next_field_cmd_sio = 0;
  ENTER(AL_struct_next_field_cmd); pushbuffer(0);
  }

<AL_struct_next_field_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_next_field_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_next_field_cmd_nm);

 "rel"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_next_field_cmd_rel);
 "rel"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_next_field_cmd_rel);

 "sio"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_next_field_cmd_sio);
 "sio"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_next_field_cmd_sio);

 ">" {
  LEAVE; STag_struct_next_field_cmd();pcdata_ix = 0; ENTER(S_struct_next_field_cmd);
 }
 "/>" {
  LEAVE; STag_struct_next_field_cmd(); pcdata_ix = 0; ETag_struct_next_field_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_next_field_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_next_field_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_next_field_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_next_field_cmd' element.");
}

<S_struct_next_field_cmd,E_struct_next_field_cmd,S_struct_next_field_cmd_2>{
 "</struct_next_field_cmd"{s}">" {
  LEAVE;
  ETag_struct_next_field_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_next_field_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_next_field_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_next_field_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_next_field_cmd>' expected.");
}

<ROOT_struct_next_form_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_next_form_cmd"{s} {
  AX_struct_next_form_cmd_field = 0;
  AX_struct_next_form_cmd_form = 0;
  AX_struct_next_form_cmd_nm = 0;
  ENTER(AL_struct_next_form_cmd); pushbuffer(0);
  }

<AL_struct_next_form_cmd>{
 "field"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_next_form_cmd_field);
 "field"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_next_form_cmd_field);

 "form"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_next_form_cmd_form);
 "form"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_next_form_cmd_form);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_next_form_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_next_form_cmd_nm);

 ">" {
  LEAVE; STag_struct_next_form_cmd();pcdata_ix = 0; ENTER(E_struct_next_form_cmd);
 }
 "/>" {
  LEAVE; STag_struct_next_form_cmd(); pcdata_ix = 0; ETag_struct_next_form_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_next_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_next_form_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_next_form_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_next_form_cmd' element.");
}

<E_struct_next_form_cmd>{
 "</struct_next_form_cmd"{s}">" {
  LEAVE;
  ETag_struct_next_form_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_next_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_next_form_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_next_form_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_next_form_cmd>' expected.");
}

<ROOT_struct_next_option_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_next_option_cmd"{s} {
  AX_struct_next_option_cmd_nm = 0;
  ENTER(AL_struct_next_option_cmd); pushbuffer(0);
  }

<AL_struct_next_option_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_next_option_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_next_option_cmd_nm);

 ">" {
  LEAVE; STag_struct_next_option_cmd();pcdata_ix = 0; ENTER(S_struct_next_option_cmd);
 }
 "/>" {
  LEAVE; STag_struct_next_option_cmd(); pcdata_ix = 0; ETag_struct_next_option_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_next_option_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_next_option_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_next_option_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_next_option_cmd' element.");
}

<S_struct_next_option_cmd_2,E_struct_next_option_cmd,S_struct_next_option_cmd>{
 "</struct_next_option_cmd"{s}">" {
  LEAVE;
  ETag_struct_next_option_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_next_option_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_next_option_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_next_option_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_next_option_cmd>' expected.");
}

<ROOT_struct_open_cursor_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_open_cursor_cmd"{s} {
  AX_struct_open_cursor_cmd_cursor_type = 0;
  AX_struct_open_cursor_cmd_nm = 0;
  ENTER(AL_struct_open_cursor_cmd); pushbuffer(0);
  }

<AL_struct_open_cursor_cmd>{
 "cursor_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_cursor_cmd_cursor_type);
 "cursor_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_cursor_cmd_cursor_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_cursor_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_cursor_cmd_nm);

 ">" {
  LEAVE; STag_struct_open_cursor_cmd();pcdata_ix = 0; ENTER(S_struct_open_cursor_cmd);
 }
 "/>" {
  LEAVE; STag_struct_open_cursor_cmd(); pcdata_ix = 0; ETag_struct_open_cursor_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_cursor_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_open_cursor_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_open_cursor_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_open_cursor_cmd' element.");
}

<S_struct_open_cursor_cmd,S_struct_open_cursor_cmd_2,E_struct_open_cursor_cmd>{
 "</struct_open_cursor_cmd"{s}">" {
  LEAVE;
  ETag_struct_open_cursor_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_cursor_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_open_cursor_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_open_cursor_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_open_cursor_cmd>' expected.");
}

<ROOT_struct_open_form_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_open_form_cmd"{s} {
  AX_struct_open_form_cmd_nm = 0;
  ENTER(AL_struct_open_form_cmd); pushbuffer(0);
  }

<AL_struct_open_form_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_form_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_form_cmd_nm);

 ">" {
  LEAVE; STag_struct_open_form_cmd();pcdata_ix = 0; ENTER(S_struct_open_form_cmd);
 }
 "/>" {
  LEAVE; STag_struct_open_form_cmd(); pcdata_ix = 0; ETag_struct_open_form_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_open_form_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_open_form_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_open_form_cmd' element.");
}

<S_struct_open_form_cmd_2,S_struct_open_form_cmd,E_struct_open_form_cmd>{
 "</struct_open_form_cmd"{s}">" {
  LEAVE;
  ETag_struct_open_form_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_form_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_open_form_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_open_form_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_open_form_cmd>' expected.");
}

<ROOT_struct_open_form_gui_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_open_form_gui_cmd"{s} {
  AX_struct_open_form_gui_cmd_disable = 0;
  AX_struct_open_form_gui_cmd_formhandler = 0;
  AX_struct_open_form_gui_cmd_nm = 0;
  ENTER(AL_struct_open_form_gui_cmd); pushbuffer(0);
  }

<AL_struct_open_form_gui_cmd>{
 "disable"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_form_gui_cmd_disable);
 "disable"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_form_gui_cmd_disable);

 "formhandler"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_form_gui_cmd_formhandler);
 "formhandler"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_form_gui_cmd_formhandler);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_form_gui_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_form_gui_cmd_nm);

 ">" {
  LEAVE; STag_struct_open_form_gui_cmd();pcdata_ix = 0; ENTER(S_struct_open_form_gui_cmd);
 }
 "/>" {
  LEAVE; STag_struct_open_form_gui_cmd(); pcdata_ix = 0; ETag_struct_open_form_gui_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_form_gui_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_open_form_gui_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_open_form_gui_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_open_form_gui_cmd' element.");
}

<E_struct_open_form_gui_cmd,S_struct_open_form_gui_cmd_2,S_struct_open_form_gui_cmd>{
 "</struct_open_form_gui_cmd"{s}">" {
  LEAVE;
  ETag_struct_open_form_gui_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_form_gui_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_open_form_gui_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_open_form_gui_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_open_form_gui_cmd>' expected.");
}

<ROOT_struct_open_statusbox_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_open_statusbox_cmd"{s} {
  AX_struct_open_statusbox_cmd_name = 0;
  AX_struct_open_statusbox_cmd_nm = 0;
  ENTER(AL_struct_open_statusbox_cmd); pushbuffer(0);
  }

<AL_struct_open_statusbox_cmd>{
 "name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_statusbox_cmd_name);
 "name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_statusbox_cmd_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_statusbox_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_statusbox_cmd_nm);

 ">" {
  LEAVE; STag_struct_open_statusbox_cmd();pcdata_ix = 0; ENTER(S_struct_open_statusbox_cmd);
 }
 "/>" {
  LEAVE; STag_struct_open_statusbox_cmd(); pcdata_ix = 0; ETag_struct_open_statusbox_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_statusbox_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_open_statusbox_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_open_statusbox_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_open_statusbox_cmd' element.");
}

<S_struct_open_statusbox_cmd_2,E_struct_open_statusbox_cmd,S_struct_open_statusbox_cmd>{
 "</struct_open_statusbox_cmd"{s}">" {
  LEAVE;
  ETag_struct_open_statusbox_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_statusbox_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_open_statusbox_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_open_statusbox_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_open_statusbox_cmd>' expected.");
}

<ROOT_struct_open_window_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_open_window_cmd"{s} {
  AX_struct_open_window_cmd_nm = 0;
  ENTER(AL_struct_open_window_cmd); pushbuffer(0);
  }

<AL_struct_open_window_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_open_window_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_open_window_cmd_nm);

 ">" {
  LEAVE; STag_struct_open_window_cmd();pcdata_ix = 0; ENTER(S_struct_open_window_cmd);
 }
 "/>" {
  LEAVE; STag_struct_open_window_cmd(); pcdata_ix = 0; ETag_struct_open_window_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_window_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_open_window_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_open_window_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_open_window_cmd' element.");
}

<S_struct_open_window_cmd,S_struct_open_window_cmd_2,E_struct_open_window_cmd>{
 "</struct_open_window_cmd"{s}">" {
  LEAVE;
  ETag_struct_open_window_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_open_window_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_open_window_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_open_window_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_open_window_cmd>' expected.");
}

<ROOT_struct_options_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_options_cmd"{s} {
  AX_struct_options_cmd_nm = 0;
  ENTER(AL_struct_options_cmd); pushbuffer(0);
  }

<AL_struct_options_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_options_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_options_cmd_nm);

 ">" {
  LEAVE; STag_struct_options_cmd();pcdata_ix = 0; ENTER(S_struct_options_cmd);
 }
 "/>" {
  LEAVE; STag_struct_options_cmd(); pcdata_ix = 0; ETag_struct_options_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_options_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_options_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_options_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_options_cmd' element.");
}

<E_struct_options_cmd,S_struct_options_cmd_2,S_struct_options_cmd>{
 "</struct_options_cmd"{s}">" {
  LEAVE;
  ETag_struct_options_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_options_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_options_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_options_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_options_cmd>' expected.");
}

<ROOT_struct_output_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_output_cmd"{s} {
  AX_struct_output_cmd_namespace = 0;
  AX_struct_output_cmd_nm = 0;
  AX_struct_output_cmd_repname = 0;
  ENTER(AL_struct_output_cmd); pushbuffer(0);
  }

<AL_struct_output_cmd>{
 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_output_cmd_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_output_cmd_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_output_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_output_cmd_nm);

 "repname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_output_cmd_repname);
 "repname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_output_cmd_repname);

 ">" {
  LEAVE; STag_struct_output_cmd();pcdata_ix = 0; ENTER(S_struct_output_cmd);
 }
 "/>" {
  LEAVE; STag_struct_output_cmd(); pcdata_ix = 0; ETag_struct_output_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_output_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_output_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_output_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_output_cmd' element.");
}

<S_struct_output_cmd,S_struct_output_cmd_2,E_struct_output_cmd>{
 "</struct_output_cmd"{s}">" {
  LEAVE;
  ETag_struct_output_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_output_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_output_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_output_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_output_cmd>' expected.");
}

<ROOT_struct_pause_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_pause_cmd"{s} {
  AX_struct_pause_cmd_nm = 0;
  ENTER(AL_struct_pause_cmd); pushbuffer(0);
  }

<AL_struct_pause_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_pause_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_pause_cmd_nm);

 ">" {
  LEAVE; STag_struct_pause_cmd();pcdata_ix = 0; ENTER(S_struct_pause_cmd);
 }
 "/>" {
  LEAVE; STag_struct_pause_cmd(); pcdata_ix = 0; ETag_struct_pause_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_pause_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_pause_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_pause_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_pause_cmd' element.");
}

<S_struct_pause_cmd_2,S_struct_pause_cmd,E_struct_pause_cmd>{
 "</struct_pause_cmd"{s}">" {
  LEAVE;
  ETag_struct_pause_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_pause_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_pause_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_pause_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_pause_cmd>' expected.");
}

<ROOT_struct_pdf_call_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_pdf_call_cmd"{s} {
  AX_struct_pdf_call_cmd_nm = 0;
  ENTER(AL_struct_pdf_call_cmd); pushbuffer(0);
  }

<AL_struct_pdf_call_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_pdf_call_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_pdf_call_cmd_nm);

 ">" {
  LEAVE; STag_struct_pdf_call_cmd();pcdata_ix = 0; ENTER(S_struct_pdf_call_cmd);
 }
 "/>" {
  LEAVE; STag_struct_pdf_call_cmd(); pcdata_ix = 0; ETag_struct_pdf_call_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_pdf_call_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_pdf_call_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_pdf_call_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_pdf_call_cmd' element.");
}

<E_struct_pdf_call_cmd,S_struct_pdf_call_cmd,S_struct_pdf_call_cmd_2>{
 "</struct_pdf_call_cmd"{s}">" {
  LEAVE;
  ETag_struct_pdf_call_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_pdf_call_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_pdf_call_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_pdf_call_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_pdf_call_cmd>' expected.");
}

<ROOT_struct_prepare_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_prepare_cmd"{s} {
  AX_struct_prepare_cmd_nm = 0;
  ENTER(AL_struct_prepare_cmd); pushbuffer(0);
  }

<AL_struct_prepare_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_prepare_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_prepare_cmd_nm);

 ">" {
  LEAVE; STag_struct_prepare_cmd();pcdata_ix = 0; ENTER(S_struct_prepare_cmd);
 }
 "/>" {
  LEAVE; STag_struct_prepare_cmd(); pcdata_ix = 0; ETag_struct_prepare_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_prepare_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_prepare_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_prepare_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_prepare_cmd' element.");
}

<S_struct_prepare_cmd,S_struct_prepare_cmd_2,E_struct_prepare_cmd>{
 "</struct_prepare_cmd"{s}">" {
  LEAVE;
  ETag_struct_prepare_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_prepare_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_prepare_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_prepare_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_prepare_cmd>' expected.");
}

<ROOT_struct_print_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_print_cmd"{s} {
  AX_struct_print_cmd_nm = 0;
  AX_struct_print_cmd_semi = 0;
  ENTER(AL_struct_print_cmd); pushbuffer(0);
  }

<AL_struct_print_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_print_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_print_cmd_nm);

 "semi"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_print_cmd_semi);
 "semi"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_print_cmd_semi);

 ">" {
  LEAVE; STag_struct_print_cmd();pcdata_ix = 0; ENTER(S_struct_print_cmd);
 }
 "/>" {
  LEAVE; STag_struct_print_cmd(); pcdata_ix = 0; ETag_struct_print_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_print_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_print_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_print_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_print_cmd' element.");
}

<S_struct_print_cmd,S_struct_print_cmd_2,E_struct_print_cmd>{
 "</struct_print_cmd"{s}">" {
  LEAVE;
  ETag_struct_print_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_print_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_print_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_print_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_print_cmd>' expected.");
}

<ROOT_struct_print_file_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_print_file_cmd"{s} {
  AX_struct_print_file_cmd_nm = 0;
  AX_struct_print_file_cmd_semi = 0;
  ENTER(AL_struct_print_file_cmd); pushbuffer(0);
  }

<AL_struct_print_file_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_print_file_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_print_file_cmd_nm);

 "semi"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_print_file_cmd_semi);
 "semi"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_print_file_cmd_semi);

 ">" {
  LEAVE; STag_struct_print_file_cmd();pcdata_ix = 0; ENTER(S_struct_print_file_cmd);
 }
 "/>" {
  LEAVE; STag_struct_print_file_cmd(); pcdata_ix = 0; ETag_struct_print_file_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_print_file_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_print_file_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_print_file_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_print_file_cmd' element.");
}

<E_struct_print_file_cmd,S_struct_print_file_cmd,S_struct_print_file_cmd_2>{
 "</struct_print_file_cmd"{s}">" {
  LEAVE;
  ETag_struct_print_file_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_print_file_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_print_file_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_print_file_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_print_file_cmd>' expected.");
}

<ROOT_struct_print_img_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_print_img_cmd"{s} {
  AX_struct_print_img_cmd_img_type = 0;
  AX_struct_print_img_cmd_nm = 0;
  AX_struct_print_img_cmd_semi = 0;
  ENTER(AL_struct_print_img_cmd); pushbuffer(0);
  }

<AL_struct_print_img_cmd>{
 "img_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_print_img_cmd_img_type);
 "img_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_print_img_cmd_img_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_print_img_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_print_img_cmd_nm);

 "semi"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_print_img_cmd_semi);
 "semi"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_print_img_cmd_semi);

 ">" {
  LEAVE; STag_struct_print_img_cmd();pcdata_ix = 0; ENTER(S_struct_print_img_cmd);
 }
 "/>" {
  LEAVE; STag_struct_print_img_cmd(); pcdata_ix = 0; ETag_struct_print_img_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_print_img_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_print_img_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_print_img_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_print_img_cmd' element.");
}

<S_struct_print_img_cmd,E_struct_print_img_cmd,S_struct_print_img_cmd_2>{
 "</struct_print_img_cmd"{s}">" {
  LEAVE;
  ETag_struct_print_img_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_print_img_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_print_img_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_print_img_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_print_img_cmd>' expected.");
}

<ROOT_struct_prompt_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_prompt_cmd"{s} {
  AX_struct_prompt_cmd_blockid = 0;
  AX_struct_prompt_cmd_for_char = 0;
  AX_struct_prompt_cmd_helpno = 0;
  AX_struct_prompt_cmd_nm = 0;
  AX_struct_prompt_cmd_sio = 0;
  ENTER(AL_struct_prompt_cmd); pushbuffer(0);
  }

<AL_struct_prompt_cmd>{
 "blockid"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_prompt_cmd_blockid);
 "blockid"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_prompt_cmd_blockid);

 "for_char"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_prompt_cmd_for_char);
 "for_char"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_prompt_cmd_for_char);

 "helpno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_prompt_cmd_helpno);
 "helpno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_prompt_cmd_helpno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_prompt_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_prompt_cmd_nm);

 "sio"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_prompt_cmd_sio);
 "sio"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_prompt_cmd_sio);

 ">" {
  LEAVE; STag_struct_prompt_cmd();pcdata_ix = 0; ENTER(S_struct_prompt_cmd);
 }
 "/>" {
  LEAVE; STag_struct_prompt_cmd(); pcdata_ix = 0; ETag_struct_prompt_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_prompt_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_prompt_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_prompt_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_prompt_cmd' element.");
}

<S_struct_prompt_cmd,E_struct_prompt_cmd,S_struct_prompt_cmd_2>{
 "</struct_prompt_cmd"{s}">" {
  LEAVE;
  ETag_struct_prompt_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_prompt_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_prompt_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_prompt_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_prompt_cmd>' expected.");
}

<ROOT_struct_put_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_put_cmd"{s} {
  AX_struct_put_cmd_nm = 0;
  ENTER(AL_struct_put_cmd); pushbuffer(0);
  }

<AL_struct_put_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_put_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_put_cmd_nm);

 ">" {
  LEAVE; STag_struct_put_cmd();pcdata_ix = 0; ENTER(S_struct_put_cmd);
 }
 "/>" {
  LEAVE; STag_struct_put_cmd(); pcdata_ix = 0; ETag_struct_put_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_put_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_put_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_put_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_put_cmd' element.");
}

<S_struct_put_cmd,S_struct_put_cmd_2,E_struct_put_cmd>{
 "</struct_put_cmd"{s}">" {
  LEAVE;
  ETag_struct_put_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_put_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_put_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_put_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_put_cmd>' expected.");
}

<ROOT_struct_resize_arr_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_resize_arr_cmd"{s} {
  AX_struct_resize_arr_cmd_nm = 0;
  ENTER(AL_struct_resize_arr_cmd); pushbuffer(0);
  }

<AL_struct_resize_arr_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_resize_arr_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_resize_arr_cmd_nm);

 ">" {
  LEAVE; STag_struct_resize_arr_cmd();pcdata_ix = 0; ENTER(S_struct_resize_arr_cmd);
 }
 "/>" {
  LEAVE; STag_struct_resize_arr_cmd(); pcdata_ix = 0; ETag_struct_resize_arr_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_resize_arr_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_resize_arr_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_resize_arr_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_resize_arr_cmd' element.");
}

<S_struct_resize_arr_cmd_2,E_struct_resize_arr_cmd,S_struct_resize_arr_cmd>{
 "</struct_resize_arr_cmd"{s}">" {
  LEAVE;
  ETag_struct_resize_arr_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_resize_arr_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_resize_arr_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_resize_arr_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_resize_arr_cmd>' expected.");
}

<ROOT_struct_return_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_return_cmd"{s} {
  AX_struct_return_cmd_nm = 0;
  AX_struct_return_cmd_with_resume = 0;
  ENTER(AL_struct_return_cmd); pushbuffer(0);
  }

<AL_struct_return_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_return_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_return_cmd_nm);

 "with_resume"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_return_cmd_with_resume);
 "with_resume"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_return_cmd_with_resume);

 ">" {
  LEAVE; STag_struct_return_cmd();pcdata_ix = 0; ENTER(S_struct_return_cmd);
 }
 "/>" {
  LEAVE; STag_struct_return_cmd(); pcdata_ix = 0; ETag_struct_return_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_return_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_return_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_return_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_return_cmd' element.");
}

<S_struct_return_cmd,E_struct_return_cmd,S_struct_return_cmd_2>{
 "</struct_return_cmd"{s}">" {
  LEAVE;
  ETag_struct_return_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_return_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_return_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_return_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_return_cmd>' expected.");
}

<ROOT_struct_run_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_run_cmd"{s} {
  AX_struct_run_cmd_nm = 0;
  AX_struct_run_cmd_run_mode = 0;
  AX_struct_run_cmd_wait = 0;
  ENTER(AL_struct_run_cmd); pushbuffer(0);
  }

<AL_struct_run_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_run_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_run_cmd_nm);

 "run_mode"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_run_cmd_run_mode);
 "run_mode"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_run_cmd_run_mode);

 "wait"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_run_cmd_wait);
 "wait"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_run_cmd_wait);

 ">" {
  LEAVE; STag_struct_run_cmd();pcdata_ix = 0; ENTER(S_struct_run_cmd);
 }
 "/>" {
  LEAVE; STag_struct_run_cmd(); pcdata_ix = 0; ETag_struct_run_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_run_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_run_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_run_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_run_cmd' element.");
}

<E_struct_run_cmd,S_struct_run_cmd,S_struct_run_cmd_2>{
 "</struct_run_cmd"{s}">" {
  LEAVE;
  ETag_struct_run_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_run_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_run_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_run_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_run_cmd>' expected.");
}

<ROOT_struct_run_waiting_for_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_run_waiting_for_cmd"{s} {
  AX_struct_run_waiting_for_cmd_msg_type = 0;
  AX_struct_run_waiting_for_cmd_nm = 0;
  ENTER(AL_struct_run_waiting_for_cmd); pushbuffer(0);
  }

<AL_struct_run_waiting_for_cmd>{
 "msg_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_run_waiting_for_cmd_msg_type);
 "msg_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_run_waiting_for_cmd_msg_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_run_waiting_for_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_run_waiting_for_cmd_nm);

 ">" {
  LEAVE; STag_struct_run_waiting_for_cmd();pcdata_ix = 0; ENTER(S_struct_run_waiting_for_cmd);
 }
 "/>" {
  LEAVE; STag_struct_run_waiting_for_cmd(); pcdata_ix = 0; ETag_struct_run_waiting_for_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_run_waiting_for_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_run_waiting_for_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_run_waiting_for_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_run_waiting_for_cmd' element.");
}

<E_struct_run_waiting_for_cmd,S_struct_run_waiting_for_cmd,S_struct_run_waiting_for_cmd_2>{
 "</struct_run_waiting_for_cmd"{s}">" {
  LEAVE;
  ETag_struct_run_waiting_for_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_run_waiting_for_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_run_waiting_for_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_run_waiting_for_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_run_waiting_for_cmd>' expected.");
}

<ROOT_struct_scroll_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_scroll_cmd"{s} {
  AX_struct_scroll_cmd_nm = 0;
  ENTER(AL_struct_scroll_cmd); pushbuffer(0);
  }

<AL_struct_scroll_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_scroll_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_scroll_cmd_nm);

 ">" {
  LEAVE; STag_struct_scroll_cmd();pcdata_ix = 0; ENTER(S_struct_scroll_cmd);
 }
 "/>" {
  LEAVE; STag_struct_scroll_cmd(); pcdata_ix = 0; ETag_struct_scroll_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_scroll_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_scroll_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_scroll_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_scroll_cmd' element.");
}

<S_struct_scroll_cmd_2,S_struct_scroll_cmd,E_struct_scroll_cmd>{
 "</struct_scroll_cmd"{s}">" {
  LEAVE;
  ETag_struct_scroll_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_scroll_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_scroll_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_scroll_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_scroll_cmd>' expected.");
}

<ROOT_struct_select_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_select_cmd"{s} {
  AX_struct_select_cmd_forupdate = 0;
  AX_struct_select_cmd_nm = 0;
  ENTER(AL_struct_select_cmd); pushbuffer(0);
  }

<AL_struct_select_cmd>{
 "forupdate"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_select_cmd_forupdate);
 "forupdate"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_select_cmd_forupdate);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_select_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_select_cmd_nm);

 ">" {
  LEAVE; STag_struct_select_cmd();pcdata_ix = 0; ENTER(S_struct_select_cmd);
 }
 "/>" {
  LEAVE; STag_struct_select_cmd(); pcdata_ix = 0; ETag_struct_select_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_select_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_select_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_select_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_select_cmd' element.");
}

<S_struct_select_cmd,E_struct_select_cmd,S_struct_select_cmd_2>{
 "</struct_select_cmd"{s}">" {
  LEAVE;
  ETag_struct_select_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_select_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_select_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_select_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_select_cmd>' expected.");
}

<ROOT_struct_set_database_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_set_database_cmd"{s} {
  AX_struct_set_database_cmd_exclusive_mode = 0;
  AX_struct_set_database_cmd_nm = 0;
  ENTER(AL_struct_set_database_cmd); pushbuffer(0);
  }

<AL_struct_set_database_cmd>{
 "exclusive_mode"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_set_database_cmd_exclusive_mode);
 "exclusive_mode"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_set_database_cmd_exclusive_mode);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_set_database_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_set_database_cmd_nm);

 ">" {
  LEAVE; STag_struct_set_database_cmd();pcdata_ix = 0; ENTER(S_struct_set_database_cmd);
 }
 "/>" {
  LEAVE; STag_struct_set_database_cmd(); pcdata_ix = 0; ETag_struct_set_database_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_set_database_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_set_database_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_set_database_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_set_database_cmd' element.");
}

<S_struct_set_database_cmd_2,S_struct_set_database_cmd,E_struct_set_database_cmd>{
 "</struct_set_database_cmd"{s}">" {
  LEAVE;
  ETag_struct_set_database_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_set_database_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_set_database_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_set_database_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_set_database_cmd>' expected.");
}

<ROOT_struct_set_session_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_set_session_cmd"{s} {
  AX_struct_set_session_cmd_nm = 0;
  AX_struct_set_session_cmd_session_type = 0;
  ENTER(AL_struct_set_session_cmd); pushbuffer(0);
  }

<AL_struct_set_session_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_set_session_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_set_session_cmd_nm);

 "session_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_set_session_cmd_session_type);
 "session_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_set_session_cmd_session_type);

 ">" {
  LEAVE; STag_struct_set_session_cmd();pcdata_ix = 0; ENTER(S_struct_set_session_cmd);
 }
 "/>" {
  LEAVE; STag_struct_set_session_cmd(); pcdata_ix = 0; ETag_struct_set_session_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_set_session_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_set_session_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_set_session_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_set_session_cmd' element.");
}

<S_struct_set_session_cmd_2,E_struct_set_session_cmd,S_struct_set_session_cmd>{
 "</struct_set_session_cmd"{s}">" {
  LEAVE;
  ETag_struct_set_session_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_set_session_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_set_session_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_set_session_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_set_session_cmd>' expected.");
}

<ROOT_struct_show_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_show_cmd"{s} {
  AX_struct_show_cmd_nm = 0;
  ENTER(AL_struct_show_cmd); pushbuffer(0);
  }

<AL_struct_show_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_show_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_show_cmd_nm);

 ">" {
  LEAVE; STag_struct_show_cmd();pcdata_ix = 0; ENTER(S_struct_show_cmd);
 }
 "/>" {
  LEAVE; STag_struct_show_cmd(); pcdata_ix = 0; ETag_struct_show_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_show_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_show_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_show_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_show_cmd' element.");
}

<S_struct_show_cmd,E_struct_show_cmd,S_struct_show_cmd_2>{
 "</struct_show_cmd"{s}">" {
  LEAVE;
  ETag_struct_show_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_show_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_show_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_show_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_show_cmd>' expected.");
}

<ROOT_struct_show_menu_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_show_menu_cmd"{s} {
  AX_struct_show_menu_cmd_menuhandler = 0;
  AX_struct_show_menu_cmd_menuname = 0;
  AX_struct_show_menu_cmd_nm = 0;
  ENTER(AL_struct_show_menu_cmd); pushbuffer(0);
  }

<AL_struct_show_menu_cmd>{
 "menuhandler"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_show_menu_cmd_menuhandler);
 "menuhandler"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_show_menu_cmd_menuhandler);

 "menuname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_show_menu_cmd_menuname);
 "menuname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_show_menu_cmd_menuname);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_show_menu_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_show_menu_cmd_nm);

 ">" {
  LEAVE; STag_struct_show_menu_cmd();pcdata_ix = 0; ENTER(S_struct_show_menu_cmd);
 }
 "/>" {
  LEAVE; STag_struct_show_menu_cmd(); pcdata_ix = 0; ETag_struct_show_menu_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_show_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_show_menu_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_show_menu_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_show_menu_cmd' element.");
}

<S_struct_show_menu_cmd_2,E_struct_show_menu_cmd,S_struct_show_menu_cmd>{
 "</struct_show_menu_cmd"{s}">" {
  LEAVE;
  ETag_struct_show_menu_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_show_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_show_menu_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_show_menu_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_show_menu_cmd>' expected.");
}

<ROOT_struct_show_option_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_show_option_cmd"{s} {
  AX_struct_show_option_cmd_nm = 0;
  ENTER(AL_struct_show_option_cmd); pushbuffer(0);
  }

<AL_struct_show_option_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_show_option_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_show_option_cmd_nm);

 ">" {
  LEAVE; STag_struct_show_option_cmd();pcdata_ix = 0; ENTER(S_struct_show_option_cmd);
 }
 "/>" {
  LEAVE; STag_struct_show_option_cmd(); pcdata_ix = 0; ETag_struct_show_option_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_show_option_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_show_option_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_show_option_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_show_option_cmd' element.");
}

<E_struct_show_option_cmd,S_struct_show_option_cmd_2,S_struct_show_option_cmd>{
 "</struct_show_option_cmd"{s}">" {
  LEAVE;
  ETag_struct_show_option_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_show_option_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_show_option_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_show_option_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_show_option_cmd>' expected.");
}

<ROOT_struct_skip_by_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_skip_by_cmd"{s} {
  AX_struct_skip_by_cmd_nm = 0;
  ENTER(AL_struct_skip_by_cmd); pushbuffer(0);
  }

<AL_struct_skip_by_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_skip_by_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_skip_by_cmd_nm);

 ">" {
  LEAVE; STag_struct_skip_by_cmd();pcdata_ix = 0; ENTER(S_struct_skip_by_cmd);
 }
 "/>" {
  LEAVE; STag_struct_skip_by_cmd(); pcdata_ix = 0; ETag_struct_skip_by_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_skip_by_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_skip_by_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_skip_by_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_skip_by_cmd' element.");
}

<S_struct_skip_by_cmd_2,S_struct_skip_by_cmd,E_struct_skip_by_cmd>{
 "</struct_skip_by_cmd"{s}">" {
  LEAVE;
  ETag_struct_skip_by_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_skip_by_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_skip_by_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_skip_by_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_skip_by_cmd>' expected.");
}

<ROOT_struct_skip_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_skip_cmd"{s} {
  AX_struct_skip_cmd_nm = 0;
  ENTER(AL_struct_skip_cmd); pushbuffer(0);
  }

<AL_struct_skip_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_skip_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_skip_cmd_nm);

 ">" {
  LEAVE; STag_struct_skip_cmd();pcdata_ix = 0; ENTER(S_struct_skip_cmd);
 }
 "/>" {
  LEAVE; STag_struct_skip_cmd(); pcdata_ix = 0; ETag_struct_skip_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_skip_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_skip_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_skip_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_skip_cmd' element.");
}

<E_struct_skip_cmd,S_struct_skip_cmd,S_struct_skip_cmd_2>{
 "</struct_skip_cmd"{s}">" {
  LEAVE;
  ETag_struct_skip_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_skip_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_skip_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_skip_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_skip_cmd>' expected.");
}

<ROOT_struct_skip_to_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_skip_to_cmd"{s} {
  AX_struct_skip_to_cmd_nm = 0;
  ENTER(AL_struct_skip_to_cmd); pushbuffer(0);
  }

<AL_struct_skip_to_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_skip_to_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_skip_to_cmd_nm);

 ">" {
  LEAVE; STag_struct_skip_to_cmd();pcdata_ix = 0; ENTER(S_struct_skip_to_cmd);
 }
 "/>" {
  LEAVE; STag_struct_skip_to_cmd(); pcdata_ix = 0; ETag_struct_skip_to_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_skip_to_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_skip_to_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_skip_to_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_skip_to_cmd' element.");
}

<S_struct_skip_to_cmd,S_struct_skip_to_cmd_2,E_struct_skip_to_cmd>{
 "</struct_skip_to_cmd"{s}">" {
  LEAVE;
  ETag_struct_skip_to_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_skip_to_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_skip_to_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_skip_to_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_skip_to_cmd>' expected.");
}

<ROOT_struct_sleep_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_sleep_cmd"{s} {
  AX_struct_sleep_cmd_nm = 0;
  ENTER(AL_struct_sleep_cmd); pushbuffer(0);
  }

<AL_struct_sleep_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_sleep_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_sleep_cmd_nm);

 ">" {
  LEAVE; STag_struct_sleep_cmd();pcdata_ix = 0; ENTER(S_struct_sleep_cmd);
 }
 "/>" {
  LEAVE; STag_struct_sleep_cmd(); pcdata_ix = 0; ETag_struct_sleep_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sleep_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_sleep_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_sleep_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_sleep_cmd' element.");
}

<S_struct_sleep_cmd_2,S_struct_sleep_cmd,E_struct_sleep_cmd>{
 "</struct_sleep_cmd"{s}">" {
  LEAVE;
  ETag_struct_sleep_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sleep_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_sleep_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_sleep_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_sleep_cmd>' expected.");
}

<ROOT_struct_sql_block_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_sql_block_cmd"{s} {
  AX_struct_sql_block_cmd_convert = 0;
  AX_struct_sql_block_cmd_nm = 0;
  ENTER(AL_struct_sql_block_cmd); pushbuffer(0);
  }

<AL_struct_sql_block_cmd>{
 "convert"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_sql_block_cmd_convert);
 "convert"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_sql_block_cmd_convert);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_sql_block_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_sql_block_cmd_nm);

 ">" {
  LEAVE; STag_struct_sql_block_cmd();pcdata_ix = 0; ENTER(S_struct_sql_block_cmd);
 }
 "/>" {
  LEAVE; STag_struct_sql_block_cmd(); pcdata_ix = 0; ETag_struct_sql_block_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sql_block_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_sql_block_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_sql_block_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_sql_block_cmd' element.");
}

<S_struct_sql_block_cmd_2,S_struct_sql_block_cmd,E_struct_sql_block_cmd>{
 "</struct_sql_block_cmd"{s}">" {
  LEAVE;
  ETag_struct_sql_block_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sql_block_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_sql_block_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_sql_block_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_sql_block_cmd>' expected.");
}

<ROOT_struct_sql_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_sql_cmd"{s} {
  AX_struct_sql_cmd_nm = 0;
  AX_struct_sql_cmd_sql = 0;
  ENTER(AL_struct_sql_cmd); pushbuffer(0);
  }

<AL_struct_sql_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_sql_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_sql_cmd_nm);

 "sql"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_sql_cmd_sql);
 "sql"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_sql_cmd_sql);

 ">" {
  LEAVE; STag_struct_sql_cmd();pcdata_ix = 0; ENTER(S_struct_sql_cmd);
 }
 "/>" {
  LEAVE; STag_struct_sql_cmd(); pcdata_ix = 0; ETag_struct_sql_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sql_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_sql_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_sql_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_sql_cmd' element.");
}

<S_struct_sql_cmd_2,S_struct_sql_cmd,E_struct_sql_cmd>{
 "</struct_sql_cmd"{s}">" {
  LEAVE;
  ETag_struct_sql_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sql_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_sql_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_sql_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_sql_cmd>' expected.");
}

<ROOT_struct_sql_transact_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_sql_transact_cmd"{s} {
  AX_struct_sql_transact_cmd_nm = 0;
  AX_struct_sql_transact_cmd_trans = 0;
  ENTER(AL_struct_sql_transact_cmd); pushbuffer(0);
  }

<AL_struct_sql_transact_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_sql_transact_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_sql_transact_cmd_nm);

 "trans"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_sql_transact_cmd_trans);
 "trans"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_sql_transact_cmd_trans);

 ">" {
  LEAVE; STag_struct_sql_transact_cmd();pcdata_ix = 0; ENTER(S_struct_sql_transact_cmd);
 }
 "/>" {
  LEAVE; STag_struct_sql_transact_cmd(); pcdata_ix = 0; ETag_struct_sql_transact_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sql_transact_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_sql_transact_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_sql_transact_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_sql_transact_cmd' element.");
}

<S_struct_sql_transact_cmd,S_struct_sql_transact_cmd_2,E_struct_sql_transact_cmd>{
 "</struct_sql_transact_cmd"{s}">" {
  LEAVE;
  ETag_struct_sql_transact_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_sql_transact_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_sql_transact_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_sql_transact_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_sql_transact_cmd>' expected.");
}

<ROOT_struct_start_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_start_cmd"{s} {
  AX_struct_start_cmd_namespace = 0;
  AX_struct_start_cmd_nm = 0;
  AX_struct_start_cmd_repname = 0;
  ENTER(AL_struct_start_cmd); pushbuffer(0);
  }

<AL_struct_start_cmd>{
 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_start_cmd_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_start_cmd_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_start_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_start_cmd_nm);

 "repname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_start_cmd_repname);
 "repname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_start_cmd_repname);

 ">" {
  LEAVE; STag_struct_start_cmd();pcdata_ix = 0; ENTER(S_struct_start_cmd);
 }
 "/>" {
  LEAVE; STag_struct_start_cmd(); pcdata_ix = 0; ETag_struct_start_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_start_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_start_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_start_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_start_cmd' element.");
}

<S_struct_start_cmd,E_struct_start_cmd,S_struct_start_cmd_2>{
 "</struct_start_cmd"{s}">" {
  LEAVE;
  ETag_struct_start_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_start_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_start_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_start_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_start_cmd>' expected.");
}

<ROOT_struct_start_rpc_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_start_rpc_cmd"{s} {
  AX_struct_start_rpc_cmd_nm = 0;
  ENTER(AL_struct_start_rpc_cmd); pushbuffer(0);
  }

<AL_struct_start_rpc_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_start_rpc_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_start_rpc_cmd_nm);

 ">" {
  LEAVE; STag_struct_start_rpc_cmd();pcdata_ix = 0; ENTER(S_struct_start_rpc_cmd);
 }
 "/>" {
  LEAVE; STag_struct_start_rpc_cmd(); pcdata_ix = 0; ETag_struct_start_rpc_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_start_rpc_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_start_rpc_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_start_rpc_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_start_rpc_cmd' element.");
}

<E_struct_start_rpc_cmd,S_struct_start_rpc_cmd,S_struct_start_rpc_cmd_2>{
 "</struct_start_rpc_cmd"{s}">" {
  LEAVE;
  ETag_struct_start_rpc_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_start_rpc_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_start_rpc_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_start_rpc_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_start_rpc_cmd>' expected.");
}

<ROOT_struct_term_rep_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_term_rep_cmd"{s} {
  AX_struct_term_rep_cmd_namespace = 0;
  AX_struct_term_rep_cmd_nm = 0;
  AX_struct_term_rep_cmd_repname = 0;
  ENTER(AL_struct_term_rep_cmd); pushbuffer(0);
  }

<AL_struct_term_rep_cmd>{
 "namespace"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_term_rep_cmd_namespace);
 "namespace"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_term_rep_cmd_namespace);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_term_rep_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_term_rep_cmd_nm);

 "repname"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_term_rep_cmd_repname);
 "repname"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_term_rep_cmd_repname);

 ">" {
  LEAVE; STag_struct_term_rep_cmd();pcdata_ix = 0; ENTER(E_struct_term_rep_cmd);
 }
 "/>" {
  LEAVE; STag_struct_term_rep_cmd(); pcdata_ix = 0; ETag_struct_term_rep_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_term_rep_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_term_rep_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_term_rep_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_term_rep_cmd' element.");
}

<E_struct_term_rep_cmd>{
 "</struct_term_rep_cmd"{s}">" {
  LEAVE;
  ETag_struct_term_rep_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_term_rep_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_term_rep_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_term_rep_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_term_rep_cmd>' expected.");
}

<ROOT_struct_uncheck_menu_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_uncheck_menu_cmd"{s} {
  AX_struct_uncheck_menu_cmd_nm = 0;
  ENTER(AL_struct_uncheck_menu_cmd); pushbuffer(0);
  }

<AL_struct_uncheck_menu_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_uncheck_menu_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_uncheck_menu_cmd_nm);

 ">" {
  LEAVE; STag_struct_uncheck_menu_cmd();pcdata_ix = 0; ENTER(S_struct_uncheck_menu_cmd);
 }
 "/>" {
  LEAVE; STag_struct_uncheck_menu_cmd(); pcdata_ix = 0; ETag_struct_uncheck_menu_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_uncheck_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_uncheck_menu_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_uncheck_menu_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_uncheck_menu_cmd' element.");
}

<S_struct_uncheck_menu_cmd_2,S_struct_uncheck_menu_cmd,E_struct_uncheck_menu_cmd>{
 "</struct_uncheck_menu_cmd"{s}">" {
  LEAVE;
  ETag_struct_uncheck_menu_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_uncheck_menu_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_uncheck_menu_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_uncheck_menu_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_uncheck_menu_cmd>' expected.");
}

<ROOT_struct_unload_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_unload_cmd"{s} {
  AX_struct_unload_cmd_nm = 0;
  ENTER(AL_struct_unload_cmd); pushbuffer(0);
  }

<AL_struct_unload_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_unload_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_unload_cmd_nm);

 ">" {
  LEAVE; STag_struct_unload_cmd();pcdata_ix = 0; ENTER(S_struct_unload_cmd);
 }
 "/>" {
  LEAVE; STag_struct_unload_cmd(); pcdata_ix = 0; ETag_struct_unload_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_unload_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_unload_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_unload_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_unload_cmd' element.");
}

<S_struct_unload_cmd_2,S_struct_unload_cmd,E_struct_unload_cmd>{
 "</struct_unload_cmd"{s}">" {
  LEAVE;
  ETag_struct_unload_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_unload_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_unload_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_unload_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_unload_cmd>' expected.");
}

<ROOT_struct_update_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_update_cmd"{s} {
  AX_struct_update_cmd_nm = 0;
  AX_struct_update_cmd_table = 0;
  ENTER(AL_struct_update_cmd); pushbuffer(0);
  }

<AL_struct_update_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_update_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_update_cmd_nm);

 "table"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_update_cmd_table);
 "table"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_update_cmd_table);

 ">" {
  LEAVE; STag_struct_update_cmd();pcdata_ix = 0; ENTER(S_struct_update_cmd);
 }
 "/>" {
  LEAVE; STag_struct_update_cmd(); pcdata_ix = 0; ETag_struct_update_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_update_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_update_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_update_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_update_cmd' element.");
}

<S_struct_update_cmd,E_struct_update_cmd,S_struct_update_cmd_2>{
 "</struct_update_cmd"{s}">" {
  LEAVE;
  ETag_struct_update_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_update_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_update_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_update_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_update_cmd>' expected.");
}

<ROOT_struct_validate_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_validate_cmd"{s} {
  AX_struct_validate_cmd_nm = 0;
  ENTER(AL_struct_validate_cmd); pushbuffer(0);
  }

<AL_struct_validate_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_validate_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_validate_cmd_nm);

 ">" {
  LEAVE; STag_struct_validate_cmd();pcdata_ix = 0; ENTER(S_struct_validate_cmd);
 }
 "/>" {
  LEAVE; STag_struct_validate_cmd(); pcdata_ix = 0; ETag_struct_validate_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_validate_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_validate_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_validate_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_validate_cmd' element.");
}

<S_struct_validate_cmd_2,E_struct_validate_cmd,S_struct_validate_cmd>{
 "</struct_validate_cmd"{s}">" {
  LEAVE;
  ETag_struct_validate_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_validate_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_validate_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_validate_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_validate_cmd>' expected.");
}

<ROOT_struct_whenever_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_whenever_cmd"{s} {
  AX_struct_whenever_cmd_nm = 0;
  AX_struct_whenever_cmd_whencode = 0;
  AX_struct_whenever_cmd_whento = 0;
  ENTER(AL_struct_whenever_cmd); pushbuffer(0);
  }

<AL_struct_whenever_cmd>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_whenever_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_whenever_cmd_nm);

 "whencode"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_whenever_cmd_whencode);
 "whencode"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_whenever_cmd_whencode);

 "whento"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_whenever_cmd_whento);
 "whento"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_whenever_cmd_whento);

 ">" {
  LEAVE; STag_struct_whenever_cmd();pcdata_ix = 0; ENTER(E_struct_whenever_cmd);
 }
 "/>" {
  LEAVE; STag_struct_whenever_cmd(); pcdata_ix = 0; ETag_struct_whenever_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_whenever_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_whenever_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_whenever_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_whenever_cmd' element.");
}

<E_struct_whenever_cmd>{
 "</struct_whenever_cmd"{s}">" {
  LEAVE;
  ETag_struct_whenever_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_whenever_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_whenever_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_whenever_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_whenever_cmd>' expected.");
}

<ROOT_struct_while_cmd,S_command_data_2,S_command_data,S_command_data_1>"<struct_while_cmd"{s} {
  AX_struct_while_cmd_block_id = 0;
  AX_struct_while_cmd_nm = 0;
  ENTER(AL_struct_while_cmd); pushbuffer(0);
  }

<AL_struct_while_cmd>{
 "block_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_while_cmd_block_id);
 "block_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_while_cmd_block_id);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_struct_while_cmd_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_struct_while_cmd_nm);

 ">" {
  LEAVE; STag_struct_while_cmd();pcdata_ix = 0; ENTER(S_struct_while_cmd);
 }
 "/>" {
  LEAVE; STag_struct_while_cmd(); pcdata_ix = 0; ETag_struct_while_cmd(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_while_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of struct_while_cmd element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `struct_while_cmd' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `struct_while_cmd' element.");
}

<S_struct_while_cmd_2,E_struct_while_cmd,S_struct_while_cmd>{
 "</struct_while_cmd"{s}">" {
  LEAVE;
  ETag_struct_while_cmd();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_struct_while_cmd: SET(EPILOG); break;
   case S_command_data_2: case S_command_data: case S_command_data_1: SET(S_command_data_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</struct_while_cmd>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</struct_while_cmd>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</struct_while_cmd>' expected.");
}

<ROOT_user_details>"<user_details"{s} {
  AX_user_details_nm = 0;
  ENTER(AL_user_details); pushbuffer(0);
  }

<AL_user_details>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_user_details_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_user_details_nm);

 ">" {
  LEAVE; STag_user_details();pcdata_ix = 0; ENTER(S_user_details);
 }
 "/>" {
  LEAVE; STag_user_details(); pcdata_ix = 0; ETag_user_details(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_user_details: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of user_details element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `user_details' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `user_details' element.");
}

<S_user_details,E_user_details,S_user_details_2>{
 "</user_details"{s}">" {
  LEAVE;
  ETag_user_details();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_user_details: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</user_details>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</user_details>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</user_details>' expected.");
}

<ROOT_variable,S_variable_data_2,S_variable_list,S_variable_data,S_record_variable_2,S_assoc_array_variable_1,S_variable_data_1,S_record_variable_1,S_assoc_array_variable_2,S_record_variable,S_object_variable_1,S_variable_list_1,S_object_variable_2,S_assoc_array_variable,S_object_variable,S_variable_list_2>"<variable"{s} {
  AX_variable_assigned = 0;
  AX_variable_defsrc = 0;
  AX_variable_escope = 0;
  AX_variable_flags = 0;
  AX_variable_is_extern = 0;
  AX_variable_is_static = 0;
  AX_variable_lineno = 0;
  AX_variable_nm = 0;
  AX_variable_src_module = 0;
  AX_variable_usage = 0;
  AX_variable_user_system = 0;
  ENTER(AL_variable); pushbuffer(0);
  }

<AL_variable>{
 "assigned"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_assigned);
 "assigned"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_assigned);

 "defsrc"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_defsrc);
 "defsrc"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_defsrc);

 "escope"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_escope);
 "escope"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_escope);

 "flags"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_flags);
 "flags"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_flags);

 "is_extern"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_is_extern);
 "is_extern"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_is_extern);

 "is_static"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_is_static);
 "is_static"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_is_static);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_nm);

 "src_module"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_src_module);
 "src_module"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_src_module);

 "usage"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage);
 "usage"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage);

 "user_system"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_user_system);
 "user_system"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_user_system);

 ">" {
  LEAVE; STag_variable();pcdata_ix = 0; ENTER(S_variable);
 }
 "/>" {
  LEAVE; STag_variable(); pcdata_ix = 0; ETag_variable(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_assoc_array_variable_1: case S_assoc_array_variable_2: case S_assoc_array_variable: SET(S_assoc_array_variable_2); break;
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case S_object_variable_1: case S_object_variable_2: case S_object_variable: SET(S_object_variable_2); break;
   case S_variable_list: case S_variable_list_1: case S_variable_list_2: SET(S_variable_list_2); break;
   case ROOT_variable: SET(EPILOG); break;
   case S_record_variable_2: case S_record_variable_1: case S_record_variable: SET(S_record_variable_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of variable element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `variable' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `variable' element.");
}

<S_variable_2,S_variable,E_variable>{
 "</variable"{s}">" {
  LEAVE;
  ETag_variable();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_assoc_array_variable_1: case S_assoc_array_variable_2: case S_assoc_array_variable: SET(S_assoc_array_variable_2); break;
   case S_variable_data_2: case S_variable_data: case S_variable_data_1: SET(S_variable_data_2); break;
   case S_object_variable_1: case S_object_variable_2: case S_object_variable: SET(S_object_variable_2); break;
   case S_variable_list: case S_variable_list_1: case S_variable_list_2: SET(S_variable_list_2); break;
   case ROOT_variable: SET(EPILOG); break;
   case S_record_variable_2: case S_record_variable_1: case S_record_variable: SET(S_record_variable_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</variable>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</variable>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</variable>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_variable_data,S_variable_2,S_variable_1,S_variable>"<variable_data"{s} {
  AX_variable_data_e_variable_type = 0;
  AX_variable_data_nm = 0;
  ENTER(AL_variable_data); pushbuffer(0);
  }

<AL_variable_data>{
 "e_variable_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_data_e_variable_type);
 "e_variable_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_data_e_variable_type);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_data_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_data_nm);

 ">" {
  if (!AX_variable_data_e_variable_type) FAIL("Required attribute `e_variable_type' not set for `variable_data' element.");
  LEAVE; STag_variable_data();pcdata_ix = 0; ENTER(S_variable_data);
 }
 "/>" {
  if (!AX_variable_data_e_variable_type) FAIL("Required attribute `e_variable_type' not set for `variable_data' element.");
  LEAVE; STag_variable_data(); pcdata_ix = 0; ETag_variable_data(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_2: case S_variable_1: case S_variable: SET(S_variable_2); break;
   case ROOT_variable_data: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of variable_data element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `variable_data' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `variable_data' element.");
}

<S_variable_data_2,E_variable_data,S_variable_data,S_variable_data_1>{
 "</variable_data"{s}">" {
  LEAVE;
  ETag_variable_data();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_2: case S_variable_1: case S_variable: SET(S_variable_2); break;
   case ROOT_variable_data: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</variable_data>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</variable_data>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</variable_data>' expected.");
}

<ROOT_variable_list,S_s_pdf_report_definition_2,S_globals_definition,S_s_formhandler_definition,S_module_definition,S_s_pdf_report_definition_1,S_s_report_definition_2,S_s_function_definition_1,S_globals_definition_1,S_s_class_definition_1,S_module_definition_1,S_s_function_definition,S_s_function_definition_2,S_s_formhandler_definition_2,S_s_report_definition,S_s_report_definition_1,S_globals_definition_2,S_module_definition_2,S_s_class_definition_2,S_s_class_definition,S_s_pdf_report_definition,S_s_formhandler_definition_1>"<variable_list"{s} {
  AX_variable_list_nm = 0;
  AX_variable_list_sorted_list = 0;
  ENTER(AL_variable_list); pushbuffer(0);
  }

<AL_variable_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_list_nm);

 "sorted_list"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_list_sorted_list);
 "sorted_list"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_list_sorted_list);

 ">" {
  LEAVE; STag_variable_list();pcdata_ix = 0; ENTER(S_variable_list);
 }
 "/>" {
  LEAVE; STag_variable_list(); pcdata_ix = 0; ETag_variable_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_globals_definition: case S_globals_definition_1: case S_globals_definition_2: SET(S_globals_definition_2); break;
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case S_s_function_definition_1: case S_s_function_definition: case S_s_function_definition_2: SET(S_s_function_definition_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_s_class_definition_1: case S_s_class_definition_2: case S_s_class_definition: SET(S_s_class_definition_2); break;
   case ROOT_variable_list: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of variable_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `variable_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `variable_list' element.");
}

<E_variable_list,S_variable_list,S_variable_list_2>{
 "</variable_list"{s}">" {
  LEAVE;
  ETag_variable_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_globals_definition: case S_globals_definition_1: case S_globals_definition_2: SET(S_globals_definition_2); break;
   case S_module_definition: case S_module_definition_1: case S_module_definition_2: SET(S_module_definition_2); break;
   case S_s_pdf_report_definition_2: case S_s_pdf_report_definition_1: case S_s_pdf_report_definition: SET(S_s_pdf_report_definition_2); break;
   case S_s_function_definition_1: case S_s_function_definition: case S_s_function_definition_2: SET(S_s_function_definition_2); break;
   case S_s_formhandler_definition: case S_s_formhandler_definition_2: case S_s_formhandler_definition_1: SET(S_s_formhandler_definition_2); break;
   case S_s_class_definition_1: case S_s_class_definition_2: case S_s_class_definition: SET(S_s_class_definition_2); break;
   case ROOT_variable_list: SET(EPILOG); break;
   case S_s_report_definition_2: case S_s_report_definition: case S_s_report_definition_1: SET(S_s_report_definition_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</variable_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</variable_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</variable_list>' expected.");
}

<ROOT_variable_usage,S_expr_str_1,S_expr_str_2,S_variable_usage_with_asc_desc_2,S_expr_str,S_variable_usage_with_asc_desc_1,S_variable_usage_with_asc_desc,S_variable_usage_1,S_variable_usage_2,S_s_select_list_item_data_1,S_s_select_list_item_data_2,S_s_select_list_item_data,S_variable_usage>"<variable_usage"{s} {
  AX_variable_usage_datatype = 0;
  AX_variable_usage_datatype_length = 0;
  AX_variable_usage_escope = 0;
  AX_variable_usage_nm = 0;
  AX_variable_usage_object_type = 0;
  AX_variable_usage_variable_id = 0;
  AX_variable_usage_variable_name = 0;
  ENTER(AL_variable_usage); pushbuffer(0);
  }

<AL_variable_usage>{
 "datatype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_datatype);
 "datatype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_datatype);

 "datatype_length"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_datatype_length);
 "datatype_length"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_datatype_length);

 "escope"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_escope);
 "escope"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_escope);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_nm);

 "object_type"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_object_type);
 "object_type"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_object_type);

 "variable_id"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_variable_id);
 "variable_id"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_variable_id);

 "variable_name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_variable_name);
 "variable_name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_variable_name);

 ">" {
  LEAVE; STag_variable_usage();pcdata_ix = 0; ENTER(S_variable_usage);
 }
 "/>" {
  LEAVE; STag_variable_usage(); pcdata_ix = 0; ETag_variable_usage(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_usage_with_asc_desc_2: case S_variable_usage_with_asc_desc_1: case S_variable_usage_with_asc_desc: SET(S_variable_usage_with_asc_desc_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_variable_usage: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_variable_usage_1: case S_variable_usage_2: case S_variable_usage: SET(S_variable_usage_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of variable_usage element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `variable_usage' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `variable_usage' element.");
}

<S_variable_usage,S_variable_usage_2,E_variable_usage>{
 "</variable_usage"{s}">" {
  LEAVE;
  ETag_variable_usage();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_variable_usage_with_asc_desc_2: case S_variable_usage_with_asc_desc_1: case S_variable_usage_with_asc_desc: SET(S_variable_usage_with_asc_desc_2); break;
   case S_s_select_list_item_data_1: case S_s_select_list_item_data_2: case S_s_select_list_item_data: SET(S_s_select_list_item_data_2); break;
   case ROOT_variable_usage: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
   case S_variable_usage_1: case S_variable_usage_2: case S_variable_usage: SET(S_variable_usage_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</variable_usage>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</variable_usage>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</variable_usage>' expected.");
}

<ROOT_variable_usage_with_asc_desc,S_expr_str_1,S_expr_str_2,S_expr_str>"<variable_usage_with_asc_desc"{s} {
  AX_variable_usage_with_asc_desc_asc_desc = 0;
  AX_variable_usage_with_asc_desc_nm = 0;
  ENTER(AL_variable_usage_with_asc_desc); pushbuffer(0);
  }

<AL_variable_usage_with_asc_desc>{
 "asc_desc"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_with_asc_desc_asc_desc);
 "asc_desc"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_with_asc_desc_asc_desc);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_variable_usage_with_asc_desc_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_variable_usage_with_asc_desc_nm);

 ">" {
  LEAVE; STag_variable_usage_with_asc_desc();pcdata_ix = 0; ENTER(S_variable_usage_with_asc_desc);
 }
 "/>" {
  LEAVE; STag_variable_usage_with_asc_desc(); pcdata_ix = 0; ETag_variable_usage_with_asc_desc(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_variable_usage_with_asc_desc: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of variable_usage_with_asc_desc element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `variable_usage_with_asc_desc' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `variable_usage_with_asc_desc' element.");
}

<E_variable_usage_with_asc_desc,S_variable_usage_with_asc_desc,S_variable_usage_with_asc_desc_2>{
 "</variable_usage_with_asc_desc"{s}">" {
  LEAVE;
  ETag_variable_usage_with_asc_desc();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_variable_usage_with_asc_desc: SET(EPILOG); break;
   case S_expr_str_1: case S_expr_str_2: case S_expr_str: SET(S_expr_str_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</variable_usage_with_asc_desc>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</variable_usage_with_asc_desc>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</variable_usage_with_asc_desc>' expected.");
}

<ROOT_vname,S_vname_name_list_1,S_vname_name_list,S_vname_name_list_2>"<vname"{s} {
  AX_vname_alias = 0;
  AX_vname_name = 0;
  AX_vname_nm = 0;
  ENTER(AL_vname); pushbuffer(0);
  }

<AL_vname>{
 "alias"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_vname_alias);
 "alias"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_vname_alias);

 "name"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_vname_name);
 "name"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_vname_name);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_vname_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_vname_nm);

 ">" {
  LEAVE; STag_vname();pcdata_ix = 0; ENTER(E_vname);
 }
 "/>" {
  LEAVE; STag_vname(); pcdata_ix = 0; ETag_vname(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_vname: SET(EPILOG); break;
   case S_vname_name_list_1: case S_vname_name_list: case S_vname_name_list_2: SET(S_vname_name_list_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of vname element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `vname' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `vname' element.");
}

<E_vname>{
 "</vname"{s}">" {
  LEAVE;
  ETag_vname();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_vname: SET(EPILOG); break;
   case S_vname_name_list_1: case S_vname_name_list: case S_vname_name_list_2: SET(S_vname_name_list_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</vname>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</vname>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</vname>' expected.");
}

<ROOT_vname_name_list,S_linked_variable,S_variable_2,S_linked_variable_2,S_variable_1,S_linked_variable_1,S_variable>"<vname_name_list"{s} {
  AX_vname_name_list_nm = 0;
  ENTER(AL_vname_name_list); pushbuffer(0);
  }

<AL_vname_name_list>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_vname_name_list_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_vname_name_list_nm);

 ">" {
  LEAVE; STag_vname_name_list();pcdata_ix = 0; ENTER(S_vname_name_list);
 }
 "/>" {
  LEAVE; STag_vname_name_list(); pcdata_ix = 0; ETag_vname_name_list(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_linked_variable: case S_linked_variable_2: case S_linked_variable_1: SET(S_linked_variable_2); break;
   case S_variable_2: case S_variable_1: case S_variable: SET(S_variable_2); break;
   case ROOT_vname_name_list: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of vname_name_list element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `vname_name_list' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `vname_name_list' element.");
}

<S_vname_name_list_2,E_vname_name_list,S_vname_name_list>{
 "</vname_name_list"{s}">" {
  LEAVE;
  ETag_vname_name_list();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_linked_variable: case S_linked_variable_2: case S_linked_variable_1: SET(S_linked_variable_2); break;
   case S_variable_2: case S_variable_1: case S_variable: SET(S_variable_2); break;
   case ROOT_vname_name_list: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</vname_name_list>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</vname_name_list>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</vname_name_list>' expected.");
}

<ROOT_when,S_whens_2,S_whens,S_whens_1>"<when"{s} {
  AX_when_colno = 0;
  AX_when_lineno = 0;
  AX_when_nm = 0;
  ENTER(AL_when); pushbuffer(0);
  }

<AL_when>{
 "colno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_when_colno);
 "colno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_when_colno);

 "lineno"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_when_lineno);
 "lineno"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_when_lineno);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_when_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_when_nm);

 ">" {
  LEAVE; STag_when();pcdata_ix = 0; ENTER(S_when);
 }
 "/>" {
  LEAVE; STag_when(); pcdata_ix = 0; ETag_when(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_whens_2: case S_whens: case S_whens_1: SET(S_whens_2); break;
   case ROOT_when: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of when element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `when' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `when' element.");
}

<S_when_2,S_when,E_when>{
 "</when"{s}">" {
  LEAVE;
  ETag_when();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_whens_2: case S_whens: case S_whens_1: SET(S_whens_2); break;
   case ROOT_when: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</when>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</when>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</when>' expected.");
}

<ROOT_whens,S_struct_case_cmd_1,S_struct_case_cmd,S_struct_case_cmd_2>"<whens"{s} {
  AX_whens_nm = 0;
  ENTER(AL_whens); pushbuffer(0);
  }

<AL_whens>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_whens_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_whens_nm);

 ">" {
  LEAVE; STag_whens();pcdata_ix = 0; ENTER(S_whens);
 }
 "/>" {
  LEAVE; STag_whens(); pcdata_ix = 0; ETag_whens(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_whens: SET(EPILOG); break;
   case S_struct_case_cmd_1: case S_struct_case_cmd: case S_struct_case_cmd_2: SET(S_struct_case_cmd_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of whens element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `whens' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `whens' element.");
}

<E_whens,S_whens_2,S_whens>{
 "</whens"{s}">" {
  LEAVE;
  ETag_whens();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_whens: SET(EPILOG); break;
   case S_struct_case_cmd_1: case S_struct_case_cmd: case S_struct_case_cmd_2: SET(S_struct_case_cmd_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</whens>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</whens>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</whens>' expected.");
}

 /* <!-- Switch on -->
  * <!-- Switch on -->  */

<ROOT_windowtype,S_struct_open_window_cmd_2,S_struct_open_window_cmd_1,S_struct_open_window_cmd>"<windowtype"{s} {
  AX_windowtype_e_wintype = 0;
  AX_windowtype_nm = 0;
  ENTER(AL_windowtype); pushbuffer(0);
  }

<AL_windowtype>{
 "e_wintype"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_windowtype_e_wintype);
 "e_wintype"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_windowtype_e_wintype);

 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_windowtype_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_windowtype_nm);

 ">" {
  if (!AX_windowtype_e_wintype) FAIL("Required attribute `e_wintype' not set for `windowtype' element.");
  LEAVE; STag_windowtype();pcdata_ix = 0; ENTER(S_windowtype);
 }
 "/>" {
  if (!AX_windowtype_e_wintype) FAIL("Required attribute `e_wintype' not set for `windowtype' element.");
  LEAVE; STag_windowtype(); pcdata_ix = 0; ETag_windowtype(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_open_window_cmd_2: case S_struct_open_window_cmd_1: case S_struct_open_window_cmd: SET(S_struct_open_window_cmd_2); break;
   case ROOT_windowtype: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of windowtype element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `windowtype' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `windowtype' element.");
}

<S_windowtype_1,E_windowtype,S_windowtype,S_windowtype_2>{
 "</windowtype"{s}">" {
  LEAVE;
  ETag_windowtype();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_struct_open_window_cmd_2: case S_struct_open_window_cmd_1: case S_struct_open_window_cmd: SET(S_struct_open_window_cmd_2); break;
   case ROOT_windowtype: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</windowtype>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</windowtype>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</windowtype>' expected.");
}

<ROOT_x_y,S_dt_display_1,S_dt_display,S_dt_display_2>"<x_y"{s} {
  AX_x_y_nm = 0;
  ENTER(AL_x_y); pushbuffer(0);
  }

<AL_x_y>{
 "nm"{Eq}\' ENTER(VALUE1); BUFFERSET(AX_x_y_nm);
 "nm"{Eq}\" ENTER(VALUE2); BUFFERSET(AX_x_y_nm);

 ">" {
  LEAVE; STag_x_y();pcdata_ix = 0; ENTER(S_x_y);
 }
 "/>" {
  LEAVE; STag_x_y(); pcdata_ix = 0; ETag_x_y(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_dt_display_1: case S_dt_display: case S_dt_display_2: SET(S_dt_display_2); break;
   case ROOT_x_y: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of x_y element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `x_y' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `x_y' element.");
}

<S_x_y_2,S_x_y,E_x_y>{
 "</x_y"{s}">" {
  LEAVE;
  ETag_x_y();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_dt_display_1: case S_dt_display: case S_dt_display_2: SET(S_dt_display_2); break;
   case ROOT_x_y: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</x_y>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</x_y>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</x_y>' expected.");
}

 /* EPILOG: after the root element. */

<EPILOG>{
 . {SET(PROLOG); yyless(0); CLEANUP; return -1;}
 <<EOF>> 	SUCCEED;
}

 /* CHARACTER DATA. */

<IMPOSSIBLE,VALUE1,VALUE2>{
 /* Non-defined standard entities... */
"&amp;"  BUFFERPUTC('&');
"&lt;"   BUFFERPUTC('<');
"&gt;"   BUFFERPUTC('>');
"&apos;" BUFFERPUTC('\'');
"&quot;" BUFFERPUTC('"');

 /* Character entities. */
 "&#"[[:digit:]]+";"	BUFFERPUTC((unsigned char)atoi(yytext+2));
 "&#x"[[:xdigit:]]+";"	BUFFERPUTC((unsigned char)strtol(yytext+3,NULL,16));
}

<IMPOSSIBLE,VALUE1,VALUE2,CDATA>{
 "\n"		|
 "\r"		|
 "\r\n"		|
 "\n\r"		BUFFERPUTC('\n');
}

<IMPOSSIBLE>{
 "<![CDATA["	ENTER(CDATA);
 "]""]>"		FAIL("Unexpected `]""]>' in character data.");
}

<VALUE1>{
 \'		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (\"'\" expected).");
}

<VALUE2>{
 \"		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (`\"' expected).");
}

<IMPOSSIBLE,VALUE1,VALUE2>{
 [^<&]		BUFFERPUTC(yytext[0]);
 [<&]		FAIL("Spurious `%c' in character data.",yytext[0]);
}

<CDATA>{
 "]""]>"		LEAVE;
 /* "]""]"		BUFFERPUTC(yytext[0]); BUFFERPUTC(yytext[1]); */
 .		BUFFERPUTC(yytext[0]);
 <<EOF>>	FAIL("EOF in CDATA section.");
}

 /* Impossible rules to avoid warnings from flex(1). */
 /* Ideally, this should be replaced by code in flexml.pl that
    generates just the states not covered by other rules. */
<*>{
 .|[\n] FAIL("Syntax error on character `%c'.", yytext[0]);
}

%%

/* Element context stack lookup. */
int element_context(int i)
{
  return (0<i && i<yy_start_stack_depth
	  ? yy_start_stack[yy_start_stack_ptr - i]
	  : 0);
}

#ifdef FLEX_DEBUG
void print_yy_stack(char* fmt, ...)
{
  int i = 0; va_list ap; va_start(ap, fmt);
  vfprintf(stderr, fmt, ap);
  if (statenames) {
      for (i=1; i<yy_start_stack_ptr; i++) {
          fprintf(stderr, "%s/", statenames[yy_start_stack[i] ]);
      }
      fprintf(stderr,"%s\n", statenames[YY_START]);
  }
  va_end(ap);
}

void print_bufferstack()
{
    int i;
    fputs("Buffer: ", stderr);
    for (i = 0; i < blimit; i++) {
       if ( bufferstack[i] == '\377' ) break;
         putc(bufferstack[i], stderr);
    }
    putc('\n', stderr);
}

static void debug_enter(int state, const char* statename) {
  yy_push_state(state);
  if (yy_flex_debug) {
       print_yy_stack("--ENTER(%s) : ",statename);
       print_bufferstack();
  }
}

static void debug_leave(void) {
    if (yy_flex_debug) {
        print_yy_stack("--LEAVE : ");
	print_bufferstack();
    }
  yy_pop_state();
}

static void debug_set(int state, const char* statename) {
  BEGIN(state);
  if (yy_flex_debug) print_yy_stack("--SET(%s) : ",statename);
}
#endif


static void cleanup(void)
{
    if (statenames) {
        free(statenames);
	statenames = NULL;
    }
    free(bufferstack);
    bufferstack = NULL;

    free(indexstack);
    indexstack = NULL;
}


static int fail(const char* fmt, ...)
{
    int chars_left, used;
    va_list ap; va_start(ap, fmt);
#ifdef FLEXML_yylineno
    used = sprintf(flexml_err_msg,
		   "Invalid XML (XML input line %d, state %d): ",
		   yylineno, YY_START);
#else
    used = sprintf(flexml_err_msg,
		   "Invalid XML (state %d): ",
		   YY_START);
#endif
    chars_left = flexml_max_err_msg_size - used - 1;
    vsnprintf(flexml_err_msg + used, chars_left, fmt, ap);
    va_end(ap);

#ifndef FLEXML_quiet_parser
    /* print directly to sdterr */
    fprintf(stderr, "%s\n", flexml_err_msg);
    flexml_err_msg[0] = '\0';
#endif

    cleanup();

    return 1;
}
