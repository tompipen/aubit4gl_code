# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   root makefile              |
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+
#
# $Id: Makefile.in,v 1.92 2002-10-04 11:26:29 afalout Exp $
#

## ==================================================================
##                    Includes
## ==================================================================

#All stuff common to more then one Aubit compiler make file is there:
include incl/Makefile-common

## ==================================================================
##                    Define default target
## ==================================================================

ALL					=settings corecompile test
ALL_EXTRA  			=libfile libstring ide odbctest libhtml

#FIXME: All stuff that should be in ALL_EXTRA, but does not compile:
ALL_EXTRA_BROKEN	=adbaccess adbload

ifneq "${PERLBUILD}" "no"
	ALL_EXTRA_BROKEN+=perl
endif

ifneq "${JABBERBUILD}" "no"
	ALL_EXTRA  		+=jabber
endif

ifneq "@DOXYGEN@" "no"
	ALL_EXTRA  		+=doxy
endif

## ==================================================================
##                              Targets
## ==================================================================

default: ${ALL}
	@echo " "
	@echo "Successfully compiled Aubit compiler default targets :"
	@echo "${ALL}."
	@echo "You MUST install it before you can use it - execute 'make install'."
	@echo " "
	@echo "Default install dir=${PREFIX} (under ${AUBITNAME})"
	@echo "Use 'make install PREFIX=/where/to/install to install in different place."
	@echo "Library link will be installed to ${LIB_INSTALL_LINK}"
	@echo "Programs links will be installed to ${BIN_INSTALL_LINK}"
	@echo "Specify LIB_INSTALL_LINK and/or BIN_INSTALL_LINK to change this."
	@echo " "
	@echo "Execute 'make extra' to compile additional components."
	@echo "Thank you for using Aubit 4gl compiler"

all: default extra install

log:
	@echo "Logging make process to make.log, please wait..."
	@${MAKE} > make.log 2>&1
	@echo "make finished successfuly, see make.log for details."
	@echo "Toatal compiler warnings: `grep -c 'warning:' make.log`"

corecompile:
	$(MAKE) -C compilers/xgen
	$(MAKE) -C common/dataio
	$(MAKE) -C lib
	$(MAKE) -C compilers/4glc
	$(MAKE) -C compilers/fcompile
	$(MAKE) -C compilers/menus
	$(MAKE) -C compilers/ace
	$(MAKE) -C compilers/helpcompile
	$(MAKE) -C lib loadmap
	@echo Aubit 4gl compiler core is now compiled

## ==================================================================
##                              Extra
## ==================================================================

extra: extra_msg ${ALL_EXTRA}
	@echo " "
	@echo "Successfully compiled aditional Aubit components :"
	@echo "${ALL_EXTRA}."
	@echo "FIXME: still broken targets:"
	@echo "${ALL_EXTRA_BROKEN}."

extra_msg:
	@echo "Will make: ${ALL_EXTRA}"

ide:
	$(MAKE) -C tools/ide
	$(MAKE) -C tools/ide install.aubit

libfile:
	$(MAKE) -C lib/extra_libs/file

libstring:
	$(MAKE) -C lib/extra_libs/string

libhtml:
	$(MAKE) -C tools/html libA4GL_HTML${SO_EXT}

adbaccess:
	$(MAKE) -C tools/adbaccess use.amake

odbctest:
	$(MAKE) -C tools/odbctest

jabber:
	$(MAKE) -C tools/jabber libIM_JABBER${SO_EXT}

adbload:
	$(MAKE) -C tools/adbload

## ==================================================================
##                        Perl compiler
## ==================================================================

perl: perl.compiler perl.lib test.perl

perl.compiler:
	${MAKE} -C lib/liblex/lex_perl
	@echo Aubit 4gl Perl-code generating version LEX library created

perl.lib:
	cd lib/swig; sh domake
	@echo Aubit 4gl Perl-code libraries installed

test.perl:
	cd tools/test; export A4GL_LEX=perl; 4glc test_build.4gl
	cd tools/test; perl test_build.pl


## ==================================================================
##            DoxyGen doccumentation creation
## ==================================================================

doxy: docs/doxy/html/index.html
docs/doxy/html/index.html:
ifneq "@DOXYGEN@" "no"
	${MAKE} doxy.make
ifneq "@WWW_DOCUMENT_ROOT@" ""
	${MAKE} doxy.install.www
endif
ifneq "@CGI_DIR@" ""
	${MAKE} doxy.install.search
endif
	@echo DoxyGen source code documentation generated.
	@echo To use it, open file 'docs/doxy/html/index.html' in your web browser
else
	@echo "Sorry DOXYGEN not detected"
endif

doxy.make:
	rm -rf docs/doxy/html
	@DOXYGEN@ docs/doxy/Doxyfile
	@echo DoxyGen doccumentation created and placed in docs/doxy/html

doxy.install.www:
	rm -rf @WWW_DOCUMENT_ROOT@/${DOXY_WWWPATH}/html
	${MKPATH} @WWW_DOCUMENT_ROOT@/${DOXY_WWWPATH}
	cp -r docs/doxy/html @WWW_DOCUMENT_ROOT@/${DOXY_WWWPATH}/html
	cd @WWW_DOCUMENT_ROOT@/${DOXY_WWWPATH}/html; doxytag -s search.idx
	@echo DoxyGen doccumentation installed in web server path :
	@echo @WWW_DOCUMENT_ROOT@/${DOXY_WWWPATH}/html
	@echo Point your web browser to @WWW_HOST_NAME@/${DOXY_WWWPATH}/html/index.html

doxy.install.search:
	${CP} docs/doxy/html/doxysearch.cgi @CGI_DIR@
#run docs/doxy/html/installdox to replace any dummy links:
	@docs/doxy/html/installdox


## ==================================================================
##                              Clean
## ==================================================================

#FIXME: "clean" should clean intermediate files resulting from compile, but will skip
#executables and objects that are needed for instalation. After "clean", it should
#still be possiblt to do "make install"
.PHONY : clean
clean:
	@echo FIXME: only cleanall works

#will clean EVERYTHING that is not source file from CVS
distclean: clean.all clean.config

#will clean EVERYTHING that is not source file from CVS appart from Autoconf generated stuff
clean.all: cleanall
cleanall: clean.root clean.bin clean.etc clean.incl clean.docs clean.install clean.swig clean.project
	@echo Cleaning Aubit 4gl temporary compiler files and compiled objects...
	$(MAKE) -C lib clean
	$(MAKE) -C lib/libui/ui_console clean
	$(MAKE) -C lib/libui/ui_curses clean
	$(MAKE) -C lib/libui/ui_gtk clean
	$(MAKE) -C lib/extra_libs/file clean
	$(MAKE) -C lib/extra_libs/string clean
	$(MAKE) -C lib/libexdata clean
	$(MAKE) -C lib/libpacker/packed clean
	$(MAKE) -C lib/libpacker/perl clean
	$(MAKE) -C lib/libpacker/xdr clean
	$(MAKE) -C lib/libpacker/xml clean
	$(MAKE) -C compilers/4glc/rules clean
	$(MAKE) -C compilers/4glc clean
	$(MAKE) -C compilers/fcompile clean
	$(MAKE) -C compilers/menus clean
	$(MAKE) -C compilers/ace clean
	$(MAKE) -C compilers/helpcompile clean
	$(MAKE) -C compilers/xgen clean
	$(MAKE) -C tools/test clean
	$(MAKE) -C tools/test/gui clean
	$(MAKE) -C tools/test/db clean
	$(MAKE) -C tools/ide clean
	$(MAKE) -C tools/html clean
	$(MAKE) -C tools/jabber clean
	$(MAKE) -C tools/adbaccess clean
	$(MAKE) -C tools/adbload clean
	$(MAKE) -C tools/odbctest clean
	$(MAKE) -C common/dataio clean
	${RM} lib/swig/lib_wrap.doc
	@echo Aubit 4gl compiler source tree is now clean

#This will clean everything created with Autoconf configure script:
clean.config: clean.configure
clean.configure: clean.makefiles clean.settings clean.splint
	${RM} config.log config.status incl/config.h incl/a4gl_incl_config.h \
	docs/doxy/Doxyfile etc/aubit-rpm.spec

clean.settings:
	${RM} etc/a4glrc etc/aubitbuild.mk etc/aubitenv etc/aubitrc

clean.makefiles:
	${RM} compilers/4glc/Makefile compilers/4glc/rules/Makefile \
	compilers/fcompile/Makefile compilers/helpcompile/Makefile \
	compilers/menus/Makefile incl/Makefile-common \
    lib/Makefile lib/libui/ui_console/Makefile lib/libpdf/Makefile \
    lib/libsql/nosql/Makefile lib/libsql/esqlc/Makefile \
    lib/libsql/odbc/Makefile lib/extra_libs/file/Makefile \
    lib/extra_libs/string/Makefile lib/libui/ui_curses/Makefile \
    tools/test/db/Makefile tools/test/lang/Makefile \
	tools/test/regression/Makefile tools/test/db/Makefile \
    tools/adbaccess/Makefile tools/adbload/Makefile \
    tools/html/Makefile tools/ide/Makefile \
    tools/jabber/Makefile tools/odbctest/Makefile \
    tools/test/Makefile tools/test/gui/Makefile \
	common/dataio/Makefile compilers/ace/Makefile compilers/xgen/Makefile \
	lib/libform/form_xdr/Makefile lib/libform/noform/Makefile \
	lib/libmenu/menu_nomenu/Makefile lib/libmenu/menu_xdr/Makefile \
	lib/libmsg/msg_native/Makefile lib/libpacker/packed/Makefile \
	lib/libpacker/perl/Makefile lib/libpacker/xdr/Makefile \
	lib/libpacker/xml/Makefile lib/librpc/no_rpc/Makefile \
	lib/librpc/sun_rpc/Makefile lib/librpc/xml_rpc/Makefile \
	lib/resource/Makefile tools/loadmap/Makefile lib/libaubit4gl/Makefile \
	lib/liblex/lex_c/Makefile lib/liblex/lex_perl/Makefile \
	lib/libui/ui_gtk/Makefile Makefile \
	lib/libexdata/Makefile lib/libsql/postgresql/Makefile

clean.splint:
	${RM} lclint.log compilers/fcompile/lclint.log compilers/helpcompile/lclint.log \
	compilers/menus/lclint.log lib/libaubit4gl/lclint.log


clean.root:
#We must not clean *.log when running make process to make.log:
#we must not clean *.tmp because of unixbuildnames.tmp:
	$(RM) *.bak *.BAK libincl .*.bak core cyrpc.flg debug.out \
	*.err ${PLATFORMINFO} make.log commit.log rpmbuild.log \
	aubit4gl.lsm aubitdownload-template.htm rpmbuild.log \
    tmpdlpage1.html

#FIXME: move this to appropriate makefile :
	${RM} compilers/fcompile/fshow.glb compilers/fcompile/fshow.h \
	tools/ide/debug.out tools/adbaccess/debug.out

clean.rpc:
	${RM} compilers/fcompile/form_x_xdr.c compilers/menus/menu_x_xdr.c \
	compilers/fcompile/form_x.h compilers/menus/menu_x.h

clean.bin:
	(cd bin;${RM} 4glc${EXE} fcompile${EXE} mcompile${EXE} mkmess${EXE} \
	mcompile-noodbc${EXE} loadmap${EXE} \
	*.bak .*.bak ide${EXE} fcompile-noodbc${EXE} 4glc-noodbc${EXE} \
	4glp${EXE} mdecompile${EXE} fdecompile${EXE} fdecompile-j${EXE} \
	aubit-config${EXE} fshow${EXE}  odbctest-*${EXE} \
	aace adecompile xgen \
	)

clean.etc:
	${RM} etc/*.bak etc/config/*.bak etc/aubit-auto.spec

clean.incl:
	${RM} incl/*.bak

clean.docs:
	rm -rf docs/doxy/html
	${RM} docs/doxy/*.bak docs/*.bak

clean.install:
	rm -rf install

clean.swig:
	@if [ -f lib/swig/?akefile ]; then \
		$(MAKE) -C lib/swig clean; \
    fi
	(cd lib/swig; ${RM} lib_wrap.c *.old *.bak aubit4gl_pl.pm domake)

clean.project:
	(cd tools/project; ${RM} *.bak .\#*)
	(cd tools/cygwin; ${RM} *.bak)


#Clean stuff that is lef over aubitbuild.sh:
clean.build:
	${RM} *.tgz *.htm *.html *.tmp

## ==================================================================
##                              Install
## ==================================================================
#FIXME: this should use ${INSTALL}
#make icons for KDE and GNOME: to IDE, to manual

#all targets common to installing compiled source code AND installing
#binary distributions are in here:
#THIS INCLUDE MUST BE HERE SINCE IT STARTS WITH A TARGET!!!!
include incl/Makefile-install.mki

#remaining install related targets defined here are used only when installing
#from compiled source code tree.

install: install.core install.Makefile-common install.setmod install.example \
		install.manual install.config \
		install.links install.aubitrc install.libs.links \
		install.makefile-install
ifneq "${AUBITRCFILEEXISTS}" ""
	@echo " "
	@echo "WARNING: Configuration file aubitrc exists in ${AUBITETC}/aubitrc"
	@echo "====================== WILL NOT OVERWRITE ======================"
	@echo "use 'make install.aubitrc aubitrc=new' if you want to do that "
	@echo "Automatically created aubitrc placed in /tmp/aubitrc.tmp"
	@echo " "
endif
	@echo Aubit compiler installed to $(INSTALL_DIR)

#install compiler core files
install.core: install.tree
	${CP} $(TOBIN) $(BIN_DEST)
	$(CP) $(TOROOT) $(ROOT_DEST)
	$(CP) $(TOINCL) $(INCL_DEST)
	$(CP) $(TOLIB) $(LIB_DEST)
	@echo Aubit 4gl core compiler files installed

#Prepare and install Makefile-common make include
install.Makefile-common:
	@echo "#AUBIT_BIN_INSTALL is needed for make files and 4glpc to know they are not in Aubit compiler source code tree:" > /tmp/Makefile-common
	@echo "AUBIT_BIN_INSTALL=1" >> /tmp/Makefile-common
	@cat $(INCL_DIR)/Makefile-common >> /tmp/Makefile-common
	@mv /tmp/Makefile-common $(INCL_DEST)

#set file level permisions and attributes
install.setmod:
	chmod a+x $(BIN_DEST)/*

#install configuration settings
install.config: install.home
	$(CP) ${TOETC} $(ETC_DEST)
	@echo "Configuration examples installed to $(INSTALL_DIR)/etc"

#Install files in user's home directory
install.home:
	$(CP) ${TOHOME} $(HOME_DEST)

#Example files
install.example:
#	$(CP) $(TOTEST) $(TEST_DEST)
	$(CP) $(TOTEST_STD) $(TEST_DEST_STD)
	$(CP) $(TOTEST_GUI) $(TEST_DEST_GUI)
	@echo Aubit 4gl compiler programming examples are now installed

#Documentation files
install.manual:
	$(CP) $(TODOCS) $(DOC_DEST)
#	$(CP) $(TODOCS2) $(DOC_DEST)/manual/html
	@echo Aubit 4gl compiler manual is now installed

#install IDE binary files
#This is not done by default. Check if user compiled IDE first
install.ide:
	${MAKE} -C tools/ide install.aubit
	@echo Aubit 4gl compiler IDE is now installed

#Install IDE source files in Aubit installation tree
pack.ide:
	${CP} ${TOIDE} $(IDE_DEST)

#Create installation tree
install.tree:
	${MKPATH} $(BIN_DEST) $(LIB_DEST) $(ETC_DEST) \
	$(INCL_DEST) $(TEST_DEST)/gui $(DOC_DEST)
	@echo "Aubit 4gl compiler instalation tree created"

install.makefile-install:
	${CP} etc/Makefile-install $(ROOT_DEST)/Makefile
	${CP} incl/Makefile-install.mki $(INCL_DEST)
	${CP} -r etc/config/ $(ETC_DEST)
	${CP} etc/aubitrc.in $(ETC_DEST)/aubitrc-bin.in
	${CP} configure $(ROOT_DEST)

deinstall: deinstall.all

## ==================================================================
##                           Packaging
## ==================================================================

tarinstall: platform
#FIXME: check if it exists first
#	(cd $(PREFIX); tar -cvzf $(SOURCE)/$(TARNAME) * $(A4GLRC))
	(cd $(INSTALL_DIR); tar -cvzf $(SOURCE)/$(TARNAME) * )

createcleantar: installdrop installall tarinstall
	@echo "Aubit 4gl compiler binary disribution is now in $(SOURCE)/$(TARNAME)"

#we should not use this
#installdrop:
#	${RMDIR} $(INSTALL_DIR)

tar: clean.all
#COMPILE_DATE=20-01-2002
#TARGET=i586-pc-linux-gnu
	${RM} ${SOURCETARBASENAME}
	tar -cvzf ${SOURCETARBASENAME} *
	@echo "Aubit source tarball created"

tar.bin:
	${RM} ${BINTARBASENAME}
	tar -cvzf ${BINTARBASENAME} *
	@echo "Aubit binary tarball created"

source.zip:
	${RMDIR} $(INSTALL_DIR)
	${MKPATH} $(INSTALL_DIR)
	(cd $(INSTALL_DIR); autocvspasswd; cvs -w checkout $(AUBITCVSNAME))
	(cd $(INSTALL_DIR)/$(AUBITCVSNAME); zip -r $(SOURCEZIPNAME) * )

#if we unhide them before zip, zip will not find them:
unhide.lnk:
	(cd $(INSTALL_DIR)/runtime; for afile in *.lnk.hide; do mv "$$afile" "`basename "$$afile" .hide`"; done;)

cygwin.zip.runtime:
	${RM} $(SOURCE)/$(ZIPRUNTIMENAME)
	(cd $(INSTALL_DIR)/runtime/; zip -r $(SOURCE)/$(ZIPRUNTIMENAME) * )

pack.amake:
	${MKPATH} /tmp/pack_amake/bin
	${CP} bin/amake bin/amakeallo bin/amakeallf bin/genmake bin/prepmake /tmp/pack_amake/bin
	${MKPATH} /tmp/pack_amake/incl
	${CP} incl/*.mk incl/*.mki /tmp/pack_amake/incl
	echo "See HOWTO at https://sourceforge.net/docman/?group_id=32409" > /tmp/pack_amake/README.txt
	(cd /tmp/pack_amake; tar -cvzf $(SOURCE)/amake.${ARCHEXT} * )


cleantar:
	$(RM) *.${ARCHEXT}
	$(RM) *.${ARCHEXT}.txt


## ------------------------------------------------------------------
##                      RPM packaging
## ------------------------------------------------------------------

#You may need to create the following directories to make a build tree:
#	BUILD is the directory where all building occurs by RPM. You don't
#		have to do your test building anywhere in particular, but this is
#		where RPM will do it's building.
#	SOURCES is the directory where you should put your original source
#		tar files and your patches. This is where RPM will look by default.
#	SPECS is the directory where all spec files should go.
#	RPMS is where RPM will put all binary RPMs when built.
#	SRPMS is where all source RPMs will be put.


#this will make rpm form autoconf-ed etc/aubit-rpm.conf
rpm:
ifneq "@RPM@" ""
	${MAKE} rpm.build
else
	@echo "RPM tools where not detected on your system."
endif

rpm.build: RPMCONFFILE:=${AUBITDIR}/etc/aubit-rpm.spec
rpm.build: SRCTMP:=${RPMBUILDROOT}/SOURCES/${NAMEVERBLD}.${ARCHEXT}
rpm.build:
#RPM insists to have source code in ${RPMBUILDROOT}/SOURCES/ before it will
#build it, and only then make src and bin RPM
ifeq "${RPM}" "new"
	${RM} ${SRCTMP}
	${RM} /tmp/${NAMEVERBLD}/${SOURCETARBASENAME}
endif
	@if [ ! -f ${SRCTMP} ]; then \
		echo "(1) No ${SRCTMP}, making it..."; \
		if [ ! -f /tmp/${NAMEVERBLD}/${SOURCETARBASENAME} ]; then \
			echo "(2) No /tmp/${NAMEVERBLD}/${SOURCETARBASENAME}, making it..."; \
			${MAKE} clean.all > /dev/null; \
			${RMDIR} /tmp/${NAMEVERBLD}; \
			${MKPATH} /tmp/${NAMEVERBLD}; \
			${LN_S} ${AUBITDIR} /tmp/${NAMEVERBLD}/${NAMEVERBLD}; \
			echo "Creating /tmp/${NAMEVERBLD}/$(SOURCETARBASENAME) from ${NAMEVERBLD}/ ..."; \
			(cd /tmp/${NAMEVERBLD}; tar -cvzf $(SOURCETARBASENAME) ${NAMEVERBLD}/* > /dev/null); \
		else \
            echo "Have /tmp/${NAMEVERBLD}/${SOURCETARBASENAME}"; \
		fi; \
		${CP} /tmp/${NAMEVERBLD}/${SOURCETARBASENAME} ${SRCTMP} ; \
	else \
        echo "Have ${SRCTMP}"; \
		echo "use RPM=new on make line to force refresh"; \
	fi
#	(export AUBITDIR=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}; export PATH=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}/bin:${PATH}; rpm -ba ${RPMCONFFILE} > rpmbuild.log 2>&1)
	rpm -ba ${RPMCONFFILE} > rpmbuild.log 2>&1
	@echo "Created files:"
	@echo "${RPMBUILDROOT}/SRPMS/${AUBITNAME}-${AUBITVERSION}.${AUBITBUILD}-1.src.rpm"
	@echo "${RPMBUILDROOT}/RPMS/i586/${AUBITNAME}-${AUBITVERSION}.${AUBITBUILD}-1.i586.rpm"
	@echo "'make rpm' successfull, see rpmbuild.log for details"

#automatically create .spec file for RPM build:
etc/aubit-auto.spec: aubit4gl.lsm
	${MAKE} ${MKNAME} -n install | autospec -i -d -n ${NAMEVERBLD} -g Development/Languages > ${AUBITDIR}/etc/aubit-auto.spec

build.diff.patch:
	diff -uNr ${dirname}.orig ${dirname} > ${dirname}.patch
#Please, use cvs diff -u3p.

#Create Linux Software Map (.lsm) used by autospec, see http://www.execpc.com/lsm/
aubit4gl.lsm: OUTFILE=aubit4gl.lsm
aubit4gl.lsm:
	@echo Begin4 > ${OUTFILE}
	@echo Title: Aubit 4gl compiler >> ${OUTFILE}
	@echo Version: ${AUBITVERSION}.${AUBITBUILD} >> ${OUTFILE}
	@echo Entered-date: ${COMPILEDATE} >> ${OUTFILE}
	@echo Description: Compiler for x4gl programming language >> ${OUTFILE}
	@echo Keywords: compiler 4gl database sql gui >> ${OUTFILE}
	@echo Author: Mike Aubury >> ${OUTFILE}
	@echo Maintained-by: Aubit development team >> ${OUTFILE}
	@echo Primary-site: http://aubit4gl.sourceforge.net >> ${OUTFILE}
	@echo Alternate-site: http://www.falout.com >> ${OUTFILE}
	@echo Original-site: http://www.aubit.com >> ${OUTFILE}
	@echo Platforms: POSIX Win32 >> ${OUTFILE}
	@echo Copying-policy: GNU GPL LGPL >> ${OUTFILE}
	@echo End >> ${OUTFILE}
	@echo >> ${OUTFILE}
	@echo >> ${OUTFILE}
	@echo Note: >> ${OUTFILE}
	@echo send this file to 'lsm@execpc.com' with the subject 'add'. >> ${OUTFILE}

## ------------------------------------------------------------------
##                       Other Targets (Misc.)
## ------------------------------------------------------------------

#This will increase build number; use it before releasing compiled binaries.
#Edit project/version file manually to increase version number; when
#you do, reset build counter to zero.
build:
	@echo Current versions before build number increase:
	@echo AUBITVERSION = ${AUBITVERSION} AUBITBUILD = ${AUBITBUILD}
	@chmod a+x tools/project/mkproject
	(cd tools/project; ${SH} mkproject -increase)
	@echo After build number increase:
	@echo "AUBITVERSION = `cat $(SOURCE)/tools/project/version` AUBITBUILD = `cat $(SOURCE)/tools/project/build`"

commit.build: build commit.build.step2
commit.build.step2: BUILDNO=$(shell cat $(SOURCE)/tools/project/build)
commit.build.step2:
	@cvs commit -m "commit.build ${BULDNO}" > commit.log
	@echo "Build ${BUILDNO} Commit finished. See file './commit.log'"

#Compile example code
demo:
	${MAKE} ${MKNAME} -C tools/test
	@echo Aubit 4gl compiler examples are now compiled

help:
	@echo
	@echo This is Aubit 4gl compiler makefile help
	@echo
	@echo Usage: "make [targets] [option=value] ..."
	@echo
	@echo For more help use:
	@echo "  make help.options"
	@echo "  make help.targets"
	@echo

help.targets:
	@echo
	@echo Targets:
	@echo
	@echo "  default (same as just "make") - compile the Aubit 4gl compiler"
#	@echo "  gtkgui - compile only GTK libraries"
	@echo "  clean - delete and temp and intermittent files, but not targets"
	@echo "  cleanall - delete ALL compiled object and temp files that where"
	@echo "          created with make. This will result in clan source code"
	@echo "          tree, as exported form CVS"
	@echo "  install - installs Aubit 4gl compiler in installation tree"
	@echo "  tarinstall - creates ${ARCHEXT} file from installation tree"
	@echo "  demo - compile 4gl exampe code in tools/test/ and tools/test/gui/"
	@echo "  log - log default target make process to ./make.log"
	@echo "  settings - show how is makefile configured"
	@echo "  platform - dump settings and current build data to $(PLATFORMINFO)"
	@echo

help.options:
	@echo
	@echo "Options: (first option is default)"
	@echo "  PDFBUILD=(no/yes) NOTE: Must have PDF lib installed"
	@echo "  GTKBUILD=(yes/no) NOTE: Must have GTK lib installed"
	@echo "  JABBERBUILD=(yes/no) NOTE: Must have ikemel lib installed"
	@echo "  PREFIX= where to install binaries, default is $PREFIX"
	@echo
	@echo


## ------------------------------------------------------------------
##                       Maintainance utility targets
## ------------------------------------------------------------------

#refresh pre-compiled parser files that are used for compilation on
#platforms that don't have Yacc installed, from Yacc created files:
refresh.noyacc:
	${CP} compilers/4glc/rules/generated/y.tab.c tools/no_yacc/cygwin/compilers/4glc/rules/generated
	${CP} compilers/4glc/rules/generated/y.tab.h tools/no_yacc/cygwin/compilers/4glc/rules/generated
	${CP} compilers/fcompile/lex.yy.c tools/no_yacc/cygwin/compilers/fcompile
	${CP} compilers/fcompile/y.tab.c tools/no_yacc/cygwin/compilers/fcompile
	${CP} compilers/menus/lex.yy.c tools/no_yacc/cygwin/compilers/menus
	${CP} compilers/menus/y.tab.c tools/no_yacc/cygwin/compilers/menus

#Find c files with same names
find.dup.c.files:
	find . -name "*.c" -exec basename {} \; | sort | uniq -c | grep -v " 1"

#compile examples and run them
test.install:
	(cd $(INSTALL_DIR)/tools/test; ${MAKE}; ./hello; cd gui; ${MAKE}; ./hello_gui)

#Clean and rebuild everything, install, compile examples and run them
test.full:
	${MAKE} clean.all
	./configure
	${MAKE}
	${MAKE} install
	${MAKE} test.install


#Create Makefile.in files from Makefile.am
#automake:
#	automake --add-missing


libtool: @LIBTOOL_DEPS@
#copy:
#config.guess   config.sub   ltconfig   ltmain.in
#from local libtool directory:
#	cp /usr/local/share/libtool/config.* /usr/local/share/libtool/lt* etc/config
#	cp /usr/local/share/libtool/ltconfig /usr/local/share/libtool/ltmain.in etc/config
#old 1.3	(cd etc/config; ./ltconfig ./ltmain.sh)
#old 1.3	${CP} etc/config/libtool .
#for libtool 1.4:
	$(SH) ./config.status --recheck


## ------------------------------------------------------------------
##                       Make and build proccess Debugging
## ------------------------------------------------------------------

savesettings: OUT = $(PLATFORMINFO)
savesettings: newfile settings.common

#no stdout on CygWin :-(
#settings: OUT="/dev/stdout"
settings: OUT=  $(PLATFORMINFO)
settings: blankfile settings.common
	@cat $(PLATFORMINFO)

blankfile:
	@echo "" > ${OUT}

newfile:
	@echo "This file contains version info of compile platform" > ${OUT}

settings.common:
#	@echo "OUT = " ${OUT}
	@echo "make invoked with flags : ${MAKEFLAGS}" >> ${OUT}
	@echo "make invoked in : ${PWD}" >> ${OUT}
	@echo "Reading from root makefile variables:" >> ${OUT}
	@echo -------------- Optional libraries ---------------- >> ${OUT}
	@echo "GTKBUILD        = ${GTKBUILD}" >> ${OUT}
	@echo "PDFBUILD        = ${PDFBUILD}" >> ${OUT}
	@echo "JABBERBUILD     = ${JABBERBUILD}" >> ${OUT}
	@echo -------------- ODBC settings --------------------- >> ${OUT}
	@echo "HAVE_UNIXODBC   = ${HAVE_UNIXODBC}" >> ${OUT}
	@echo "HAVE_IODBC      = ${HAVE_IODBC}" >> ${OUT}
	@echo "ODBC_LINK       = ${ODBC_LINK}" >> ${OUT}
	@echo "ODBC            = ${ODBC}" >> ${OUT}
	@echo "ODBCLIBDIR      = ${ODBCLIBDIR}" >> ${OUT}
	@echo "ODBC_LIB_DIR    = ${ODBC_LIB_DIR}" >> ${OUT}
	@echo "ODBC_LIB_NAME   = ${ODBC_LIB_NAME}" >> ${OUT}
	@echo -------------- C Compiler settings --------------- >> ${OUT}
	@echo "CFLAGS          = ${CFLAGS}" >> ${OUT}
	@echo "LD_LIBRARY_PATH = ${LD_LIBRARY_PATH}" >> ${OUT}
	@echo -------------------------------------------------- >> ${OUT}
	@echo COMPILEDATE=$(COMPILEDATE) AUBITVERSION=$(AUBITVERSION) AUBITBUILD=$(AUBITBUILD) >> ${OUT}
	@echo AUBITDIR=${AUBITDIR} OS=$(TARGET) TARGET_OS=${TARGET_OS}>> ${OUT}
	@echo CONFIGURE_COMMAND = ${CONFIGURE_COMMAND}>> ${OUT}
	@echo -------------------------------------------------- >> ${OUT}

show.platform: OUT="/tmp/showplatform"
show.platform: platform.common
	cat /tmp/showplatform

platform: OUT = $(PLATFORMINFO)
platform: savesettings platform.common
	@${CP} $(OUT) $(INSTALL_DIR)
	@${CP} $(OUT) ${PLATFORMINFOFULL}
	@echo "platform: See result in ${OUT}"
	@echo "Also copied to $(INSTALL_DIR)/$(OUT) and ${PLATFORMINFOFULL}"


platform.common:
#	@echo OUT = $(OUT)
	@echo "----- Compile date: ---------" >> $(OUT)
	@date >> $(OUT)
	@echo "----- Compile host  ---------" >> $(OUT)
	@uname -a >> $(OUT)
	@${GTKCONFIGTEXT}  >> $(OUT)
	@${GTKCONFIGCMD} >> $(OUT)
	@echo "----- ${CC} -v ---------" >> $(OUT)
	@${CC} -v  >> $(OUT) 2>&1
	@if [ -f "bin/4glc" ]; then \
		echo "----- all shared libraries used by 4glc ---------" >> $(OUT) ; \
		ls -al bin/4glc  >> $(OUT) ; \
		${LDDCMD} bin/4glc${EXE} >> $(OUT) ; \
    fi
	@if [ -f "tools/test/test_build" ]; then \
		echo "----- all shared libraries used by compiled 4gl program ---------" >> $(OUT) ; \
		ls -al tools/test/test_build  >> $(OUT) ; \
		${LDDCMD} tools/test/test_build${EXE}  >> $(OUT) ; \
    fi
	@echo "-------------------- EOF -----------------------" >> $(OUT)

#FIXME: info needed for binary disrto: kernel version, ODBC lib version, PDF version,...


settings.rc:
	@echo
	@echo "A1 [/etc/opt/aubit4gl/aubitrc] =${A1}"
	@echo "A2 [/opt/aubit4gl/etc/aubitrc] =${A2}"
	@echo "A3 [../etc/aubitrc]            =${A3}"
	@echo "A4 [etc/aubitrc]               =${A4}"
	@echo "A5 [~/.aubit4gl/aubitrc]       =${A5}"
	@echo "A6 [./.aubitrc]                =${A6}"
	@echo "A7 ['$A4GL_INIFILE' ]            =${A7}"
	@echo


## ------------------------------------------------------------------
##         Static code error and warning checking (Splint)
## ------------------------------------------------------------------

splint: lclint
lclint:
	@echo "Cleaning old $(LCLINT_GLOBAL_LOG)..."
	@(echo " " > $(LCLINT_GLOBAL_LOG))
	$(MAKE) -C lib/libaubit4gl splint
	$(MAKE) -C compilers/4glc splint
	$(MAKE) -C compilers/fcompile splint
	$(MAKE) -C compilers/menus splint
	$(MAKE) -C compilers/helpcompile splint
	@echo "See <module_dir>$(LCLINT_GLOBAL_LOG) for cumulative results of all modules tested"
	@echo "See ./$(LCLINTLOG) in each module directory tested"
	@echo "Tested, in this order:"
	@echo "1: lib/libaubit4gl"
	@echo "2: compilers/4glc"
	@echo "3: compilers/fcompile"
	@echo "4: compilers/menus"
	@echo "5: compilers/helpcompile"
	@echo "All SPLint warnings: "
	@echo "                          Reported  Suppressed"
	@echo "`grep "^Total" lclint.log`"

## ---------------------------- EOF ----------------------------------

