# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   root makefile              |
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+
#
# $Id: Makefile.in,v 1.17 2002-01-13 09:40:43 afalout Exp $
#

#All stuff common to more then one Aubit compiler make file is there:
include incl/Makefile-common

#FIXME: this shou8ld be obsoleted by configure and aubitrc:
#we don't want sub-makefiles to include above again: But we dont't went
#to export this gloably, since it would affect 4glpc sctipt!
#Instead, we want tp pass it to makefiles as command line parameter,
#only for make files that use it, but don't call 4glpc
#NOINCL_PARAM=NOINCL=1

#WARNING! cannot use ${MAKEFLAGS} because of make bug (see showbug:)
#all replaced with BUGMAKEFLAGS


## ==================================================================
##                    ODBC Settings
## ==================================================================

ifeq "$(ODBC)" "unix"
	#Human readable name, for archinve file name, etc.
	ODBCMANAGER		=unixODBC
   	#additional flags for ifdef in C code, needed for this ODBC driver/manager
#	LIBCFLAGS 		+= -DUNIXODBC
endif
ifeq "$(ODBC)" "iodbc"
	ODBCMANAGER		=iODBC
#	LIBCFLAGS 		+= -DIODBC
endif
ifeq "$(ODBC)" "no"
	ODBCMANAGER		=noODBC
#	LIBCFLAGS 		+= -DNOODBC
	ODBCLIBDIR      =
	ODBC_LIB_DIR    =
	ODBC_LIB_NAME   = noodbc
endif

ifneq "$(ODBC)" "no"
	#make sure we will pick up correct ODBC libraries:
	LD_LIBRARY_PATH := ${ODBC_LIB_DIR}:${LD_LIBRARY_PATH}
	export LD_LIBRARY_PATH
endif

ifneq "$(ODBCLIBDIR)" ""
	ifneq "$(ODBC)" "no"
		LIBCFLAGS	+= -I$(ODBCLIBDIR)
    endif
endif

## ==================================================================
##                    GTK Settings
## ==================================================================

#Human readable names for archive file names:
ifeq "$(GTKBUILD)" "yes"
	GUITYPE			=GTK
else
	GUITYPE			=noGTK
endif

## ==================================================================
##                    PDF Settings
## ==================================================================

ifeq "$(PDFBUILD)" "yes"
#	LIBCFLAGS 		+= -DUSE_PDF_REPORTS
	PDFTYPE			=PDF
else
	PDFTYPE			=noPDF
endif


## ==================================================================
##                    Automatic Build Settings
## ==================================================================

#When we package all binary builds using make allbindist, what we will build
ALLBINDISTNAMESNOPDF=unixodbc-gtk-nopdf iodbc-gtk-nopdf unixodbc-nogtk-nopdf iodbc-nogtk-nopdf
ALLBINDISTNAMESPDF	=unixodbc-gtk-pdf unixodbc-nogtk-pdf iodbc-gtk-pdf iodbc-nogtk-pdf
ALLBINDISTNAMES		=${ALLBINDISTNAMESNOPDF} ${ALLBINDISTNAMESPDF}

## ==================================================================
##                    Install Settings
## ==================================================================

#install location:
PREFIX=/opt
INSTALL_DIR=${PREFIX}/aubit4gl

#RPM setup:
RPMBUILDROOT=/root/redhat

#SOURCE 		= $(AUBITDIR)
SOURCE 		=.
#installation files
TESTDIR     =$(SOURCE)/tools/test
DOCDIR     	=$(SOURCE)/docs
IDEDIR     	=$(SOURCE)/tools/ide
TOBIN		=$(SOURCE)/bin/4glc $(SOURCE)/bin/4glpc $(SOURCE)/bin/fcompile \
			$(SOURCE)/bin/mcompile $(SOURCE)/bin/mkmess $(SOURCE)/bin/amake \
			$(SOURCE)/bin/amakeallo $(SOURCE)/bin/amakeallf \
			$(SOURCE)/bin/loadmap $(SOURCE)/bin/aubit $(SOURCE)/bin/aubit-config \
            $(SOURCE)/bin/genmake $(SOURCE)/bin/mdecompile $(SOURCE)/bin/prepmake

ifneq "$(ODBC)" "no"
	ifeq "$(ODBC_LINK)" "static"
		TOBIN	+=$(SOURCE)/bin/4glc-noodbc $(SOURCE)/bin/fcompile-noodbc \
					$(SOURCE)/bin/mcompile-noodbc
    endif
endif

#FIXME: what am I doing with all this .so in lib/ ? Some are just links....
#aclshared-noodbc.so     libaclshared-noodbc.so     libgtk4gl.so
#aclshared.so            libaclshared.so            libgtk4gl_x.so
#aclsharedgui-noodbc.so  libaclsharedgui-noodbc.so
#aclsharedgui.so         libaclsharedgui.so

#and all .a in lib/ ?
#libaclall-noodbc.a  libaclall.a  libaclallgui-noodbc.a  libaclallgui.a


TOLIBGTK	=$(SOURCE)/lib/libaclallgui.a $(SOURCE)/lib/libgtk4gl_x.a \
			$(SOURCE)/lib/libgtk4gl.so $(SOURCE)/lib/libaclsharedgui.so

ifndef COMSPEC
	TOLIBGTK	+=$(SOURCE)/lib/libgtk4gl_x.so
endif

TOLIBCUI	=$(SOURCE)/lib/libaclall.a $(SOURCE)/lib/libaclshared.so \
            $(SOURCE)/lib/libPDF_NOPDF.so $(SOURCE)/lib/libSQL_nosql.so
ifneq "$(ODBC)" "no"
	ifeq "$(ODBC_LINK)" "static"
		TOLIBGTK	+=$(SOURCE)/lib/libaclallgui-noodbc.a

		#FIXME:
		#cp: /usr/aubit/aubit4glsrc/lib/libgtk4gl-noodbc.so: No such file or directory
		#ifndef COMSPEC
		#	TOLIBGTK	+= $(SOURCE)/lib/libgtk4gl-noodbc.so
	    #endif
		TOLIBCUI	+=$(SOURCE)/lib/libaclall-noodbc.a
    endif
endif

ifeq "${HAVE_UNIXODBC}" "yes"
	TOLIBCUI	+=$(SOURCE)/lib/libSQL_unixodbc.so
endif
ifeq "${HAVE_IODBC}" "yes"
	TOLIBCUI	+=$(SOURCE)/lib/libSQL_isql.so
endif


MKFILNAME	=Makefile

TODOCS		=$(SOURCE)/docs/changelog.txt $(SOURCE)/docs/COPYING $(SOURCE)/docs/CREDITS $(SOURCE)/docs/LICENSE
TOTEST		=$(TESTDIR)/*.4gl $(TESTDIR)/*.per $(TESTDIR)/${MKFILNAME} $(TESTDIR)/*.msg
TOTESTGUI	=$(TESTDIR)/gui/*.4gl $(TESTDIR)/gui/*.per $(TESTDIR)/gui/${MKFILNAME}
#TOETC		=$(SOURCE)/etc/*.example
#TOETC		=$(SOURCE)/etc/a4glrc.example $(SOURCE)/etc/aubitenv.example $(SOURCE)/etc/odbc.ini.example $(SOURCE)/etc/aubitbuild.mk.example
TOETC		=$(SOURCE)/etc/odbc.ini.example
TOHOME		=$(SOURCE)/a4glrc.example
TOROOT		=$(SOURCE)/README.txt
TOINCL		=$(SOURCE)/incl/4glhdr.h $(SOURCE)/incl/acl4glgui.h \
				$(SOURCE)/incl/*.mk $(SOURCE)/incl/*.mki $(SOURCE)/incl/Makefile-common
TOIDE       =$(IDEDIR)/*.4gl $(IDEDIR)/*.c $(IDEDIR)/*.sh $(IDEDIR)/*.msg $(IDEDIR)/*.per $(IDEDIR)/${MKFILNAME}


#Set AUBITDIR in aubitrc settings:
	TOREPLACE=^AUBITDIR
	INFILE=etc/aubitrc
	OLDVALUE:=$(shell grep "${TOREPLACE}" ${INFILE} | awk '{print $1}' | sed -e "s/\//\\\\\//g")
	NEWVALUE:=$(shell echo "AUBITDIR=$(INSTALL_DIR)" | sed -e "s/\//\\\\\//g")
	STARTWITH=^${OLDVALUE}
	REPLACEWITH=${NEWVALUE}
	AUBITRCFILEEXISTS:=$(shell ls ${AUBITETC}/aubitrc 2>/dev/null)

#LIB_INSTALL_LINK=/usr/local/lib
LIB_INSTALL_LINK=/usr/lib

##################################################
#definitions of names for bynary distro file name:
AUBITVERSION:=$(shell cat $(SOURCE)/tools/project/version)
AUBITBUILD	:=$(shell cat $(SOURCE)/tools/project/build)
COMPILEDATE	:=$(shell date +%d-%m-%Y)

LD_SO_CONF=/etc/ld.so.conf
GREP_LD_SO_CONF:=$(shell grep ${INSTALL_DIR}/lib ${LD_SO_CONF})
GREP_LD_SO_CONF_REMOVE:=$(shell echo "${GREP_LD_SO_CONF}" | sed -e "s/\//\\\\\//g")

## ==================================================================
##                    CVS Settings
## ==================================================================

AUBITCVSNAME=Aubit4gl
AUBITCVSSFNAME=aubit4glsrc
AUBITCVSSFMANNAME=aubit4gldoc
CVSROOTSF=':pserver:anonymous@cvs.aubit4gl.sourceforge.net:/cvsroot/aubit4gl'

NAMEVERBLD=${AUBITCVSSFNAME}-${AUBITVERSION}.${AUBITBUILD}

#Download page processing temp file names:
#Warning: if you change this names, you will need to manually change existing
#names already embedded in CYBUILDNAMES	and UNIXBUILDNAMES files.
DLTMP1=tmpdlpage1.html
DLTMP2=tmpdlpage2.html

SCPPATH=/home/groups/a/au/aubit4gl/htdocs/files


## ==================================================================
##                    Platform dependent Settings
## ==================================================================

ifdef COMSPEC #############Windows platform - CygWin related:################

	#Under CygWin/Windows, cron cannot use network shares, and also
   	#we want to stop using local upload location, as defined in $WWW:
	USELOCALUPLOAD	=0
	SH          	=bash
	OS				=win32-cygwin
	ARCHEXT			=zip
    DIRSEP			=\\
	EXE				=.exe
	#for packcygwin
	#CYSOURCE 		= $(AUBITDIR)
    CYSOURCE 		=.
	CYDLLTARGET		=${INSTALL_DIR}/dll
	CYLIBTARGET1	=${INSTALL_DIR}/extralibs
	LIBTARGET2		=/lib
	LIBTARGET1		=${INSTALL_DIR}/extralibs
	DLLTARGET		=${INSTALL_DIR}/dll
	RUNEXE			=$(CYSOURCE)/tools/cygwin/run.exe
	CYTOBIN			=$(CYSOURCE)/bin/4glc${EXE} $(CYSOURCE)/bin/4glpc \
					$(CYSOURCE)/bin/fcompile${EXE} $(CYSOURCE)/bin/mcompile${EXE} \
					$(CYSOURCE)/bin/mkmess${EXE} ${RUNEXE} $(CYSOURCE)/bin/amake \
	    	        $(CYSOURCE)/bin/amakeallf $(CYSOURCE)/bin/amakeallo \
	        	    $(CYSOURCE)/bin/aubitbuild.sh $(CYSOURCE)/bin/genmake \
	            	$(CYSOURCE)/bin/prepmake

	ifneq "$(ODBC)" "no"
		ifeq "$(ODBC_LINK)" "static"
			CYTOBIN	+=$(CYSOURCE)/bin/4glc-noodbc${EXE} \
					$(CYSOURCE)/bin/fcompile-noodbc${EXE} \
					$(CYSOURCE)/bin/mcompile-noodbc${EXE}
        endif
    endif

	#FIXME: where is $(CYSOURCE)/lib/libgtk4gl.so
	#libgtk4gl is .a only, no .so on CygWin ???
	CYTOLIBGTK	=$(CYSOURCE)/lib/libaclallgui.a $(CYSOURCE)/lib/libgtk4gl.a
	#we still cannot compile this one: $(CYSOURCE)/lib/libgtk4gl_x.so
	ifneq "$(ODBC)" "no"
		ifeq "$(ODBC_LINK)" "static"
			CYTOLIBGTK	+=$(CYSOURCE)/lib/libaclallgui-noodbc.a
			#We still cannot compile this one :$(CYSOURCE)/lib/libgtk4gl-noodbc.a
        endif
    endif

	ifeq "$(GTKBUILD)" "yes"
	    ifneq "$(GLIBVER)" "old"

			LIBCFLAGS 		+=-fnative-struct

	    else
			#extra libraries locations:
			LIBVER		=-1.3
			ADD			=/usr/src
			L1			=${ADD}/gtk+/gdk
			L2			=${ADD}/gtk+/gtk
			L3			=${ADD}/rpc-4.0/rpc
			L4			=${ADD}/glib
			L5			=${AUBITDIR}/lib
			L6			=${ADD}/libiconv${LIBVER}/src
			L7			=${ADD}/intl
			ALLLINKPATHS=-L${L1} -L${L2} -L${L3} -L${L4} -L${L5} -I/usr/src/rpc-4.0

			LIBCFLAGS 		+=${ALLLINKPATHS}

	    endif
    endif

	#WARNING! this will override all CFLAGS in all sub-makefiles:
	LIBCFLAGS 		+= -DWIN32

	WWW				=\\\\APTIVA\\ROOT\\data2\\htdocs
	MAKERPC			=cyrpc
    PREPARE 		=cyprepare
	GTKCONFIGTEXT	=echo "----- gtk-version form makefile -------"
	GTKCONFIGCMD	=echo ${LIBVER}
    LDDCMD          =cygcheck 	#echo "no ldd available on CygWin"
    #we need makefile for aubit binary build on CygWin to install dll/ and extralibs/
	TOROOT          += $(SOURCE)/Makefile

else ####################### Platform is UNIX ##############################
    
	#We want to stop using local upload location, as defined in $WWW:
	USELOCALUPLOAD=0
	
	SH          	=sh
	#FIXME: this should be automatic, or contain kernel version:
	OS				=RH6
	ARCHEXT			=tar.gz
    DIRSEP			=/
	#on unix, we expect to have WWW set in environment
	#WWW			=/data2/htdocs
	MAKERPC			=unixrpc
    PREPARE 		=unixprepare
	GTKCONFIGTEXT	=echo "----- gtk-config --version ---------"
	GTKCONFIGCMD	=gtk-config --version
    LDDCMD          =ldd
endif


## ==================================================================
##                    Nightly builds Settings
## ==================================================================

FTPLOCATION		=$(WWW)${DIRSEP}projects${DIRSEP}Aubit4GL${DIRSEP}download

#FIXME: add CPU to file name (i385,i586, etc.) instead of "bin"
TEMPLATENAME	=aubit4gl-bin-$(OS)-$(ODBCMANAGER)-$(GUITYPE)-$(PDFTYPE)---template--.${ARCHEXT}
TEMPLATENAMETXT	=aubit4gl-bin-$(OS)-$(ODBCMANAGER)-$(GUITYPE)-$(PDFTYPE)---txttemplate--.${ARCHEXT}
TEMPLATESRC		=aubit4gl-src--template--.${ARCHEXT}

TARNAMENOEXT	=aubit4gl-bin-$(OS)-$(ODBCMANAGER)-$(GUITYPE)-$(PDFTYPE)-$(AUBITVERSION)-$(AUBITBUILD)-$(COMPILEDATE)
TARNAME			=${TARNAMENOEXT}.${ARCHEXT}
#FIXME: remove ZIPNAME
ZIPNAME			=${TARNAME}
ZIPRUNTIMENAME  =aubit4gl-runtime-$(OS)-$(ODBCMANAGER)-$(GUITYPE)-$(PDFTYPE)-$(AUBITVERSION)-$(AUBITBUILD)-$(COMPILEDATE).${ARCHEXT}

PLATFORMSTRING	=compile-platform-info

#SF web site thinks all files that have tar.gz ANYWHERE in the name are
#tar.gz files, and show them as empty, so we cannot use full TARNAME:
#PLATFORMINFOFULL=${PLATFORMSTRING}-$(TARNAME).txt
PLATFORMINFOFULL=${PLATFORMSTRING}-$(TARNAMENOEXT).txt
TEMPLATENAMEINFO=${PLATFORMSTRING}-$(TEMPLATENAMETXT).txt
PLATFORMINFO	=${PLATFORMSTRING}.txt


DOWNLOADPAGEBASE=aubitdownload.htm
DOWNLOADPAGE	=$(FTPLOCATION)${DIRSEP}${DOWNLOADPAGEBASE}
TEMPLATEFILEBASE=aubitdownload-template.htm
TEMPLATEFILE	=$(FTPLOCATION)${DIRSEP}${TEMPLATEFILEBASE}

ifeq "$(USELOCALUPLOAD)" "1"
	CYBUILDNAMES	=${FTPLOCATION}${DIRSEP}cybuildnames.tmp
	UNIXBUILDNAMES	=${FTPLOCATION}${DIRSEP}unixbuildnames.tmp
	CYSRCBUILDNAMES	=${FTPLOCATION}${DIRSEP}cysrcbuildnames.tmp
	UNIXSRCBUILDNAMES=${FTPLOCATION}${DIRSEP}unixsrcbuildnames.tmp
else
	CYBUILDNAMES	=cybuildnames.tmp
	UNIXBUILDNAMES	=unixbuildnames.tmp
	CYSRCBUILDNAMES	=cysrcbuildnames.tmp
	UNIXSRCBUILDNAMES=unixsrcbuildnames.tmp
endif

SOURCETARBASENAME=aubit4gl-src-$(AUBITVERSION)-$(AUBITBUILD)-$(COMPILEDATE).${ARCHEXT}
MANFILEBASENAME=aubit4gl-doc-$(AUBITVERSION)-$(AUBITBUILD)-$(COMPILEDATE).${ARCHEXT}
#FIXME: remove SOURCEZIPBASENAME
SOURCEZIPBASENAME=${SOURCETARBASENAME}

SOURCETARNAME	=$(SOURCE)/$(SOURCETARBASENAME)
#FIXME: remove SOURCEZIPNAME (and all duplicate functions)
SOURCEZIPNAME	=$(SOURCE)/$(SOURCEZIPBASENAME)
MANFILENAME     =$(SOURCE)/$(MANFILEBASENAME)


## ==================================================================
##                    Define default target
## ==================================================================

ALL             = Makefile settings ${MAKERPC} corecompile

ifeq "$(GTKBUILD)" "yes"
	ifdef COMSPEC
		#ALL = settings ${MAKERPC} gtkgui corecompile test
        ALL += gtkgui
	else
		ALL += gtkgui
    endif
endif

ALL +=test

## ==================================================================
##                              Targets
## ==================================================================

#default target:
all: ${ALL}
	@echo "Aubit 4gl compiler default target build finished. $0"

#FIXME: Do I need to pass ${MAKEFLAGS}, since
#I'm exporting all variables to shell?
log:
	@echo "Logging make process to make.log, please wait..."
	@${MAKE} ${MKNAME} ${BUGMAKEFLAGS} > make.log 2>&1
	@echo "make finished successfuly, see make.log for details."

corecompile: libs
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C compilers/4glc/rules
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C compilers/4glc PDFBUILD=${PDFBUILD} OUTPUTLANG=${OUTPUTLANG} ${NOINCL_PARAM}
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C compilers/fcompile PDFBUILD=${PDFBUILD}
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C compilers/menus PDFBUILD=${PDFBUILD}
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C compilers/helpcompile #PDFBUILD=${PDFBUILD}
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} loadmap -C lib PDFBUILD=${PDFBUILD} ${NOINCL_PARAM}
	@echo Aubit 4gl compiler core is now compiled

libs:
#FIXME: check if all this is correvtly exported:
# ODBC=${ODBC} PDFBUILD=${PDFBUILD} GTKBUILD=${GTKBUILD} JABBERBUILD=${JABBERBUILD}
#warning! this will override all CFLAGS, etc. in ALL sub-makefiles!
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C lib CFLAGS="$(LIBCFLAGS)" ${NOINCL_PARAM}
	@echo Aubit 4gl core libraries are now compiled

#make  -C lib CFLAGS="-g -O2 -Ilibincl -I. -DAUTOBANG -DDEBUG -DIODBC -I/opt/unixODBC/include"

gtkgui:
#WARNING! Thhis will override CFLAGS in sub-makefile:
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C lib all_gui CFLAGS="$(LIBCFLAGS)" ${NOINCL_PARAM}
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C lib/libgui ${NOINCL_PARAM}
#	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C lib/libgui libgtk4gl_x.so
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C lib/libgui gtk4gl_x ${NOINCL_PARAM}
	@echo Aubit 4gl compiler GTK GUI is now compiled

ide:
	$(MAKE) ${MKNAME} -C tools/ide
	$(MAKE) ${MKNAME} -C tools/ide install.aubit


perl: perl.compiler perl.lib test.perl

perl.compiler:
	${MAKE} ${MKNAME} -C compilers/4glc 4glc_perl PDFBUILD=no ${NOINCL_PARAM}
	@echo Aubit 4gl Perl-code generating version compiler created

perl.lib:
	cd lib/swig; sh domake
	@echo Aubit 4gl Perl-code libraries installed

test.perl:
	cd tools/test; 4glc_perl test_build.4gl
	cd tools/test; perl test_build.pl

## ==================================================================
##                              Prepare Targets
## ==================================================================

#FIXME: remove all "prepare" targets - not needed any more

prepare: ${PREPARE}

unixprepare:
#FIXME: chmod, touch, rm, mkdir - shouold not be needed!
	(chmod a+x tools/project/mkproject)
	(chmod a+x compilers/4glc/rules/bin/*)
	(chmod a+x lib/bin/*)
	(chmod a+x bin/*)
	(chmod ug+rw compilers compilers/fcompile compilers/menus lib)

cyprepare:
	(chmod a+x tools/project/mkproject)
	(chmod a+x compilers/4glc/rules/bin/*)
	(chmod a+x lib/bin/*)
	(chmod a+x bin/*)

## ==================================================================
##                              Make RPC
## ==================================================================

rpc: ${MAKERPC}

cyrpc:
	(cp tools/cygwin/form_x_xdr.c compilers/fcompile )
	(cp tools/cygwin/menu_x_xdr.c compilers/menus)
	(cp tools/cygwin/form_x.h compilers/fcompile )
	(cp tools/cygwin/form_x.h lib)
	(cp tools/cygwin/form_x.h lib/libgui)
	(cp tools/cygwin/menu_x.h compilers/menus )
	(cp tools/cygwin/menu_x.h lib)


unixrpc:
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C compilers/fcompile rpc
	$(MAKE) ${MKNAME} ${BUGMAKEFLAGS} -C compilers/menus rpc
#FIXME: this cp, if realy needed should go in local makefine, not here!
#	(cp compilers/fcompile/form_x_xdr.c compilers/fcompile/form_x.h lib)
#	(cp compilers/menus/menu_x_xdr.c compilers/menus/menu_x.h lib)

## ------------------------------------------------------------------
##                       Cleanup Targets
## ------------------------------------------------------------------

#FIXME: "clean" should clean intermediate files resulting from compile, but will skip
#executables and objects that are needed for instalation. After "clean", it should
#still be possiblt to do "make install"
clean:
	@echo FIXME: only cleanall works

clean.all: cleanall

#will clean EVERYTHING that is not source file from CVS
cleanall: clean.root clean.bin clean.etc clean.incl clean.docs clean.install clean.swig clean.project
	@echo Cleaning Aubit 4gl temporary compiler files and compiled objects...
	$(MAKE) ${MKNAME} -C lib clean
	$(MAKE) ${MKNAME} -C lib/libgui clean
	$(MAKE) ${MKNAME} -C lib/extra_libs/file clean
	$(MAKE) ${MKNAME} -C compilers/4glc/rules clean
	$(MAKE) ${MKNAME} -C compilers/4glc clean
	$(MAKE) ${MKNAME} -C compilers/fcompile clean
	$(MAKE) ${MKNAME} -C compilers/menus clean
	$(MAKE) ${MKNAME} -C compilers/helpcompile clean
	$(MAKE) ${MKNAME} -C tools/test clean
	$(MAKE) ${MKNAME} -C tools/test/gui clean
	$(MAKE) ${MKNAME} -C tools/ide clean
	$(MAKE) ${MKNAME} -C tools/html clean
	$(MAKE) ${MKNAME} -C tools/jabber clean
	@echo Aubit 4gl compiler source tree is now clean

clean.configure: clean.makefiles clean.settings
	${RM} config.log config.status incl/config.h

clean.settings:
	${RM} etc/a4glrc etc/aubitbuild.mk etc/aubitenv etc/aubitrc

clean.makefiles:
	${RM} compilers/4glc/Makefile
	${RM} compilers/4glc/rules/Makefile
	${RM} compilers/fcompile/Makefile
	${RM} compilers/helpcompile/Makefile
	${RM} compilers/menus/Makefile
	${RM} incl/Makefile-common
	${RM} lib/Makefile
	${RM} lib/libgui/Makefile
	${RM} lib/libpdf/Makefile
	${RM} lib/libsql/nosql/Makefile
	${RM} lib/libsql/odbc/Makefile
	${RM} lib/extra_libs/file/Makefile
	${RM} tools/adbaccess/Makefile
	${RM} tools/adbload/Makefile
	${RM} tools/html/Makefile
	${RM} tools/ide/Makefile
	${RM} tools/jabber/Makefile
	${RM} tools/odbctest/Makefile
	${RM} tools/test/Makefile
	${RM} tools/test/gui/Makefile
	${RM} Makefile


clean.root:
	$(RM) *.bak *.BAK libincl .*.bak core
	${RM} debug.out
	${RM} *.err ${PLATFORMSTRING}*.txt
#We must not clean *.log when running make process to make.log:
	${RM} make.log commit.log rpmbuild.log
#we must not clean *.tmp because of unixbuildnames.tmp:
#	${RM} *.tmp
	${RM} aubit4gl.lsm aubitdownload-template.htm


clean.bin:
	(cd bin;${RM} 4glc fcompile mcompile mkmess 4glc-noodbc fcompile-noodbc \
	mcompile-noodbc loadmap 4glc.exe fcompile.exe mkmess.exe mcompile.exe \
	loadmap.exe *.bak ide fcompile-noodbc.exe mcompile-noodbc.exe 4glc-noodbc.exe \
	4glc_perl mdecompile fdecompile fdecompile-j aubit-config)

clean.etc:
	${RM} etc/*.bak etc/aubit-auto.spec

clean.incl:
	${RM} incl/*.bak

clean.docs:
	rm -rf docs/doxy/html
	${RM} docs/doxy/*.bak
	${RM} docs/*.bak

clean.install:
	rm -rf install

clean.swig:
	@if [ -f lib/swig/?akefile ]; then \
		$(MAKE) ${MKNAME} -C lib/swig clean; \
    fi
	(cd lib/swig; ${RM} lib_wrap.c *.old *.bak aubit4gl_pl.pm)

clean.project:
	(cd tools/project; ${RM} *.bak)

## ------------------------------------------------------------------
##                       Installation Targets: *NIX
## ------------------------------------------------------------------
#FIXME: this should use ${INSTALL}
#FIXME: install .a4glrc in $HOME too
#FIXME: do NOT overwrite .a4glrc and aubitenv!
#FIXME: which files go to TOLIBCUI, when not compiled with GTK?
#make icons for KDE and GNOME: to IDE, to manual

install: install.core install.example install.manual install.config \
		install.links install.aubitrc install.libs.links
#install.libs.conf
	@echo Aubit compiler installed to $(INSTALL_DIR)
#platform
#etc/aubit-auto.spec

install.core: install.tree install.gtk
	${CP} $(TOBIN) $(INSTALL_DIR)/bin
	chmod a+x $(INSTALL_DIR)/bin/*
	$(CP) $(TOROOT) $(INSTALL_DIR)
	$(CP) $(TOINCL) $(INSTALL_DIR)/incl
	$(CP) $(TOLIBCUI) $(INSTALL_DIR)/lib
	@echo "#AUBIT_BIN_INSTALL is needed for make files to know they are not in Aubit compiler source code tree:" > /tmp/Makefile-common
	@echo "AUBIT_BIN_INSTALL=1" >> /tmp/Makefile-common
	@cat $(SOURCE)/incl/Makefile-common >> /tmp/Makefile-common
	@mv /tmp/Makefile-common $(INSTALL_DIR)/incl
	@echo Aubit 4gl core compiler files installed

install.gtk:
ifeq "${GTKBUILD}" "yes"
	$(CP) $(TOLIBGTK) $(INSTALL_DIR)/lib
endif

install.config:
	$(CP) ${TOETC} $(INSTALL_DIR)/etc
	@echo "Configuration examples installed to $(INSTALL_DIR)/etc"

install.example:
	$(CP) $(TOTEST) $(INSTALL_DIR)/tools/test
ifeq "${GTKBUILD}" "yes"
	$(CP) $(TOTESTGUI) $(INSTALL_DIR)/tools/test/gui
endif
	@echo Aubit 4gl compiler programming examples are now installed

install.manual:
	$(CP) $(TODOCS) $(INSTALL_DIR)/docs
#	$(CP) $(TODOCS2) $(INSTALL_DIR)/docs/manual/html
	@echo Aubit 4gl compiler manual is now installed

installide:
	${MAKE} ${MKNAME} -C tools/ide install.aubit
	@echo Aubit 4gl compiler IDE is now installed

install.aubitrc:
#	@echo STARTWITH = ${STARTWITH}
#	@echo REPLACEWITH = ${REPLACEWITH}
	sed -e "/${STARTWITH}/s/${STARTWITH}/${REPLACEWITH}/" ${INFILE} > /tmp/aubitrc.tmp
ifeq "${AUBITRCFILEEXISTS}" ""
	mv /tmp/aubitrc.tmp ${AUBITETC}/aubitrc
	chmod a+r ${AUBITETC}/aubitrc
	@echo "Configuration files installed to ${AUBITETC}/aubitrc"
else
	@echo "Configuration file aubitrc exists in ${AUBITETC}/aubitrc - WILL NOT OVERWRITE"
endif


packide:
	${CP} ${TOIDE} $(INSTALL_DIR)/IDE

installdrop:
	${RMDIR} $(INSTALL_DIR)

#install.tree.mkpath:
install.tree:
#	${MKPATH} $(INSTALL_DIR)
	${MKPATH} $(INSTALL_DIR)/bin
	${MKPATH} $(INSTALL_DIR)/lib
	${MKPATH} $(INSTALL_DIR)/etc
	${MKPATH} $(INSTALL_DIR)/incl
#	${MKPATH} $(INSTALL_DIR)/tools/ide
#	${MKPATH} $(INSTALL_DIR)/test
	${MKPATH} $(INSTALL_DIR)/tools/test/gui
	${MKPATH} $(INSTALL_DIR)/docs
#	${MKPATH} $(INSTALL_DIR)/docs/manual
#	${MKPATH} $(INSTALL_DIR)/docs/manual/html
	@echo "Aubit 4gl compiler instalation tree created"

install.links.source:
#this links bin programs to location of Aubit source code:
	${MKPATH} $(PREFIX)/bin
	${LN_S} ${AUBITDIR}/bin/aubit-config $(PREFIX)/bin/aubit-config
	${LN_S} ${AUBITDIR}/bin/aubit $(PREFIX)/bin/aubit

install.links:
#This links bin programs to location of Aubit bynary installation:
	${MKPATH} $(PREFIX)/bin
	${RM} $(PREFIX)/bin/aubit-config $(PREFIX)/bin/aubit
	${LN_S} $(INSTALL_DIR)/bin/aubit-config $(PREFIX)/bin/aubit-config
	${LN_S} $(INSTALL_DIR)/bin/aubit $(PREFIX)/bin/aubit
	@echo "Links to Aubit compiler installed to $(PREFIX)/bin/ "

#This will work only on Linux, and Aubit loads from $AUBITDIR.lib anyway:
install.libs.conf:
ifeq "${GREP_LD_SO_CONF}" ""
	echo "$(INSTALL_DIR)/lib" >> ${LD_SO_CONF}
	@echo "Added $(INSTALL_DIR)/lib entry to ${LD_SO_CONF}."
	ldconfig
	@echo "Refreshed ldconfig cache."
else
	@echo "${GREP_LD_SO_CONF} entry in ${LD_SO_CONF} already exists."
endif

install.libs.links: deinstall.libs.links
ifeq "${GTKBUILD}" "yes"
	${LN_S} $(INSTALL_DIR)/lib/libaclsharedgui.so ${LIB_INSTALL_LINK}/libaclsharedgui.so
	${LN_S} $(INSTALL_DIR)/lib/libgtk4gl.so ${LIB_INSTALL_LINK}/libgtk4gl.so
	${LN_S} $(INSTALL_DIR)/lib/libgtk4gl_x.so ${LIB_INSTALL_LINK}/libgtk4gl_x.so
endif
	${LN_S} $(INSTALL_DIR)/lib/libPDF_NOPDF.so ${LIB_INSTALL_LINK}/libPDF_NOPDF.so


deinstall.libs.links:
#remove links to libraries:
	${RM} ${LIB_INSTALL_LINK}/libaclsharedgui.so
	${RM} ${LIB_INSTALL_LINK}/libgtk4gl.so
	${RM} ${LIB_INSTALL_LINK}/libgtk4gl_x.so
	${RM} ${LIB_INSTALL_LINK}/libPDF_NOPDF.so


deinstall: deinstall.libs.links
#deinstall: installdrop
#we could just trop the whole $(INSTALL_DIR) tree, but this is not very safe;
#in the case user placed some files there (stupido!) he will hate us nevertheless
	-${MAKE} -C $(INSTALL_DIR)/tools/test clean
	-${MAKE} -C $(INSTALL_DIR)/tools/test/gui clean
#Core compiler files:
	${RM} $(INSTALL_DIR)/bin/4glc $(INSTALL_DIR)/bin/4glpc $(INSTALL_DIR)/bin/fcompile \
		$(INSTALL_DIR)/bin/mcompile $(INSTALL_DIR)/bin/mkmess $(INSTALL_DIR)/bin/amake \
		$(INSTALL_DIR)/bin/amakeallo $(INSTALL_DIR)/bin/amakeallf \
		$(INSTALL_DIR)/bin/loadmap $(INSTALL_DIR)/bin/aubit $(INSTALL_DIR)/bin/aubit-config \
		$(INSTALL_DIR)/bin/genmake $(INSTALL_DIR)/bin/mdecompile $(INSTALL_DIR)/bin/prepmake
	${RM} $(INSTALL_DIR)/README.txt
	${RM} $(INSTALL_DIR)/incl/4glhdr.h $(INSTALL_DIR)/incl/acl4glgui.h $(INSTALL_DIR)/incl/*.mk \
		$(INSTALL_DIR)/incl/*.mki $(INSTALL_DIR)/incl/Makefile-common
	${RM} $(INSTALL_DIR)/lib/libaclall.a $(INSTALL_DIR)/lib/libaclshared.so \
		$(INSTALL_DIR)/lib/libPDF_NOPDF.so $(INSTALL_DIR)/lib/libSQL_nosql.so \
    	$(INSTALL_DIR)/lib/libaclsharedgui.so $(INSTALL_DIR)/lib/libgtk4gl.so \
		$(INSTALL_DIR)/lib/libgtk4gl_x.so $(INSTALL_DIR)/lib/libaclallgui.a  \
		$(INSTALL_DIR)/lib/libgtk4gl_x.a  $(INSTALL_DIR)/lib/libSQL_unixodbc.so
#examples:
	${RM} $(INSTALL_DIR)/tools/test/*.4gl $(INSTALL_DIR)/tools/test/*.per \
		$(INSTALL_DIR)/tools/test/Makefile $(INSTALL_DIR)/tools/test/*.msg
	${RM} $(INSTALL_DIR)/tools/test/gui/*.4gl $(INSTALL_DIR)/tools/test/gui/*.per \
		$(INSTALL_DIR)/tools/test/gui/Makefile
#manual
	${RM} $(INSTALL_DIR)/docs/changelog.txt $(INSTALL_DIR)/docs/COPYING $(INSTALL_DIR)/docs/CREDITS \
		$(INSTALL_DIR)/docs/LICENSE
#config examples
	${RM} $(INSTALL_DIR)/etc/odbc.ini.example

#delete this directories only if they are now empty:
	-rmdir $(INSTALL_DIR)/bin
	-rmdir $(INSTALL_DIR)/lib
	-rmdir $(INSTALL_DIR)/etc
	-rmdir $(INSTALL_DIR)/incl
	-rmdir $(INSTALL_DIR)/tools/test/gui
	-rmdir $(INSTALL_DIR)/tools/test
	-rmdir $(INSTALL_DIR)/tools
	-rmdir $(INSTALL_DIR)/docs
	-rmdir $(INSTALL_DIR)
#remove entry from library path config file:
ifeq "${GREP_LD_SO_CONF}" ""
	@echo "$(INSTALL_DIR)/lib entry in ${LD_SO_CONF} does not exist."
else
	sed -e "/${GREP_LD_SO_CONF_REMOVE}/s/${GREP_LD_SO_CONF_REMOVE}//" ${LD_SO_CONF} > /tmp/ld_so_conf.tmp
	mv /tmp/ld_so_conf.tmp ${LD_SO_CONF}
	@echo "Removed ${GREP_LD_SO_CONF} entry from ${LD_SO_CONF}."
	ldconfig
	@echo "Refreshed ldconfig cache."
endif
	
#remove links to binaries:
	${RM} $(PREFIX)/bin/aubit-config $(PREFIX)/bin/aubit
	@echo "Aubit compiler de-installed. Config file in ${AUBITETC} "
	@echo "where not deleted."

tarinstall: platform
#FIXME: check if it exists first
#	(cd $(PREFIX); tar -cvzf $(SOURCE)/$(TARNAME) * $(A4GLRC))
	(cd $(INSTALL_DIR); tar -cvzf $(SOURCE)/$(TARNAME) * )

createcleantar: installdrop installall tarinstall
	@echo "Aubit 4gl compiler binary disribution is now in $(SOURCE)/$(TARNAME)"


###################################
# Get sources from CVS
#cvs login script uses "expect" to supply my CVS password, and therefore
#will not be included here; but here is code for this script if you need it:
#Wrapper to make cvs password be non-interactive:
#--------------------------------
#!/usr/bin/expect -f
#spawn cvs login [lindex $argv 0]
#expect "CVS password:"
#send "mysecretpassword\r"
#expect eof
#--------------------------------
source.tar:
	${RMDIR} $(INSTALL_DIR)
	mkdir $(INSTALL_DIR)
	(cd $(INSTALL_DIR); autocvspasswd; cvs -z3 checkout $(AUBITCVSNAME))
	(cd $(INSTALL_DIR)/$(AUBITCVSNAME); tar -cvzf $(SOURCETARNAME) * )

source.tar.sf:
	${RMDIR} $(INSTALL_DIR)
	mkdir $(INSTALL_DIR)
	(export CVSROOT=${CVSROOTSF}; cd $(INSTALL_DIR); autosfcvsanonpasswd; cvs -z8 checkout $(AUBITCVSSFNAME))
	(cd $(INSTALL_DIR)/$(AUBITCVSSFNAME); tar -cvzf $(SOURCETARNAME) * )

source.tar.location:
	(cd $(SRCLOCATION); tar -cvzf $(SOURCETARNAME) * )
	@echo $(SOURCETARNAME) created

source.tar.curr: SRCLOCATION=${AUBITDIR}
source.tar.curr: clean.all source.tar.location

man.tar.sf:
#use "cvs export" instead "cvs checkout" to get code without CVS directories
#	export CVS_RSH=
	${RMDIR} $(INSTALL_DIR)
	mkdir $(INSTALL_DIR)
	(export CVSROOT=${CVSROOTSF}; cd $(INSTALL_DIR); autosfcvsanonpasswd; cvs -z8 checkout $(AUBITCVSSFMANNAME))
	(cd $(INSTALL_DIR)/$(AUBITCVSSFMANNAME); tar -cvzf $(MANFILENAME) * )

source.zip:
	${RMDIR} $(INSTALL_DIR)
	${MKPATH} $(INSTALL_DIR)
	(cd $(INSTALL_DIR); autocvspasswd; cvs -w checkout $(AUBITCVSNAME))
	(cd $(INSTALL_DIR)/$(AUBITCVSNAME); zip -r $(SOURCEZIPNAME) * )

source.zip.sf:
	${RMDIR} $(INSTALL_DIR)
	${MKPATH} $(INSTALL_DIR)
	(cd $(INSTALL_DIR); autosfcvsanonpasswd; cvs -w -z8 checkout $(AUBITCVSSFNAME))
	(cd $(INSTALL_DIR)/$(AUBITCVSSFNAME); zip -r $(SOURCEZIPNAME) * )

source.zip.location:
	(cd $(SRCLOCATION); zip -r $(SOURCEZIPNAME) * )

source.tar.2download:
ifeq "$(USELOCALUPLOAD)" "1"
	$(CP) $(SOURCETARNAME) $(FTPLOCATION)
endif
	autosfscp $(SOURCETARNAME)
	@if [ ! -f ${DLTMP1} ]; then \
		${MAKE} ${MKNAME} getdlpage; \
	fi
	@sed -e "/^$(TEMPLATESRC)/s/$(TEMPLATESRC)/$(SOURCETARBASENAME)/" ${DLTMP1} > ${DLTMP2} ;
	@mv ${DLTMP2} ${DLTMP1} ;
	${MAKE} ${MKNAME} store.tar.dl.names TEMPLATESRC=$(TEMPLATESRC) SOURCETARBASENAME=$(SOURCETARBASENAME)
#	${MAKE} putdlpage

source.zip.2download:
ifeq "$(USELOCALUPLOAD)" "1"
	$(CP) $(SOURCEZIPNAME) $(FTPLOCATION)
endif
	autosfscp $(SOURCEZIPNAME)
	@if [ ! -f ${DLTMP1} ]; then \
		${MAKE} ${MKNAME} getdlpage; \
	fi
	@sed -e "/^$(TEMPLATESRC)/s/$(TEMPLATESRC)/$(SOURCEZIPBASENAME)/" ${DLTMP1} > ${DLTMP2} ;
	@mv ${DLTMP2} ${DLTMP1} ;
	${MAKE} ${MKNAME} store.zip.dl.names TEMPLATESRC=$(TEMPLATESRC) SOURCEZIPBASENAME=$(SOURCEZIPBASENAME)
#	${MAKE} putdlpage

store.tar.dl.names:
	@echo 'sed -e "/^$(TEMPLATESRC)/s/$(TEMPLATESRC)/$(SOURCETARBASENAME)/" ${DLTMP1} > ${DLTMP2}'  > ${UNIXSRCBUILDNAMES}
	@echo 'cp ${DLTMP2} ${DLTMP1}'  >> ${UNIXSRCBUILDNAMES}
ifeq "$(USELOCALUPLOAD)" "0"
	autosfscp ${UNIXSRCBUILDNAMES}
endif

store.zip.dl.names:
	@echo 'sed -e "/^$(TEMPLATESRC)/s/$(TEMPLATESRC)/$(SOURCEZIPBASENAME)/" ${DLTMP1} > ${DLTMP2}' > ${CYSRCBUILDNAMES}
	@echo 'cp ${DLTMP2} ${DLTMP1}' >> ${CYSRCBUILDNAMES}
ifeq "$(USELOCALUPLOAD)" "0"
	autosfscp ${CYSRCBUILDNAMES}
endif


## ------------------------------------------------------------------
##                Additional Installation Targets: Windows/CygWin
## ------------------------------------------------------------------

install.tree.cy:
	@cd $(INSTALL_DIR); \
	mkdir $(INSTALL_DIR)/dll; \
	mkdir $(INSTALL_DIR)/extralibs;

pack.cygwin:
	${MAKE} ${MKNAME} installdrop INSTALL_DIR=${INSTALL_DIR}
	${MAKE} ${MKNAME} install.tree INSTALL_DIR=${INSTALL_DIR}
	${MAKE} ${MKNAME} install.tree.cy INSTALL_DIR=${INSTALL_DIR}
	${MAKE} ${MKNAME} installx SOURCE=${CYSOURCE} INSTALL_DIR=${INSTALL_DIR} TOBIN="${CYTOBIN}" TOLIBGTK="${CYTOLIBGTK}"
	${MAKE} ${MKNAME} install.example SOURCE=${CYSOURCE} INSTALL_DIR=${INSTALL_DIR}
#FIXME: we should pack compiled IDE with binary distro, not sources
	${MAKE} ${MKNAME} packide SOURCE=${CYSOURCE} INSTALL_DIR=${INSTALL_DIR}
	${MAKE} ${MKNAME} install.libs LIBTARGET1=${CYLIBTARGET1}
	${MAKE} ${MKNAME} install.dll DLLTARGET=${CYDLLTARGET}
	${MAKE} ${MKNAME} cygwin.runtime INSTALL_DIR=${INSTALL_DIR}
	${MAKE} ${MKNAME} zip.install GUITYPE=GTK $(INSTALL_DIR) $(SOURCE)


cygwin.runtime.with.demo: cygwin.runtime cygwin.runtime.demo cygwin.zip.runtime

#FIXME: if this programs are not compiled, make will stop: cygwin.runtime.demo
cygwin.runtime: cygwin.runtime.tree
	${CP} /bin/cygncurses?.dll $(INSTALL_DIR)/runtime/runtimelib
	${CP} /bin/cygwin?.dll $(INSTALL_DIR)/runtime/runtimelib
	${CP} /bin/cygform?.dll $(INSTALL_DIR)/runtime/runtimelib
	${CP} /bin/cygpanel?.dll $(INSTALL_DIR)/runtime/runtimelib
	${CP} ${DLLTARGET}/* $(INSTALL_DIR)/runtime/runtimelib
	${CP} tools/cygwin/readme-runtime.html $(INSTALL_DIR)/runtime
#FIXME: At the moment, we are not making any .so or .dll on Windows
#	${CP} lib/*.so $(INSTALL_DIR)/runtime/runtimelib

cygwin.runtime.tree:
	${MKPATH} $(INSTALL_DIR)/runtime
	${MKPATH} $(INSTALL_DIR)/runtime/runtimelib
	${MKPATH} $(INSTALL_DIR)/runtime/apps

cygwin.runtime.demo:
	${MAKE} ${MKNAME} -C tools/test GTKBUILD=yes
	${MAKE} ${MKNAME} -C tools/test/gui GTKBUILD=yes
	cp ${CYSOURCE}/tools/test/*.exe $(INSTALL_DIR)/runtime/apps
	cp ${CYSOURCE}/tools/test/gui/*.exe $(INSTALL_DIR)/runtime/apps
	${CP} tools/cygwin/*.lnk.hide $(INSTALL_DIR)/runtime
	${CP} tools/cygwin/unhide.bat $(INSTALL_DIR)/runtime

#if we unhide them before zip, zip will not find them:
unhide.lnk:
#	(cd $(INSTALL_DIR)/runtime; for afile in *.lnk.hide; do echo $$afile; done;)
#	(cd $(INSTALL_DIR)/runtime; for afile in *.lnk.hide; do echo `basename "$$afile" .hide`; done;)
	(cd $(INSTALL_DIR)/runtime; for afile in *.lnk.hide; do mv "$$afile" "`basename "$$afile" .hide`"; done;)

cygwin.zip.runtime:
	${RM} $(SOURCE)/$(ZIPRUNTIMENAME)
	(cd $(INSTALL_DIR)/runtime/; zip -r $(SOURCE)/$(ZIPRUNTIMENAME) * )


zip.install: platform
#FIXME: check if it exists first
	${RM} $(SOURCE)/$(ZIPNAME)
	${CP} $(PLATFORMINFO) $(INSTALL_DIR)
#	(cd $(INSTALL_DIR); zip -r $(SOURCE)/$(ZIPNAME) * $(A4GLRC))
	(cd $(INSTALL_DIR); zip -r $(SOURCE)/$(ZIPNAME) * )
install.libs:
	cp ${L4}/glib${LIBVER}.lib ${LIBTARGET1}
	cp ${L1}/gdk${LIBVER}.lib ${LIBTARGET1}
	cp ${L2}/gtk${LIBVER}.lib ${LIBTARGET1}
	cp ${L4}/libglib${LIBVER}.a ${LIBTARGET1}/libglib.a
	cp ${L1}/libgdk${LIBVER}.a ${LIBTARGET1}/libgdk.a
	cp ${L2}/libgtk${LIBVER}.a ${LIBTARGET1}/libgtk.a
#preserve version numbers too:
	cp ${L4}/libglib${LIBVER}.a ${LIBTARGET1}
	cp ${L1}/libgdk${LIBVER}.a ${LIBTARGET1}
	cp ${L2}/libgtk${LIBVER}.a ${LIBTARGET1}

#FIXME: want about -noodbc libs?
	cp ${L5}/libgtk4gl.a ${LIBTARGET1}
	cp ${L5}/libaclallgui.a ${LIBTARGET1}
	cp ${L5}/libaclall.a ${LIBTARGET1}
	cp ${L3}/librpclib.a ${LIBTARGET1}

install.dll:
	cp ${L1}/gdk${LIBVER}.dll ${DLLTARGET}
	cp ${L4}/glib${LIBVER}.dll ${DLLTARGET}
	cp ${L6}/iconv${LIBVER}.dll ${DLLTARGET}
	cp ${L2}/gtk${LIBVER}.dll ${DLLTARGET}
	cp ${L4}/gmodule/gmodule${LIBVER}.dll ${DLLTARGET}
	cp ${L7}/gnu-intl.dll ${DLLTARGET}

deinstall.libs:
	${RM} /usr/lib/glib${LIBVER}.lib
	${RM} /usr/lib/gdk${LIBVER}.lib
	${RM} /usr/lib/gtk${LIBVER}.lib
	${RM} /usr/lib/libglib${LIBVER}.a
	${RM} /usr/lib/libgdk${LIBVER}.a
	${RM} /usr/lib/libgtk${LIBVER}.a
#FIXME: what about -noodbc libs?
	${RM} /usr/lib/libgtk4gl.a
	${RM} /usr/lib/libaclallgui.a
	${RM} /usr/lib/libaclall.a
	${RM} /usr/lib/librpclib.a

deinstall.dll:
	${RM} /bin/gdk${LIBVER}.dll ${DLLTARGET}
	${RM} /bin/glib${LIBVER}.dll ${DLLTARGET}
	${RM} /bin/iconv${LIBVER}.dll ${DLLTARGET}
	${RM} /bin/gtk${LIBVER}.dll ${DLLTARGET}
	${RM} /bin/gmodule/gmodule${LIBVER}.dll ${DLLTARGET}
	${RM} /bin/gnu-intl.dll ${DLLTARGET}


install.bin.lib: install.run.exe
#we should not do this: this should be done in aubitenv:
#$PATH to $AUBITDIR/dll
#$LD_LIBRARY_PATH to $AUBITDIR/extralibs
	cp dll/* /bin
	cp extralibs/* /usr/lib
	${MAKE} ${MKNAME} cygwin.install.message

install.run.exe:
	${CP} bin/run.exe ${SYSTEMROOT}
	${MAKE} ${MKNAME} cygwin.install.message

deinstall.bin.lib: deinstall.libs deinstall.dll
	${RM} ${SYSTEMROOT}/run.exe

cygwin.install.message:
	@echo "Don't forget to add"
	@echo "C:\cygwin\bin;C:\cygwin${AUBITDIR}\bin;C:\cygwin${AUBITDIR}\dll"
	@echo "to WINDOWS path."
	@echo "Add AUBITGUI=gui to system environment to run in GUI mode"

pack.amake:
	${MKPATH} /tmp/pack_amake/bin
	${CP} bin/amake bin/amakeallo bin/amakeallf bin/genmake bin/prepmake /tmp/pack_amake/bin
	${MKPATH} /tmp/pack_amake/incl
	${CP} incl/*.mk incl/*.mki /tmp/pack_amake/incl
	echo "See HOWTO at https://sourceforge.net/docman/?group_id=32409" > /tmp/pack_amake/README.txt
	(cd /tmp/pack_amake; tar -cvzf $(SOURCE)/amake.tar.gz * )


## ------------------------------------------------------------------
##                       Binary distribution Targets
## ------------------------------------------------------------------
#For nightly builds, put "$AUBITDIR/bin/aubitbuild.sh" in corn
#

#	getdlpage in now in aubitbuild.sh, because source.zip needs it
allbindist: \
	clear.dl.names \
	${ALLBINDISTNAMES} \
	restore.dl.names \
	restore.src.dl.names \
	todownload \
	putdlpage
	@echo "All binary distributions built successfully and placed in FTP locattion"


all.win.bin.dist: \
	cy.clear.dl.names \
	cy-odbc32-gtk-nopdf \
    cygwin.runtime.with.demo \
	cy.restore.dl.names \
	cy.restore.src.dl.names \
	cy.todownload \
	putdlpage
	@echo "All win32 binary distributions built successfully and placed in FTP locattion"

#FIXME: we need to delete stuff in DL locations older then x days

#we cannot do mass upload here using autosfscp becaouse of bug in * files listing, so we need to do it
#for each individual package
todownload:
ifeq "$(USELOCALUPLOAD)" "1"
	$(CP) *.${ARCHEXT} $(FTPLOCATION)
	$(CP) ${PLATFORMSTRING}*.txt $(FTPLOCATION)
else
	@(for afile in *.${ARCHEXT}; do echo To move: "$$afile" ; done;)
	@(for afile in *.${ARCHEXT}; do autosfscp "$$afile" ; done;)
	@(for afile in ${PLATFORMSTRING}*.txt; do echo To move: "$$afile" ; done;)
	@(for afile in ${PLATFORMSTRING}*.txt; do autosfscp "$$afile" ; done;)
#	@echo "Network share drive is disabled"
endif

cy.todownload:
ifeq "$(USELOCALUPLOAD)" "1"
	$(CP) *.${ARCHEXT} $(FTPLOCATION)
	$(CP) ${PLATFORMSTRING}*.txt $(FTPLOCATION)
else
	@(for afile in *.${ARCHEXT}; do echo To move: "$$afile" ; done;)
	@(for afile in *.${ARCHEXT}; do autosfscp "$$afile" ; done;)
	@(for afile in ${PLATFORMSTRING}*.txt; do echo To move: "$$afile" ; done;)
	@(for afile in ${PLATFORMSTRING}*.txt; do autosfscp "$$afile" ; done;)
#	@echo "Network share drive is disabled"
endif


#Example of "autosfscp" script:
##!/usr/bin/expect -f
## wrapper to make cvs password be non-interactive
## username is passed as 1st arg, passwd as 2nd
#spawn scp -q $argv afalout@aubit4gl.sourceforge.net:/home/groups/a/au/aubit4gl/htdocs/files
#expect " password:"
#send "mysecretpassword\r"
#expect eof
bindist.to.sf.download:
	autosfscp $(SOURCE)/$(TARNAME)
	autosfscp $(SOURCE)/$(PLATFORMINFOFULL)

cy.bindist.to.sf.download:
	autosfscp $(SOURCE)/$(ZIPNAME)
	autosfscp $(SOURCE)/$(PLATFORMINFOFULL)


#FIXME: copy source tar and manual tar to download too? We can get it via jCVS servlet anyway...

cleantar:
	$(RM) *.${ARCHEXT}
	$(RM) *.${ARCHEXT}.txt

cleandownload:
ifeq "$(USELOCALUPLOAD)" "1"
	$(RM) $(FTPLOCATION)/*.${ARCHEXT}
	$(RM) $(FTPLOCATION)/${PLATFORMSTRING}*.txt
endif


#example of "autosfscpget" script:
#!/usr/bin/expect -f
#spawn scp -q afalout@aubit4gl.sourceforge.net:$argv .
#expect " password:"
#send "mysecretpassword\r"
#expect eof

getdlpage:
	${RM} ${DLTMP1} ${DLTMP2} ${TEMPLATEFILEBASE}
#	@cp $(TEMPLATEFILE) ${DLTMP1}
	autosfscpget ${SCPPATH}/${TEMPLATEFILEBASE}
	@if [ -f ${TEMPLATEFILEBASE} ]; then \
		cp ${TEMPLATEFILEBASE} ${DLTMP1}; \
    else \
        ${MAKE} ${MKNAME} getdlpage; \
    fi
#NOTE: re-entrant call to getdlpage abowe is because on CygWin
#autosfscp can fail randomly


putdlpage:
ifeq "$(USELOCALUPLOAD)" "1"
	@if [ -f ${DLTMP1} ]; then \
		cp ${DLTMP1} $(DOWNLOADPAGE); \
        cp ${DLTMP1} $(DOWNLOADPAGEBASE); \
    else \
        echo "putdlpage: cannot find ${DLTMP1}" ; \
    fi
endif
	@if [ -f ${DLTMP1} ]; then \
		cp ${DLTMP1} $(DOWNLOADPAGEBASE); \
		autosfscp $(DOWNLOADPAGEBASE); \
    else \
        echo "putdlpage: cannot find ${DLTMP1}" ; \
    fi

#		rm -f ${DLTMP1} ${DLTMP2}; \

fix.dl.page: getdlpage restore.dl.names cy.restore.dl.names restore.src.dl.names cy.restore.src.dl.names putdlpage

#---------------------

downloadnames:
	@if [ ! -f ${DLTMP1} ]; then \
		${MAKE} ${MKNAME} getdlpage; \
	else \
		sed -e "/^$(TEMPLATENAME)/s/$(TEMPLATENAME)/$(TARNAME)/" ${DLTMP1} > ${DLTMP2} ; \
		sed -e "/^$(TEMPLATENAMEINFO)/s/$(TEMPLATENAMEINFO)/$(PLATFORMINFOFULL)/" ${DLTMP2} > ${DLTMP1} ; \
    fi

clear.dl.names:
#when $(USELOCALUPLOAD) is 0, this will remove loval file, is this OK?
	${RM} ${UNIXBUILDNAMES}

store.dl.names:
	@echo 'sed -e "/^$(TEMPLATENAME)/s/$(TEMPLATENAME)/$(TARNAME)/" ${DLTMP1} > ${DLTMP2}'  >> ${UNIXBUILDNAMES}
	@echo 'sed -e "/^$(TEMPLATENAMEINFO)/s/$(TEMPLATENAMEINFO)/$(PLATFORMINFOFULL)/" ${DLTMP2} > ${DLTMP1}'  >> ${UNIXBUILDNAMES}
ifeq "$(USELOCALUPLOAD)" "0"
	autosfscp ${UNIXBUILDNAMES}
endif


restore.dl.names:
ifeq "$(USELOCALUPLOAD)" "0"
	@if ! [ -f ${CYBUILDNAMES} ]; then \
		autosfscpget ${SCPPATH}/${CYBUILDNAMES}; \
	fi
endif
	@if [ -f ${CYBUILDNAMES} ]; then \
		dos2unix ${CYBUILDNAMES}; \
		${SH} ${CYBUILDNAMES}; \
    else \
		echo "restore.dl.names: Cannot find ${CYBUILDNAMES}"; \
    fi

#---------------------

cy.downloadnames:
	@if [ ! -f ${DLTMP1} ]; then \
		${MAKE} ${MKNAME} getdlpage; \
	else \
		sed -e "/^$(TEMPLATENAME)/s/$(TEMPLATENAME)/$(TARNAME)/" ${DLTMP1} > ${DLTMP2} ; \
		sed -e "/^$(TEMPLATENAMEINFO)/s/$(TEMPLATENAMEINFO)/$(PLATFORMINFOFULL)/" ${DLTMP2} > ${DLTMP1} ; \
    fi

cy.clear.dl.names:
	${RM} ${CYBUILDNAMES}

cy.store.dl.names:
	@echo 'sed -e "/^$(TEMPLATENAME)/s/$(TEMPLATENAME)/$(TARNAME)/" ${DLTMP1} > ${DLTMP2}'  >> ${CYBUILDNAMES}
	@echo 'sed -e "/^$(TEMPLATENAMEINFO)/s/$(TEMPLATENAMEINFO)/$(PLATFORMINFOFULL)/" ${DLTMP2} > ${DLTMP1}'  >> ${CYBUILDNAMES}
ifeq "$(USELOCALUPLOAD)" "0"
	autosfscp ${CYBUILDNAMES}
endif



cy.restore.dl.names:
ifeq "$(USELOCALUPLOAD)" "0"
	@if ! [ -f ${UNIXBUILDNAMES} ]; then \
		autosfscpget ${SCPPATH}/${UNIXBUILDNAMES}; \
    fi
#else
#when USELOCALUPLOAD=1, filename ${UNIXBUILDNAMES} includes path
endif
	@if [ -f ${UNIXBUILDNAMES} ]; then \
		${SH} ${UNIXBUILDNAMES}; \
	else\
		echo "cy.restore.dl.names: Cannot find ${UNIXBUILDNAMES}"; \
	fi

#----------------------

cy.restore.src.dl.names:
ifeq "$(USELOCALUPLOAD)" "0"
	@if ! [ -f ${UNIXSRCBUILDNAMES} ]; then \
		autosfscpget ${SCPPATH}/${UNIXSRCBUILDNAMES}; \
    fi
endif
	@if [ -f ${UNIXSRCBUILDNAMES} ]; then \
		${SH} ${UNIXSRCBUILDNAMES}; \
    else \
		echo "cy.restore.src.dl.names: Cannot find ${UNIXSRCBUILDNAMES}"; \
	fi

restore.src.dl.names:
ifeq "$(USELOCALUPLOAD)" "0"
	@if ! [ -f ${CYSRCBUILDNAMES} ]; then \
		autosfscpget ${SCPPATH}/${CYSRCBUILDNAMES} ; \
    fi
endif
	@if [ -f ${CYSRCBUILDNAMES} ]; then \
		dos2unix ${CYSRCBUILDNAMES}; \
		${SH} ${CYSRCBUILDNAMES}; \
    else \
		echo "restore.src.dl.names: Cannot find ${CYSRCBUILDNAMES}"; \
	fi

#FIXME: do I need to do make cleanall before each build?
#FIXME: can I compile without ODBC, so we have general purpose compiler
#without any dependencies?

######################
#Binary build targets:

iodbc-gtk-pdf:
	${MAKE} ${MKNAME} PDFBUILD=yes 	GTKBUILD=yes 	ODBC=iodbc 	step.two

iodbc-nogtk-pdf:
	${MAKE} ${MKNAME} PDFBUILD=yes 	GTKBUILD=no 	ODBC=iodbc  step.two

iodbc-gtk-nopdf:
	${MAKE} ${MKNAME} PDFBUILD=no 	GTKBUILD=yes 	ODBC=iodbc  step.two

iodbc-nogtk-nopdf:
	${MAKE} ${MKNAME} PDFBUILD=no 	GTKBUILD=no 	ODBC=iodbc  step.two

unixodbc-gtk-pdf:
	${MAKE} ${MKNAME} PDFBUILD=yes 	GTKBUILD=yes 	ODBC=unix 	step.two

unixodbc-nogtk-pdf:
	${MAKE} ${MKNAME} PDFBUILD=yes 	GTKBUILD=no 	ODBC=unix 	step.two

unixodbc-gtk-nopdf:
	${MAKE} ${MKNAME} PDFBUILD=no 	GTKBUILD=yes 	ODBC=unix 	step.two

unixodbc-nogtk-nopdf:
	${MAKE} ${MKNAME} PDFBUILD=no 	GTKBUILD=no 	ODBC=unix 	step.two

cy-odbc32-gtk-nopdf:
	${MAKE} ${MKNAME} PDFBUILD=no 	GTKBUILD=yes 	ODBC=odbc32 cy.step.two

step.two: \
	settings \
	cleanall \
	all \
	installdrop \
	installall \
	tarinstall \
	downloadnames \
	store.dl.names \
	bindist.to.sf.download
	@echo "UNIX build ${PDFTYPE}-${GUITYPE}-${ODBCMANAGER} build finished successfuly."

cy.step.two: \
	settings \
	cleanall \
	all \
	pack.cygwin \
	cy.downloadnames \
	cy.store.dl.names \
	cy.bindist.to.sf.download
	@echo "CygWin build ${PDFTYPE}-${GUITYPE}-${ODBCMANAGER} build finished successfuly."


## ------------------------------------------------------------------
##                      RPM packaging
## ------------------------------------------------------------------

#You may need to create the following directories to make a build tree:
#	BUILD is the directory where all building occurs by RPM. You don't
#		have to do your test building anywhere in particular, but this is
#		where RPM will do it's building.
#	SOURCES is the directory where you should put your original source
#		tar files and your patches. This is where RPM will look by default.
#	SPECS is the directory where all spec files should go.
#	RPMS is where RPM will put all binary RPMs when built.
#	SRPMS is where all source RPMs will be put.


rpm.autospec: etc/aubit-auto.spec
etc/aubit-auto.spec: aubit4gl.lsm
#make -n = Print the commands that would be executed, but do not execute them.
	${MAKE} ${MKNAME} -n install | autospec -i -d -n ${NAMEVERBLD} -g Development/Languages > ${AUBITDIR}/etc/aubit-auto.spec

#  -d     Don't look for documentation  files  like  `README'
#              and  `BUGS' in the current directory to add them to
#              the spec file list.

rpm.build.auto: etc/aubit-auto.spec
rpm.build.auto: RPMCONFFILE:=${AUBITDIR}/etc/aubit-auto.spec
rpm.build.auto: SRCTMP:=/root/redhat/SOURCES/${NAMEVERBLD}.tar.gz
rpm.build.auto: rpm.build

rpm.build.preset: RPMCONFFILE:=${AUBITDIR}/etc/aubit-0.20-1.spec
rpm.build.preset: SRCTMP:=${RPMBUILDROOT}/SOURCES/${SOURCETARBASENAME}
rpm.build.preset: rpm.build


#rpm.build: AUBITDIR=${RPMBUILDROOT}/BUILD/aubit4gl-0.20
#rpm.build: PATH=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}/bin:${PATH}
rpm.build:
#RPM insists to have source code in ${RPMBUILDROOT}/SOURCES/ before it will
#build it, and only then make rpm from both of them (src and bin RPM)
#	echo xxx ${SOURCETARBASENAME} ZZZZ ${SRCTMP} xxx
	@if [ ! -f ${SRCTMP} ]; then \
		if [ ! -f ${SOURCETARBASENAME} ]; then \
			${MAKE} ${MKNAME} clean.all; \
			${RMDIR} /tmp/${NAMEVERBLD}; \
			mkdir /tmp/${NAMEVERBLD}; \
			${LN_S} ${AUBITDIR} /tmp/${NAMEVERBLD}/${NAMEVERBLD}; \
			echo "Creating $(SOURCETARNAME) from ${NAMEVERBLD}/ ..."; \
			(cd /tmp/${NAMEVERBLD}; tar -cvzf $(SOURCETARNAME) ${NAMEVERBLD}/* > /dev/null); \
			${MAKE} ${MKNAME} rpm.autospec; \
		fi; \
		${CP} ${SOURCETARBASENAME} ${SRCTMP} ; \
	fi
	(export AUBITDIR=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}; export PATH=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}/bin:${PATH}; rpm -ba ${RPMCONFFILE} > rpmbuild.log 2>&1)
	@echo "See rpmbuild.log for details"


#       -bl    Do a "list check".  The "%files" section  from  the
#              spec file is macro expanded, and checks are made to
#              verify that each file exists.


#       --short-circuit
#              Skip  straight  to  specified  stage  (ie, skip all
#              stages leading up to the  specified  stage).   Only
#              valid with -bc and -bi.


#p means just run the prep section of the specfile.
#l is a list check that does some checks on %files.
#c do a prep and compile. This is useful when you are unsure of whether
#	your source will build at all. It seems useless because you might want
#	to just keep playing with the source itself until it builds and then
#	start using RPM, but once you become accustomed to using RPM you will
#	find instances when you will use it.
#i do a prep, compile, and install.
#b prep, compile, install, and build a binary package only.
#a build it all (both source and binary packages).

#--short-circuit will skip straight to a specified stage (can only be used with c and i).
#--clean removes the build tree when done.
#--keep-temps will keep all the temp files and scripts that were made in /tmp. You can actually see what files were created in /tmp using the -v option.
#--test does not execute any real stages, but does keep-temp.

build.diff.patch:
	diff -uNr dirname.orig dirname > ../SOURCES/dirname-linux.patch


#Linux Software Map (.lsm) see http://www.execpc.com/lsm/
aubit4gl.lsm: OUTFILE=aubit4gl.lsm
aubit4gl.lsm:
	@echo Begin4 > ${OUTFILE}
	@echo Title: Aubit 4gl compiler >> ${OUTFILE}
	@echo Version: ${AUBITVERSION}.${AUBITBUILD} >> ${OUTFILE}
	@echo Entered-date: ${COMPILEDATE} >> ${OUTFILE}
	@echo Description: Compiler for x4gl programming language >> ${OUTFILE}
	@echo Keywords: compiler 4gl database sql gui >> ${OUTFILE}
	@echo Author: Mike Aubury >> ${OUTFILE}
	@echo Maintained-by: Aubit development team >> ${OUTFILE}
	@echo Primary-site: http://aubit4gl.sourceforge.net >> ${OUTFILE}
	@echo Alternate-site: http://www.falout.com >> ${OUTFILE}
	@echo Original-site: http://www.aubit.com >> ${OUTFILE}
	@echo Platforms: POSIX Win32 >> ${OUTFILE}
	@echo Copying-policy: GNU GPL LGPL >> ${OUTFILE}
	@echo End >> ${OUTFILE}
	@echo >> ${OUTFILE}
	@echo >> ${OUTFILE}
	@echo Note: >> ${OUTFILE}
	@echo send this file to 'lsm@execpc.com' with the subject 'add'. >> ${OUTFILE}


## ------------------------------------------------------------------
##                      DoxyGen doccumentation
## ------------------------------------------------------------------

#create Doxy for local developer use, with _NO_ CGI search and _NO_ graphs:
doxy: doxy.make doxy.message

doxy.make:
	rm -rf docs/doxy/html
	doxygen docs/doxy/Doxyfile


#create Doxy for use on web site, with CGI search and graphs:
doxy.www: doxy.make.www doxy.install.www doxy.install.search doxy.message

doxy.make.www:
	rm -rf docs/doxy/html
	doxygen docs/doxy/Doxyfile-www

doxy.install.search:
	cp docs/doxy/html/doxysearch.cgi ${APACHEDIR}/cgi-bin

doxy.install.www:
	rm -rf ${WWW}/projects/Aubit4GL/doxy/html
	cp -r docs/doxy/html ${WWW}/projects/Aubit4GL/doxy/html
	cd ${WWW}/projects/Aubit4GL/doxy/html; doxytag -s search.idx

doxy.message:
	@echo DoxyGen doccumentation created and placed in docs/doxy/html
	@echo To use it, open file 'index.html' in your web browser

## ------------------------------------------------------------------
##                       Other Targets
## ------------------------------------------------------------------

#This will increase build number; use it before releasing compiled binaries.
#Edit project/version file manually to increase version number; when
#you do, reset build counter to zero.
build:
	@echo Current versions before build number increase:
	@echo AUBITVERSION = ${AUBITVERSION} AUBITBUILD = ${AUBITBUILD}
	@chmod a+x tools/project/mkproject
	(cd tools/project; ${SH} mkproject -increase)
	@echo After build number increase:
	@echo "AUBITVERSION = `cat $(SOURCE)/tools/project/version` AUBITBUILD = `cat $(SOURCE)/tools/project/build`"

commit.build: build commit.build.step2
commit.build.step2: BUILDNO=$(shell cat $(SOURCE)/tools/project/build)
commit.build.step2:
	@cvs commit -m "commit.build ${BULDNO}" > commit.log
	@echo "Build ${BUILDNO} Commit finished. See file './commit.log'"

test:
	${MAKE} ${MKNAME} -C tools/test test.build PDFBUILD=${PDFBUILD}
	@export NOCURSES=Yes; export AUBITGUI=TUI; tools/test/test_build

demo:
	${MAKE} ${MKNAME} -C tools/test
	@echo Aubit 4gl compiler examples are now compiled


allreadwrite:
	chmod -R a+rw *

help:
	@echo
	@echo This is Aubit 4gl compiler makefile help
	@echo
	@echo Usage: "make [targets] [option=value] ..."
	@echo
	@echo For more help use:
	@echo "  make help.options"
	@echo "  make help.targets"
	@echo

help.targets:
	@echo
	@echo Targets:
	@echo
	@echo "  all (same as just "make") - compile the Aubit 4gl compiler"
	@echo "  gtkgui - compile only GTK libraries"
	@echo "  clean - delete and temp and intermittent files, but not targets"
	@echo "  cleanall - delete ALL compiled object and temp files that where"
	@echo "          created with make. This will result in clan source code"
	@echo "          tree, as exported form CVS"
	@echo "  installall - install.tree install install.example install.manual"
	@echo "  createcleantar - installdrop installall tarinstall"
	@echo "  install - installs Aubit 4gl compiler in installation tree"
	@echo "  install.example - installs 4gl examples in installation tree"
	@echo "  install.manual - installs manual in installation tree"
	@echo "  installdrop - DELETES installation tree. WARNING: uses ${RMDIR}"
	@echo "  install.tree - creates installation tree"
	@echo "  tarinstall - creates ${ARCHEXT} file from installation tree"
	@echo "  demo - compile 4gl exampe code in tools/test/ and tools/test/gui/"
	@echo "  log - log default target make process to ./make.log"
	@echo "  settings - show how is makefile configured"
	@echo "  platform - dump settings and current build data to $(PLATFORMINFO)"
	@echo

help.options:
	@echo
	@echo "Options: (first option is default)"
	@echo "  PDFBUILD=(no/yes) NOTE: Must have PDF lib installed"
	@echo "  GTKBUILD=(yes/no) NOTE: Must have GTK lib installed"
	@echo "  JABBERBUILD=(yes/no) NOTE: Must have ikemel lib installed"
	@echo "  ODBC=iodbc/unix (ignored on Windows) NOTE: Must have ODBC lib installed"
	@echo "  CYGWIN=mno-cygwin : compile to monolith CygWin target (Windows only)"
	@echo "  PREFIX= where to install binaries, default is $PREFIX"
	@echo
	@echo

#--------------------- debugging -----------------------------

savesettings: OUT = $(PLATFORMINFO)
savesettings: newfile settings.common

#no stdout on CygWin :-(
#settings: OUT="/dev/stdout"
settings: OUT=  $(PLATFORMINFO)
settings: blankfile settings.common
	@cat $(PLATFORMINFO)

blankfile:
	@echo "" > ${OUT}

newfile:
	@echo "This file contains version info of compile platform" > ${OUT}

settings.common:
#	@echo "OUT = " ${OUT}
	@echo "make invoked with flags : ${MAKEFLAGS}" >> ${OUT}
	@echo "make invoked in : ${PWD}" >> ${OUT}
	@echo "Reading from root makefile variables:" >> ${OUT}
	@echo -------------- Optional libraries ---------------- >> ${OUT}
	@echo "GTKBUILD        = ${GTKBUILD}" >> ${OUT}
	@echo "PDFBUILD        = ${PDFBUILD}" >> ${OUT}
	@echo "JABBERBUILD     = ${JABBERBUILD}" >> ${OUT}
	@echo -------------- ODBC settings --------------------- >> ${OUT}
	@echo "HAVE_UNIXODBC   = ${HAVE_UNIXODBC}" >> ${OUT}
	@echo "HAVE_IODBC      = ${HAVE_IODBC}" >> ${OUT}
	@echo "ODBC_LINK       = ${ODBC_LINK}" >> ${OUT}
	@echo "ODBC            = ${ODBC}" >> ${OUT}
	@echo "ODBCLIBDIR      = ${ODBCLIBDIR}" >> ${OUT}
	@echo "ODBC_LIB_DIR    = ${ODBC_LIB_DIR}" >> ${OUT}
	@echo "ODBC_LIB_NAME   = ${ODBC_LIB_NAME}" >> ${OUT}
	@echo -------------- C Compiler settings --------------- >> ${OUT}
	@echo "LIBCFLAGS       = ${LIBCFLAGS}" >> ${OUT}
	@echo "LD_LIBRARY_PATH = ${LD_LIBRARY_PATH}" >> ${OUT}
	@echo -------------------------------------------------- >> ${OUT}
	@echo COMPILEDATE=$(COMPILEDATE) AUBITVERSION=$(AUBITVERSION) AUBITBUILD=$(AUBITBUILD) OS=$(OS) >> ${OUT}
	@echo AUBITDIR=${AUBITDIR} OS=$(OS) >> ${OUT}
	@echo -------------------------------------------------- >> ${OUT}

show.platform: OUT="/tmp/showplatform"
show.platform: platform.common
	cat /tmp/showplatform

platform: OUT = $(PLATFORMINFO)
platform: savesettings platform.common
	@cp $(OUT) $(INSTALL_DIR)
	@cp $(OUT) ${PLATFORMINFOFULL}
	@echo "platform: See result in ${OUT}"
	@echo "Also copied to $(INSTALL_DIR)/$(OUT) and ${PLATFORMINFOFULL}"


platform.common:
#	@echo OUT = $(OUT)
	@echo "----- Compile date: ---------" >> $(OUT)
	@date >> $(OUT)
	@echo "----- Compile host  ---------" >> $(OUT)
	@uname -a >> $(OUT)
	@${GTKCONFIGTEXT}  >> $(OUT)
	@${GTKCONFIGCMD} >> $(OUT)
	@echo "----- gcc -v ---------" >> $(OUT)
	@gcc -v  >> $(OUT) 2>&1
	@if [ -f "bin/4glc" ]; then \
		echo "----- all shared libraries used by 4glc ---------" >> $(OUT) ; \
		ls -al bin/4glc  >> $(OUT) ; \
		${LDDCMD} bin/4glc${EXE} >> $(OUT) ; \
    fi
	@if [ -f "tools/test/test_build" ]; then \
		echo "----- all shared libraries used by compiled 4gl program ---------" >> $(OUT) ; \
		ls -al tools/test/test_build  >> $(OUT) ; \
		${LDDCMD} tools/test/test_build${EXE}  >> $(OUT) ; \
    fi
	@echo "-------------------- EOF -----------------------" >> $(OUT)

#FIXME: info needed for binary disrto: kernel version, ODBC lib version, PDF version,...


debug.filenames:
	@echo ${TEMPLATENAME} >> ${OUT}
	@echo ${TEMPLATENAMETXT} >> ${OUT}
	@echo ${TEMPLATESRC} >> ${OUT}
	@echo ${TEMPLATENAMEINFO} >> ${OUT}
	@echo ${PLATFORMINFO} >> ${OUT}
	@echo ${PLATFORMINFOFULL} >> ${OUT}


# ------------------------------ testing ----------------------------


lclint:
	(echo " " > $(LCLINTLOG))
#Warning! This will override CFLAGS in lib makefile!!!
	$(MAKE) ${MKNAME} -C lib lclint PDF=no CFLAGS="$(LIBCFLAGS) " >> $(LCLINTLOGCMD)
	$(MAKE) ${MKNAME} -C compilers/4glc/rules lclint LCLINTFLAGS=$(LCLINTFLAGS) >> $(LCLINTLOGCMD)
	@echo "see $(LCLINTLOG) for results"



1:
	rm -f lib/libgui/assist.c
	echo ${GTKGUI}
	echo ${AUBITDIR}
	make ${MKNAME} -C lib/libgui assist.c
	ls lib/libgui/assist.c

2:
	echo ${AUBITVERSION}
	echo ${AUBITBUILD}


showbug: xsettings
	${MAKE} XWZ=1 xsettings
xsettings:
	@echo "make invoked with flags : xx${MAKEFLAGS}xx"


Makefile: configure
	./configure CFLAGS="-L/opt/unixODBC/lib -L/opt/iODBC_3.0.5/libiodbc-3.0.5/iodbc/.libs"


configure:
	autoconf

old.2.in:
	${CP} Makefile.old Makefile.in
	${CP} compilers/4glc/Makefile.old compilers/4glc/Makefile.in
	${CP} compilers/4glc/rules/Makefile.old compilers/4glc/rules/Makefile.in
	${CP} compilers/fcompile/Makefile.old compilers/fcompile/Makefile.in
	${CP} compilers/helpcompile/Makefile.old compilers/helpcompile/Makefile.in
	${CP} compilers/menus/Makefile.old compilers/menus/Makefile.in
	${CP} lib/Makefile.old lib/Makefile.in
	${CP} lib/libgui/Makefile.old lib/libgui/Makefile.in
	${CP} lib/libpdf/Makefile.old lib/libpdf/Makefile.in
	${CP} lib/libsql/nosql/Makefile.old lib/libsql/nosql/Makefile.in
	${CP} lib/libsql/odbc/Makefile.old lib/libsql/odbc/Makefile.in
	${CP} tools/adbaccess/Makefile.old tools/adbaccess/Makefile.in
	${CP} tools/adbload/Makefile.old tools/adbload/Makefile.in
	${CP} tools/html/Makefile.old tools/html/Makefile.in
	${CP} tools/ide/Makefile.old tools/ide/Makefile.in
	${CP} tools/jabber/Makefile.old tools/jabber/Makefile.in
	${CP} tools/odbctest/Makefile.old tools/odbctest/Makefile.in
	${CP} tools/test/Makefile.old tools/test/Makefile.in
	${CP} tools/test/gui/Makefile.old tools/test/gui/Makefile.in

settings.rc:
	@echo
	@echo "A1 [/etc/opt/aubit4gl/aubitrc] =${A1}"
	@echo "A2 [/opt/aubit4gl/etc/aubitrc] =${A2}"
	@echo "A3 [../etc/aubitrc]            =${A3}"
	@echo "A4 [etc/aubitrc]               =${A4}"
	@echo "A5 [~/.aubit4gl/aubitrc]       =${A5}"
	@echo "A6 [./.aubitrc]                =${A6}"
	@echo "A7 ['$A4GL_INIFILE' ]            =${A7}"
	@echo


## ---------------------------- EOF ----------------------------------

