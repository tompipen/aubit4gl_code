# +----------------------------------------------------------------------+
# | Aubit 4gl Language Compiler Version $.0   root makefile              |
# +----------------------------------------------------------------------+
# | Copyright (c) 2000-1 Aubit Development Team (See Credits file)       |
# +----------------------------------------------------------------------+
# | This program is free software; you can redistribute it and/or modify |
# | it under the terms of one of the following licenses:                 |
# |                                                                      |
# |  A) the GNU General Public License as published by the Free Software |
# |     Foundation; either version 2 of the License, or (at your option) |
# |     any later version.                                               |
# |                                                                      |
# |  B) the Aubit License as published by the Aubit Development Team and |
# |     included in the distribution in the file: LICENSE                |
# |                                                                      |
# | This program is distributed in the hope that it will be useful,      |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
# | GNU General Public License for more details.                         |
# |                                                                      |
# | You should have received a copy of both licenses referred to here.   |
# | If you did not, or have any questions about Aubit licensing, please  |
# | contact afalout@ihug.co.nz                                           |
# +----------------------------------------------------------------------+
#
# $Id: Makefile.in,v 1.62 2002-04-25 06:32:34 afalout Exp $
#

#All stuff common to more then one Aubit compiler make file is there:
include incl/Makefile-common

## ==================================================================
##                    Install Settings
## ==================================================================

#RPM setup:
#redhat 6:
#RPMBUILDROOT=/root/redhat
#redhat 7.2
RPMBUILDROOT=/usr/src/redhat


SOURCE 		=.
#installation files
TESTDIR     =$(SOURCE)/tools/test
DOCDIR     	=$(SOURCE)/docs
IDEDIR     	=$(SOURCE)/tools/ide
TOBIN		=$(SOURCE)/bin/4glc${EXEEXT} $(SOURCE)/bin/4glpc $(SOURCE)/bin/fcompile${EXEEXT} \
			$(SOURCE)/bin/mcompile${EXEEXT} $(SOURCE)/bin/mkmess${EXEEXT} $(SOURCE)/bin/amake \
			$(SOURCE)/bin/amakeallo $(SOURCE)/bin/amakeallf \
			$(SOURCE)/bin/loadmap${EXEEXT} $(SOURCE)/bin/aubit $(SOURCE)/bin/aubit-config${EXEEXT} \
            $(SOURCE)/bin/genmake $(SOURCE)/bin/mdecompile${EXEEXT} $(SOURCE)/bin/prepmake \
			$(SOURCE)/bin/fdecompile${EXEEXT} $(SOURCE)/bin/fshow${EXEEXT}

#ifeq "$(GTKBUILD)" "yes"
#	TOBIN		+=$(SOURCE)/bin/fshow-gtk${EXEEXT}
#endif

ifeq "$(OUTPUTLANG)" "java"
	TOBIN		+=$(SOURCE)/bin/fdecompile-j${EXEEXT}
endif

TOLIBGTK	=$(SOURCE)/lib/libUI_GTK${SO_EXT}
#$(SOURCE)/lib/libUI_GTK_x${SO_EXT}
TOLIBCUI	=$(SOURCE)/lib/libaubit4gl${SO_EXT} $(SOURCE)/lib/libEXREPORT_NOPDF${SO_EXT} \
			$(SOURCE)/lib/libSQL_nosql${SO_EXT} $(SOURCE)/lib/libUI_CONSOLE${SO_EXT} \
			$(SOURCE)/lib/libRPC_NORPC${SO_EXT} $(SOURCE)/lib/libFORM_NOFORM${SO_EXT} \
            $(SOURCE)/lib/libMENU_NOMENU${SO_EXT} $(SOURCE)/lib/libMSG_NATIVE${SO_EXT}

ifneq "$(shell ls $(SOURCE)/lib/libA4GLLEX_C${SO_EXT} 2> /dev/null)" ""
	TOLIBCUI		+=$(SOURCE)/lib/libA4GLLEX_C${SO_EXT}
	TOLIB_EXPORTLIB +=$(SOURCE)/lib/libA4GLLEX_C${SOEXP_EXT}
endif

ifneq "@PERLBUILD@" "no"
	#Perl compiler is compiled in "extra" and is optional
	ifneq "$(shell ls $(SOURCE)/lib/libA4GLLEX_PERL${SO_EXT} 2> /dev/null)" ""
		TOLIBCUI	+=$(SOURCE)/lib/libA4GLLEX_PERL${SO_EXT}
		TOBIN		+=$(SOURCE)/bin/4glp${EXEEXT}
    endif
endif

ifneq "@HAVE_RPCLIB@" "0"
	TOLIBCUI		+=$(SOURCE)/lib/libRPC_XDR${SO_EXT} $(SOURCE)/lib/libMENU_XDR${SO_EXT} $(SOURCE)/lib/libFORM_XDR${SO_EXT}
	TOLIB_EXPORTLIB +=$(SOURCE)/lib/libRPC_XDR${SOEXP_EXT} $(SOURCE)/lib/libMENU_XDR${SOEXP_EXT} $(SOURCE)/lib/libFORM_XDR${SOEXP_EXT}
endif

ifneq "XML_RPC@" "no"
	TOLIBCUI		+=$(SOURCE)/lib/libRPC_XMLRPC${SO_EXT}
	TOLIB_EXPORTLIB +=$(SOURCE)/lib/libRPC_XMLRPC${SOEXP_EXT}
endif


ifneq "@HAVE_CURSES@" "0"
	TOLIBCUI	+=$(SOURCE)/lib/libUI_TUI${SO_EXT}
endif


ifneq "${STATICLIB_INST}" "no"
	TOLIBCUI+=$(SOURCE)/lib/libaubit4gl.a
endif

TOLIB_EXPORTLIB +=$(SOURCE)/lib/libaubit4gl${SOEXP_EXT} \
            $(SOURCE)/lib/libEXREPORT_NOPDF${SOEXP_EXT} $(SOURCE)/lib/libSQL_nosql${SOEXP_EXT} \
            $(SOURCE)/lib/libUI_CONSOLE${SOEXP_EXT} $(SOURCE)/lib/libRPC_NORPC${SOEXP_EXT} \
            $(SOURCE)/lib/libFORM_NOFORM${SOEXP_EXT} $(SOURCE)/lib/libMENU_NOMENU${SOEXP_EXT}

ifneq "@HAVE_CURSES@" "0"
	TOLIB_EXPORTLIB +=$(SOURCE)/lib/libUI_TUI${SOEXP_EXT}
endif

ifneq "@HAVE_RPCLIB@" "0"
#	TOLIB_EXPORTLIB +=$(SOURCE)/lib/libRPC_SUNRPC${SOEXP_EXT}
	TOLIB_EXPORTLIB +=$(SOURCE)/lib/libRPC_XDR${SOEXP_EXT}
endif


TOLIBGTK_EXPORTLIB	=$(SOURCE)/lib/libUI_GTK${SOEXP_EXT} 
#$(SOURCE)/lib/libUI_GTK_x${SOEXP_EXT}

ifneq "${COMSPEC}" ""
	TOLIBCUI			+=$(SOURCE)/lib/libSQL_odbc32${SO_EXT}
	TOLIB_EXPORTLIB		+=$(SOURCE)/lib/libSQL_odbc32${SOEXP_EXT}
endif

ifeq "${PDFBUILD}" "yes"
    TOLIBCUI +=$(SOURCE)/lib/libEXREPORT_PDF${SO_EXT}
endif

ifeq "${HAVE_UNIXODBC}" "yes"
	TOLIBCUI	+=$(SOURCE)/lib/libSQL_unixodbc${SO_EXT}
endif
ifeq "${HAVE_IODBC}" "yes"
	TOLIBCUI	+=$(SOURCE)/lib/libSQL_iodbc${SO_EXT}
endif

ifneq "@IFMX_ESQLC@" "no"
	TOLIBCUI	+=$(SOURCE)/lib/libSQL_esql${SO_EXT}
endif

ifneq "@HAVE_IFXODBC@" "no"
	TOLIBCUI	+=$(SOURCE)/lib/libSQL_ifxodbc${SO_EXT}
endif

ifneq "@HAVE_PGODBC@" "no"
	TOLIBCUI	+=$(SOURCE)/lib/libSQL_pgodbc${SO_EXT}
endif

MKFILNAME	=Makefile

TODOCS		=$(SOURCE)/docs/changelog.txt $(SOURCE)/docs/COPYING $(SOURCE)/docs/CREDITS $(SOURCE)/docs/LICENSE
TOTEST		=$(TESTDIR)/*.4gl $(TESTDIR)/*.per $(TESTDIR)/${MKFILNAME} $(TESTDIR)/*.msg
TOTESTGUI	=$(TESTDIR)/gui/*.4gl $(TESTDIR)/gui/*.per $(TESTDIR)/gui/${MKFILNAME}
TOETC		=$(SOURCE)/etc/odbc.ini.example
TOHOME		=$(SOURCE)/a4glrc.example
TOROOT		=$(SOURCE)/README.txt
TOINCL		=$(SOURCE)/incl/a4gl_incl_4glhdr.h $(SOURCE)/incl/a4gl_incl_4gldef.h $(SOURCE)/incl/a4gl_incl_acl4glgui.h \
				$(SOURCE)/incl/*.mk $(SOURCE)/incl/*.mki $(SOURCE)/incl/Makefile-common
TOIDE       =$(IDEDIR)/*.4gl $(IDEDIR)/*.c $(IDEDIR)/*.sh $(IDEDIR)/*.msg $(IDEDIR)/*.per $(IDEDIR)/${MKFILNAME}


#FIXME: results of extra compilations should be in install/deinstall
#and RPM target too: (also add to clean.all)


ifneq "$(shell ls $(SOURCE)/lib/libA4GL_file${SO_EXT} 2> /dev/null)" ""
	TOLIBCUI	+=$(SOURCE)/lib/libA4GL_file${SO_EXT}
endif

ifneq "$(shell ls $(SOURCE)/lib/libA4GL_string${SO_EXT} 2> /dev/null)" ""
	TOLIBCUI	+=$(SOURCE)/lib/libA4GL_string${SO_EXT}
endif

ifneq "$(shell ls $(SOURCE)/lib/libIM_JABBER${SO_EXT} 2> /dev/null)" ""
	TOLIBCUI	+=$(SOURCE)/lib/libIM_JABBER${SO_EXT}
endif

ifneq "$(shell ls $(SOURCE)/bin/odbctest-unixODBC${EXE} 2> /dev/null)" ""
	TOBIN		+=$(SOURCE)/bin/odbctest-unixODBC${EXE}
endif

ifneq "$(shell ls $(SOURCE)/bin/odbctest-iodbc3${EXE} 2> /dev/null)" ""
	TOBIN		+=$(SOURCE)/bin/odbctest-iodbc3${EXE}
endif

ifneq "$(shell ls $(SOURCE)/bin/odbctest-iodbc2${EXE} 2> /dev/null)" ""
	TOBIN		+=$(SOURCE)/bin/odbctest-iodbc2${EXE}
endif


#IDE installs:
#/usr/local/bin/ide
#/usr/local/4glide/ide.4ae
#/usr/local/4glide/d4glinpt.afr d4glopts.afr
#/usr/local/4glide/d4glhelp.iem

#stuff made by doxy make no sense in binary distro

#broken: libA4GL_html.so, adbaccess files, adbload, perl compiler




##################################################
#definitions of names for bynary distro file name:
#FIXME: thi is set in makefile-common by configure:
AUBITVERSION:=$(shell cat $(SOURCE)/tools/project/version)
AUBITBUILD	:=$(shell cat $(SOURCE)/tools/project/build)
COMPILEDATE	:=$(shell date +%d-%m-%Y)

## ==================================================================
##                    CVS Settings
## ==================================================================

AUBITCVSSFNAME=aubit4glsrc
NAMEVERBLD=${AUBITCVSSFNAME}-${AUBITVERSION}.${AUBITBUILD}

## ==================================================================
##                    Platform dependent Settings
## ==================================================================

ifdef COMSPEC #############Windows platform - CygWin related:################

	ARCHEXT			=zip
    DIRSEP			=\\
	EXE				=.exe
	WWW				=\\\\APTIVA\\ROOT\\data2\\htdocs
	GTKCONFIGTEXT	=echo "----- gtk-version form makefile -------"
	GTKCONFIGCMD	=echo ${LIBVER}
    LDDCMD          =cygcheck 	#echo "no ldd available on CygWin"
    #we need makefile for aubit binary build on CygWin to install dll/ and extralibs/

else ####################### Platform is UNIX ##############################

	ARCHEXT			=tar.gz
    DIRSEP			=/
	#on unix, we expect to have WWW set in environment
	#WWW			=/data2/htdocs
	GTKCONFIGTEXT	=echo "----- gtk-config --version ---------"
	GTKCONFIGCMD	=gtk-config --version
    LDDCMD          =ldd
endif


## ==================================================================
##                    Nightly builds Settings
## ==================================================================


PLATFORMSTRING	=compile-platform-info
PLATFORMINFO	=${PLATFORMSTRING}.txt

SOURCETARBASENAME=aubit4gl-src-$(AUBITVERSION)-$(AUBITBUILD)-$(COMPILEDATE).${ARCHEXT}
SOURCETARNAME	=$(SOURCE)/$(SOURCETARBASENAME)

## ==================================================================
##                    Define default target
## ==================================================================

#ALL				+=Makefile settings rpc corecompile
ALL					=settings rpc corecompile

#ifeq "$(GTKBUILD)" "yes"
#	ALL += gtkgui
#endif

ALL +=test

ALL_EXTRA  			=libfile libstring ide odbctest

#FIXME: All stuff that should be in ALL_EXTRA, but does not compile:
ALL_EXTRA_BROKEN	=libhtml adbaccess adbload

ifneq "${PERLBUILD}" "no"
	ALL_EXTRA_BROKEN+=perl
endif

ifneq "${JABBERBUILD}" "no"
	ALL_EXTRA  		+=jabber
endif

ifneq "@DOXYGEN@" "no"
	ALL_EXTRA  		+=doxy
endif

## ==================================================================
##                              Targets
## ==================================================================

default: ${ALL}
	@echo " "
	@echo "Successfully compiled Aubit compiler default targets :"
	@echo "${ALL}."
	@echo "You MUST install it before you can use it - execute 'make install'."
	@echo "Execute 'make extra' to compile additional components."
	@echo "Thank you for using Aubit 4gl compiler"

all: default extra install

log:
	@echo "Logging make process to make.log, please wait..."
	@${MAKE} ${MKNAME} ${BUGMAKEFLAGS} > make.log 2>&1
	@echo "make finished successfuly, see make.log for details."

corecompile:
	$(MAKE) -C lib
	$(MAKE) -C lib/libtui
	$(MAKE) -C compilers/4glc/rules
	$(MAKE) -C compilers/4glc
	$(MAKE) -C compilers/fcompile
	$(MAKE) -C compilers/menus
	$(MAKE) -C compilers/helpcompile
	$(MAKE) -C lib loadmap
	@echo Aubit 4gl compiler core is now compiled

## ==================================================================
##                              Extra
## ==================================================================

extra: ${ALL_EXTRA}
	@echo " "
	@echo "Successfully compiled aditional Aubit components :"
	@echo "${ALL_EXTRA}."
	@echo "FIXME: ${ALL_EXTRA_BROKEN}."

ide:
	$(MAKE) -C tools/ide
	$(MAKE) -C tools/ide install.aubit

libfile:
	$(MAKE) -C lib/extra_libs/file

libstring:
	$(MAKE) -C lib/extra_libs/string

libhtml:
	$(MAKE) -C tools/html libA4GL_html.so

adbaccess:
	$(MAKE) -C tools/adbaccess amake
#	$(MAKE) -C tools/adbaccess misql.4ae

odbctest:
	$(MAKE) -C tools/odbctest

jabber:
	$(MAKE) -C tools/jabber libIM_JABBER.so


## ==================================================================
##                              Perl compiler
## ==================================================================

perl: perl.compiler perl.lib test.perl

perl.compiler:
	${MAKE} -C compilers/4glc 4glp
	@echo Aubit 4gl Perl-code generating version compiler created

perl.lib:
	cd lib/swig; sh domake
	@echo Aubit 4gl Perl-code libraries installed

test.perl:
	cd tools/test; 4glp test_build.4gl
	cd tools/test; perl test_build.pl

## ==================================================================
##                              Make RPC
## ==================================================================

#this should happen in local make flies, as needed:
rpc:
#	$(MAKE) -C compilers/fcompile rpc
#	$(MAKE) -C compilers/menus rpc

## ==================================================================
##                              Clean
## ==================================================================

#FIXME: "clean" should clean intermediate files resulting from compile, but will skip
#executables and objects that are needed for instalation. After "clean", it should
#still be possiblt to do "make install"
.PHONY : clean
clean:
	@echo FIXME: only cleanall works

clean.all: cleanall

#will clean EVERYTHING that is not source file from CVS
cleanall: clean.root clean.bin clean.etc clean.incl clean.docs clean.install clean.swig clean.project
	@echo Cleaning Aubit 4gl temporary compiler files and compiled objects...
	$(MAKE) -C lib clean
	$(MAKE) -C lib/libgui clean
	${MAKE} -C lib/libtui clean
	$(MAKE) -C lib/extra_libs/file clean
	$(MAKE) -C lib/extra_libs/string clean
	$(MAKE) -C compilers/4glc/rules clean
	$(MAKE) -C compilers/4glc clean
	$(MAKE) -C compilers/fcompile clean
	$(MAKE) -C compilers/menus clean
	$(MAKE) -C compilers/helpcompile clean
	$(MAKE) -C tools/test clean
	$(MAKE) -C tools/test/gui clean
	$(MAKE) -C tools/test/db clean
	$(MAKE) -C tools/ide clean
	$(MAKE) -C tools/html clean
	$(MAKE) -C tools/jabber clean
	$(MAKE) -C tools/adbaccess clean
	$(MAKE) -C tools/adbload clean
	$(MAKE) -C tools/odbctest clean
	${RM} lib/swig/lib_wrap.doc
	@echo Aubit 4gl compiler source tree is now clean

clean.config: clean.configure
clean.configure: clean.makefiles clean.settings
	${RM} config.log config.status incl/config.h docs/doxy/Doxyfile \
            etc/aubit-rpm.spec
#incl/a4gl-rules.mki

clean.settings:
	${RM} etc/a4glrc etc/aubitbuild.mk etc/aubitenv etc/aubitrc

clean.makefiles:
	${RM} compilers/4glc/Makefile compilers/4glc/rules/Makefile \
	compilers/fcompile/Makefile compilers/helpcompile/Makefile \
	compilers/menus/Makefile incl/Makefile-common \
    lib/Makefile lib/libgui/Makefile lib/libpdf/Makefile \
    lib/libsql/nosql/Makefile lib/libsql/esqlc/Makefile \
    lib/libsql/odbc/Makefile lib/extra_libs/file/Makefile \
    lib/extra_libs/string/Makefile lib/libtui/Makefile \
    tools/test/db/Makefile tools/test/lang/Makefile \
	tools/test/regression/Makefile tools/test/db/Makefile \
    tools/adbaccess/Makefile tools/adbload/Makefile \
    tools/html/Makefile tools/ide/Makefile \
    tools/jabber/Makefile tools/odbctest/Makefile \
    tools/test/Makefile tools/test/gui/Makefile Makefile


clean.root:
#We must not clean *.log when running make process to make.log:
#we must not clean *.tmp because of unixbuildnames.tmp:
	$(RM) *.bak *.BAK libincl .*.bak core cyrpc.flg debug.out \
	*.err ${PLATFORMSTRING}*.txt make.log commit.log rpmbuild.log \
	aubit4gl.lsm aubitdownload-template.htm rpmbuild.log

#FIXME: move this to appropriate makefile :
	${RM} compilers/fcompile/fshow.glb compilers/fcompile/fshow.h

clean.rpc:
	${RM} compilers/fcompile/form_x_xdr.c compilers/menus/menu_x_xdr.c \
	compilers/fcompile/form_x.h compilers/menus/menu_x.h

clean.bin:
	(cd bin;${RM} 4glc${EXE} fcompile${EXE} mcompile${EXE} mkmess${EXE} \
	mcompile-noodbc${EXE} loadmap${EXE} \
	*.bak ide${EXE} fcompile-noodbc${EXE} 4glc-noodbc${EXE} \
	4glp${EXE} mdecompile${EXE} fdecompile${EXE} fdecompile-j${EXE} \
	aubit-config${EXE} fshow${EXE}  odbctest-*${EXE} \
	)

clean.etc:
	${RM} etc/*.bak etc/config/*.bak etc/aubit-auto.spec

clean.incl:
	${RM} incl/*.bak

clean.docs:
	rm -rf docs/doxy/html
	${RM} docs/doxy/*.bak docs/*.bak

clean.install:
	rm -rf install

clean.swig:
	@if [ -f lib/swig/?akefile ]; then \
		$(MAKE) ${MKNAME} -C lib/swig clean; \
    fi
	(cd lib/swig; ${RM} lib_wrap.c *.old *.bak aubit4gl_pl.pm)

clean.project:
	(cd tools/project; ${RM} *.bak)
	(cd tools/cygwin; ${RM} *.bak)


#Clean stuff that is lef over aubitbuild.sh:
clean.build:
	${RM} *.tgz *.htm *.html *.tmp

## ==================================================================
##                              Install
## ==================================================================
#FIXME: this should use ${INSTALL}
#FIXME: install .a4glrc in $HOME too
#make icons for KDE and GNOME: to IDE, to manual

install: install.core install.example install.manual install.config \
		install.links install.aubitrc install.libs.links \
		install.makefile-install
#install.libs.conf
	
ifneq "${AUBITRCFILEEXISTS}" ""
	@echo " "
	@echo "WARNING: Configuration file aubitrc exists in ${AUBITETC}/aubitrc"
	@echo "====================== WILL NOT OVERWRITE ======================"
	@echo "use 'make install.aubitrc aubitrc=new' if you want to do that "
	@echo "Automatically created aubitrc placed in /tmp/aubitrc.tmp"
	@echo " "
endif
	@echo Aubit compiler installed to $(INSTALL_DIR)
#platform
#etc/aubit-auto.spec

install.core: install.tree install.gtk
	${CP} $(TOBIN) $(INSTALL_DIR)/bin
	chmod a+x $(INSTALL_DIR)/bin/*
	$(CP) $(TOROOT) $(INSTALL_DIR)
	$(CP) $(TOINCL) $(INSTALL_DIR)/incl
	$(CP) $(TOLIBCUI) $(INSTALL_DIR)/lib
ifneq "${COMSPEC}" ""
	$(CP) ${TOLIB_EXPORTLIB} $(INSTALL_DIR)/lib
endif
	@echo "#AUBIT_BIN_INSTALL is needed for make files and 4glpc to know they are not in Aubit compiler source code tree:" > /tmp/Makefile-common
	@echo "AUBIT_BIN_INSTALL=1" >> /tmp/Makefile-common
	@cat $(SOURCE)/incl/Makefile-common >> /tmp/Makefile-common
	@mv /tmp/Makefile-common $(INSTALL_DIR)/incl
	@echo Aubit 4gl core compiler files installed

install.gtk:
ifeq "${GTKBUILD}" "yes"
	$(CP) $(TOLIBGTK) $(INSTALL_DIR)/lib
ifneq "${COMSPEC}" ""
	$(CP) ${TOLIBGTK_EXPORTLIB} $(INSTALL_DIR)/lib
endif
endif

install.config:
	$(CP) ${TOETC} $(INSTALL_DIR)/etc
	@echo "Configuration examples installed to $(INSTALL_DIR)/etc"

install.example:
	$(CP) $(TOTEST) $(INSTALL_DIR)/tools/test
ifeq "${GTKBUILD}" "yes"
	$(CP) $(TOTESTGUI) $(INSTALL_DIR)/tools/test/gui
endif
	@echo Aubit 4gl compiler programming examples are now installed

install.manual:
	$(CP) $(TODOCS) $(INSTALL_DIR)/docs
#	$(CP) $(TODOCS2) $(INSTALL_DIR)/docs/manual/html
	@echo Aubit 4gl compiler manual is now installed

installide:
	${MAKE} ${MKNAME} -C tools/ide install.aubit
	@echo Aubit 4gl compiler IDE is now installed

packide:
	${CP} ${TOIDE} $(INSTALL_DIR)/IDE

installdrop:
	${RMDIR} $(INSTALL_DIR)

#install.tree.mkpath:
install.tree:
	${MKPATH} $(INSTALL_DIR)/bin
	${MKPATH} $(INSTALL_DIR)/lib
	${MKPATH} $(INSTALL_DIR)/etc
	${MKPATH} $(INSTALL_DIR)/incl
	${MKPATH} $(INSTALL_DIR)/tools/test/gui
	${MKPATH} $(INSTALL_DIR)/docs
	@echo "Aubit 4gl compiler instalation tree created"

install.links.source:
#this links bin programs to location of Aubit source code:
	${MKPATH} ${BIN_INSTALL_LINK}
	${LN_S} ${AUBITDIR}/bin/aubit-config ${BIN_INSTALL_LINK}/aubit-config
	${LN_S} ${AUBITDIR}/bin/aubit ${BIN_INSTALL_LINK}/aubit

install.makefile-install:
	${CP} etc/Makefile-install $(INSTALL_DIR)/Makefile
	${CP} incl/Makefile-install.mki $(INSTALL_DIR)/incl
	${CP} -r etc/config/ $(INSTALL_DIR)/etc
	${CP} etc/aubitrc.in $(INSTALL_DIR)/etc/aubitrc-bin.in
#Not all installations will have autoconf, and especially not version 2.5 or up
#we need to have already generated configure in CVS
#BUT-we better do this from main (root-source code) configure.in and use it
#for binar distribution too, with --with-bin switch
#	(cd etc; autoconf)
#	${CP} etc/configure $(INSTALL_DIR)
	${CP} configure $(INSTALL_DIR)
#all targets common to installing compiled source code, AND installing
#binary distributions are in here:
###################################
include incl/Makefile-install.mki
###################################

deinstall: deinstall.all

tarinstall: platform
#FIXME: check if it exists first
#	(cd $(PREFIX); tar -cvzf $(SOURCE)/$(TARNAME) * $(A4GLRC))
	(cd $(INSTALL_DIR); tar -cvzf $(SOURCE)/$(TARNAME) * )

createcleantar: installdrop installall tarinstall
	@echo "Aubit 4gl compiler binary disribution is now in $(SOURCE)/$(TARNAME)"

tar: clean.all
#COMPILE_DATE=20-01-2002
#TARGET=i586-pc-linux-gnu
	${RM} aubit4gl-src-${AUBIT_VERSION}.${AUBIT_BUILD}.tgz
	tar -cvzf aubit4gl-src-${AUBIT_VERSION}.${AUBIT_BUILD}.tgz *
	@echo "Aubit source tarball created"

source.zip:
	${RMDIR} $(INSTALL_DIR)
	${MKPATH} $(INSTALL_DIR)
	(cd $(INSTALL_DIR); autocvspasswd; cvs -w checkout $(AUBITCVSNAME))
	(cd $(INSTALL_DIR)/$(AUBITCVSNAME); zip -r $(SOURCEZIPNAME) * )

#if we unhide them before zip, zip will not find them:
unhide.lnk:
	(cd $(INSTALL_DIR)/runtime; for afile in *.lnk.hide; do mv "$$afile" "`basename "$$afile" .hide`"; done;)

cygwin.zip.runtime:
	${RM} $(SOURCE)/$(ZIPRUNTIMENAME)
	(cd $(INSTALL_DIR)/runtime/; zip -r $(SOURCE)/$(ZIPRUNTIMENAME) * )

pack.amake:
	${MKPATH} /tmp/pack_amake/bin
	${CP} bin/amake bin/amakeallo bin/amakeallf bin/genmake bin/prepmake /tmp/pack_amake/bin
	${MKPATH} /tmp/pack_amake/incl
	${CP} incl/*.mk incl/*.mki /tmp/pack_amake/incl
	echo "See HOWTO at https://sourceforge.net/docman/?group_id=32409" > /tmp/pack_amake/README.txt
	(cd /tmp/pack_amake; tar -cvzf $(SOURCE)/amake.tar.gz * )


## ------------------------------------------------------------------
##                       Binary distribution Targets
## ------------------------------------------------------------------

cleantar:
	$(RM) *.${ARCHEXT}
	$(RM) *.${ARCHEXT}.txt


## ------------------------------------------------------------------
##                      RPM packaging
## ------------------------------------------------------------------

#You may need to create the following directories to make a build tree:
#	BUILD is the directory where all building occurs by RPM. You don't
#		have to do your test building anywhere in particular, but this is
#		where RPM will do it's building.
#	SOURCES is the directory where you should put your original source
#		tar files and your patches. This is where RPM will look by default.
#	SPECS is the directory where all spec files should go.
#	RPMS is where RPM will put all binary RPMs when built.
#	SRPMS is where all source RPMs will be put.


#will fail, bacause automaticaly generates spec file fill not have
#"configure" step, and AUBITDIR will be wrong
rpm.auto:
ifneq "@RPM@" "no"
ifneq "@AUTOSPEC@" "no"
	${MAKE} rpm.build.auto
else
	@echo "RPM autospec tool where not detected on your system. Try 'make rpm.preset'"
endif
else
	@echo "RPM tools where not detected on your system."
endif

#this will make rpm form autoconf-ed etc/aubit-rpm.conf
rpm:
ifneq "@RPM@" ""
	${MAKE} rpm.build.preset
else
	@echo "RPM tools where not detected on your system."
endif

rpm.build.auto: etc/aubit-auto.spec
rpm.build.auto: RPMCONFFILE:=${AUBITDIR}/etc/aubit-auto.spec
rpm.build.auto: SRCTMP:=${RPMBUILDROOT}/SOURCES/${NAMEVERBLD}.tar.gz
rpm.build.auto: rpm.build

rpm.build.preset: RPMCONFFILE:=${AUBITDIR}/etc/aubit-rpm.spec
#rpm.build.preset: SRCTMP:=${RPMBUILDROOT}/SOURCES/${SOURCETARBASENAME}
rpm.build.preset: SRCTMP:=${RPMBUILDROOT}/SOURCES/${NAMEVERBLD}.tar.gz
rpm.build.preset: rpm.build

#rpm.build: AUBITDIR=${RPMBUILDROOT}/BUILD/aubit4gl-0.20
#rpm.build: PATH=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}/bin:${PATH}
rpm.build:
#RPM insists to have source code in ${RPMBUILDROOT}/SOURCES/ before it will
#build it, and only then make rpm from both of them (src and bin RPM)
#	echo xxx ${SOURCETARBASENAME} ZZZZ ${SRCTMP} xxx
ifeq "${RPM}" "new"
	${RM} ${SRCTMP}
	${RM} /tmp/${NAMEVERBLD}/${SOURCETARBASENAME}
endif
	@if [ ! -f ${SRCTMP} ]; then \
		echo "No ${SRCTMP}, making it..."; \
		if [ ! -f /tmp/${NAMEVERBLD}/${SOURCETARBASENAME} ]; then \
			echo "No /tmp/${NAMEVERBLD}/${SOURCETARBASENAME}, making it..."; \
			${MAKE} ${MKNAME} clean.all > /dev/null; \
			${RMDIR} /tmp/${NAMEVERBLD}; \
			${MKPATH} /tmp/${NAMEVERBLD}; \
			${LN_S} ${AUBITDIR} /tmp/${NAMEVERBLD}/${NAMEVERBLD}; \
			echo "Creating /tmp/${NAMEVERBLD}/$(SOURCETARNAME) from ${NAMEVERBLD}/ ..."; \
			(cd /tmp/${NAMEVERBLD}; tar -cvzf $(SOURCETARNAME) ${NAMEVERBLD}/* > /dev/null); \
		else \
            echo "Have /tmp/${NAMEVERBLD}/${SOURCETARBASENAME}"; \
		fi; \
		${CP} /tmp/${NAMEVERBLD}/${SOURCETARBASENAME} ${SRCTMP} ; \
	else \
        echo "Have ${SRCTMP}"; \
		echo "use RPM=new on make line to force refresh"; \
	fi
#	(export AUBITDIR=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}; export PATH=${RPMBUILDROOT}/BUILD/${NAMEVERBLD}/bin:${PATH}; rpm -ba ${RPMCONFFILE} > rpmbuild.log 2>&1)
	rpm -ba ${RPMCONFFILE} > rpmbuild.log 2>&1
	@echo "See rpmbuild.log for details"

rpm.1: RPMCONFFILE:=${AUBITDIR}/etc/aubit-auto.spec
#rpm.1: LOGFILE=> rpmbuild.log 2>&1
rpm.1:
	rpm -ba ${RPMCONFFILE} ${LOGFILE}

#automatically create .spec file for RPM build:
etc/aubit-auto.spec: aubit4gl.lsm
	${MAKE} ${MKNAME} -n install | autospec -i -d -n ${NAMEVERBLD} -g Development/Languages > ${AUBITDIR}/etc/aubit-auto.spec

build.diff.patch:
	diff -uNr dirname.orig dirname > ../SOURCES/dirname-linux.patch


#Create Linux Software Map (.lsm) used by autospec, see http://www.execpc.com/lsm/
aubit4gl.lsm: OUTFILE=aubit4gl.lsm
aubit4gl.lsm:
	@echo Begin4 > ${OUTFILE}
	@echo Title: Aubit 4gl compiler >> ${OUTFILE}
	@echo Version: ${AUBITVERSION}.${AUBITBUILD} >> ${OUTFILE}
	@echo Entered-date: ${COMPILEDATE} >> ${OUTFILE}
	@echo Description: Compiler for x4gl programming language >> ${OUTFILE}
	@echo Keywords: compiler 4gl database sql gui >> ${OUTFILE}
	@echo Author: Mike Aubury >> ${OUTFILE}
	@echo Maintained-by: Aubit development team >> ${OUTFILE}
	@echo Primary-site: http://aubit4gl.sourceforge.net >> ${OUTFILE}
	@echo Alternate-site: http://www.falout.com >> ${OUTFILE}
	@echo Original-site: http://www.aubit.com >> ${OUTFILE}
	@echo Platforms: POSIX Win32 >> ${OUTFILE}
	@echo Copying-policy: GNU GPL LGPL >> ${OUTFILE}
	@echo End >> ${OUTFILE}
	@echo >> ${OUTFILE}
	@echo >> ${OUTFILE}
	@echo Note: >> ${OUTFILE}
	@echo send this file to 'lsm@execpc.com' with the subject 'add'. >> ${OUTFILE}


## ------------------------------------------------------------------
##            DoxyGen doccumentation creation
## ------------------------------------------------------------------

#create Doxy documentation
doxy:
ifneq "@DOXYGEN@" "no"
	${MAKE} doxy.make
ifneq "@WWW_DOCUMENT_ROOT@" ""
	${MAKE} doxy.install.www
endif
ifneq "@CGI_DIR@" ""
	${MAKE} doxy.install.search
endif
	@echo To use it, open file 'docs/doxy/html/index.html' in your web browser
else
	@echo "Sorry DOXYGEN not installed"
endif

doxy.make:
	rm -rf docs/doxy/html
	doxygen docs/doxy/Doxyfile
#Now copy the file
#
#     /opt/aubit/aubit4glsrc/docs/doxy/html/doxysearch.cgi
#
#to the directory where the CGI binaries are located and don't forget to run
#
#     /opt/aubit/aubit4glsrc/docs/doxy/html/installdox
#
#to replace any dummy links.
	@echo DoxyGen doccumentation created and placed in docs/doxy/html

doxy.install.www:
	rm -rf @WWW_DOCUMENT_ROOT@/projects/Aubit4GL/doxy/html
	cp -r docs/doxy/html @WWW_DOCUMENT_ROOT@/projects/Aubit4GL/doxy/html
	cd @WWW_DOCUMENT_ROOT@/projects/Aubit4GL/doxy/html; doxytag -s search.idx
	@echo DoxyGen doccumentation installed in web server path :
	@echo @WWW_DOCUMENT_ROOT@/projects/Aubit4GL/doxy/html
	@echo Point your web browser to @WWW_HOST_NAME@/projects/Aubit4GL/doxy/html/index.html

doxy.install.search:
	cp docs/doxy/html/doxysearch.cgi @CGI_DIR@

## ------------------------------------------------------------------
##                       Other Targets
## ------------------------------------------------------------------

#This will increase build number; use it before releasing compiled binaries.
#Edit project/version file manually to increase version number; when
#you do, reset build counter to zero.
build:
	@echo Current versions before build number increase:
	@echo AUBITVERSION = ${AUBITVERSION} AUBITBUILD = ${AUBITBUILD}
	@chmod a+x tools/project/mkproject
	(cd tools/project; ${SH} mkproject -increase)
	@echo After build number increase:
	@echo "AUBITVERSION = `cat $(SOURCE)/tools/project/version` AUBITBUILD = `cat $(SOURCE)/tools/project/build`"

commit.build: build commit.build.step2
commit.build.step2: BUILDNO=$(shell cat $(SOURCE)/tools/project/build)
commit.build.step2:
	@cvs commit -m "commit.build ${BULDNO}" > commit.log
	@echo "Build ${BUILDNO} Commit finished. See file './commit.log'"

demo:
	${MAKE} ${MKNAME} -C tools/test
	@echo Aubit 4gl compiler examples are now compiled


#obsolete - allreadwrite:
#obsolete - 	chmod -R a+rw *
#obsolete -
help:
	@echo
	@echo This is Aubit 4gl compiler makefile help
	@echo
	@echo Usage: "make [targets] [option=value] ..."
	@echo
	@echo For more help use:
	@echo "  make help.options"
	@echo "  make help.targets"
	@echo

help.targets:
	@echo
	@echo Targets:
	@echo
	@echo "  default (same as just "make") - compile the Aubit 4gl compiler"
#	@echo "  gtkgui - compile only GTK libraries"
	@echo "  clean - delete and temp and intermittent files, but not targets"
	@echo "  cleanall - delete ALL compiled object and temp files that where"
	@echo "          created with make. This will result in clan source code"
	@echo "          tree, as exported form CVS"
	@echo "  install - installs Aubit 4gl compiler in installation tree"
	@echo "  tarinstall - creates ${ARCHEXT} file from installation tree"
	@echo "  demo - compile 4gl exampe code in tools/test/ and tools/test/gui/"
	@echo "  log - log default target make process to ./make.log"
	@echo "  settings - show how is makefile configured"
	@echo "  platform - dump settings and current build data to $(PLATFORMINFO)"
	@echo

help.options:
	@echo
	@echo "Options: (first option is default)"
	@echo "  PDFBUILD=(no/yes) NOTE: Must have PDF lib installed"
	@echo "  GTKBUILD=(yes/no) NOTE: Must have GTK lib installed"
	@echo "  JABBERBUILD=(yes/no) NOTE: Must have ikemel lib installed"
	@echo "  PREFIX= where to install binaries, default is $PREFIX"
	@echo
	@echo

#--------------------- debugging -----------------------------

savesettings: OUT = $(PLATFORMINFO)
savesettings: newfile settings.common

#no stdout on CygWin :-(
#settings: OUT="/dev/stdout"
settings: OUT=  $(PLATFORMINFO)
settings: blankfile settings.common
	@cat $(PLATFORMINFO)

blankfile:
	@echo "" > ${OUT}

newfile:
	@echo "This file contains version info of compile platform" > ${OUT}

settings.common:
#	@echo "OUT = " ${OUT}
	@echo "make invoked with flags : ${MAKEFLAGS}" >> ${OUT}
	@echo "make invoked in : ${PWD}" >> ${OUT}
	@echo "Reading from root makefile variables:" >> ${OUT}
	@echo -------------- Optional libraries ---------------- >> ${OUT}
	@echo "GTKBUILD        = ${GTKBUILD}" >> ${OUT}
	@echo "PDFBUILD        = ${PDFBUILD}" >> ${OUT}
	@echo "JABBERBUILD     = ${JABBERBUILD}" >> ${OUT}
	@echo -------------- ODBC settings --------------------- >> ${OUT}
	@echo "HAVE_UNIXODBC   = ${HAVE_UNIXODBC}" >> ${OUT}
	@echo "HAVE_IODBC      = ${HAVE_IODBC}" >> ${OUT}
	@echo "ODBC_LINK       = ${ODBC_LINK}" >> ${OUT}
	@echo "ODBC            = ${ODBC}" >> ${OUT}
	@echo "ODBCLIBDIR      = ${ODBCLIBDIR}" >> ${OUT}
	@echo "ODBC_LIB_DIR    = ${ODBC_LIB_DIR}" >> ${OUT}
	@echo "ODBC_LIB_NAME   = ${ODBC_LIB_NAME}" >> ${OUT}
	@echo -------------- C Compiler settings --------------- >> ${OUT}
	@echo "CFLAGS          = ${CFLAGS}" >> ${OUT}
	@echo "LD_LIBRARY_PATH = ${LD_LIBRARY_PATH}" >> ${OUT}
	@echo -------------------------------------------------- >> ${OUT}
	@echo COMPILEDATE=$(COMPILEDATE) AUBITVERSION=$(AUBITVERSION) AUBITBUILD=$(AUBITBUILD) >> ${OUT}
	@echo AUBITDIR=${AUBITDIR} OS=$(TARGET) >> ${OUT}
	@echo -------------------------------------------------- >> ${OUT}

show.platform: OUT="/tmp/showplatform"
show.platform: platform.common
	cat /tmp/showplatform

platform: OUT = $(PLATFORMINFO)
platform: savesettings platform.common
	@cp $(OUT) $(INSTALL_DIR)
	@cp $(OUT) ${PLATFORMINFOFULL}
	@echo "platform: See result in ${OUT}"
	@echo "Also copied to $(INSTALL_DIR)/$(OUT) and ${PLATFORMINFOFULL}"


platform.common:
#	@echo OUT = $(OUT)
	@echo "----- Compile date: ---------" >> $(OUT)
	@date >> $(OUT)
	@echo "----- Compile host  ---------" >> $(OUT)
	@uname -a >> $(OUT)
	@${GTKCONFIGTEXT}  >> $(OUT)
	@${GTKCONFIGCMD} >> $(OUT)
	@echo "----- ${CC} -v ---------" >> $(OUT)
	@${CC} -v  >> $(OUT) 2>&1
	@if [ -f "bin/4glc" ]; then \
		echo "----- all shared libraries used by 4glc ---------" >> $(OUT) ; \
		ls -al bin/4glc  >> $(OUT) ; \
		${LDDCMD} bin/4glc${EXE} >> $(OUT) ; \
    fi
	@if [ -f "tools/test/test_build" ]; then \
		echo "----- all shared libraries used by compiled 4gl program ---------" >> $(OUT) ; \
		ls -al tools/test/test_build  >> $(OUT) ; \
		${LDDCMD} tools/test/test_build${EXE}  >> $(OUT) ; \
    fi
	@echo "-------------------- EOF -----------------------" >> $(OUT)

#FIXME: info needed for binary disrto: kernel version, ODBC lib version, PDF version,...


debug.filenames:
	@echo ${TEMPLATENAME} >> ${OUT}
	@echo ${TEMPLATENAMETXT} >> ${OUT}
	@echo ${TEMPLATESRC} >> ${OUT}
	@echo ${TEMPLATENAMEINFO} >> ${OUT}
	@echo ${PLATFORMINFO} >> ${OUT}
	@echo ${PLATFORMINFOFULL} >> ${OUT}


# ------------------------------ testing ----------------------------


lclint:
	(echo " " > $(LCLINTLOG))
#Warning! This will override CFLAGS in lib makefile!!!
	$(MAKE) ${MKNAME} -C lib lclint PDF=no >> $(LCLINTLOGCMD)
	$(MAKE) ${MKNAME} -C compilers/4glc/rules lclint LCLINTFLAGS=$(LCLINTFLAGS) >> $(LCLINTLOGCMD)
	@echo "see $(LCLINTLOG) for results"

settings.rc:
	@echo
	@echo "A1 [/etc/opt/aubit4gl/aubitrc] =${A1}"
	@echo "A2 [/opt/aubit4gl/etc/aubitrc] =${A2}"
	@echo "A3 [../etc/aubitrc]            =${A3}"
	@echo "A4 [etc/aubitrc]               =${A4}"
	@echo "A5 [~/.aubit4gl/aubitrc]       =${A5}"
	@echo "A6 [./.aubitrc]                =${A6}"
	@echo "A7 ['$A4GL_INIFILE' ]            =${A7}"
	@echo

find.dup.c.files:
	find . -name "*.c" -exec basename {} \; | sort | uniq -c | grep -v " 1"


configure:
	autoconf --localdir=etc/config

test.install:
	cd $(INSTALL_DIR)/tools/test
	${MAKE}
	./hello
	cd gui
	${MAKE}
	./hello_gui

test.full:
	${MAKE} clean.all
	./configure
	${MAKE}
	${MAKE} install
	${MAKE} test.install


#refresh pre-compiled parser files that are used for compilation on 
#platforms that don't have Yacc installed, from Yacc created files:
refresh.noyacc:
	${CP} compilers/4glc/rules/generated/y.tab.c tools/no_yacc/cygwin/compilers/4glc/rules/generated
	${CP} compilers/4glc/rules/generated/y.tab.h tools/no_yacc/cygwin/compilers/4glc/rules/generated
	${CP} compilers/fcompile/lex.yy.c tools/no_yacc/cygwin/compilers/fcompile
	${CP} compilers/fcompile/y.tab.c tools/no_yacc/cygwin/compilers/fcompile
	${CP} compilers/menus/lex.yy.c tools/no_yacc/cygwin/compilers/menus
	${CP} compilers/menus/y.tab.c tools/no_yacc/cygwin/compilers/menus


## ---------------------------- EOF ----------------------------------

