# -*- shell-script -*-
###########################################################################
# Generated by mkapspec 0.3
#
# This is specification file for generating AutoPackage installer for Aubit compiler
# See http://autopackage.org
#
# An important thing to know and to remember: all code in the [BuildPrepare], 
#[BuildUnprepare], [Imports], [Prepare], [Install]  and [Uninstall]  sections 
#are shell script codes! Everything you can do in bash, you can do here too!
###########################################################################

#
# $Id: default.apspec.in,v 1.1 2006-11-04 11:09:58 afalout Exp $
#

#####################################
[Meta]
ShortName: @SHORTNAME@
SoftwareVersion: @AUBIT_VERSION@.@AUBIT_BUILD@
DisplayName: @FULLNAME@
RootName: @aubit4gl.sf.net/aubit4gl:$SOFTWAREVERSION
Summary: Informix-4GL and x4GL compatible compiler with many extensions and supported databases
Maintainer: @AUBIT_PUBLISHER@
Packager: Andrej Falout <andrej@falout-DOT-org>
PackageVersion: 1
#We cant use target_cpu here, as we have in it actuall CPU type (i686) not class
#and AutoPackage accepts only x86 at the moment
CPUArchitectures: x86
AutopackageTarget: 1.0
#Seems we can choose only between Application or Library here:
Type: Library
License: @AUBIT_LICENSE@
URL: http://aubit4gl.sf.net
InterfaceVersion: 1.0

#####################################
[Description]
Aubit 4gl (Fourth Generation programing Language) compiler compiles source
files to several low-level programming languages (C, Perl, Java...). It has
ODBC and native database conectivity, GUI interface and many features.

Install Aubit compiler if you want to write business related database
oriented (BRDO) applications.

#####################################
[BuildPrepare]
# If you're using autotools, the default should be enough.
# prepareBuild will set up apbuild and run configure for you. If you
# need to pass arguments to configure, just add them to prepareBuild:
# prepareBuild --enable-foo --disable-bar
#
#prepareBuild
#
#DONT DO ANYTHING - WE WILL TAKE CARE OF COMPILING OURSELVES
#

#####################################
[BuildUnprepare]
# If you're using prepareBuild above, there is no need to change this!
#
#unprepareBuild
#
#DONT DO ANYTHING - WE WILL TAKE CARE OF COMPILING OURSELVES
#

#####################################
[Globals]
export sover=".1.2.3"


#####################################
[Prepare]
#skeletons - /usr/share/autopackage/skeletons
#require '@gtk.org/glib' 2.0
recommend '@gtk.org/gtk' 2.4
recommend '@glade.gnome.org/libglade' 2.0
#Fails with "Cannot prepare package":
#recommend '@gnu.org/ncurses'
#Fails with "Cannot prepare package":
#recommend '@perl.org/perl'
#FAIL: Unable to prepare package Aubit 4GL compiler.
#recommend '@zlib.org/zlib'


#####################################
[Imports]
#Note: the working directory in this section is $build_root! The folder in which 
#makeinstaller is invoked is referred by $source_dir.
#
# This command will tell makeinstaller what to include in the package.
# The selection comes from the files created by 'make install' or equivalent.
# Usually, you can leave this at the default
#echo '*' | import
#
import <<EOF
$source_dir/bin/aubit
$source_dir/bin/4glc
$source_dir/lib/libaubit4gl.so$sover
$source_dir/plugins-1.00_3/libMSG_NATIVE.so
EOF

#####################################
[Install]
# See http://www.autopackage.org/api/ for details
#http://autopackage.org/api/installation.html

#--------------------- EXECUTABLES
#Installs an executable file to $PREFIX/bin. $PATH will be automatically updated 
#if $PREFIX/bin is not currently in it. The file will be given execution permissions. 
#If there is already an executable with the same name in the PATH, then this function 
#will build a bootstrap script so the program is guaranteed that when it does execute, 
#PATH, LD_LIBRARY_PATH and MANPATH will be set correctly for that PREFIX. This function 
#operates in terms of copyFiles(), so the notes for that function apply here also.

#installExe bin/aubit bin/4glc
installExe aubit ./4glc
#installExe bin/4glc

#--------------------- LIBRARIES
#installLib <LIBRARIES>
#because its a public library - MAKE IT A LINK
#Install shared libraries (.so files) to $PREFIX/lib. If the path to install to 
#is not in the linker configuration, then it will be updated. If installing as 
#root, /etc/ld.so.conf will be altered and ldconfig rerun. If installing as user, 
#updateEnv will be called to ensure that the destination appears in LD_LIBRARY_PATH.
#If your project uses libtool, then you probably have the following files:
#    * libfoo.so.1.2.3
#    * libfoo.so.1 (symlink to libfoo.so.1.2.3)
#    * libfoo.so (symlink to libfoo.so.1.2.3)
#
#You are supposed to install libfoo.so.1.2.3, not the symlinks. installLib will 
#automatically ensure that the symlinks libfoo.so and libfoo.so.1 are created.
#

#installLib ./lib/libaubit4gl.so.0.0.0
installLib libaubit4gl.so$sover 
#installLib ./libgcrypt.so.$sover ./libgcrypt-pthread.so.$sover
#installLib ./lib/libgaim-remote.so.0.0.0

#--------------------- PLUG-INS
#copyFiles [--silent] [--nobackup] [--nolog] <SOURCE> [<SOURCE> ...] <DIRECTORY>
#Copy one or more files to destination DIRECTORY. The filenames are logged and 
#will be automatically removed at uninstallation. Wildcards can be used when function 
#is called with file or directory arguments - exactly like a ls call.
#
#This function can make a backup if the destination DIRECTORY contains the 
#SOURCE file name. The original file will be moved to the BACKUP environment variable location.
#
#If the --silent flag is passed, no UI output will be generated. This option is 
#primarily meant for internal usage from the other APIs.
#
#If the --nobackup flag is passed, function will not create backups. This option 
#is primarily meant for internal usage from the other APIs.
#
#If the --nolog flag is passed, no logging output will be generated. This option is 
#primarily meant for internal usage from the other APIs.
#


#copyFile [--silent] [--nobackup] [--nolog] <FILENAME-FROM> <FILENAME-TO>
copyFile libMSG_NATIVE.so $PREFIX/plugins-1.00_3/libMSG_NATIVE.so



#--------------------- MISC FILES
#Copy DIRECTORIES to the standard data directory ($PREFIX/share), while 
#displaying a nice localized "Installing data files..." message while copying.
#share/foobar/some-random-datafile.dat		installData share/foobar

#etc/aubit4gl-configurator.desktop			installDesktop "Development" share/applications/aubit4gl-configurator.desktop
#share/locale/en_GB/LC_MESSAGES/foobar.mo	installLocale share/locale
#man/man3/foobar.3							installMan 3 man/man3/foobar.3
#info/foobar								installInfo info/foobar
#installIcon <SOURCES>

#--------------------- FILES TO CREATE

#Create links:
#linkFile [--silent] [--nobackup] [--nolog] <TARGET> <LINK_NAME>

#Add files/links created during installation to log file, so they get un-installed
#logFile <FILENAME>
#logDir <DIRECTORY>

#-------------------- TASKS

#Set environment variables:
#updateEnv PATH "/path/to/my/program/bin"
#setVariables AUBITDIR "/path/to/my/program"

#Query native package manager if it has record of package owing this file,
#and if it does, request it to deinstall the package to avoid conflicts
#with files we are about to install
#removeOwningPackage "$PREFIX/bin/4glc"

#installMenuItem [--no-path-adjust] <CATEGORY> <FILENAMES>


#####################################
[Uninstall]
# Leaving this at the default is safe unless you use custom commands in
# "Install" to create files. By default, all autopackage API functions are
# logged.
uninstallFromLog



# -------------------------------- EOF --------------------------------------

