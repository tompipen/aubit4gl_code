# -*- shell-script -*-
###########################################################################
#
# This is specification file for generating AutoPackage installer for Aubit compiler
# See http://autopackage.org
#
# An important thing to know and to remember: all code in the [BuildPrepare], 
#[BuildUnprepare], [Imports], [Prepare], [Install]  and [Uninstall]  sections 
#are shell script codes! Everything you can do in bash, you can do here too!
#
# See http://www.autopackage.org/api/ for details
# http://autopackage.org/api/installation.html

###########################################################################

#
# $Id: default.apspec.in,v 1.3 2006-11-26 01:13:58 afalout Exp $
#

###############################################################################
#
###############################################################################
[Meta]
ShortName: @SHORTNAME@
SoftwareVersion: @AUBIT_VERSION@.@AUBIT_BUILD@
DisplayName: @FULLNAME@
RootName: @aubit4gl.sf.net/aubit4gl:$SOFTWAREVERSION
Summary: Informix-4GL and x4GL compatible compiler with many extensions and supported databases
Maintainer: @AUBIT_PUBLISHER@
Packager: Andrej Falout <andrej@falout-DOT-org>
PackageVersion: 1
#We cant use target_cpu here, as we have in it actuall CPU type (e.g. i686) not class
#and AutoPackage accepts only x86 at the moment
CPUArchitectures: x86
AutopackageTarget: 1.0
#Seems we can choose only between Application or Library here; library can be a 
#dependency to another package (as Aubit lib is to compiled 4GL programs), App can
#have dependencyes, but cant be one itself. Specifying Library here also 
#creates few more files (.meta, .xml) in addition to .package
Type: Library
License: @AUBIT_LICENSE@
URL: http://aubit4gl.sf.net
InterfaceVersion: 1.0

###############################################################################
#
###############################################################################
[Description]
Aubit 4GL (Fourth Generation programing Language) compiler compiles source
files to several low-level programming languages (C, Perl, Java...). It has
ODBC and native database conectivity, GUI interface and many features.

Install Aubit compiler if you want to write or run business related database
oriented (BRDO) applications in x4GL language.

###############################################################################
#
###############################################################################
[BuildPrepare]
#
# If you're using autotools, the default should be enough.
# prepareBuild will set up apbuild and run configure for you. If you
# need to pass arguments to configure, just add them to prepareBuild:
# prepareBuild --enable-foo --disable-bar
#
#prepareBuild
#
#DONT DO ANYTHING - WE WILL TAKE CARE OF COMPILING OURSELVES
#

###############################################################################
#
###############################################################################
[BuildUnprepare]
#
# If you're using prepareBuild above, there is no need to change this!
#
#unprepareBuild
#
#DONT DO ANYTHING - WE WILL TAKE CARE OF CLEANING OURSELVES
#

###############################################################################
#
###############################################################################
[Globals]
#
# WARNING - MUST USE 'export' KEYWORD !
#
# VARIABLES DO NOT SURVIVE FROM PACKAGING TO INSTALL TIME!
#

#--------------------------------
#Version appended to libraries by Libtool (libxyz.so.1.2.3)
#export sover=".1.2.3"

#--------------------------------
#Collect the list of all files 'make install' installs:
#Must avoid links and directories!
#This is replaced form root Makefile - NOT FROM CONFIGURE!!
export AP_BIN_FILES="@AP_BIN_FILES@"
export AP_PLUGINS_FILES="@AP_PLUGINS_FILES@"
export AP_LIB_FILES="@AP_LIB_FILES@"
export AP_ROOT_FILES="@AP_ROOT_FILES@"
export AP_ETC_FILES="@AP_ETC_FILES@"
export AP_ETC_CONFIG_FILES="@AP_ETC_CONFIG_FILES@"
export AP_ETC_IMPORT_FILES="@AP_ETC_IMPORT_FILES@"
export AP_ETC_CONVERTSQL_FILES="@AP_ETC_CONVERTSQL_FILES@"
export AP_DOCS_FILES="@AP_DOCS_FILES@"
export AP_INCL_FILES="@AP_INCL_FILES@"
export AP_TOOLS_FILES="@AP_TOOLS_FILES@"
export AP_TOOLS_TEST_FILES="@AP_TOOLS_TEST_FILES@"
export AP_TOOLS_TEST_GUI_FILES="@AP_TOOLS_TEST_GUI_FILES@"
export AP_TOOLS_4GLPC_FILES="@AP_TOOLS_4GLPC_FILES@"
export AP_TOOLS_4GLPC_SETTINGS_FILES="@AP_TOOLS_4GLPC_SETTINGS_FILES@"

###############################################################################
#
###############################################################################
[Prepare]

#--------------------------------
#Check for dependencies with AutoPackage sceleton files available:
#See available dependencies (skeletons) in /usr/share/autopackage/skeletons
#and http://cvs.sunsite.dk/viewcvs.cgi/autopackage/main/share/skeletons/
#
#require '@gtk.org/glib' 2.0
recommend '@gtk.org/gtk' 2.4
recommend '@glade.gnome.org/libglade' 2.0


#FAIL: Unable to prepare package Aubit 4GL compiler.
#recommend '@gnu.org/ncurses'

#FAIL: Unable to prepare package Aubit 4GL compiler.
#recommend '@perl.org/perl'

#FAIL: Unable to prepare package Aubit 4GL compiler.
#recommend '@zlib.org/zlib'


#/usr/share/autopackage/skeletons/@gnome.org:
#gconf2    libart_lgpl  libgnomeprint-2-2    libgnomesu  libgucharmap  pyglade
#gtkhtml2  libbonobo2   libgnomeprintui-2-2  libgnomeui  libxml        pygtk

#/usr/share/autopackage/skeletons/@advancedresearch.org:
#dialog



#--------------------------------
# Check whether /tmp has at least 1392003 bytes of free disk space
checkDiskSpace 1392003 "/tmp"

#--------------------------------
requireFile /bin/bash
#requireFile /lib/libm.so.6

#--------------------------------
#testForLib libfoo.so && echo "libfoo.so was found on the system!"


###############################################################################
#
###############################################################################
[Imports]
#
# This command will tell makeinstaller what to include in the package.
# The selection comes from the files created by 'make install' or equivalent.
#
#Note: the working directory in this section is $build_root! The folder in which 
#makeinstaller is invoked is referred by $source_dir.
#
#import <<EOF
#$source_dir/bin/aubit
#$source_dir/plugins-1.00_3/libMSG_NATIVE.so
#EOF

find @prefix@ -type f | grep -v libaubit4gl.so | import

###############################################################################
#
###############################################################################
[Install]

#Issues:
#Qt installer does not show icon when creating desktop menu entry
#progressbar and outputtest core dum and are disabled
#can we do without separate terminal for configure?
#autoconf does not detect curses because missing libsurses.so link


#--------------------------------- OPTIONS ------------------------------------
#This options are available for debugging; user can alter the behaviour of
#installer by exporting this variables in there environment prior to running
#the installer (eg. export USE_PROGRESSBAR=1; ./filename.package)
#------------------------------------------------------------------------------

#-----------------
# Should the installer show its progress bar or show plain messages instead
# Progress bar was causing core dumps in qt GUI in version 1.2 (package info autopackage-gtk)
# Still core dumps in 1.2.1
if test "$USE_PROGRESSBAR" = ""; then
	USE_PROGRESSBAR=0
else
	echo "User specified USE_PROGRESSBAR=$USE_PROGRESSBAR"
fi

#TODO - enable user specified variables like above

#-----------------
# Disable use of GUI mode dialogs
FORCE_CONSOLE=0

#-----------------
# Should the installer show status messages or use 'echo' to stdout instead
USE_OUTPUTSTATUS=1

#-----------------
# Should the installer use "checking for..." and pass/fail icons or show plain messages instead
# also core dumps:
# Still core dumps in 1.2.1
USE_OUTPUTTEST=0

#-----------------
# Should we ask user for installation location (needs GUI variant of dialog)
ASK_LOCATION=0

#-----------------
# Do we abort installation on fatal errors, or show message and continue
ABORT_ON_FATAL=0

#----------------
# Do we show the user summary message on the end of the installation
SHOW_SUMMARY=1

#-----------------
# Should we run AutoConf as a part of the installation
RUN_CONGIFURE=1

#----------------
# Should a ./configure AutoConf command run in a separate terminal window
CONFIGURE_TERM=1

#----------------
# When ./configure AutoConf command IS NOT running in separate terminal, do
# we hide its output from user
CONFIGURE_HIDE=1

#----------------
# Wait for user to press ENTER before closing AutoConf separate terminal or 
# continuing when running AutoConf in main terminal. Ignored when running
# AutoConf hidden
# FIXME: Konsole did not like this at all - find out why
AC_PAUSE=0

#------------------------------------ SETTINGS --------------------------------
#This settings should not need to be altered by user
#------------------------------------------------------------------------------

#-----------------
#Default installation location; PREFIX depends on users privileges (root=global install, 
#ordinary user = $HOME/.local
#WARNING - -p flag (install location/PREFIX) seems to be ignored in GUI installed and only valid for TUI
#The '-ap' suffix is added so we can distinguish between AutoPackage installed
#location of Aubit and potentialy other installations present on the system
PREFIX="$PREFIX/@SHORTNAME@-ap"

#-----------------
#Files to collect if we fail: + output of configre , aubit --check-env, running compiler test,
#system info
#TODO - package this files and tell user to supply them with bug report
ERR_COLLECT="$PREFIX/configure.log /xxx/autopackage.log"

#-----------------
#command to use for logging variables and messages (for our private log file)
LOG="echo"

#-----------------
#AutoPackage built-in variables:
#$WORKING_DIRECTORY
#The absolute path of the temporary directory from which the autopackage is using. The directory will contain all objects used during the installation session. Scripts should use this variable instead of $TMP as it is already setup as temporary.
#$EXECUTED_FROM_DIRECTORY
#The absolute path of the directory from which the autopackage was run. This is NOT necessarily the absolute path of the package itself, consider the case where a user runs, eg "/tmp/foo-1.0.x86.package" from their home directory.

#-----------------
#File to use for logging variables and messages (for our private log file)
MY_LOGFILE="/tmp/aubitpackage.log"

#-----------------
#Command to use when we want to output privare message
ECHO="echo"

#-----------------
#Command to use when we are substituring AutoPackage message system with plain messages
ECHO_OUTPUT="echo"

#-----------------
#Initialise Checking/pass/fail controll counter
OTCNT=0

#-----------------
#Do we show controll counter (debugging)
SHOW_CNT=1

#-----------------
#Compose the log command and initialise log file
LOGCMD=">> $MY_LOGFILE 2>&1"
date > "$MY_LOGFILE"

if test "$FORCE_CONSOLE" != "1"; then
	#--------------------------
	#Determine if we have GUI dialog tool
	#NOTE: no point in using TUI only 'dialog' as it would block if user  
	#did not start installer from command line, waiting for >OK< to be pressed
	#NOTE: it is safe to assume that user will be running this insatller from GUI 
	#environment - this is AutoPAckage after all...
	#What if insatlling remotely over SSH for example?
	if locateCommand Xdialog; then
		DIALOG_EXE="Xdialog"
	fi
	if locateCommand gdialog; then
		DIALOG_EXE="gdialog"
	fi
	if locateCommand zenity; then
		DIALOG_EXE="zenity"
	fi
	
	if locateCommand kdialog; then
		DIALOG_EXE="kdialog"
	fi
	if test "$DIALOG_EXE" != ""; then
		DIALOG=1
		DIALOG_TITLE="Aubit 4GL installer"

		#If activated, prompt user to select installation directory
		if test "$ASK_LOCATION" = "1"; then
			x=`$DIALOG_EXE --title "Select installation directory for Aubit compiler" --getexistingdirectory $PREFIX`
			PREFIX="$x"
		fi
	else
		DIALOG=0
	fi
else 
	DIALOG=0
fi
	
	#------------------------------------
	#Configure notifications
	if test "$USE_PROGRESSBAR" = "1"; then 
		PROGRESSBAR="progressBar"
	else
		PROGRESSBAR="$ECHO_OUTPUT"
	fi
	
	if test "$USE_OUTPUTSTATUS" = "1"; then
		OUTPUTSTATUS="outputStatus"
	else 
		OUTPUTSTATUS="$ECHO_OUTPUT"
	fi
	if test "$USE_OUTPUTTEST" = "1"; then
		OUTPUTTEST="outputTest"
		OUTPUTFAIL="outputFail"
		#When outputTest is enabled, OUTPUTSTATUS_CHECKING should do nothing
		#Same for OUTPUTFAIL_CHECKING
		OUTPUTSTATUS_CHECKING="echo"
		OUTPUTFAIL="outputFail"
		OUTPUTFAIL_CHECKING="echo"
		OUTPUTTESTPASS="outputTestPass"
		OUTPUTTESTFAIL="outputTestFail"
		
	else
		OUTPUTTEST="$ECHO_OUTPUT 'outputTest'"
		#When outputTest is disabled, outputStatus that immediately follows it acts instead of it
		#Same for OUTPUTFAIL_CHECKING
		OUTPUTSTATUS_CHECKING="outputStatus"
		OT_CHK="Checking for"
		OUTPUTTESTPASS="$ECHO_OUTPUT 'outputTestPass'"
		OUTPUTTESTFAIL="$ECHO_OUTPUT 'outputTestFail'"
		OUTPUTFAIL_CHECKING="outputStatus"
		OF_CHK="ERROR:"
		OUTPUTFAIL="$ECHO_OUTPUT 'outputFail'"
	fi
	
	
	########################################
	#Starting the installation...
	########################################
	
if test "$SHOW_CNT"="1"; then $ECHO "CHECKPOINT 1: OTCNT=$OTCNT"; fi
	
#Query native package manager if it has record of package owing this file,
#and if it does, request it to deinstall the package to avoid conflicts
#with files we are about to install
removeOwningPackage "$PREFIX/bin/4glc"

$PROGRESSBAR 1 10 "Copying files"
$OUTPUTSTATUS "Installing to $PREFIX"

#--------------------- EXECUTABLES
#installExe <FILENAMES>
#Installs an executable file to $PREFIX/bin. $PATH will be automatically updated 
#if $PREFIX/bin is not currently in it. The file will be given execution permissions. 
#
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! 
#>>>>>If there is already an executable with the same name in the PATH, then this function 
#will build a bootstrap script<<<<
#
# ...but it seems that due to the bug IT WILL NOT DEINSTALL THEM!
#
#so the program is guaranteed that when it does execute, 
#PATH, LD_LIBRARY_PATH and MANPATH will be set correctly for that PREFIX. This function 
#operates in terms of copyFiles(), so the notes for that function apply here also.

installExe $AP_BIN_FILES

#--------------------- ORDINARY FILES
#copyFiles [--silent] [--nobackup] [--nolog] <SOURCE> [<SOURCE> ...] <DIRECTORY>
#Copy one or more files to destination DIRECTORY. The filenames are logged and 
#will be automatically removed at uninstallation. Wildcards can be used when function 
#is called with file or directory arguments - exactly like a ls call.
#
#This function can make a backup if the destination DIRECTORY contains the 
#SOURCE file name. The original file will be moved to the BACKUP environment variable location.
#
#If the --silent flag is passed, no UI output will be generated. This option is 
#primarily meant for internal usage from the other APIs.
#
#If the --nobackup flag is passed, function will not create backups. This option 
#is primarily meant for internal usage from the other APIs.
#
#If the --nolog flag is passed, no logging output will be generated. This option is 
#primarily meant for internal usage from the other APIs.
#

$PROGRESSBAR 2 10 "Copying files"
$OUTPUTSTATUS "Installing plugins..."
copyFiles $AP_PLUGINS_FILES $PREFIX/plugins-@AUBIT_VERSION@_@AUBIT_BUILD@

$PROGRESSBAR 3 10 "Copying files"
$OUTPUTSTATUS "Installing files..."
copyFiles $AP_ROOT_FILES $PREFIX/
copyFiles $AP_ETC_FILES $PREFIX/etc
copyFiles $AP_ETC_CONFIG_FILES $PREFIX/etc/config
copyFiles $AP_ETC_IMPORT_FILES $PREFIX/etc/import
copyFiles $AP_ETC_CONVERTSQL_FILES $PREFIX/etc/convertsql

$PROGRESSBAR 4 10 "Copying files"
copyFiles $AP_DOCS_FILES $PREFIX/docs
copyFiles $AP_INCL_FILES $PREFIX/incl
copyFiles $AP_TOOLS_TEST_FILES $PREFIX/tools/test
copyFiles $AP_TOOLS_TEST_GUI_FILES $PREFIX/tools/test/gui
copyFiles $AP_TOOLS_4GLPC_SETTINGS_FILES $PREFIX/tools/4glpc/settings

if test "$AP_TOOLS_4GLPC_FILES" != ""; then
	copyFiles $AP_TOOLS_4GLPC_FILES $PREFIX/tools/4glpc
fi
if test "$AP_TOOLS_FILES" != ""; then
	copyFiles $AP_TOOLS_FILES $PREFIX/tools
fi

$PROGRESSBAR 5 10 "Copying files" 

#
# Copy individual files:
#
#copyFile [--silent] [--nobackup] [--nolog] <FILENAME-FROM> <FILENAME-TO>
#copyFile libMSG_NATIVE.so $PREFIX/plugins-1.00_3/libMSG_NATIVE.so

#--------------------- MISC FILES
#Copy DIRECTORIES to the standard data directory ($PREFIX/share), while 
#displaying a nice localized "Installing data files..." message while copying.
#share/foobar/some-random-datafile.dat		installData share/foobar

#share/locale/en_GB/LC_MESSAGES/foobar.mo	installLocale share/locale
#man/man3/foobar.3							installMan 3 man/man3/foobar.3
#info/foobar								installInfo info/foobar

#--------------------- LIBRARIES
#installLib <LIBRARIES>
#because its a public library - MAKE IT A LINK
#Install shared libraries (.so files) to $PREFIX/lib. If the path to install to 
#is not in the linker configuration, then it will be updated. If installing as 
#root, /etc/ld.so.conf will be altered and ldconfig rerun. If installing as user, 
#updateEnv will be called to ensure that the destination appears in LD_LIBRARY_PATH.
#If your project uses libtool, then you probably have the following files:
#    * libfoo.so.1.2.3
#    * libfoo.so.1 (symlink to libfoo.so.1.2.3)
#    * libfoo.so (symlink to libfoo.so.1.2.3)
#
#You are supposed to install libfoo.so.1.2.3, not the symlinks. installLib will 
#automatically ensure that the symlinks libfoo.so and libfoo.so.1 are created.
#

installLib $AP_LIB_FILES


#--------------------- FILES TO CREATE

#Create links:
#linkFile [--silent] [--nobackup] [--nolog] <TARGET> <LINK_NAME>
linkFile $PREFIX/lib/libaubit4gl-@AUBIT_VERSION@_@AUBIT_BUILD@.so $PREFIX/lib/libaubit4gl.so

#Add files/links created during installation to log file, so they get un-installed
#logFile <FILENAME>
#logDir <DIRECTORY>

#--------------------- Desktop integration

$PROGRESSBAR 6 10 "Integrating with Desktop"

#DEPRECIATED installDesktop "Development" aubit4gl-configurator.desktop
installGnome2AppEntry aubit4gl-configurator.applications

#Installs an icon to appropriate directories, so that your desktop is guaranteed 
#to be able to locate these icons for display in menus items. This function can 
#be used in combination with installMenuItem(). You should ship and install at 
#least a 48x48 icon in PNG format.
#See also: getIconDirs(), freedesktop.org Base Directory Specification and freedesktop.org 
#Icon Theme Specification.
#The directory structure of the directory passed as an argument to installIcon() 
#should follow the structure specified by the FreeDesktop.org Icon Specification. 
#The structure is ///. All applications should install an icon for the hicolor 
#theme, as it is the default theme as specified by the spec. SVG icons can be installed into /scaleable.
installIcon aubit4gl.png

#installMenuItem [--no-path-adjust] <CATEGORY> <FILENAMES>
#Install a menu entry (.desktop file). This function will automatically detect 
#GNOME and KDE and will copy the desktop entires to the proper locations.
#By default, this function will change the paths in the TryExec, Exec fields to 
#absolute filenames by prepending "$PREFIX/bin". For instance, "Exec=gimp" will 
#be changed to "Exec=/home/myuser/.local/bin/gimp".
#
#If you do not want installMenuItem to change the paths, pass the --no-path-adjust argument.
#
#The CATEGORY parameter is used for non-vFolder/menu spec desktops such as KDE 3.1 
#and below, and possibly in future window managers like fluxbox/icewm as well. You 
#should probably specify a string that would fit with the pre-KDE 3.2 menus here, 
#such as "Graphics/Vector Graphics"
installMenuItem Development aubit4gl-configurator.desktop


#TODO:
#asql_g.4ae
#asql_i.4ae
#asql_p.4ae
#report_viewer
#runforms.4ae
#sqleditor.4ae
#ide1.4ae



#-------------------- MISC TASKS

$PROGRESSBAR 7 10 "Configuring"

#updateEnv [--append] [--check] <VARIABLE> <PATH>
#Prepends a path to an environment variable and add a command in the 
#logfile to remove it if needed at uninstall. It will only be removed on 
#uninstall if the directory specified by the PATH parameter is empty. The 
#modifications to the environment variables will be saved in various shell startup scripts.
#Dont need to do this - InstallExe does it automatically -- updateEnv PATH "$PREFIX/bin"

#WARNING!!!! IT APPENDS and it therefore adds ':' to anything allready in that var!!!!
#unset AUBITDIR -- wont help - it looks for it in autopackage scripts
#DONT USE for AUBITDIR - NO WAY TO DELETE!!! updateEnv AUBITDIR "$PREFIX"

#################################################################
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#
# Never use autoPackage to set variables - ESPECIALLY not the ones that
# can change on subsequent instllation (like AUBITDIR) as it is
# NOT removed in 99% of the cases
#
# Variables once defined are remove ONLY if installation directory
# is COMPLETELY EMTY after deinstall!!!!
#
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!
#WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!! WARNING!!!


#Save package variables into the environment files which will make the variables 
#available for prep, install, and uninstall functions.
#NOT ADDED TO WRAPPER SCRIPTS!!!!
#Seems that it's not propagated to environment or wrapper scripts:
#Not sure what is this for ???
#setVariables AUBITDIR "$PREFIX"

#createBootstrapScript <BINARY> <FILENAME> [ADDITIONAL-COMMANDS]
#FILENAME: 	the filename to which the bootstrap script is written.
#BINARY: 	the filename of an application.
#Returns: 	0 on success, 1 on error.
#
#Create a bootstrap script for BINARY. A bootstrap script is a script which 
#sets up various environment variables (such as $PATH, $LD_LIBRARY_PATH, etc.), 
#then run BINARY. That way it ensures BINARY can actually be run.
#
#If ADDITIONAL-COMMANDS is given, it will be included in the bootstrap script. 
#The commands in this option will be run just before BINARY is started.
#
#FILENAME will be added to the uninstall log.

#TODO: Not sure we need to do this?
A4GL_ENV="export A4GL_UI=HL_GTK
export AUBITDIR=$PREFIX
export DBPATH=$PREFIX/etc:$$PREFIX/tools:$DBPATH"

createBootstrapScript "$PREFIX/bin/configurator" "$PREFIX/bin/aubit4gl-configurator.sh" "$A4GL_ENV" 

#--------------------------- CONFIGURE aubitrc

if test "$RUN_CONGIFURE" = "1"; then 
	
	$PROGRESSBAR 8 10 "Running AutoConf"
	
	#creates Aubit configuration file (aubitrc) for binary installation by"
	#running ./configure (as etc/aubitrc-bin)"
	#This attempts to detects presense of various dependencies"
	#and third-party libraries/utilities, and:" 
	#  a) create list of all Aubit plug-ins/features for which support"
	#     is detected and possible"
	#  b) sets sensible defaults for various Aubit plug-in classes" 
	#     (database,UI,etc.)"
	
	if test "$SHOW_CNT"="1"; then $ECHO "CHECKPOINT 2: OTCNT=$OTCNT"; fi
	
	let OTCNT=OTCNT+1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
	MSG="available 3rd party options and creating 'aubitrc'"
	$OUTPUTTEST "$MSG"
	$OUTPUTSTATUS_CHECKING "$OT_CHK $MSG"
	
	#Let ./configure know we are invoking it from AutoPackage installer:
	export AP_INSTALLER_RUNNING=1
	cd $PREFIX 
	CONFIGURE_TERM=1
	if test "$CONFIGURE_TERM" = "1"; then
		CMD="./configure"
		if test "$AC_PAUSE" = "1"; then
			CMD="$CMD ; read X"
		fi
		#launchInTerminal [--title TITLE] <COMMAND> [ARGUMENTS]
		launchInTerminal --title AutoConf "$CMD"
		RET=$?
	else
		if test "$CONFIGURE_HIDE" = "1"; then
			x=`./configure 2>&1`
			RET=$?
			echo "$x" > /tmp/configure-ap.log
		else
			#./configure $LOGCMD
			CMD="./configure"
			if test "$AC_PAUSE" = "1"; then
				CMD="$CMD ; read X"
			fi
			$CMD
		fi
	fi
	cd -
	
	#-------------------------------------
	#Check the result of running Autoconf
	if test "$RET" != "0"; then
		$LOG "Configure RET code $RET" $LOGCMD 
		let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
		$OUTPUTTESTFAIL
		MSG="Autoconf failed"
		$OUTPUTFAIL "$MSG"
		$OUTPUTFAIL_CHECKING "$OF_CHK $MSG"
		if test "$ABORT_ON_FATAL" = "1"; then 
			false  # This aborts the installation by setting the return value to non-zero
		else
			$OUTPUTFAIL_CHECKING "Should abort because $MSG"
		fi
	else
		RC_BIN="$PREFIX/etc/aubitrc-bin"
		if test -f "$RC_BIN"; then
			let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
			$OUTPUTTESTPASS
		
			#Add FILENAME to the uninstall file log. This file will be automatically removed during uninstallation.			
			logFile $PREFIX/config.log
			logFile $PREFIX/config.nice 
			logFile $PREFIX/config.status
			logFile $PREFIX/libtool
			
			#Check newly set AUBITDIR
			let OTCNT=OTCNT+1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
			MSG="determined AUBITDIR in $RC_BIN"
			$OUTPUTTEST "$MSG" 
			$OUTPUTSTATUS_CHECKING "$OT_CHK $MSG"
			NEW_AUBITDIR="`grep -w AUBITDIR $RC_BIN | grep -v '#'`"
			if test "$NEW_AUBITDIR" = "AUBITDIR=$PREFIX"; then
				let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
				$OUTPUTTESTPASS
			else
				let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
				$OUTPUTTESTFAIL
				MSG="Autoconf failed to correcty set AUBITDIR - in $RC_BIN AUBITDIR set to $NEW_AUBITDIR"
				$OUTPUTFAIL "$MSG"
				$OUTPUTFAIL_CHECKING "$OF_CHK $MSG"
			fi
			
			#installs aubitrc it to appropriate places
			date_stamp=`date +%d-%m-%Y_%H-%M-%S`
			#Put global one in /etc if you can 
			if haveWriteAccess /etc; then
				RC_DIR="/etc/opt/aubit4gl"
				mkdirs "$RC_DIR"
				RC_FILE="aubitrc"
				ALL_RC="$RC_DIR/$RC_FILE"
			fi	
	
			#Put one in users HOME
			RC_DIR="$HOME/.aubit4gl"
			mkdirs "$RC_DIR"
			RC_FILE="aubitrc"
			ALL_RC="$ALL_RC $RC_DIR/$RC_FILE"
			
			#Install one in installation dir too, so that other system users can 
			#use compiler, despite of the installer not being root (and therefore 
			#not created sytem-wide config fiel under /etc/opt/aubit4gl)
			#Cant think of any reason not to?
			RC_DIR="$PREFIX/etc"
			RC_FILE="aubitrc"
			ALL_RC="$ALL_RC $RC_DIR/$RC_FILE"
			
			for rc in $ALL_RC; do
				$OUTPUTSTATUS "Installing $rc ..."
				if test -f $rc; then
					let OTCNT=OTCNT+1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
					MSG="for existing $rc - FOUND, creating backup"
					$OUTPUTTEST "$MSG"
					$OUTPUTSTATUS_CHECKING "$OT_CHK $MSG"
					#backup existing one
					cp $rc ${rc}-${date_stamp}.bak
					let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
					$OUTPUTTESTPASS
				fi
				cp "$RC_BIN" "$rc"
			done
	
			#Dont register for uninstall - we want to keep config bettween installs
	
		else
			let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
			$OUTPUTTESTFAIL
			MSG="Autoconf failed - $RC_BIN was not created"
			$OUTPUTFAIL "$MSG"
			$OUTPUTFAIL_CHECKING "$OF_CHK $MSG"
			if test "$ABORT_ON_FATAL" = "1"; then 
				false  # This aborts the installation by setting the return value to non-zero
			else
				$OUTPUTFAIL_CHECKING "Should abort because $MSG"
			fi
		fi
	fi
fi

if test "$SHOW_CNT"="1"; then $ECHO "CHECKPOINT 3: OTCNT=$OTCNT"; fi


$PROGRESSBAR 9 10 "Checking environment"
let OTCNT=OTCNT+1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
MSG="environment sanity"
$OUTPUTTEST "$MSG"
$OUTPUTSTATUS_CHECKING "$OT_CHK $MSG"

	#-----------------------
	#Make sure we have all recent environment changes applied:
	if test -f /etc/profile; then 
		. /etc/profile
	else
		$ECHO "/etc/profile does not exist ?"
	fi
	if test -f $HOME/.profile; then
		. $HOME/.profile
	fi

	#-----------------------
	#Paranoia check
	if ! test -f $PREFIX/bin/aubit; then
		let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
		$OUTPUTTESTFAIL
		MSG="Something is very wrong - $PREFIX/bin/aubit does not exist"
		$OUTPUTFAIL "$MSG"
		$OUTPUTFAIL_CHECKING "$OF_CHK $MSG"
		if test "$ABORT_ON_FATAL" = "1"; then 
			false  # This aborts the installation by setting the return value to non-zero
		else
			$OUTPUTFAIL_CHECKING "Should abort because $MSG"
		fi

	fi
	
	#---------------------------------
	#Check the configured environment
	$OUTPUTSTATUS "Running aubit --check-env (1)..."	
	$PREFIX/bin/aubit --check-env --averbose
	RET=$?
	if test "$RET" = "99"; then 
		#Some Aubit plug-ins cant find linked libraries, but some or all 
		#of them where found - so add them to ldconfig or LD_LIBRARY_PATH in
		#profile file
		$OUTPUTSTATUS "Trying to fix plug-ins ld configuration..."
		$PREFIX/bin/aubit --check-env --fix-ld
		#Re-read the profile and try again
		$OUTPUTSTATUS "Reloading profile files..."
		if test -f /etc/profile; then 
			. /etc/profile
		else
			$ECHO "/etc/profile does not exist ?"
		fi
		if test -f $HOME/.profile; then
			. $HOME/.profile
		fi
		
		$OUTPUTSTATUS "re-checking environment sanity"
		$PREFIX/bin/aubit --check-env
		RET=$?
	fi
	
	#---------------------------------------
	#Check the result of checking environment
	if test "$RET" != "0"; then
		if test "$RET" = "99"; then
			let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
			$OUTPUTTESTPASS
			$OUTPUTSTATUS "Environment is valid, but some Aubit plug-ins are not operational, which is normal unless you installed ALL supporting 3rd party options (Cant read your mind to determine which you want and which not - yet!); Try running 'aubit --check-env' from command line to see which plug-ins are not operational."
		else
			let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
			$OUTPUTTESTFAIL
			MSG="Environment is invalid ($RET). Try running 'aubit --check-env' from command line"
			$OUTPUTFAIL "$MSG"
			$OUTPUTFAIL_CHECKING "$OF_CHK $MSG"
			#Continue anyway - user can fix config manually later
			#if test "$ABORT_ON_FATAL" = "1"; then 
			#	false  # This aborts the installation by setting the return value to non-zero
			#else
			#	$OUTPUTFAIL_CHECKING "Should abort because $MSG"
			#fi
		fi
	else
		let OTCNT=OTCNT-1; if test "$SHOW_CNT"="1"; then $ECHO "OTCNT=$OTCNT"; fi
		$ECHO "OK: ret code 0 from aubit --check-env"
		#OTCNT=0
		#OK: ret code 0 from aubit --check-env
		#/usr/share/autopackage/apkg-io: line 309: 27771 Segmentation fault      "$AUTOPACKAGE_FRONTEND" "$@"
		#FAIL:Frontend terminated abnormally.
		$OUTPUTTESTPASS
		$ECHO "still here?"
	fi

if test "$SHOW_CNT"="1"; then $ECHO "CHECKPOINT 4: OTCNT=$OTCNT"; fi

$PROGRESSBAR 10 10 "We're done"       # 100%[=========] We're done

	CNF="$PREFIX/bin/aubit-config" 

	#-----------------------------------------
	#Show the summary message to be shown to the user
	if test "$SHOW_SUMMARY" = "1"; then
		aubit --summary
	fi

###############################################################################
#
###############################################################################
[Uninstall]
#
# Leaving this at the default is safe unless you use custom commands in
# "Install" to create files. By default, all autopackage API functions are
# logged.
#
uninstallFromLog


###############################################################################
#								THE END
###############################################################################
# -------------------------------- EOF --------------------------------------


#Potentially usefull commands to use:

#This function is like sed, but works on a file. It uses sed's --in-place 
#option if available. Otherwise it emulates it by copying the file. With this 
#function can reliably edit a file without hitting asyncronity issues.
#
#    echo 'One Two Three' > foo.txt
#    safeSed foo.txt 's/One/Two/g'


#err <MESSAGE>
#MESSAGE: 	The message you wish to be printed to the terminal and logged to file.
#
#err will print out the current function and the given message in red. It is 
#part of the logging framework and will always give output to stdout.


#Checks if the named symbol is exported by the library. Simply uses dlopen and 
#dlsym to find this out. Useful for checking if certain features are available 
#in a given library to determine version data in skeletons.
#    if checksym libcups.so.2 cupsDoFileRequest2; then
#        echo CUPS provides that symbol on this system
#    fi


#Syntax: isLibrary32 <PATH>
#Check whether a library is 32-bit or not. If the library is 32-bit, 0 is returned. 
#If the library isn't 32-bit 1 is returned. If an error occurs, 2 is returned. ## START ISLIBRARY32


#installConfig
#Syntax: installConfig <FILENAMES>
#FILENAMES: 	configuration file(s) to install.
#Install configuration files into appropriate directory. Do not use this function! 
#It's severely broken in it's current state and I'm ashmed of the fact that it even 
#exists like this. :( This function will be either removed or improved in autopackage 1.4, 
#but for now, do not use it.


