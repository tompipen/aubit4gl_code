#!/bin/sh

#Aubit 4gl
#Compiles all per files in current directory to objects

###################
function doit {
###################

	ls *.per > /dev/null 2>&1
	RET=$?
	if test $RET != "0"
	then
	    echo "No .per files in current directory."
	else

		ls *.err > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .err
			rm *.err
		fi

		ls *.c > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .c
			rm *.c
		fi

		ls *.ec > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .ec
			rm *.ec
		fi

		ls *.frm > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .frm
			rm *.frm
		fi

		#######
		compper
		#######
    fi

}

####################
function compper {
####################

	####################
	for i in *.per; do
	####################
	X=`basename $i .per`.frm;
	ERR=`basename $i .per`.err;

	if [ "x$SKIP" = "xskip" ]
	then
	    #echo "skip is on"
		if [ -f $MAXDIR/aform/$X ]
		then
			echo "$MAXDIR/aform/$X exists - skip is on"
	        continue
		else
			echo #------- Running fcompile $i in $PWD : -------------  >> $ERRORLOG
			echo Running fcompile $i in $PWD:;
			fcompile $i >> $ERRORLOG 2>&1;
		fi
	else
	    #echo "Skip is OFF"
		#echo fcompile $i;
		echo #------- Running fcompile $i in $PWD : -------------  >> $ERRORLOG
	    fcompile $i >> $ERRORLOG 2>&1;
	fi

	RET=$?
	if test $RET != "0"
	then
		echo "#fcompile failed, return code is $RET"
		cp $i $ALLERRDIR

	    echo "#$ERR : ##################################################" >> $ERRORLOG
		if [ -f $ERR ]
		then
		    echo "$ERR was generated."
			cp $ERR $ALLERRDIR
	        cat $ERR | grep -B 3 \| >> $ERRORLOG
		else
	        echo "ERR file was __NOT__ generated."
	        echo "ERR file was __NOT__ generated." >> $ERRORLOG
		fi;
        echo "##########################################################" >> $ERRORLOG
	    if test $STOPONERROR = "1"
	    then
			echo "Stop."
			exit 1
	    else
	        continue
		fi
	#else
	#	echo "fcompile succeded, return code is $RET"
	fi;

	if [ -f $X ]
	then
	    mv $X $MAXDIR/aform
		if [ -f $ERR ]
		then
		    echo "$ERR _AND_ $X was generated, but fcompile did not return error code."
		    echo "#$ERR _AND_ $X was generated, but fcompile did not return error code."  >> $ERRORLOG
			ls *.err
			if test $STOPONERROR = "1"
		    then
				echo "Stop."
				exit 1
		    else
		        continue
			fi

		fi;

	else
		cp $i $ALLERRDIR
	    echo "#$ERR : ##################################################" >> $ERRORLOG
		echo "$X not generated, but fcompile did not return error code."
		echo "#$X not generated, but fcompile did not return error code."  >> $ERRORLOG

		if [ -f $ERR ]
		then
		    echo "$ERR was generated."
			cp $ERR $ALLERRDIR
	        cat $ERR | grep -B 3 \| >> $ERRORLOG
		else
			echo "$ERR was __NOT__ generated."
			echo "#$ERR was __NOT__ generated."  >> $ERRORLOG
		fi;
        echo "##########################################################" >> $ERRORLOG

		if test $STOPONERROR = "1"
	    then
			echo "Stop."
			exit 1
	    else
	        continue
		fi

	fi;


	#####
	done
	#####


}

###############
#MAIN
###############

#SKIP=$1
SKIP=skip

ROOTDIR=$PWD

if [ -f $AUBITDIR/aubitenv ]
then
	. $AUBITDIR/aubitenv
fi

if [ -f /etc/aubitenv ]
then
	. /etc/aubitenv
fi

ALLERRDIR=/tmp/amakeallf
if [ -d $ALLERRDIR ]
then
    rm -rf $ALLERRDIR
fi

mkdir $ALLERRDIR

STOPONERROR=0
ERRORLOG=/tmp/amakeallf/amakeallf.log
if [ -f $ERRORLOG ]
then
	rm $ERRORLOG
fi

if [ "$1" = "-r" ]
then
    #ALLDIR1=`ls -d *`
    #echo $ALLDIR1
    #exit 0

	########################################################
	for subsystem in ap ar eo fa gl in jm lc main qe re ss wo pu contr dvfund; do
	########################################################
		   echo
		   if [ -d $ROOTDIR/$subsystem ]
           then
			   echo Making forms in $subsystem...
			   cd $ROOTDIR/$subsystem ;
	           doit
	           if [ -d $ROOTDIR/$subsystem/ENG ]
	           then
		           cd $ROOTDIR/$subsystem/ENG
				   echo Making forms in $subsystem/ENG...
	               doit
			   fi
           fi
	####
	done
    ####
else
	doit
	ls *.err > /dev/null 2>&1
	RET=$?
	if test $RET = "0"
	then
		echo All error files:
		ls *.err
	fi
fi

echo Finished.
echo "See $ERRORLOG for summary of all errors generated".
exit 0

