#!/bin/sh
######################################################################
#Aubit 4gl
#Compiles all per files in current directory to objects
#
#Very usefull for finding compiler syntax errors on large number of per
#files. Run it in your form files directory, and it will generate
#log of all compiles, and copy all problematic files in separate
#directory, including err and c files.
#
#
#
######################################################################



############################
function stats {
############################
	echo "$COMPSUCCESS sucessfully compiled, $COMPFAILPER failed in form compiler, $COMPBEFORE already compiled."
    echo "$COMPFAILCCOMP failed in C compiler, $COMPFAILCORE dumped core, $COMPFAILUNKNOWN failed for unknown reason."
	let TOTALFAILED=COMPFAILPER+COMPFAILCCOMP+COMPFAILCORE+COMPFAILUNKNOWN
    echo "$TOTALFAILED total failed."

}

############################
function shortstats {
############################
	echo "OK= $COMPSUCCESS 4gl= $COMPFAILPER skip= $COMPBEFORE c= $COMPFAILCCOMP core= $COMPFAILCORE ?= $COMPFAILUNKNOWN "

}



###################
function doit {
###################

	ls *.per > /dev/null 2>&1
	RET=$?
	if test $RET != "0"
	then
	    echo "No .per files in current directory."
	else

		ls *.err > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .err
			rm *.err
		fi

		ls *.c > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .c
			rm *.c
		fi

		ls *.ec > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .ec
			rm *.ec
		fi

		ls *.$COMPEXT > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo Removing .$COMPEXT
			rm *.$COMPEXT
		fi

		#######
		compper
		#######
    fi

}

####################
function compper {
####################

	####################
	for i in *.per; do
	####################
	X=`basename $i .per`.$COMPEXT;
	ERR=`basename $i .per`.err;

	if [ "x$SKIP" = "xskip" ]
	then
	    #echo "skip is on"
		if [ -f $MAXDIR/$DESTDIR/$X ]
		then
			#echo "$MAXDIR/$DESTDIR/$X exists - skip is on"
			let COMPBEFORE=COMPBEFORE+1
			continue
		else
			#echo "#------- Running $FORMCOMPILER $i in $PWD : -------------"  >> $ERRORLOG
			echo Running $FORMCOMPILER $i in $PWD:;
			$FORMCOMPILER $i >> $ERRORLOG 2>&1;
		fi
	else
	    #echo "Skip is OFF"
		#echo $FORMCOMPILER $i;
		#echo "#------- Running $FORMCOMPILER $i in $PWD : -------------"  >> $ERRORLOG
	    $FORMCOMPILER $i >> $ERRORLOG 2>&1;
	fi

	RET=$?
	if test $RET != "0"
	then
		echo "$PWD/$i failed, return code is $RET"
		echo "#$PWD/$i failed, return code is $RET"  >> $ERRORLOG
		cp $i $ALLERRDIR

	    echo "########################################################## $ERR :" >> $ERRORLOG
		if [ -f $ERR ]
		then
		    echo "$ERR was generated."
			cp $ERR $ALLERRDIR
	        cat $ERR | grep -B 3 $ERRCHAR >> $ERRORLOG
			let COMPFAILPER=COMPFAILPER+1
		else
	        echo "ERR file was __NOT__ generated."
	        echo "ERR file was __NOT__ generated." >> $ERRORLOG

            if [ -f core ]
            then
                let COMPFAILCORE=COMPFAILCORE+1
                rm -f core
            else
				let COMPFAILPER=COMPFAILPER+1
            fi
		fi;
        echo "##########################################################" >> $ERRORLOG
	    if test $STOPONERROR = "1"
	    then
			echo "Stop."
			exit 1
	    else
	        continue
		fi
	fi;

	if [ -f $X ]  #no err code, but did we generate the object?
	then
	    mv $X $MAXDIR/$DESTDIR
		if [ -f $ERR ]
		then
			let COMPFAILPER=COMPFAILPER+1
			echo "#$PWD/$i failed, return code is $RET"  >> $ERRORLOG
			echo "$ERR _AND_ $X was generated, but $FORMCOMPILER did not return error code."
		    echo "#$ERR _AND_ $X was generated, but $FORMCOMPILER did not return error code."  >> $ERRORLOG
			ls *.err
			if test $STOPONERROR = "1"
		    then
				echo "Stop."
				exit 1
		    else
		        continue
			fi

		fi;

	else
		echo "#$PWD/$i failed, return code is $RET"  >> $ERRORLOG
		cp $i $ALLERRDIR
	    echo "########################################################## $ERR : " >> $ERRORLOG
		echo "$X not generated, but $FORMCOMPILER did not return error code."
		echo "#$X not generated, but $FORMCOMPILER did not return error code."  >> $ERRORLOG

		if [ -f $ERR ]
		then
		    echo "$ERR was generated."
			cp $ERR $ALLERRDIR
	        cat $ERR | grep -B 3 $ERRCHAR >> $ERRORLOG
			let COMPFAILPER=COMPFAILPER+1
		else
			echo "$ERR was __NOT__ generated."
			echo "#$ERR was __NOT__ generated."  >> $ERRORLOG
            if [ -f core ]
            then
                let COMPFAILCORE=COMPFAILCORE+1
                rm -f core
            else
				let COMPFAILPER=COMPFAILPER+1
            fi
		fi;
        echo "##########################################################" >> $ERRORLOG

		if test $STOPONERROR = "1"
	    then
			echo "Stop."
			exit 1
	    else
	        continue
		fi

	fi;

    let COMPSUCCESS=COMPSUCCESS+1


	####
	done
	####


}

###############
#MAIN
###############

	#############
	#configuration:
	SKIP=skip
	ROOTDIR=$PWD
	COMPILER=aubit
	ALLERRDIR=/tmp/amakeallf
	STOPONERROR=0
	ERRORLOG=/tmp/amakeallf/amakeallf.log

	###############
	#initialise:
	WASERROR=0
	COMPSUCCESS=0
	COMPBEFORE=0
	COMPFAILFRM=0
	COMPFAILCCOMP=0
	COMPFAILCORE=0
	COMPFAILUNKNOWN=0
    TOTALFAILED=0

	############
	for a in $@
	############
	do
	   ##########
	   case $a in
	   ##########

	   -x)
	        cd aform
	        for file in *.frm; do
	            AONAME=`basename $file .frm`.afr;
				echo moving $file to $AONAME
				mv $file $AONAME
	        done
	        echo Finished renaming.
	        exit 0
		;;

	    -r) 		RECURSIVE=1
        ;;

		-4js)		COMPILER=4js
        ;;

		-stoperr)	STOPONERROR=1
        ;;

        -noskip) 	SKIP=noskip
        ;;

        -tmp)  DESTDIR=/tmp/amakeallo-forms
		;;


        -help)

            echo "Aubit 4gl compiler form compile utillity: amakeallf"
            echo " compiles all per files"
            echo
			echo "Options: [defaults are in ()]"
			echo " -r = recursive: step into subdirectories too (. only)"
			echo " -4js = use 4Js/D4GL compiler (Aubit)"
			echo " -stoperr = stop on any error (continue)"
			echo " -noskip = do not skip files that are already compiled (skip)"
			echo " -x  = rename Aubit old extensions [.frm->.afr]"
			echo " -tmp = move objects to /tmp/amakeallo-forms ('MAXDIR/?form')"
			echo " -help = this help"
            echo
            exit 0
        ;;


	  ####
	  esac
	  ####
	####
	done
	####


	if [ "$COMPILER" = "4js" ]
	then
		#4Js/D4GL:
		FORMCOMPILER=fglform
		COMPEXT=42f
		DESTDIR=gform
		ERRCHAR=#
	fi

	if [ "$COMPILER" = "aubit" ]
	then
		#Aubit 4gl:
		FORMCOMPILER=fcompile
		COMPEXT=frm
		DESTDIR=aform
		ERRCHAR=\|

		if [ -f $AUBITDIR/aubitenv ]
		then
			. $AUBITDIR/aubitenv
		fi

		if [ -f /etc/aubitenv ]
		then
			. /etc/aubitenv
		fi

	fi

	if [ -d $ALLERRDIR ]
	then
	    rm -rf $ALLERRDIR
	fi

	mkdir $ALLERRDIR

	if [ -f $ERRORLOG ]
	then
		rm $ERRORLOG
	fi

	if [ "$RECURSIVE" = "1" ]
	then
	    #FIXME: get list od subdirs from ls; BUT HOW?
		#ALLDIR1=`ls -d *`
	    #echo $ALLDIR1
	    #exit 0

		#############################################################################
		for subsystem in ap ar eo fa gl in jm lc main qe re ss wo pu contr dvfund; do
		#############################################################################

			   if [ -d $ROOTDIR/$subsystem ]
	           then
				   echo Making forms in $subsystem...
				   cd $ROOTDIR/$subsystem ;
		           doit
		           if [ -d $ROOTDIR/$subsystem/ENG ]
		           then
			           cd $ROOTDIR/$subsystem/ENG
					   echo Making forms in $subsystem/ENG...
		               doit
				   fi
	           fi
		####
		done
	    ####
	else
		doit
		ls *.err > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			echo All error files:
			ls *.err
		fi
	fi

    #####
	stats
    #####
	echo Finished.
	echo "See $ERRORLOG for summary of all errors generated".
	exit 0

