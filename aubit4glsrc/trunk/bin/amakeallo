#!/bin/sh

######################################################################
#Aubit 4gl
#amakeallo - Compiles all 4gl filles in current directory to objects
#
#Very usefull for finding compiler syntax errors on large number of 4gl
#files. Run it in your 4gl program's directory, and it will generate
#log of all compiles, and copy all problematic files in separate
#directory, including err and c files.
#
#
#
######################################################################

############################
function stats {
############################
	echo "$COMPSUCCESS sucessfully compiled, $COMPFAIL4GL failed in 4gl, $COMPBEFORE already compiled."
    echo "$COMPFAILCCOMP failed in C compiler, $COMPFAILCORE dumped core, $COMPFAILUNKNOWN failed for unknown reason."
	let TOTALFAILED=COMPFAIL4GL+COMPFAILCCOMP+COMPFAILCORE+COMPFAILUNKNOWN+FAILCOMPATIBLE
    echo "$TOTALFAILED total failed. $FAILCOMPATIBLE failed in both compilers and assumed OK."
    echo "$CCOMPWARNING produced warnings from C compiler, but compiled."
	echo "$NOGLBFILE glb files not found, but $OKNOGLBFILE compiled on the fly."


    echo " " >> $ERRORLOG
	echo "$COMPSUCCESS sucessfully compiled, $COMPFAIL4GL failed in 4gl, $COMPBEFORE already compiled." >> $ERRORLOG
    echo "$COMPFAILCCOMP failed in C compiler, $COMPFAILCORE dumped core, $COMPFAILUNKNOWN failed for unknown reason." >> $ERRORLOG
	let TOTALFAILED=COMPFAIL4GL+COMPFAILCCOMP+COMPFAILCORE+COMPFAILUNKNOWN+FAILCOMPATIBLE >> $ERRORLOG
    echo "$TOTALFAILED total failed. $FAILCOMPATIBLE failed in both compilers and assumed OK." >> $ERRORLOG
    echo "$CCOMPWARNING produced warnings from C compiler, but compiled." >> $ERRORLOG
	echo "$NOGLBFILE glb files not found, but $OKNOGLBFILE compiled on the fly." >> $ERRORLOG
    echo `date` >> $ERRORLOG


}

############################
function shortstats {
############################
	echo "OK=$COMPSUCCESS 4gl=$COMPFAIL4GL skip=$COMPBEFORE c=$COMPFAILCCOMP core=$COMPFAILCORE ?=$COMPFAILUNKNOWN compat=$FAILCOMPATIBLE noglob=$OKNOGLBFILE/$NOGLBFILE cw=$CCOMPWARNING"

}

##########################
function analiseerror {
##########################

		if [ -f $ERR ]
		then
			echo "########################################## ($RET) $PWD/$ERR :" >> $ERRORLOG

            #we now return exit codes from CC or fglc, so we need to test this way
            #if the error file was created by 4glc or c compiler:
			ERRLINES=`cat $ERR | grep -c $ERRCHAR`
			if [ "$DEBUG" = "1" ]
		    then
    			echo "ERRLINES found in $ERR = $ERRLINES"
            fi
			if test $ERRLINES != "0"
			then
				cat $ERR | grep -B $GOBACKLINES -A $GOAFTERLINES $ERRCHAR >> $ERRORLOG
				let COMPFAIL4GL=COMPFAIL4GL+1
				if [ "$VERBOSE" = "1" ]
			    then
					echo "$FGLCOMPILER failed: $PWD/$FGL"
	            fi
			else
				cat $ERR  >> $ERRORLOG
				let COMPFAILCCOMP=COMPFAILCCOMP+1
				if [ "$VERBOSE" = "1" ]
			    then
					echo "CC failed: $PWD/$FGL"
	            fi
			fi

		else  #compiler returner error code, but there is no err file
			if [ -f $OBJERR ]
            then #C compiler failed when linking
				echo "########################################## ($RET) $PWD/$OBJERR :" >> $ERRORLOG
				if [ "$VERBOSE" = "1" ]
			    then
					echo "cc failed: $PWD/$FGL"
                fi
		        cat $OBJERR >> $ERRORLOG
				let COMPFAILCCOMP=COMPFAILCCOMP+1
            else
			    if [ "$VERBOSE" = "1" ]
			    then
					echo "$FGLCOMPILER failed ($RET) (no .err): $PWD/$FGL"
                fi
				echo "########################################## ($RET) $PWD/$i :" >> $ERRORLOG
				echo "$FGLCOMPILER failed ($RET) (no .err)" >> $ERRORLOG
                #is this one of 0 size 4gl files?
				ls -al $i >> $ERRORLOG

				ls core > /dev/null 2>&1
				RET=$?
				if test $RET = "0"
				then
					if [ "$VERBOSE" = "1" ]
				    then
						echo Core was dumped...
                    fi
					echo "Core was dumped..."  >> $ERRORLOG
					rm core
					let COMPFAILCORE=COMPFAILCORE+1
				else
                    #we have no err file, no object err file, and no core was dumped:
					let COMPFAILUNKNOWN=COMPFAILUNKNOWN+1
				fi;
            fi
		fi;
		echo "##########################################################" >> $ERRORLOG


}


########################
function copyerrfiles {
########################
#if error occured, copy all files relevant for debugging to isolated place:


	cp $i $ERRFILESDIR   #4gl file

	if [ -f $ERR ]
    then
		cp $ERR $ERRFILESDIR   #err file
        HAVEERRFILE=1
    fi

	if [ "$COMPILER" = "aubit" ]
	then
		if [ -f $CFILE ]
        then
			cp $CFILE $ERRFILESDIR
            HAVECFILE=1
        fi
		if [ -f $HFILE ]
        then
			cp $HFILE $ERRFILESDIR
            HAVEHFILE=1
        fi
		if [ -f $GFILE ]
        then
			cp $GFILE $ERRFILESDIR
            HAVEGFILE=1
        fi
		if [ -f $OBJERR ]
        then
			cp $OBJERR $ERRFILESDIR
            HAVEOBJERRFILE=1
        fi
    fi


}


##################
function clean {
##################

	ls *.4gl > /dev/null 2>&1
	RET=$?
	if test $RET != "0"
	then
		if [ "$VERBOSE" = "1" ]
    	then
			echo "No .4gl files in current directory."
    	    return
        fi
    fi

	if [ "$VERBOSE" = "1" ]
    then
		echo "Cleaning..."
    fi

	ls *.err > /dev/null 2>&1
	RET=$?
	if test $RET = "0"
	then
		if [ "$VERBOSE" = "1" ]
    	then
			echo Removing .err
        fi
		rm *.err
	fi

	ls *.$COMPEXT > /dev/null 2>&1
	RET=$?
	if test $RET = "0"
	then
		if [ "$VERBOSE" = "1" ]
	    then
			echo Removing .$COMPEXT
        fi
		rm *.$COMPEXT
	fi

	ls core > /dev/null 2>&1
	RET=$?
	if test $RET = "0"
	then
		if [ "$VERBOSE" = "1" ]
    	then
			echo Removing core
        fi
		FIXME: on CygWin remove *.stackdump
		rm core
	fi


	if [ "$COMPILER" = "aubit" ]
	then

		ls *.$COMPEXT2 > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			if [ "$VERBOSE" = "1" ]
		    then
    			echo Removing .$COMPEXT2
            fi
			rm *.$COMPEXT2
		fi
    fi

    if test $FULLCLEAN = "1"
    then
		if [ "$VERBOSE" = "1" ]
	    then
            echo "Full clean is ON"
        fi

        #if we remove glb files, and skip is on, in second run all 4gl's
        #that look for them wil fail, so we normally don't want to clean them.
		if [ "$COMPILER" = "aubit" ]
		then
			ls *.glb > /dev/null 2>&1
			RET=$?
			if test $RET = "0"
			then
				if [ "$VERBOSE" = "1" ]
			    then
					echo Removing .glb
                fi
				rm *.glb
			fi
        fi

		#his can be dangerous, tere might be some C code in there?
		ls *.c > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			if [ "$VERBOSE" = "1" ]
		    then
				echo Removing .c
            fi
			rm *.c
		fi

		#this can also be dangerous, we might have some header files for custom C code there:
		ls *.h > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			if [ "$VERBOSE" = "1" ]
		    then
				echo Removing .h
            fi
			rm *.h
		fi


		#this can be dangerous too, we might have some .ec code there?
		ls *.ec > /dev/null 2>&1
		RET=$?
		if test $RET = "0"
		then
			if [ "$VERBOSE" = "1" ]
		    then
				echo Removing .ec
            fi
			rm *.ec
		fi

	fi


}


############################
function compileit {
############################

	##########
	shortstats
    ##########

    #######################
    #set needed variables:
    #######################
	pwd=`pwd`
	HFILE=`basename $i .4gl`.h;             #h
	GFILE=`basename $i .4gl`.glb;           #glb
	AO=`basename $i .4gl`.$COMPEXT2;        #ao
	OBJERR=$AO.err              	        #ao.err
	X=`basename $i .4gl`.$COMPEXT;          #o
	ERR=`basename $i .4gl`.err;             #err
	CFILE=`basename $i .4gl`.c;             #c

	if test $DEBUG = "1111"
   	then
		echo $pwd
		echo $HFILE
		echo $GFILE
		echo $AO
		echo $OBJERR
		echo $X
		echo $ERR
		echo $CFILE

    fi

    HAVEERRFILE=0
    HAVECFILE=0
    HAVEHFILE=0
	HAVEGFILE=0
    HAVEOBJERRFILE=0

    #########################
	#Is is already compiled?
    #########################
	if [ "$SKIP" = "skip" ]
	then
		if [ -f $DESTDIR/$X ]
		then
		    if [ "$VERBOSE" = "1" ]
		    then
				echo "$DESTDIR/$X exists - skip is on"
            fi
			let COMPBEFORE=COMPBEFORE+1
			return
		else
			if [ "$COMPILER" = "aubit" ] && [ -f $DESTDIR/$AO ]
			then
			    if [ "$VERBOSE" = "1" ]
			    then
					echo "$DESTDIR/$AO exists - skip is on"
                fi
				let COMPBEFORE=COMPBEFORE+1
				return
			fi
		fi
	fi

    #######################
	#set compiler command:
    #######################
	if [ "$COMPILER" = "aubit" ]
	then
		#$FGLCOMPILER file.4gl -c -o file.o
		#A4GLPC="$FGLCOMPILER $i -c -o $X"
		#A4GLPC="$FGLCOMPILER $i -o $X"

		if test $DEBUG = "1"
    	then
			A4GLPC="$FGLCOMPILER -verbose $i -c -o $AO"
        else
			A4GLPC="$FGLCOMPILER $i -c -o $AO"
			export COMPILE_QUIET=yes
        fi
	fi

	if [ "$COMPILER" = "4js" ]
	then
		A4GLPC="$FGLCOMPILER $i"
	fi

    ######################
	#Run compiler command:
    ######################
	if [ "$VERBOSE" = "1" ]
    then
		echo $DESTDIR/$X or $AO not found
		echo "Running $A4GLPC (in $pwd):"
    fi

	if test $DEBUG = "1"
	then
		echo "#Running $A4GLPC (in $pwd):"  >> $ERRORLOG 2>&1;
    fi

	#$A4GLPC >> $ERRORLOG 2>&1;
	#err_msg=`4glc "$a"`
	#err_msg=`eval "$A4GLPC"`
	#err_msg=`$A4GLPC`
	err_msg=`$A4GLPC > /tmp/compmsg.tmp 2>&1`
	RET=$?

    ###########################
    #get message from compiler:
    ###########################
	if [ "$err_msg" != "" ]
    then
		if test $DEBUG = "1"
   		then
			echo "MSG from compiler: $err_msg"   >> $ERRORLOG 2>&1;
        fi
	    if [ "$VERBOSE" = "1" ]
    	then
			echo "MSG from compiler: $err_msg"
        fi
    else
        if [ -f /tmp/compmsg.tmp ]
        then
			err_msg=`cat /tmp/compmsg.tmp`
        fi
	    if [ "$err_msg" != "" ]
	    then
			if test $DEBUG = "1"
   			then
				echo "MSG from compiler: $err_msg"   >> $ERRORLOG 2>&1;
            fi
		    if [ "$VERBOSE" = "1" ]
	    	then
				echo "MSG from compiler: $err_msg"
	        fi
        fi
	fi

    ######################################################
    #is error caused by missing glb file - try to make it:
    ######################################################
	if test $RET = "7"
    then
		if [ "$COMPILER" = "aubit" ]
        then
			let NOGLBFILE=NOGLBFILE+1

			#on exit code 7, $err_msg will be something like:
			#"Couldnt open globals file ../ar/AC.glb"
			DEPENDGLOB4GLFILE=$(echo $err_msg | awk '{print $5}')
			if [ "$VERBOSE" = "1" ]
	    	then
		        echo "File $DEPENDGLOB4GLFILE need to be compiled first..."
	        fi
	        echo "File $DEPENDGLOB4GLFILE need to be compiled first..."  >> $ERRORLOG 2>&1;

	        DEPEND4GLFILE=`basename $DEPENDGLOB4GLFILE .glb`.4gl;
	        DEPEND4GLOBJ=`basename $DEPENDGLOB4GLFILE .glb`.ao;
			A4GLGLOBPC="$FGLCOMPILER $DEPEND4GLFILE -c -o $DEPEND4GLOBJ"
			#4glpc .glb.4gl -c -o .glb.ao


		    if [ "$VERBOSE" = "1" ]
	    	then
		        echo "Running $A4GLGLOBPC"
	        fi
	        echo "Running $A4GLGLOBPC" >> $ERRORLOG 2>&1;

			err_msg=`eval "$A4GLGLOBPC"`
			RET=$?

		    if [ "$err_msg" != "" ]
		    then
		        echo "$err_msg"   >> $ERRORLOG 2>&1;
			    if [ "$VERBOSE" = "1" ]
		    	then
					echo "$err_msg"
		        fi
		    fi

			if test $RET = "0"
		    then
			    OKNOGLBFILE=OKNOGLBFILE+1
	        else
			    if [ "$VERBOSE" = "1" ]
	    		then
					echo "Compiling $DEPENDGLOB4GLFILE failed."
	            fi
				echo "Compiling $DEPENDGLOB4GLFILE failed."  >> $ERRORLOG 2>&1;
				WASERROR=1
				let COMPFAIL4GL=COMPFAIL4GL+1

				if test $STOPONERROR = "1"
			    then
					echo "Stop."
					exit 1
			    else
					return
				fi

	        fi

	        #now try it again:
		    err_msg=`eval "$A4GLPC"`
			RET=$?
        fi
	fi

    ################################
    #did compiler retur error code?
    ################################
	if test $RET != "0"
	then
        #############################
		#does this fails in 4Js too?
        #############################
        if [ "$COMPILER" = "aubit" ] && [ "$COMPATIBLE" = "1" ]
        then
			if test $DEBUG = "1"
   			then
				echo "Trying same in 4Js compiler: $FJSERRFILESDIR/$i"  >> $ERRORLOG
            fi
			if [ "$VERBOSE" = "1" ]
		    then
				echo "Trying same in 4Js compiler: $FJSERRFILESDIR/$i"
            fi

			if [ -d $FJSERRFILESDIR ]
	        then
			    if [ "$VERBOSE" = "1" ]
			    then
					echo "Using previous 4Js run results in $FJSERRFILESDIR"
                fi
				#this depends on amakeallo -4js executed previously:
				if [ -f $FJSERRFILESDIR/$i ]
		        then
	                let FAILCOMPATIBLE=FAILCOMPATIBLE+1
				    if [ "$VERBOSE" = "1" ]
				    then
						echo "Ignoring error - fails with 4Js too (previous)."
                    fi
		            return
		        else
				    if [ "$VERBOSE" = "1" ]
				    then
						echo "NOT EXIST: $FJSERRFILESDIR/$i - so 4Js was OK."
                    fi
				fi
	        else
		        #this would take a long time since it will try to compile again
		        #every file that fails:

				if [ "$VERBOSE" = "1" ]
			    then
                    echo "$FJSERRFILESDIR don't exist"
					echo "fglcomp $i:"
	            fi

				fglcomp $i
		        RET=$?
				if test $RET != "0"
		        then
	                let FAILCOMPATIBLE=FAILCOMPATIBLE+1
				    if [ "$VERBOSE" = "1" ]
				    then
						echo "Ignoring error - fails with 4Js too (now)."
                    fi
			        return
			    fi
			fi
			if [ "$VERBOSE" = "1" ]
		    then
        	    echo "It compiled OK with 4Js"
            fi
            
			if test $DEBUG = "1"
   			then
				echo "It compiled OK with 4Js" >> $ERRORLOG
            fi
		fi

        ##############################################################
        #It does not fail with other compiler, so we do have an error:
        ##############################################################

		WASERROR=1

		############
		copyerrfiles
		############

        ############
        analiseerror
        ############

		if test $STOPONERROR = "1"
	    then
			echo "Stop."
			exit 1
	    else
			return
		fi
	fi;

    #############################################################
	#No error code from compiler, but did we generate object file?
	#############################################################

	HAVEOBJECT=0

	if [ "$COMPILER" = "aubit" ]
	then
		if [ -f $AO ]
		then
			HAVEOBJECT=1
			mv $AO $DESTDIR
        fi
    else
		if [ -f $X ]
		then
			HAVEOBJECT=1
			mv $X $DESTDIR
        fi
    fi

	if test $HAVEOBJECT = "0"
    then

		WASERROR=1
		############
		copyerrfiles
		############

        ############
        analiseerror
        ############

		if test $STOPONERROR = "1"
	    then
			echo "Stop."
			exit 1
	    else
			let COMPFAIL=COMPFAIL+1
			return
		fi
	fi;

    ######################################################################
	#no error code, and object was created, but do we still have err file?
    ######################################################################
	if [ -f $ERR ]
	then
		#This is not really an error, it is warning from C compiler:
		#WASERROR=1
	    if [ "$VERBOSE" = "1" ]
    	then
			echo "Object was generated, but $ERR was generated too, and $FGLCOMPILER did not return error code."
            echo "This probably indicate C compiler warnings"
        fi
		echo "Object was generated, but $ERR was generated too, and $FGLCOMPILER did not return error code."  >> $ERRORLOG
		echo "########################################## ($RET) $PWD/$ERR :" >> $ERRORLOG
		cat $ERR | grep -B $GOBACKLINES $GOAFTERLINES $ERRCHAR >> $ERRORLOG
	    #this usualy indicates warnings from C compiler, so we will probably not have
		#4gl error lines markers, so we better include complete error file here:
		echo "#____________________ COMPLETE ERR FILE: _______________________" >> $ERRORLOG
		cat $ERR >> $ERRORLOG
        echo "##########################################################" >> $ERRORLOG
		let CCOMPWARNING=CCOMPWARNING+1

		#this is not really an error:
		#if test $STOPONERROR = "1"
	    #then
		#	echo "Stop."
		#	exit 1
	    #else
		#	return
		#fi

        return

	fi;

    ########################################################
    #no error code, object created, not err file = all is OK
    ########################################################

    if [ "$VERBOSE" = "1" ]
    then
		echo "Compiled: $PWD/$i"
    fi
	let COMPSUCCESS=COMPSUCCESS+1

}   #compileit


##########################
function compglobals {
##########################

	WASERROR="0"
	ls *.4gl > /dev/null 2>&1
	RET=$?
	if test $RET != "0"
	then
	    echo "No .4gl files in current directory."
	else
		echo "Making GLOBALS only objects in $PWD"
		####################
		for i in *.4gl; do
		####################
		X=`basename $i .4gl`.$COMPEXT2;
		ERR=`basename $i .4gl`.err;
		CFILE=`basename $i .4gl`.c;
		FGL=`basename $i`

		    #echo $i
		    grep -i "end globals" $i > /dev/null

			RET=$?

			if test $RET != "0"
			then
		        #echo $i is NOT GLOBALS file...
		        #echo
		        continue
		    else
				#echo $i is GLOBALS file...
		        compileit
				#shortstats
				#stats
			fi


		#####
		done
		#####

		if test $WASERROR != "0"
		then
            GLOBERRORS="1"
			if test $STOPGLOBALSERROR = "1"
            then
				echo " "
				echo "Stop after compiling GLOBALS files, because one or more failed to compile"
				echo "See $ERRORLOG for summary of all errors generated"
				echo "All source files causing problems where copied to $ERRFILESDIR"
			    echo "Totals:"
				stats
			    echo " "
				exit 1
            else
				echo " "
                echo "Some errors compiling GLOBALS, but will continue..."
			    echo " "
			fi
		else
            GLOBERRORS="0"
			echo "Globals compiled OK, continuing..."
		fi
    fi

} #compglobals

###########################
function makecurrentdir {
###########################

					#####
					clean
					#####

					if [ "$COMPILER" = "aubit" ]
					then
                        #Aubit needs GLOBALS files compiled first:
						GLOBERRORS=0
						###########
						compglobals
						###########

            	      	#Aubit NEEDS glb files, and we cannot assume we have
                	    #them if we had errors when compiling GLOBALS files:

                        #FIXME: is this returned correctly?
						if [ "$GLOBERRORS" = "0" ]
	                    then
					        ####
					        doit
					        ####
                        else
							if test $NONGLOBAFTERGLOBERR = "1"
							then
						        echo "-nonglob is ON, will try to compile non-globals anyway."
								####
						        doit
						        ####
                            else
	                            echo "Skipping non-GLOBALS files in $subsystem"
                            fi
						fi
                    else
				        ####
				        doit
				        ####
                    fi


}


################
function doit {
################

	ls *.4gl > /dev/null 2>&1
	RET=$?
	if test $RET != "0"
	then
	    echo "No .4gl files in current directory."
	else
        echo "Making all 4gl objects in $PWD"

		####################
		for i in *.4gl; do
		####################

		    #########
			compileit
            #########

		#####
		done
		#####

    fi

} #doit


############
#MAIN
############

	################
	#configuration:

	ERRFILESDIR=/tmp/amakeallo
	ERRORLOG=$ERRFILESDIR/amakeallo.log
    FJSERRFILESDIR=$ERRFILESDIR-4js
	AUBITERRFILESDIR=$ERRFILESDIR-aubit
	DESTDIR=/tmp/amakeallo-objects
	ROOTDIR=$PWD

	STOPONERROR=0
	STOPGLOBALSERROR=0
    NONGLOBAFTERGLOBERR=0
	SKIP=skip
	#ERRCHAR=\|
    ERRCHAR=^\|
    COMPILER=aubit
    RECURSIVE=0
	GOBACKLINES=20
	GOAFTERLINES=10
    FULLCLEAN=0
    COMPATIBLE=0
    VERBOSE=0
    DEBUG=0
	MAXMODE=0
	SKIPDIRS=

	###############
	#initialise:
	WASERROR=0
	COMPSUCCESS=0
	COMPFAIL4GL=0
	COMPBEFORE=0
	COMPFAILCCOMP=0
	COMPFAILCORE=0
	COMPFAILUNKNOWN=0
    FAILCOMPATIBLE=0
	TOTALFAILED=0
    CCOMPWARNING=0
    NOGLBFILE=0
    OKNOGLBFILE=0

	############
	for a in $@
	############
	do
	   ##########
	   case $a in
	   ##########

	   -x)
	        for file in *.ae; do
	            AONAME=`basename $file .ae`.ao;
				echo moving $file to $AONAME
				mv $file $AONAME
	        done
	        echo Finished renaming.
	        exit 0
		;;

	    -r) 		RECURSIVE=1
        ;;

		-4js)		COMPILER=4js
        ;;

		-stoperr)	STOPONERROR=1
        ;;

        -stopglob) 	STOPGLOBALSERROR=1
        ;;

        -nonglob)   NONGLOBAFTERGLOBERR=1
        ;;

		-noskip) 	SKIP=noskip
        ;;

        -fullclean) FULLCLEAN=1
        ;;

        -compat) 	COMPATIBLE=1
        ;;

        -maxmode)   MAXMODE=1
		;;

        -v)			VERBOSE=1
        ;;

        -debug)		VERBOSE=1
                    DEBUG=1
		;;


		-help)

            echo "Aubit 4gl compiler object compile utillity: amakeallo"
            echo " compiles all 4gl files to objects"
            echo
			echo "Options: [defaults are in ()]"
			echo " -r = recursive: step into subdirectories too (. only)"
			echo " -4js = use 4Js/D4GL compiler (Aubit)"
			echo " -stoperr = stop on any error (continue)"
			echo " -stopglob = stop if any GLOBALS 4gl file fails (continue)"
            echo " -nonglob = continue compiling non-global files even if globals fail (skip)"
			echo " -noskip = do not skip files that are already compiled (skip)"
			echo " -x = rename Aubit old extensions [.o->.ao]"
			echo " -fullclean = remove .c .h .ec before you start (DANGER!)"
			echo " -compat = ignore errors if they fail in 4Js too (do not ignore)"
			echo " -maxmode = special mode for Maximise application testing"
			echo " -v = verbose - show what you are doing"
			echo " -debug = verbose + much more"
			echo " -help = this help"
            echo
            exit 0
        ;;

        *)
            echo "Unknown parametar: $a : try '-help'. STOP."
            exit 1
        ;;

	  ####
	  esac
	  ####
	####
	done
	####

	if [ "$COMPILER" = "aubit" ]
	then
		ERRFILESDIR=$AUBITERRFILESDIR
		ERRORLOG=$ERRFILESDIR/amakeallo.log
		FGLCOMPILER=4glpc
		COMPEXT=o
		COMPEXT2=ao

		if [ -f $AUBITDIR/aubitenv ]
		then
			. $AUBITDIR/aubitenv
		fi

		if [ -f /etc/aubitenv ]
		then
			. /etc/aubitenv
		fi

		if test $MAXMODE = "1"
        then
			if [ -d $MAXDIR/aprog ]
	        then
				DESTDIR=$MAXDIR/aprog
            fi
        fi

	fi

	if [ "$COMPILER" = "4js" ]
	then
		ERRFILESDIR=$FJSERRFILESDIR
		ERRORLOG=$ERRFILESDIR/amakeallo.log
		FGLCOMPILER=fglcomp
		COMPEXT=42m
		COMPEXT2=

		if test $MAXMODE = "1"
        then
			if [ -d $MAXDIR/gprog ]
	        then
				DESTDIR=$MAXDIR/gprog
            fi
        fi
	fi

	if test $VERBOSE = "0"
	then
		echo "NOTE: using $DESTDIR for objects store"
    fi

	if [ -d $ERRFILESDIR ]
	then
	    rm -rf $ERRFILESDIR
	fi

	mkdir $ERRFILESDIR

    if ! [ -d $DESTDIR ]
    then
	    mkdir $DESTDIR
    fi

    echo `date` > $ERRORLOG


    #################
    #start compiling:
    #################

    subsystem=$PWD

	##############
    makecurrentdir
    ##############


	if test $RECURSIVE = "1"
	then
		if test $MAXMODE = "1"
        then
			#In Maximise, order of compilation is important, and we also
            #need to skip some directories
			ALLSUBDIRS="winds csimods main ar eo fa gl in jm lc qe re ss ap pu wo cm contr dvfund lawmods"
            SKIPDIRS="aform aprog forms prog gform gprog qform qprog"
        else
			ALLSUBDIRS=`ls -l | grep "^d" | awk '{print $NF}'`
        fi

		################################
        for subsystem in $ALLSUBDIRS; do
		################################

                if [ "$subsystem" = "$DESTDIR" ]
				then
					continue
                fi

                #FIXME: this is not working - we need to be able to skip
                #defined directories:
				#if [ "$subsystem" in $SKIPDIRS ]
                #then
                #    continue
                #fi


			   if [ -d $ROOTDIR/$subsystem ]
	           then
				   	echo Making 4gl objects in $subsystem...
				   	cd $ROOTDIR/$subsystem ;

                   	if [ "$subsystem" = "cm" ]  && [ test $MAXMODE = "1" ]
                   	then
					   cd source
                   	fi

                    ##############
                    makecurrentdir
                    ##############

			   fi

            #FIXME: step x levels into subdirectories too

		####
		done
	    ####

    fi

    #####
    stats
    #####

	echo "Finished."

    if [ "$TOTALFAILED" != "0" ]
    then
		echo "See $ERRORLOG for summary of all errors generated"
		echo "All source files causing problems where copied to $ERRFILESDIR"
        exit 1
	else
		exit 0
    fi


