head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	89.10.10.10.18.32;	author john;	state Exp;
branches;
next	1.2;

1.2
date	89.10.10.10.06.56;	author john;	state Exp;
branches;
next	1.1;

1.1
date	89.10.10.09.58.25;	author john;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Chane in 3n to in +3n
@
text
@'\" @@(#)$Id: locks.3j,v 1.1 2002-06-14 05:03:46 afalout Exp $
'\" @@(#)Manual page: LOCK_TABLE/UNLOCK_TABLE
.ds fC "Version: $Revision: 1.1 $ ($Date: 2002-06-14 05:03:46 $)
.TH LOCK_TABLE 3S "Sphinx Informix Tools"
.SH NAME
lock_table \(em lock a table
.br
unlock_table \(em unlock a table
.SH SYNOPSIS
let status = lock_table("table_name", "exclusive")
.br
let status = unlock_table("table_name")
.SH DESCRIPTION
If the database has a transaction log, the following rules apply:
.nf
.sp 0.5v
.in +3n
i.	You can only apply a table lock within a transaction
ii.	You cannot explicitly unlock a table
iii.	Table locks are released when the transaction is completed
.in
.sp 0.5v
If the database has not got a transaction log, the following rules apply:
.sp 0.5v
.in +3n
i.	You can apply a table lock anywhere
ii.	You must explicitly unlock a table
.in
.fi
.sp 0.5v
Code which is designed to work with and without transaction logs
must therefore be designed with both sets of constraints in mind.
The tools to handle this are, again, functions in place of raw I4GL statements.
A section of code which includes table locking should
be coded as follows:
.sp 0.5v
.nf
.in +3n
CALL begin_work()                               # Start transaction
LET STATUS = lock_table("thingy", "exclusive")  # Lock table thingy
...
# Do the work
...
LET STATUS = unlock_table("thingy")             # Unlock table thingy
CALL commit_work()                              # Finish the transaction
.in
.fi
.sp 0.5v
The routine \fBlock_table\fP locks the named table in the named mode and
returns the success status.
It is not absolutely crucial that it is used;
it just makes the coding symmetric.
.P
The routine \fBunlock_table\fP unlocks a table
but explicitly ignores 2 errors:
.nf
.in +3n
-327:	cannot unlock table within a transaction
-288:	table not locked by user
.in
.fi
The first will occur using the skeleton code above with a transaction
log on the database.
The second would occur if the unlock and commit
were in the reverse order and there was a log on the database.
.SH "SEE ALSO"
transactions(3S)
.SH AUTHOR
Jonathan Leffler
.br
Sphinx Ltd.
.br
10th October 1989
@


1.2
log
@Make more uniform; should fit on a page
@
text
@d17 1
a17 1
.in 3n
d25 1
a25 1
.in 3n
d38 1
a38 1
.in 3n
d57 1
a57 1
.in 3n
@


1.1
log
@Initial revision
@
text
@d7 1
d16 2
a17 1
.sp
d21 2
a22 1
.sp
d24 2
d28 1
d30 1
a30 1
.sp
d36 1
a36 1
.sp
d38 1
d46 1
d48 1
a48 1
.sp
d54 1
a54 1
The routine unlock_table unlocks a table
d57 1
d60 1
a65 2
.SH FILES
locks.4gl
@
