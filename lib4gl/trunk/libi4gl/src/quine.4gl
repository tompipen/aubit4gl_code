# @(#)$Id: quine.4gl,v 1.2 2002-06-14 09:23:16 afalout Exp $
# @(#)BP Ship Vetting System
# @(#)LMIS11: Batch update of LMIS Ship Data (Check)
# @(#)Author: JL
#
# A genuinely useful self-reproducing program!
# -- When run as a shell script, this file QUINES itself.
# -- When the controlling section is modified, it will produce a variant
#    of itself which then becomes self-reproducing.
# -- When compiled as an I4GL program, it does a complex validation job.

{
# This is the shell script.  To I4GL it looks like a contorted comment.
# The tricky part is avoiding using curly brackets inside the shell script.
#	NB:	Most of the code in this file was generated by the script below.
#	The sequence of operations to regenerate this file is:
#	1.	Extract this file for editing: get -e lmis11c.4gl
#	2.	Modify the controlling script and write this file back.
#	3.	Run: sh lmis11c.4gl >lmis11c.new
#	4.	Check: diff lmis11c.4gl lmis11c.new
#	5.	If the changes are not correct, go back to step 2.
#	6.	Run: mv lmis11c.new lmis11c.4gl
#	7.	Register changes: delta -y'Because' lmis11c.4gl
#
#	The columns in the specification are:
#	1.	column name,
#	2.	generate check function (Y/N),
#	3.	type is datetime (D) or ship name (S) or neutral (N), or vetdate (V)
#	4.	column affects prevetting status (P/N)
#	5.	abbreviated name (for names not distinct within 14 chars)

tmp=/tmp/xyz.$$
# Preserve this shell script.
cat $0 | sed '/^--/q' >$tmp.1

cat	>$tmp.2 <<'ENDOFSPEC'
sh_status				Y	N	P
sh_name					Y	S	P
sh_sailed_as_date		Y	D	N	sh_sailed_dt
sh_sailed_as_name		Y	N	P	sh_sailed_nm
sh_prev_name1			Y	S	N
sh_prev_date1			Y	D	N
sh_ship_builder			Y	N	N
sh_survey_date			Y	D	N
sh_prevet				N	N	N
sh_vet_date				Y	V	P
ENDOFSPEC

(
echo "-- START OF INFORMIX-4GL CODE"
echo ""
echo "DATABASE SVS"
echo ""
echo "GLOBALS \"lmis11g.4gl\""
echo ""
echo "DEFINE"
echo "	sccs		CHAR(1)"
echo ""
echo "-- Compare g_ship and t_ship and return 2 indicators:"
echo "--  *	is_different	if any LMIS-maintained field has changed"
echo "--  *	needs_prevet	if a pre-vet field has changed"
echo "FUNCTION cmp_ship()"
echo ""
echo "	DEFINE"
echo "		is_different	INTEGER,"
echo "		needs_prevet	INTEGER,"
echo "		prevet_crc		INTEGER"
echo ""
echo "	IF f_ship.initialized = FALSE THEN"
echo "		LET sccs = \"@(#)$Id: quine.4gl,v 1.2 2002-06-14 09:23:16 afalout Exp $\""
echo "		CALL init_f_ship()"
echo "	END IF"
echo ""
echo "	LET is_different = FALSE"
echo "	LET needs_prevet = FALSE"
echo "	LET prevet_crc   = 0"
echo ""
echo "	-- LRNs should not be different"
echo "	IF g_ship.sh_lrn != t_ship.sh_lrn THEN"
echo "		CALL fatal_error(\"LRN numbers do not match!\")"
echo "	END IF"
echo ""

# Generate the calls to the checking functions
while read col check type prevet abbr
do
if [ $check = N ] ; then continue ; fi
if [ -z "$abbr" ] ; then abbr=$col; fi
	echo "	CALL chk_$abbr(is_different, needs_prevet)"
	echo "		RETURNING is_different, needs_prevet"
done <$tmp.2
echo ""
echo "	-- Process name change if needed"
echo "	CALL do_name_change()"
echo ""
echo "	RETURN is_different, needs_prevet"
echo ""
echo "END FUNCTION"

#
#Script used to generate the checking functions
while read col check type prevet abbr
do
	if [ $check = N ] ; then continue ; fi
	if [ -z "$abbr" ] ; then abbr=$col; fi
	echo ""
	echo "-- Function to check whether $col has changed"
	echo "FUNCTION chk_$abbr(is_different, needs_prevet)"
	echo ""
	echo "	DEFINE"
	echo "		is_different	INTEGER,"
	echo "		needs_prevet	INTEGER"
	if [ $type = D ]
	then echo "	DEFINE"
	     echo "		dt				DATETIME YEAR TO MONTH"
	fi
	echo ""
	if [ $type = V ]
	then
		echo "	IF vet_outdated(g_ship.$col) THEN"
		echo "		LET needs_prevet = TRUE"
		echo "	END IF"
	else
		echo "	IF f_ship.$col = 'Y' THEN"
		echo "		LET c_ship.$col ="
		echo "					chk_svs_ship_detai(\"$col\", g_ship.sh_lrn)"
		echo "	ELSE"
		echo "		LET c_ship.$col = NULL"
		echo "	END IF"
		echo "	IF c_ship.$col IS NOT NULL THEN"
		if [ $type = D ]
		then echo "		LET t_ship.$col = DATE(c_ship.$col)"
		else echo "		LET t_ship.$col = c_ship.$col"
		fi
		echo "	END IF"
		if [ $type = D ]
		then echo "	-- Convert DATE string to DATETIME string"
			 echo "	LET t_ship.$col = date_dtym(t_ship.$col)"
		fi
		echo "	CASE"
		echo "	WHEN g_ship.$col = t_ship.$col"
		echo "		-- No change"
		echo "	WHEN g_ship.$col IS NULL AND t_ship.$col IS NULL"
		echo "		-- No change"
		echo "	OTHERWISE"
		if [ $type = S ]
		then echo "		CALL mark_name_change()"
		else echo "		LET g_ship.$col = t_ship.$col"
		fi
		echo "		LET is_different = TRUE"
		if [ $prevet = P ]
		then echo "		LET needs_prevet = TRUE"
		fi
		echo "	END CASE"
	fi
	echo ""
	echo "	RETURN is_different, needs_prevet"
	echo ""
	echo "END FUNCTION"
done < $tmp.2
) | fglfmt | endfunc |
cat $tmp.1 -

rm -f $tmp.1 $tmp.2
exit 0
}

-- END OF SHELL SCRIPT
-- START OF INFORMIX-4GL CODE

DATABASE SVS

GLOBALS "lmis11g.4gl"

DEFINE
	sccs		CHAR(1)

-- Compare g_ship and t_ship and return 2 indicators:
--  *	is_different	if any LMIS-maintained field has changed
--  *	needs_prevet	if a pre-vet field has changed
FUNCTION cmp_ship()

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER,
		prevet_crc		INTEGER

	IF f_ship.initialized = FALSE THEN
		LET sccs = "@(#)$Id: quine.4gl,v 1.2 2002-06-14 09:23:16 afalout Exp $"
		CALL init_f_ship()
	END IF

	LET is_different = FALSE
	LET needs_prevet = FALSE
	LET prevet_crc   = 0

	-- LRNs should not be different
	IF g_ship.sh_lrn != t_ship.sh_lrn THEN
		CALL fatal_error("LRN numbers do not match!")
	END IF

	CALL chk_sh_status(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_name(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_sailed_dt(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_sailed_nm(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_prev_name1(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_prev_date1(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_ship_builder(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_survey_date(is_different, needs_prevet)
		RETURNING is_different, needs_prevet
	CALL chk_sh_vet_date(is_different, needs_prevet)
		RETURNING is_different, needs_prevet

	-- Process name change if needed
	CALL do_name_change()

	RETURN is_different, needs_prevet

END FUNCTION {cmp_ship}

-- Function to check whether sh_status has changed
FUNCTION chk_sh_status(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER

	IF f_ship.sh_status = 'Y' THEN
		LET c_ship.sh_status =
					chk_svs_ship_detai("sh_status", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_status = NULL
	END IF
	IF c_ship.sh_status IS NOT NULL THEN
		LET t_ship.sh_status = c_ship.sh_status
	END IF
	CASE
	WHEN g_ship.sh_status = t_ship.sh_status
		-- No change
	WHEN g_ship.sh_status IS NULL AND t_ship.sh_status IS NULL
		-- No change
	OTHERWISE
		LET g_ship.sh_status = t_ship.sh_status
		LET is_different = TRUE
		LET needs_prevet = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_status}

-- Function to check whether sh_name has changed
FUNCTION chk_sh_name(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER

	IF f_ship.sh_name = 'Y' THEN
		LET c_ship.sh_name =
					chk_svs_ship_detai("sh_name", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_name = NULL
	END IF
	IF c_ship.sh_name IS NOT NULL THEN
		LET t_ship.sh_name = c_ship.sh_name
	END IF
	CASE
	WHEN g_ship.sh_name = t_ship.sh_name
		-- No change
	WHEN g_ship.sh_name IS NULL AND t_ship.sh_name IS NULL
		-- No change
	OTHERWISE
		CALL mark_name_change()
		LET is_different = TRUE
		LET needs_prevet = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_name}

-- Function to check whether sh_sailed_as_date has changed
FUNCTION chk_sh_sailed_dt(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER
	DEFINE
		dt				DATETIME YEAR TO MONTH

	IF f_ship.sh_sailed_as_date = 'Y' THEN
		LET c_ship.sh_sailed_as_date =
					chk_svs_ship_detai("sh_sailed_as_date", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_sailed_as_date = NULL
	END IF
	IF c_ship.sh_sailed_as_date IS NOT NULL THEN
		LET t_ship.sh_sailed_as_date = DATE(c_ship.sh_sailed_as_date)
	END IF
	-- Convert DATE string to DATETIME string
	LET t_ship.sh_sailed_as_date = date_dtym(t_ship.sh_sailed_as_date)
	CASE
	WHEN g_ship.sh_sailed_as_date = t_ship.sh_sailed_as_date
		-- No change
	WHEN g_ship.sh_sailed_as_date IS NULL AND t_ship.sh_sailed_as_date IS NULL
		-- No change
	OTHERWISE
		LET g_ship.sh_sailed_as_date = t_ship.sh_sailed_as_date
		LET is_different = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_sailed_dt}

-- Function to check whether sh_sailed_as_name has changed
FUNCTION chk_sh_sailed_nm(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER

	IF f_ship.sh_sailed_as_name = 'Y' THEN
		LET c_ship.sh_sailed_as_name =
					chk_svs_ship_detai("sh_sailed_as_name", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_sailed_as_name = NULL
	END IF
	IF c_ship.sh_sailed_as_name IS NOT NULL THEN
		LET t_ship.sh_sailed_as_name = c_ship.sh_sailed_as_name
	END IF
	CASE
	WHEN g_ship.sh_sailed_as_name = t_ship.sh_sailed_as_name
		-- No change
	WHEN g_ship.sh_sailed_as_name IS NULL AND t_ship.sh_sailed_as_name IS NULL
		-- No change
	OTHERWISE
		LET g_ship.sh_sailed_as_name = t_ship.sh_sailed_as_name
		LET is_different = TRUE
		LET needs_prevet = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_sailed_nm}

-- Function to check whether sh_prev_name1 has changed
FUNCTION chk_sh_prev_name1(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER

	IF f_ship.sh_prev_name1 = 'Y' THEN
		LET c_ship.sh_prev_name1 =
					chk_svs_ship_detai("sh_prev_name1", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_prev_name1 = NULL
	END IF
	IF c_ship.sh_prev_name1 IS NOT NULL THEN
		LET t_ship.sh_prev_name1 = c_ship.sh_prev_name1
	END IF
	CASE
	WHEN g_ship.sh_prev_name1 = t_ship.sh_prev_name1
		-- No change
	WHEN g_ship.sh_prev_name1 IS NULL AND t_ship.sh_prev_name1 IS NULL
		-- No change
	OTHERWISE
		CALL mark_name_change()
		LET is_different = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_prev_name1}

-- Function to check whether sh_prev_date1 has changed
FUNCTION chk_sh_prev_date1(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER
	DEFINE
		dt				DATETIME YEAR TO MONTH

	IF f_ship.sh_prev_date1 = 'Y' THEN
		LET c_ship.sh_prev_date1 =
					chk_svs_ship_detai("sh_prev_date1", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_prev_date1 = NULL
	END IF
	IF c_ship.sh_prev_date1 IS NOT NULL THEN
		LET t_ship.sh_prev_date1 = DATE(c_ship.sh_prev_date1)
	END IF
	-- Convert DATE string to DATETIME string
	LET t_ship.sh_prev_date1 = date_dtym(t_ship.sh_prev_date1)
	CASE
	WHEN g_ship.sh_prev_date1 = t_ship.sh_prev_date1
		-- No change
	WHEN g_ship.sh_prev_date1 IS NULL AND t_ship.sh_prev_date1 IS NULL
		-- No change
	OTHERWISE
		LET g_ship.sh_prev_date1 = t_ship.sh_prev_date1
		LET is_different = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_prev_date1}

-- Function to check whether sh_ship_builder has changed
FUNCTION chk_sh_ship_builder(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER

	IF f_ship.sh_ship_builder = 'Y' THEN
		LET c_ship.sh_ship_builder =
					chk_svs_ship_detai("sh_ship_builder", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_ship_builder = NULL
	END IF
	IF c_ship.sh_ship_builder IS NOT NULL THEN
		LET t_ship.sh_ship_builder = c_ship.sh_ship_builder
	END IF
	CASE
	WHEN g_ship.sh_ship_builder = t_ship.sh_ship_builder
		-- No change
	WHEN g_ship.sh_ship_builder IS NULL AND t_ship.sh_ship_builder IS NULL
		-- No change
	OTHERWISE
		LET g_ship.sh_ship_builder = t_ship.sh_ship_builder
		LET is_different = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_ship_builder}

-- Function to check whether sh_survey_date has changed
FUNCTION chk_sh_survey_date(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER
	DEFINE
		dt				DATETIME YEAR TO MONTH

	IF f_ship.sh_survey_date = 'Y' THEN
		LET c_ship.sh_survey_date =
					chk_svs_ship_detai("sh_survey_date", g_ship.sh_lrn)
	ELSE
		LET c_ship.sh_survey_date = NULL
	END IF
	IF c_ship.sh_survey_date IS NOT NULL THEN
		LET t_ship.sh_survey_date = DATE(c_ship.sh_survey_date)
	END IF
	-- Convert DATE string to DATETIME string
	LET t_ship.sh_survey_date = date_dtym(t_ship.sh_survey_date)
	CASE
	WHEN g_ship.sh_survey_date = t_ship.sh_survey_date
		-- No change
	WHEN g_ship.sh_survey_date IS NULL AND t_ship.sh_survey_date IS NULL
		-- No change
	OTHERWISE
		LET g_ship.sh_survey_date = t_ship.sh_survey_date
		LET is_different = TRUE
	END CASE

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_survey_date}

-- Function to check whether sh_vet_date has changed
FUNCTION chk_sh_vet_date(is_different, needs_prevet)

	DEFINE
		is_different	INTEGER,
		needs_prevet	INTEGER

	IF vet_outdated(g_ship.sh_vet_date) THEN
		LET needs_prevet = TRUE
	END IF

	RETURN is_different, needs_prevet

END FUNCTION {chk_sh_vet_date}
