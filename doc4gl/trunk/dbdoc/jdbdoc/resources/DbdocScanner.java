/*
 * File:           DbdocScanner.java
 * Generated from: dbdoc.dtd
 * Date:           May 14, 2003  4:38 PM
 *
 * @author  sergio
 * @version generated by NetBeans XML module
 */
package resources;
/**
 * This is a scanner of DOM tree.
 *
 * Example:
 * <pre>
 *     javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
 *     javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
 *     org.w3c.dom.Document document = builder.parse (new org.xml.sax.InputSource (???));
 *     <font color="blue">DbdocScanner scanner = new DbdocScanner (document);</font>
 *     <font color="blue">scanner.visitDocument();</font>
 * </pre>
 *
 * @see org.w3c.dom.Document
 * @see org.w3c.dom.Element
 * @see org.w3c.dom.NamedNodeMap
 *
 */
public class DbdocScanner {
    /** org.w3c.dom.Document document */
    org.w3c.dom.Document document;
    
    /** Create new DbdocScanner with org.w3c.dom.Document. */
    public DbdocScanner(org.w3c.dom.Document document) {
        this.document = document;
    }
    
    /** Scan through org.w3c.dom.Document document. */
    public void visitDocument() {
        org.w3c.dom.Element element = document.getDocumentElement();
        if ((element != null) && element.getTagName().equals("OPERATIONAL_DB_CONNECTION")) {
            visitElement_OPERATIONAL_DB_CONNECTION(element);
        }
        if ((element != null) && element.getTagName().equals("REPOSITORY_CONNECTION")) {
            visitElement_REPOSITORY_CONNECTION(element);
        }
        if ((element != null) && element.getTagName().equals("PARAMETERS")) {
            visitElement_PARAMETERS(element);
        }
    }
    
    /** Scan through org.w3c.dom.Element named OPERATIONAL_DB_CONNECTION. */
    void visitElement_OPERATIONAL_DB_CONNECTION(org.w3c.dom.Element element) { // <OPERATIONAL_DB_CONNECTION>
        // element.getValue();
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name")) { // <OPERATIONAL_DB_CONNECTION name="???">
                // attr.getValue();
            }
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
    
    /** Scan through org.w3c.dom.Element named REPOSITORY_CONNECTION. */
    void visitElement_REPOSITORY_CONNECTION(org.w3c.dom.Element element) { // <REPOSITORY_CONNECTION>
        // element.getValue();
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name")) { // <REPOSITORY_CONNECTION name="???">
                // attr.getValue();
            }
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
    
    /** Scan through org.w3c.dom.Element named PARAMETERS. */
    void visitElement_PARAMETERS(org.w3c.dom.Element element) { // <PARAMETERS>
        // element.getValue();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("OPERATIONAL_DB_CONNECTION")) {
                        visitElement_OPERATIONAL_DB_CONNECTION(nodeElement);
                    }
                    if (nodeElement.getTagName().equals("REPOSITORY_CONNECTION")) {
                        visitElement_REPOSITORY_CONNECTION(nodeElement);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
    
    
}
