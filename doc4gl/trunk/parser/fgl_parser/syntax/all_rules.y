/*
=====================================================================
                        Source: 99.reqd
=====================================================================
*/ 

pause_screen_on_cmd : SETPMON  
;

pause_screen_off_cmd : SETPMOFF  
;

/**
 * Start serving functions as RPC in a port number.
 * Example of what we are expecting get here something like:
 *    START EXTERN 105 ] FOR function_one, 
 * This is an extension to standard 4gl.
 */
start_rpc_cmd 
  : START_EXTERN valid_port CLOSE_SQUARE FOR  remote_func_list
  ;

/**
 * Stop serving functions using RPC.
 * Example: STOP ALL EXTERNAL
 * This command is generated by the lexer one only token by
 * ignoring spaces and tabs.
 */
stop_rpc_cmd 
  : STOP_ALL_EXTERNAL 
  ;

/**
 * A valid port to serve functions by RPC
 * Examples of ports: 8 ; int_variable
 * @todo : The code of integer variable verification was taken off.
 */
valid_port 
  : variable 
  | INT_VALUE
  ;

/**
 * The list of functions to be served to the RPC clients.
 */
remote_func_list 
  : remote_func 
	| remote_func_list COMMA remote_func
  ;

/**
 * A remote function name.
 * It could be any name valid as function name including KEYWORDS.
 */
remote_func 
  : identifier 
  ;




/*
=====================================================================
                        Source: arr_expr.rule
=====================================================================
*/


/**
 * Array expression.
 * @todo : Explain what is suposed to get here
 * @todo : Try to use '[' and ']' as tokens for clarity
 * @todo : The validation of integer variables was taken of the code
 */
arr_expr 
  : OPEN_BRACKET arr_expr CLOSE_BRACKET  
  | arr_expr arr_next_math arr_expr 
  | INT_VALUE 
  | arr_int_sign INT_VALUE 
  | variable 
  | function_call_expr 
  ;

/**
 *
 */
arr_next_math
  : PLUS 
  | MINUS
  | MULTIPLY 
  | DIVIDE 
  | MOD
  ;


/**
 * Array int sign
 */
arr_int_sign	
  : PLUS 
  | MINUS 
;


/*
=====================================================================
                        Source: attributes.rule
=====================================================================
*/


/**
 * Optional (could be empty) attributes to be used in screens.
 */
opt_attributes
  :	
	| attributes_def 
  ;

/**
 * Possible screen interaction attribute statement.
 * 4gl code examples:
 *     ATTRIBUTES (REVERSE,WHITE)
 *     SIZE (10,20)
 */
attributes_def	
  : ATTRIBUTES OPEN_BRACKET attribs_sec CLOSE_BRACKET 
  | SIZE OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET
  ;

/**
 * Attribute list.
 * 4gl code example:
 *    REVERSE,WHITE
 */
attribs_sec	
  : attribute 
  | attribs_sec COMMA attribute 
  ;

/**
 * Specific possible screen attributes
 */
attribute	
  :BLACK
	|BLUE
	|CYAN
	|GREEN
	|MAGENTA
	|RED
	|WHITE
	|YELLOW
	|REVERSE
	|BLINK
	|UNDERLINE
	|BOLD
	|NORMAL
	|INVISIBLE
	|DIM
  |NO_NEW_LINES 
	|input_array_attributes 
	;

/**
 *  Optional (could be empty) WINDOW attributes.
 */
win_attributes
  :
	| win_attributes_def
  ;

/**
 * Window attribute sub section
 * 4gl code example:
 *    ATTRIBUTES (MAGENTA,REVERSE)
 */
win_attributes_def	
  :	ATTRIBUTES OPEN_BRACKET wattribs_sec CLOSE_BRACKET 
  ;

/**
 * List of window attributes.
 * 4gl code example:
 *    MAGENTA,REVERSE
 */
wattribs_sec	
  :	wattribute 
	|	wattribs_sec COMMA wattribute 
  ;

/**
 * Concrete window attributes
 */
wattribute	
  : attribute 
  |	BORDER 
	| PAD CHAR_VALUE
	|	COMMENT_LINE line_no
	|	FORM_LINE line_no
	|	ERROR_LINE line_no
	|	MENU_LINE line_no
	|	MSG_LINE line_no
	|	PROMPT_LINE line_no
  ;


/*
=====================================================================
                        Source: call.rule
=====================================================================
*/


/**
 * Explicit function call.
 * 4gl code example:
 *    CALL xpto(a,2,"XX")
 */
call_cmd	
  : FCALL call_ext 
  ;

/**
 * Continuation of the explicit function call.
 * This rule should
 *
 * @todo : I take of the validation of the get_fldbuff inside the input or 
 * construct.
 */
call_ext 
  : function_callb RETURNING variable 
  | GET_FLDBUF OPEN_BRACKET fld_list CLOSE_BRACKET RETURNING  ibind_var_list 
  | FORM_IS_COMPILED OPEN_BRACKET identifier 
	  COMMA CHAR_VALUE COMMA CHAR_VALUE CLOSE_BRACKET 
  | INFIELD OPEN_BRACKET field_name CLOSE_BRACKET RETURNING variable 
  | pdf_functions
  | FIELD_TOUCHED OPEN_BRACKET field_name_list CLOSE_BRACKET RETURNING variable 
  | variable COLON identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET 
    opt_return 
  | identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET opt_return 
  | SHARED char_or_var IN char_or_var OPEN_BRACKET 
    opt_func_call_args CLOSE_BRACKET opt_return 
  | identifier DOUBLE_COLON identifier  OPEN_BRACKET opt_func_call_args 
    CLOSE_BRACKET opt_return 
  | EXTERNAL remote_host_name COLON remote_func_name 
	  OPEN_SQUARE valid_port CLOSE_SQUARE OPEN_BRACKET
    opt_func_call_args CLOSE_BRACKET opt_return_remote
  ;

/**
 * Optional (could be void) returning of function call statement.
 * 4gl code example: RETURNING a,1,"xx"
 * @todo : Change the name to op_returning
 */
opt_return 	
  : 
	| RETURNING ibind_var_list 
  ;

/**
 * Optional returning subsection of function call as RPC client
 */
opt_return_remote 	
  : 
  | RETURNING ibind_var_list
  | WITHOUT_WAITING
  ;


/**
 * Optional function call arguments.
 */
opt_func_call_args 
  : 
	| func_call_args
  ;

/**
 * Function call argument list.
 * 4gl code example:  a,b,1,"zz"
 */
func_call_args	
  : func_arg
	| func_call_args COMMA func_arg 
  ;


/**
 * A function argument.
 */
func_arg 	
  : fgl_expr_c 
  ;

/**
 * Remote host name to be used in the RPC function calls.
 */
remote_host_name 
  : CHAR_VALUE 
	| identifier
  ;

/**
 * Remote (RPC) function names.
 */
remote_func_name 
  : identifier 
  | identifier DOT identifier 
  ;

/* </CALL_STATEMENT> */


/* <CASE_STATEMENT> */

/**
 * 4gl CASE statement.
 */
case_cmd	
  : CASE fgl_expr when_unit_expr op_otherwise_command_expr end_case_command 
  | CASE when_unit op_otherwise_command end_case_command 
  ;

/**
 * When sub statement of the case instruction with the statements that
 * are executed.
 * @todo : Explain this in a better way
 */
when_unit 
  : when_command 
	| when_unit when_command 
  ;

/**
 * The possible expressions in the when of a case command.
 */
when_unit_expr  
  : when_command_expr 
	| when_unit_expr when_command_expr 
  ;

/**
 * The end of a case statement
 */
end_case_command 
  : END_CASE 
  ;

/**
 * Optional otherwise command of the CASE statement.
 */
op_otherwise_command 
  : 
	| OTHERWISE commands 
  ;

/**
 * Optional otherwise command of the CASE statement.
 * @todo : Understand why i cant use the rule below.
 */
op_otherwise_command_expr 
  : 
	| OTHERWISE commands 
  ;

/**
 * The when definition without the statements to be executed.
 * 4gl code example:
 *    WHEN a = 1
 */
when_command	
  : WHEN  fgl_expr commands 
  ;

/**
 * @todo : understand the diference between this one a the one below.
 */
when_command_expr	
  : WHEN fgl_expr commands 
  ;

/* </CASE_STATEMENT> */



/* <CLOSE_STATEMENTS> */

/**
 * All the close statements:
 *   Form
 *   window
 *   statusbox (???)
 *   database
 *   session - A named connection to a database
 *   cursor
 */
close_cmd	
  :	CLOSE_FORM form_name 
  |	CLOSE_WINDOW win_name 
	|	CLOSE_STATUSBOX win_name 
	|	CLOSE_DATABASE 
	|	CLOSE_SESSION conn_id 
	|	CLOSE fetch_cursor_name 
;

/* </CLOSE_STATEMENTS> */



/* <EMBEDDED_C_CODE> */

/**
 * Embedded C language code.
 * 4gl example code:
 *    START C
 *     ... C Code...
 *    END C
 */
code_cmd 
  : KW_CSTART emb_code KW_CEND
  ;

/**
 * Possible types of embedded code: SQL or C code
 */
emb_code 
  : sql_code 
	| c_code
	;

/**
 * List of embedded SQL code lines
 */
sql_code 
  : sql_code_part 
	| sql_code sql_code_part
  ;

/**
 * SQL Code line
 */
sql_code_part
  : SQLLINE 
  ;

/**
 * List of embedded C code lines
 */
c_code 
  : c_code_part 
	| c_code c_code_part
  ;

/**
 * Embedded C code line
 */
c_code_part  
  : CLINE 
  ;

/* </EMBEDDED_C_CODE> */


/* <COMMENTS> */

/**
 * This aint used - its filtered by the lexer first...
 */
comment_cmd 
  : COMMENT 
  ;

/* </COMMENTS> */


/* <CONSTRUCT_STATEMENT> */

/**
 * The construct statement.
 * 4gl example code:
 *   CONSTRUCT BY NAME pr.* ON str
 *    ... construct events ...
 *   END CONSTRUCT
 */
construct_cmd	
  :	CONSTRUCT constr_rest end_constr 
  ;


/**
 * The main part of construct between CONSTRUCT and END CONSTRUCT
 * 4gl example code:
 *    BY NAME pr.* ON str
 *    AFTER FIELD xpto
 *       ... 4gl code ...
 */
constr_rest
  : BY_NAME variable ON constr_col_list opt_defs op_help opt_attributes
  | variable ON constr_col_list opt_defs FROM fld_list op_help opt_attributes
  ;

/**
 * Optional end construct.
 * @todo : change the name to op_end_construct
 */
end_constr 
  : 
  | constr_extra_commands END_CONSTRUCT 
  ;

/**
 * The construct column list
 * 4gl code example:
 *    xpto.a, xpto.b, x
 */
constr_col_list 
  : constr_col 
	| constr_col_list COMMA constr_col
  ;

/**
 * A construct column
 * 4gl code examples:
 *    xpto.*
 *    xpto.a
 *    y
 */
constr_col 
  : identifier 
  | identifier DOT identifier 
  | identifier DOT MULTIPLY 
  ;

/**
 * Extra comand list of the construct statement.
 */ 
constr_extra_commands 
  : constr_extra_command 
	| constr_extra_commands constr_extra_command
  ;

/**
 * Construct possible event statements.
 * 4gl code examples:
 *    BEFORE FIELD xpto
 *      ... 4gl statements ...
 *    AFTER FIELD xpto
 *      ... 4gl statements ...
 *    ON KEY (CONTROL-A)
 *      ... 4gl statements ...
 *    AFTER CONSTRUCT
 *      ... 4gl statements ...
 *    BEFORE CONSTRUCT
 *      ... 4gl statements ...
 */
constr_extra_command 
  : BEFFIELD bef_c_field_list commands 
	| AFTFIELD aft_c_field_list commands 
	| on_key_command commands 
	| AFTCONSTRUCT commands 
	| BEFCONSTRUCT commands 
  ;

/**
 * The before field construct list
 * 4gl code example:
 *    first_field, second_field
 */
bef_c_field_list 
  : field_name2 
	| bef_c_field_list COMMA field_name2 
  ;

/**
 * The after field construct list 
 * 4gl code example:
 *    first_field, second_field
 */
aft_c_field_list 
  : field_name2 
	| aft_c_field_list COMMA field_name2 
  ;

/* </CONSTRUCT_STATEMENT> */


/* <DATETIME_EXPRESSION> */

/**
 * A interval expression
 */
interval_expr
  : UNITS_YEAR 
	| UNITS_MONTH 
	| UNITS_DAY 
	| UNITS_HOUR 
	| UNITS_MINUTE 
	| UNITS_SECOND 
  ;


/**
 * Datetime parameters.
 * 4gl code example: 
 *     ( 10:20 + 1 UNITS HOURS )
 * @todo : Confirm if this code is OK
 */
extend_parameters
  : OPEN_BRACKET fgl_expr_c op_datetime_qual CLOSE_BRACKET 
  ;


/**
 * An optional datetime qualifier
 */
op_datetime_qual
  :
  | COMMA dtime_start TO dtime_end 
  ;

/* <DATETIME_EXPRESSION> */




/* <DEFINE_STATEMENT> */

/**
 * Optional define section
 */
define_section
  :
	|	define_multiple 
	;

/**
 *
 */
define_multiple	
  : define_set 
	| define_multiple define_set
  ;

/**
 * A set of define statements.
 * @todo : Understand why whenever is here.
 */
define_set 
  : DEFINE def_part opt_semi
	| dim_section
	| whenever_cmd
  ;

/**
 * The define of variables expected to be after a DEFINE reserved word.
 * 4gl code examples:
 *    x, i smallint, b char(10)
 * @todo : use a better name for the rule
 */
def_part 
  : def_part2 
	| def_part COMMA def_part2
  ;

/**
 * An identifier that could be used in a define section as a variable name.
 */
define_ident 
  : identifier 
  ;

/**
 * The definition of a variable.
 * Here there are extensions to standard 4gl like CONSTANT(s) and
 * initialization on define.
 * 
 * @todo : use a better name for the rule
 */
def_part2
  :	CONSTANT define_ident op_equal CHAR_VALUE
  | CONSTANT define_ident op_equal identifier
  | CONSTANT define_ident op_equal real_number
  | CONSTANT define_ident op_equal INT_VALUE
  | var_def_list dtype_ident 
  | define_ident CONSTANT constant_value
  ;

/**
 * A constant literal value to be used as a constant.
 */
constant_value 
  : INT_VALUE 
	| CHAR_VALUE 
	| real_number 
	| MINUS INT_VALUE 
  ;

/**
 * A possible variable name.
 */
var_def_name	
  :	define_ident 
  ;

/**
 * A List of variables to be defined of the same type.
 * 4gl code example:
 *   x, y
 */
var_def_list	
  : var_def_name
	| var_def_list COMMA var_def_name 
	;

/**
 * Optional CHAR token
 */
op_char 
  : 
	| CHAR;


/**
 * Optional something.
 *
 * @todo : Underestand what this rule makes.
 * @todo : Change the name of this rule to be more explicit
 */
ranking 
  :
	| WITH_1_DIMENSION 
	| WITH_2_DIMENSION
	| WITH_3_DIMENSION
  ;


/**
 * The definition of an array variable  in the define section.
 * The associateive arrays are an aubit extension to standard informix 4gl.
 * 4gl code examples:
 *   x ARRAY[4] OF INTEGER
 */
array_variable	
  : ARRAY OPEN_SQUARE  number_arr_list CLOSE_SQUARE OF dtype_ident
  | DYNAMIC_ARRAY ranking OF dtype_ident
  | ASSOCIATE op_char assoc_open_bracket INT_VALUE assoc_close_bracket
    WITH_ARRAY OPEN_SQUARE number_arr_assoc CLOSE_SQUARE OF dtype_ident  
  ;

/**
 * The specific associative array open bracket.
 */
assoc_open_bracket
  : OPEN_BRACKET 
	| OPEN_SHEV 
	;

/**
 * The specific associative array close bracket.
 */
assoc_close_bracket
  : CLOSE_BRACKET 
	| CLOSE_SHEV 
	;

/**
 * The number of elements definition in an associative array.
 */
number_arr_assoc
  : INT_VALUE
	;

/**
 * The list of the comma separated possible dimensions in an array.
 * 4gl code example:
 *    1,2,4
 */
number_arr_list	
  : number_value_arr COMMA number_value_arr COMMA number_value_arr 
	| number_value_arr COMMA number_value_arr 
	| number_value_arr 
	;

/**
 * The constant array dimension definition.
 */
number_value_arr
  : INT_VALUE 
  ;

/**
 * The definition of a record variable.
 * 4gl code example:
 *    RECORD 
 *      x INTEGER,
 *      y CHAR(10)
 *    END RECORD
 */
record_variable	
  : RECORD def_part END_RECORD 
  |	RECORD_LIKE define_ident DOT MULTIPLY
  |	LINKED_TO define_ident PRIMARY_KEY 
	  OPEN_BRACKET link_to_pk_list CLOSE_BRACKET
  ;

/**
 *
 */
link_to_pk_list 
  : link_to_pk 
	| link_to_pk_list COMMA link_to_pk 
  ;

/**
 *
 */
link_to_pk 
  : define_ident
  ;

/**
 * A datatype identifier
 */
dtype_ident 
  : dtype2 
	;

/**
 * Optional static qualifier.
 */
op_as_static 
  : 
	| AS_STATIC
  ;

/**
 * Possible datatypes with optional static qualifier.
 */
dtype2
  : dtype op_as_static
  ;

/**
 * Possible 4gl data types.
 */
dtype	
  : array_variable 
	|	record_variable 
	|	CHAR
	|	CHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
	|	VARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
	|	VARCHAR OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET 
	|	INTEGER 
	| AS define_ident 
	|	SMALLINT 
	|	KWFORM 
	|	STATUSBOX
	|	DECIMAL
	|	DECIMAL OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
	|	DECIMAL OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET 
	|	MONEY 
	|	MONEY OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
	|	MONEY OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET 
	|	FLOAT 
	|	SMALLFLOAT
	|	DATE
	|	BYTE
	|	BYTES_USE_AS_IMAGE
	|	BYTES_USE_AS_ASCII
	|	TEXT
	|	DATETIME datetime_qual 
	|	INTERVAL interval_qual 
	| like_var 
	| USER_DTYPE 
	;

/**
 * A variable declared as table.column
 */
like_var 	
  : LIKE tab_name DOT col_name  
  ;

/**
 * A database table name.
 */
tab_name 
  : define_ident 
	;

/**
 * A database column name.
 */
col_name 
  : define_ident 
	;

/**
 * Optional datetime qualifier
 */
datetime_qual 
  :  
	| dtime_start TO dtime_end 
  ;

/**
 * Interval datatype precision qualifier.
 */
interval_qual 
  : int_start TO int_end  
  ;

/**
 * Datetime start precision.
 */
dtime_start 
  : dtime_val 
  ;

/**
 * Datatime value.
 */
dtime_val 
  : YEAR
  | MONTH
  | DAY
  | HOUR
  | MINUTE
  | SECOND
  | FRACTION opt_frac
  ;

/**
 * Datetime end precision.
 */
dtime_end 
  : dtime_val 
  ;

/**
 * Optional fraction of a datetime value
 */
opt_frac
  : 
  | OPEN_BRACKET dtfrac CLOSE_BRACKET 
  ;

/**
 * The size of the the interval units ???
 */
opt_unit_size
  : 
  | OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
  ;

/**
 *
 */
dtfrac
  : INT_VALUE 
  ;

/**
 * Interval start precision
 */
int_start 
  : 
	int_start_unit opt_unit_size 
  ;

/**
 * Interval starting unit.
 */
int_start_unit 
  : YEAR 
  | MONTH
  | DAY
  | HOUR
  | MINUTE
  | SECOND
  | FRACTION opt_frac
  ;

/**
 * Interval end unit.
 */
int_end 
  : int_start_unit
	;

/**
 * Optional equal sign
 */
op_equal 
  : 
	| EQUAL 
  ;

/* </DEFINE_STATEMENT> */


/* <DIM_STATEMENT> */

/**
 *
 */
dim_section 
  : DEFINE_TYPE identifier AS dim_dtype
  ;

/**
 *
 */
dim_dtype
  : dim_array_variable 
  | dim_record_variable 
  | CHAR 
  | CHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
  | VARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET
  | VARCHAR OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET 
  | INTEGER
  | SMALLINT 
  | KWFORM 
  | DECIMAL 
  | DECIMAL OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
  | DECIMAL OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET 
  | MONEY 
  | MONEY OPEN_BRACKET INT_VALUE CLOSE_BRACKET
  | MONEY OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET 
  | FLOAT 
  | SMALLFLOAT 
  | DATE 
  | BYTE 
  | TEXT 
  | DATETIME datetime_qual 
  | dim_like_var
  ;

/**
 *
 */
dim_like_var
  : LIKE tab_name  DOT col_name  
  ;

/**
 *
 */
dim_array_variable
  : ARRAY OPEN_SQUARE number_arr_list CLOSE_SQUARE OF dim_dtype
  | ASSOCIATE op_char assoc_open_bracket INT_VALUE assoc_close_bracket
    WITH_ARRAY OPEN_SQUARE number_arr_assoc CLOSE_SQUARE OF dim_dtype  
  ;

/**
 *
 */
dim_record_variable
  : RECORD dim_def_part END_RECORD
  | RECORD_LIKE identifier DOT MULTIPLY
  ;

/**
 *
 */
dim_def_part 
  : dim_def_part2 
	| dim_def_part COMMA dim_def_part2
  ;

/**
 *
 */
dim_def_part2 
  : dim_var_def_list dim_dtype
  ;

/**
 *
 */
dim_var_def_list	
  : dim_var_def_name
	| dim_var_def_list COMMA dim_var_def_name 
	;

/**
 *
 */
dim_var_def_name	
  :	identifier 
	;

/* </DIM_STATEMENT> */


/* <DISPLAY_STATEMENT> */

/**
 * Optional AT used on the DISPLAY statement.
 * 4gl code examples:
 *   AT 3, 5
 * @todo : More examples.
 */
opt_at 
  : 
	| AT display_coords 
	| TO_MENUITEM identifier 
	| TO_MAIN_CAPTION
	| TO fld_list
	| TO KWFORM identifier KWFIELD fld_list 
	| TO KWFORM identifier CAPTION 
	| TO_STATUSBOX identifier 
  ;

/**
 * The display by name statement definition.
 * 4gl code example:
 *   DISPLAY BY NAME a, b ATTRIBUTE(BORDER)
 */
display_b_n_cmd 
  : DISPLAY_BY_NAME ibind_var_list display_attr 
  ;


/**
 * The display statement.
 * 4gl code example:
 *   DISPLAY a, " XPTO ", 4 ATTRIBUTE(REVERSE)
 */
display_cmd 
  : DISPLAY fgl_expr_list opt_at display_attr 
  ;

/**
 * The display form statement.
 * 4gl code example:
 *   DISPLAY FORM "form_name" ATTRIBUTE(REVERSE)
 */
display_form_cmd 
  : DISPLAY_FORM form_name display_attr 
  ;

/**
 * The display array statement.
 * 4gl code example:
 *   DISPLAY ARRAY array_var TO xpto.* ATTRIBUTES(REVERSE)
 *     ... EVENTS ...
 *   END DISPLAY
 */
display_array_cmd 
  : DISPLAY_ARRAY use_arr_var TO identifier DOT MULTIPLY opt_scroll 
	  opt_attributes disp_rest 
  ;

/**
 * Optional scroll to display array statement.
 * 4gl code example:
 *   SCROLL USING a
 * @todo : Understand what is this. I think that is an extension to standard 4gl
 */
opt_scroll
  : 
  | SCROLL_USING field_name 
  ;

/**
 * Attributes used on the DISPLAY statements.
 */
display_attr	
  :	opt_attributes 
	;

/**
 * The optional part (events and end display) of DISPLAY ARRAY statement.
 */
disp_rest 
  : 
	| disp_field_commands END_DISPLAY
	| END_DISPLAY
	;

/**
 * Event handlers list for DISPLAY ARRAY statement.
 */
disp_field_commands 
  : disp_field_command 
	| disp_field_commands disp_field_command
	;

/**
 * The specific DISPLAY ARRAY events
 * 4gl code examples:
 *    AFTER ROW
 *      ... 4gl code ...
 *    BEFORE ROW
 *      ... 4gl code ...
 *    ON KEY (CONTROL-P)
 *      ... 4gl code ...
 */
disp_field_command 
  : AFTROW commands 
	| BEFROW commands 
	| on_key_command commands 
  ;

/* </DISPLAY_STATEMENT> */

/* <ERROR_STATEMENT> */

/**
 * Error statement
 * 4gl code example:
 *   ERROR "This is an error number : ", status ATTRIBUTE(REVERSE)
 */
error_cmd	
  : ERROR fgl_expr_concat opt_attributes 
	| ERROR fgl_expr_concat opt_attributes  WAIT_FOR_KEY 
  ;

/* </ERROR_STATEMENT> */


/* <EXIT_STATEMENT> */

/**
 * All possible EXIT statements.
 */
exit_cmd 
  : EXIT_WHILE
	| EXIT_INPUT
	| EXIT_FOREACH
	| EXIT_FOR
	| EXIT_CONSTRUCT
	| EXIT_DISPLAY
	| EXIT_MENU  
	| EXIT_CASE
	| EXIT_PROMPT
  ;

/* </EXIT_STATEMENT> */

/* <CONTINUE_STATEMENT> */

/**
 * All possible continue statements.
 */
continue_cmd 
  : CONTINUE_WHILE 
	| CONTINUE_INPUT
	| CONTINUE_FOREACH
	| CONTINUE_FOR 
	| CONTINUE_CONSTRUCT
	| CONTINUE_DISPLAY
	| CONTINUE_MENU
	| CONTINUE_PROMPT
  ;

/* </CONTINUE_STATEMENT> */


/* <EXIT_PROGRAM_STATEMENT> */

/**
 * Exit program statement
 */
exit_prog_cmd 
  : EXIT_PROGRAM 
  | EXIT_PROGRAM fgl_expr 
  ;

/* </EXIT_PROGRAM_STATEMENT> */


/* <EXPRESSION_RULE> */

/**
 * The 4gl expression definition.
 * This is diferent of fgl_expr.
 *
 * @todo : Understand the diference
 */
fgl_expr_c 
  : initial_expr
  | boolean_expr
  | report_only_expr
  | function_call_expr
  | fgl_expr_c fgl_next 
  | builtin_expr
  | pdf_expr
  | literal_expr 
  | MINUS fgl_expr_c 
  | PLUS fgl_expr_c 
  ;

/**
 * Some formating of expressions
 */
fgl_next
  : and_or_expr
  | comparison_expr
  | in_expr
  | SPACES 
  | interval_expr 
  | null_expr
  | string_match_expr
  | clip_expr 
  | using_expr 
  | math_expr
  | CONCAT_PIPES fgl_expr_c 
  ;

/**
 * Optional 4gl ???ret??? expression.
 */
op_fgl_expr_ret_list
  : 
	| fgl_expr_ret_list
  ;

/**
 * 4gl ???ret??? expression.
 */
fgl_expr_ret 
  : fgl_expr 
	| KW_NULL
  ;

/**
 * Comma separated 4gl ??? ret ??? list
 */
fgl_expr_ret_list 	
  : fgl_expr_ret
	| fgl_expr_ret_list COMMA fgl_expr_ret
  ;

/**
 * Comma separated 4gl expression list.
 */
fgl_expr_list 	
  : fgl_expr
	| fgl_expr_list COMMA fgl_expr
  ;

/**
 * Comma separated 4gl expressions concatenation.
 * @todo : See why this rule is equal to fgl_expr_list
 */
fgl_expr_concat	
  :	fgl_expr
	| fgl_expr_concat COMMA fgl_expr
  ;

/**
 * 4gl expressions 
 */
fgl_expr
  : fgl_expr_c 
  ;

/**
 * Integer signals
 */
int_sign	
  : PLUS
	| MINUS
  ;

/**
 * Boolean expressions
 */
boolean_expr
  : NOT fgl_expr_c 
  | KW_TRUE  
  | KW_FALSE 
  | OPEN_BRACKET fgl_expr_c CLOSE_BRACKET
  | EXISTS OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET
  | NOT_EXISTS OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET 
  ;	

/**
 * Initial expression.
 * @todo : Describe better this expression.
 */
initial_expr
  : int_sign real_number 
  | int_sign INT_VALUE 
  ;

/**
 * Literal (???) expression.
 */
literal_expr
  : CHAR_VALUE  
  | real_number
  | INT_VALUE
  | variable_entry
  ;

/**
 * Variable used in expressions
 */
variable_entry_2 
  : variable
	| variable THRU variable
  ;

/**
 * Variable entry.
 * @todo : Understand why cannot use variable_entry_2 directly
 */
variable_entry 
  : variable_entry_2 
  ;

/**
 * 4gl Expressions that are used only inside reports
 */
report_only_expr
  : COLUMN fgl_expr_c 
  | COLUMNS fgl_expr_c 
  | rep_agg  
  | GROUP rep_agg
  ;

/**
 * AND/OR expressions
 */
and_or_expr
  : KW_AND fgl_expr_c 
  | KW_OR fgl_expr_c 
  ;

/**
 * A comma separated expression list.
 */
inexpr_list 
  : fgl_expr_c  
	| inexpr_list COMMA fgl_expr_c
  ;

/**
 * IN expression to use in intervals.
 * 4gl code example:
 *   IN (SELECT x FROM y)
 *   IN (1,2,3)
 *   NOT IN (1,2,3)
 */
in_expr
  : IN OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET 
  | NOT_IN OPEN_BRACKET in_select_statement_ss CLOSE_BRACKET 
  | IN OPEN_BRACKET inexpr_list CLOSE_BRACKET 
  | NOT_IN OPEN_BRACKET inexpr_list CLOSE_BRACKET 
  ;

/**
 * NULL expressions.
 * 4gl code examples:
 *    IS NULL
 *    IS NOT NULL
 */ 
null_expr
  : IS_NULL  
  | IS_NOT_NULL
  ;

/**
 * Matches expressions to find patterns in strings.
 */
string_match_expr
  : MATCHES fgl_expr_c 
  | NOT_MATCHES fgl_expr_c 
  | MATCHES fgl_expr_c ESCAPE CHAR_VALUE 
  | NOT_MATCHES fgl_expr_c ESCAPE CHAR_VALUE 
  | LIKE fgl_expr_c 
  | NOT_LIKE fgl_expr_c 
  | LIKE fgl_expr_c ESCAPE CHAR_VALUE 
  | NOT_LIKE fgl_expr_c ESCAPE CHAR_VALUE 
  ;

/**
 * Clipped expression.
 * @todo : Understand why this rule is needed because just have a TOKEN.
 */
clip_expr
  : CLIPPED 
  ;

/**
 * The using number formating to be used in expressions.
 */ 
using_expr
  : KW_USING fgl_expr_c 
  ;

/**
 * The matematical expressions.
 */
math_expr
  : PLUS fgl_expr_c 
  | MINUS fgl_expr_c
  | MULTIPLY fgl_expr_c 
  | DIVIDE  fgl_expr_c 
  | MOD fgl_expr_c 
  | POWER fgl_expr_c 
  ;

/**
 * Comparison expressions
 */
comparison_expr
  : EQUAL fgl_expr_c 
  | EQUAL_EQUAL fgl_expr_c 
  | LESS_THAN fgl_expr_c
  | GREATER_THAN fgl_expr_c
  | NOT_EQUAL fgl_expr_c
  | LESS_THAN_EQ fgl_expr_c
  | GREATER_THAN_EQ fgl_expr_c
  ;

/**
 * A call of a function inside an expression.
 */
function_call_expr2
  : identifier OPEN_BRACKET opt_func_call_args CLOSE_BRACKET 
  | identifier DOUBLE_COLON identifier 
	  OPEN_BRACKET opt_func_call_args CLOSE_BRACKET 
  ;

/**
 * @todo : I supose that the parser does not work without some consumed code.
 */
function_callb
  : DATE OPEN_BRACKET fgl_expr_c CLOSE_BRACKET 
  | MONTH OPEN_BRACKET fgl_expr_c CLOSE_BRACKET 
  | DAY OPEN_BRACKET fgl_expr_c CLOSE_BRACKET 
  | YEAR OPEN_BRACKET fgl_expr_c CLOSE_BRACKET 
  | INTERVAL OPEN_BRACKET interval_func_params CLOSE_BRACKET op_extend_i 
  | DATETIME OPEN_BRACKET CHAR_VALUE CLOSE_BRACKET op_extend_d 
  | DATETIME OPEN_BRACKET INT_VALUE CLOSE_BRACKET op_extend_d 
  | DATETIME OPEN_BRACKET INT_VALUE COLON INT_VALUE CLOSE_BRACKET op_extend_d 
  | FGL_ISDYNARR_ALLOCATED OPEN_BRACKET variable CLOSE_BRACKET 
  | FGL_DYNARR_EXTENTSIZE OPEN_BRACKET variable COMMA INT_VALUE CLOSE_BRACKET 
  ;

/**
 * Optional 
 */
op_extend_d
  : 
	| s_curr_v TO e_curr_v
  ;

/**
 * @todo : This is not optional
 */
op_extend_i
  : interval_qual
  ;

/**
 * A function call inside an expression.
 */
function_call_expr
  : function_callb
  | GET_FLDBUF OPEN_BRACKET fld_list CLOSE_BRACKET 
  | FIELDTOWIDGET OPEN_BRACKET field_name CLOSE_BRACKET 
  | ID_TO_INT OPEN_BRACKET field_name CLOSE_BRACKET 
  | INFIELD OPEN_BRACKET fld_list CLOSE_BRACKET 
  | FIELD_TOUCHED OPEN_BRACKET fld_list CLOSE_BRACKET 
  | NOT_FIELD_TOUCHED OPEN_BRACKET fld_list CLOSE_BRACKET 
  | builtin_funcs
  | function_call_expr2
  ;

/**
 * A builtin expression.
 */
builtin_expr 
  : curr_v_clause 
  | DATE  
  ;

/**
 * Language built in functions.
 */
builtin_funcs 
  : UPSHIFT OPEN_BRACKET fgl_expr_c CLOSE_BRACKET 
  | DOWNSHIFT OPEN_BRACKET fgl_expr_c CLOSE_BRACKET
  | ASCII fgl_expr_c  
  | EXTEND extend_parameters
  ;

/**
 * PDF report generation special expressions.
 * This is an extension to standard Informix 4gl.
 */
pdf_expr 
  : fgl_expr_c POINTS  
  | fgl_expr_c MM 
  | fgl_expr_c INCHES
  ;

/**
 * The parameters of the INTERVAL function.
 * 4gl code example:
 */
interval_func_params 
  : CHAR_VALUE 
  | numeric_time_interval 
  ;

/**
 * Constant / literal interval values.
 */
numeric_time_interval
  : MINUS numeric_time_interval 
	| numeric_time_unit_big	
	| numeric_time_unit_small	
  ;

/**
 * Constant time values.
 */
numeric_time_unit_small 
  : INT_VALUE 								                   /* DD or HH or MM or SS */
	| INT_VALUE INT_VALUE 			                   /* DD HH */
	| INT_VALUE INT_VALUE COLON INT_VALUE 	       /* DD HH:MM */
	| INT_VALUE INT_VALUE COLON INT_VALUE COLON INT_VALUE 	 /* DD HH:MM:SS*/
	| INT_VALUE INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE /* DD HH MM SS.FFFF*/
	| INT_VALUE COLON INT_VALUE                    /* HH MM */
	| INT_VALUE COLON INT_VALUE COLON INT_VALUE    /* HH MM SS*/
	| INT_VALUE COLON INT_VALUE COLON NUMBER_VALUE /* HH MM SS.FFFF*/

	| INT_VALUE COLON NUMBER_VALUE			           /* MM SS.FFFF*/
	| NUMBER_VALUE					                       /* SS.FFFF*/
  ;

/**
 * Constant time values. 
 */
numeric_time_unit_big
  : INT_VALUE
	| INT_VALUE MINUS INT_VALUE 
  ;

/**
 * A comma separated list of form field names.
 * Used on field_touched function
 */
field_name_list
  : field_name 
	| field_name_list COMMA field_name 

/* </EXPRESSION_RULE> */


/* <FOR_RULE> */

/**
 * The FOR loop statement.
 * 4gl code examples:
 *   FOR i = 1 TO 10 STEP 2
 *      ... 4gl statements ...
 *   END FOR
 */
for_cmd	
  : FOR variable EQUAL fgl_expr TO fgl_expr op_for_step commands END_FOR 
  ;

/**
 * The optional step in the FOR loop.
 * 4gl code example:
 *   STEP -1
 */
op_for_step 
  :	
	|	STEP fgl_expr
  ;

/* </FOR_RULE> */


/* <FOREACH_RULE> */

/**
 * The 4gl FOREACH statement.
 * 4gl code examples:
 *    FOREACH crXppto INTO rec.a, rec.b
 *      ...4gl statements...
 *    END FOREACH
 */
foreach_cmd	
  :	FOREACH fetch_cursor_name opt_foreach_using_part
    opt_foreach_into_fetch_part commands END_FOREACH 
  ;

/**
 * The optional foreach loop USING sub statement.
 * 4gl code example:
 *    USING a,b,2
 */
opt_foreach_using_part
  : 
	| KW_USING fgl_expr_list 
	;

/* </FOREACH_RULE> */


/* <FORM_HANDLER_RULE> */

/**
 * @todo : Understand what is this rule. I think that is an extension to 
 * standard informix 4gl.
 */
formhandler_def 
  : FORMHANDLER identifier define_section  op_code op_bef_ev_list
    op_input_section op_aft_ev_list END_FORMHANDLER 
  ;

/**
 * Optional input section of the FORMHANDLER.
 */
op_input_section 
  : 
	| input_section
	;

/**
 * Optional list of Before events.
 */
op_bef_ev_list 
  :
	| bef_ev_list
  ;

/**
 * List of before events.
 */
bef_ev_list 
  : bef_ev 
	| bef_ev_list bef_ev
  ;

/**
 * A specific before event of FORM HANDLER.
 */
bef_ev 
  : BEFORE_EVENT commands 
  | BEFORE_OPEN_FORM commands 
  ;

/**
 * Optional list of after events
 */
op_aft_ev_list 
  :
  | aft_ev_list
  ;

/**
 * List of after events of FORM HANDLER.
 */
aft_ev_list 
  : aft_ev 
	| aft_ev_list aft_ev
  ;

/**
 * A specific AFTER event to use in FORM HANDLER.
 */
aft_ev 
  : AFTER_EVENT commands 
  | BEFORE_CLOSE_FORM commands 
  ;

/**
 * The input section of FORM HANDLER.
 */
input_section  
  : input_sub_section field_ops END_INPUT
  ;

/**
 * The input sub section of FORM HANDLER.
 */
input_sub_section 
  : INPUT
  | INPUT in_variable_list FROM in_id_list
  | INPUT BY_NAME in_bn_variable_list
  ;

/**
 *
 */
in_variable_list 
  : variable 
	| in_variable_list COMMA variable
  ;

/**
 *
 */
in_id_list 
  : identifier 
	| in_id_list COMMA identifier
  ;

/**
 *
 */
in_bn_variable_list 
  : variable 
	| in_bn_variable_list COMMA variable
  ;

/**
 *
 */
field_ops 
  : field_op 
	| field_ops field_op
  ;

/**
 *
 */
field_op 
  : BEFORE_ANY commands 
  | AFTER_ANY commands 
  | BEFORE in_id_list commands 
  | AFTER in_id_list commands 
  | ON in_id_list commands
  ;

/* </FORM_HANDLER_RULE> */


/* <FREE_STATEMENT> */

/**
 * FREE cursor statement
 * 4gl code example:
 *    FREE crXpto
 */
free_cmd 
  : FREE cursor_name
  ;

/* </FREE_STATEMENT> */


/* <GENERAL_RULE> */

/**
 * A screen line number to be used on statements that need it (ex: PROMPT LINE)
 */
line_no		
  : LAST MINUS INT_VALUE 
	| LAST 
	| FIRST PLUS INT_VALUE 
	| FIRST 
	| INT_VALUE 
	| variable 
	| OFF 
  ;

/**
 * A file name to be used in statements like LOCATE.
 * 4gl code examples:
 *     "/tmp/xpto"
 *     fileName
 */
file_name	
  :	CHAR_VALUE 
	| cvariable 
  ;

/**
 * A number as any expression. Used only to define screen coordinates.
 */
a_number	
  :	fgl_expr
	;

/**
 * Screen coordinates that define a line and a column. Used in statements
 * like DISPLAY AT.
 * 4gl code examples:
 *    1, 2
 *    x, y
 */
coords		
  :	a_number COMMA a_number 
  ;

/**
 * Screen coordinates to ne used only in DISPLAY AT statement.
 * @todo : Undestand if this rule can be removed.
 */
display_coords	
  :	coords
	;

/**
 * A form field name to be used in screen interaction statements.
 * 4gl code examples:
 *    xpto
 *    
 */
field_name	
  :	identifier 
	| INT_TO_ID OPEN_BRACKET identifier CLOSE_BRACKET 
	| identifier DOT INT_TO_ID OPEN_BRACKET identifier CLOSE_BRACKET 
	| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE
	| identifier DOT MULTIPLY
	| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE DOT MULTIPLY
	| identifier DOT identifier 
	| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE DOT identifier
  ;

/**
 * The name of a cursor
 * 4gl code example:
 *   crXpto
 */
cursor_name	
  :	ident_or_var 
  ;

/**
 * The name of a cursor when used to be fecthed.
 * @todo : See if this rule can be merged with cursor_name.
 */
fetch_cursor_name	
  :	ident_or_var 
	;

/**
 * The name of a screen window
 */
win_name	
  :	ident_or_var 
  ;

/**
 * The name of a screen window when they are opened.
 */
open_win_name	
  :	ident_or_var 
  ;

/**
 * The name of a form.
 */
form_name	
  : ident_or_var 
  ;

/**
 * The name of a form when it is to be opened.
 */
open_form_name	
  : ident_or_var 
  ;

/**
 * An optional help number to be used in INPUT(s), menu(s), etc.
 * 4gl code example:
 *    HELP 100
 */
opt_help_no		
  :	
	| HELP INT_VALUE 
  ;

/**
 * An identifier.
 * Like in informix 4gl an identifier could be any language reserved word.
 * 4gl code examples:
 *   xpto
 *   TABLE
 *   CREATE
 * @todo : Think better if we should store the line number
 * @return A pointer to a FglIdentifier object
 */
identifier	
  : NAMED  
		{ $$ = $1; }
  ;

/**
 * An identifier or variable.
 */
ident_or_var	
  : ident_p2  
  ;

/**
 * An identifier
 * @todo : Understand why this rule is needed.
 */
ident_p2 
  : NAMED 
  | VARIABLE OPEN_BRACKET var_or_string CLOSE_BRACKET
  ;

/**
 * A variable or string
 */
var_or_string 
  : var 
	| CHAR_VALUE
	;

/**
 * Another rule for field name.
 * @todo : Understand if this rule is realy needed.
 */
field_name2	
  :	identifier 
  | identifier OPEN_SQUARE arr_expr CLOSE_SQUARE
	| identifier DOT MULTIPLY
	| identifier OPEN_SQUARE arr_expr CLOSE_SQUARE DOT MULTIPLY
	| identifier DOT identifier 
  | identifier OPEN_SQUARE arr_expr CLOSE_SQUARE DOT identifier
  ;

/**
 * @todo : understand why this rule is needed.
 */
cvariable 
  : variable 
  ;

/**
 * A real literal number 
 */
real_number 
  : NUMBER_VALUE 
	| DOT INT_VALUE 
  ;

/* </GENERAL_RULE> */


/* <GOTO_STATEMENT> */

/**
 * Goto statement
 * 4gl code example:
 *    GOTO xptoLabel
 */
goto_cmd 
  : GOTO label_goto 
  ;

/* </GOTO_STATEMENT> */


/* <UI_RULE> */

/**
 *
 */
check_menu_cmd 
  : CHECK_MENUITEM menu_item_list
  ;

/**
 *
 */
menu_item_list
  : menu_item 
	| menu_item_list COMMA menu_item
  ;

/**
 *
 */
menu_item
  : identifier 
  ;

/**
 *
 */
uncheck_menu_cmd 
  : UNCHECK_MENUITEM menu_item_list
  ;

/**
 *
 */
disable_cmd 
  : DISABLE_MENUITEMS menu_item_list
  | DISABLE fld_list
  | DISABLE_FORM form_name KWFIELD fld_list
  ;

/**
 *
 */
enable_cmd 
  : ENABLE_MENUITEMS menu_item_list
  | ENABLE fld_list
  | ENABLE_FORM form_name KWFIELD fld_list
  ;

/**
 *
 */
msg_box_cmd 
  : MESSAGEBOX fgl_expr_list
    op_caption
    op_icon
    op_buttons
    op_disable_msg
    op_returning_msg 
  ;

/**
 *
 */
op_disable_msg 
  :
  | gm_disable_msg
  ;

/**
 *
 */
gm_disable_msg
  : DISABLE_PROGRAM 
	| DISABLE_ALL
  ;

/**
 *
 */
op_returning_msg 
  : 
  | gm_returning_msg
  ;

/**
 *
 */
gm_returning_msg
  : RETURNING variable
  ;

/**
 *
 */
op_caption 
  : 
	| gm_caption
  ;

/**
 *
 */
gm_caption
  : CAPTION fgl_expr_list 
	;

/**
 *
 */
op_icon 
  : 
	| gm_icon
  ;

/**
 *
 */
gm_icon
  : ICON INT_VALUE  
	;

/**
 *
 */
op_buttons 
  : 
	| gm_buttons
	;

/**
 *
 */
gm_buttons 
  : BUTTONS INT_VALUE op_def_but
	;

/**
 *
 */
op_def_but 
  : 
	| DEFAULT INT_VALUE
	;

/* </UI_RULE> */


/* <IF_STATEMENT> */

/**
 * 4gl IF statement
 * 4gl code example:
 *    IF i = 1 THEN
 *       ... 4gl statements ...
 *    ELSE
 *       ... 4gl statements ...
 *    END IF
 */
if_cmd	
  : IF fgl_expr THEN  commands op_else END_IF 
  ;

/**
 * Optional ELSE subsatement of IF command.
 * 4gl code examples:
 *   ELSE
 *     ... 4gl statements ...
 *
 *   ELSE IF x = 1 THEN
 *     ... 4gl statements ...
 */
op_else 
  : 
	| ELSE commands
	| ELIF fgl_expr THEN commands op_else 
	;

/* </IF_STATEMENT> */

/**
 * Import function statement.
 * This statement is an extension to original Informix 4gl.
 */
import_m 
  : IMPORT_FUNCTION identifier OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
	| IMPORT_LEGACY_FUNCTION identifier 
  ;

/**
 * Datatype import.
 */
module_import
  : IMPORT_DATATYPE identifier 
  ;

/* <INPUT_STATEMENT> */

/**
 * Optional end input.
 */
end_input 
  :
  | field_commands END_INPUT 
  | END_INPUT 
	;

/**
 * Optional WHITHOUT DEFAULTS property of INPUT statement.
 */
opt_defs 
  : 
  | WITHOUT_DEFAULTS 
  ;

/**
 * The list of field commands to be used inside INPUT statement.
 * The commands are the field and input events.
 */
field_commands 
  : field_command 
	| field_commands field_command
	;

/**
 * The field commands tyo be used inside the INPUT statement.
 */
field_command 
  : BEFFIELD bef_field_list commands 
	| AFTFIELD aft_field_list commands 
	| AFTROW commands 
	| BEFROW commands 
	| on_key_command commands 
	| AFTINP commands 
	| BEFINP commands 
	| BEFORE_DELETE  commands 
	| BEFORE_INSERT  commands 
	| AFTER_DELETE  commands 
	| AFTER_INSERT  commands 
  ;

/**
 * The list of fields to be used in before field event of the INPUT
 * statement.
 */
bef_field_list 
  : field_name 
	| bef_field_list COMMA field_name 
  ;

/**
 * The list of fields to be used in after field events of the INPUT 
 * statement.
 */
aft_field_list 
  : field_name 
	| aft_field_list COMMA field_name 
  ;

/**
 * The next field command that is used inside the events of the INPUT
 * statement.
 */
next_field_cmd 
  : NEXTFIELD next_field 
  ;

/**
 *
 */
next_form_cmd 
  : NEXTFORM identifier KWFIELD next_field 
  ;

/**
 * The definition of the field that where to move with
 * NEXT FIELD command.
 */
next_field	
  :	NEXT 
	| PREVIOUS 
	| field_name 
  ;

/**
 * The main rule of the INPUT statement.
 */
input_cmd	
  :	INPUT inp_rest end_input 
  ;

/**
 * The inside of the INPUT statement.
 * 4gl code examples:
 *   BY NAME xpto.* HELP 100
 *   BY NAME xpto.* HELP 100
 *   ARRAY vsArray FROM pa 
 */
inp_rest
  : BY_NAME ibind_var_list opt_defs opt_help_no opt_attributes 
  | ibind_var_list opt_defs FROM fld_list  opt_help_no opt_attributes 
  | ARRAY use_arr_var opt_defs FROM identifier DOT MULTIPLY opt_help_no 
    opt_attributes
  ;

/**
 * Scroll statement that scrolls up or down the values of an array
 * in a screen array.
 */
scroll_cmd 
  : SCROLL fld_list up_or_down 
  ;

/**
 * The up or down definition os the scroll statement and the amount of
 * lines.
 * 4gl code example:
 *    UP 2
 *    DOWN 4
 *    UP
 *    DOWN
 */
up_or_down  
  : KWUP_BY INT_VALUE 
	| KWDOWN_BY INT_VALUE 
	| KWUP 
	| KWDOWN 
  ;

/**
 * Optional help used in the construct statement.
 * 4gl code example:
 *    HELP 20
 */
op_help 
  : 
	| HELP INT_VALUE
  ;

/**
 * Specific INPUT ARRAY attributes.
 * @todo : Understand if this rule could be merged with 
 * input_array_attributes_int rule.
 */
input_array_attributes
  : input_array_attributes_int 
  ;

/**
 * Specific INPUT ARRAY attributes.
 */
input_array_attributes_int 
  : CURRENT_ROW_DISPLAY_EQUAL CHAR_VALUE 	
	| COUNT EQUAL INT_VALUE
	| COUNT EQUAL variable
	| MAXCOUNT EQUAL INT_VALUE
	| MAXCOUNT EQUAL variable
	| INSERT_ROW_EQUAL_TRUE
	| INSERT_ROW_EQUAL_FALSE
	| DELETE_ROW_EQUAL_TRUE
	| DELETE_ROW_EQUAL_FALSE
  ;

/* </INPUT_STATEMENT> */

/**
 * The on key command used on PROMPT, CONSTRUCT, INPUT statements.
 * 4gl code example:
 *   ON KEY CONTROL-A 
 *   ON ANY KEY
 */
on_key_command 
  : ONKEY key_do 
  | ON_ANY_KEY 
  ;

/**
 * A possible KEY definition.
 * 4gl code example:
 *    KEY CONTROL-X
 */ 
key_val 
  : KEY key_do 
	;

/**
 * The accept key definition.
 * 4gl code example:
 *    ACCEPT KEY ESC
 */
accept_key 
  :  ACCEPTKEY key_value 
  ;


/**
 * A single key definition.
 * 4gl code example:
 *   KEY CONTROL-X
 */
single_key_val 
  : KEY key_do 
  ;

/**
 * A multiple key definition.
 * 4gl code examples:
 *   CONTROL-W
 *   (CONTROL-W,ESC)
 */
key_do	
  : key_value  
	| OPEN_BRACKET key_value_list CLOSE_BRACKET  
  ;

/**
 * A list of comma separated key definition.
 * 4gl code example:
 *    CONTROL-W,ESC
 */
key_value_list 
  : key_value 
	| key_value_list COMMA key_value 
  ;

/**
 * A key value.
 * @todo : Understand if this rule can be merged with key_value_1
 */
key_value 
  : key_value_1 
  ;

/**
 * The definition of all possible specific keys. 
 * 4gl code examples:
 *    CONTROL-W
 *    F1
 *    ESCAPE
 */
key_value_1 
  : FKEY
	| CTRL_KEY 
	|	INTERRUPT 
	| ACCEPT 
	| SINGLE_KEY 
  | ESCAPE 
  | KWUP 
  | HELP 
  | KWDOWN
  | RETURN
  | DELETE
  | INSERT
  | TAB
  | LEFT
  | RIGHT
  | NEXTPAGE
  | PREVPAGE
  | CHAR_VALUE
  ;


/**
 * The 4gl LABEL statement to be used with the GOTO statement.
 * The identifier of the label is readed by the lexer.
 * 4gl code example:
 *   LABEL xpto
 */
label_cmd 
  : LABEL  
  ;



/** 
 * @todo : Understand what statement is this one.
 */
linked_cmd 
  : SELECT_USING variable 
  ;

/** 
 * @todo : Understand what statement is this one.
 */
linked_del_cmd 
  : DELETE_USING variable 
  ;

/** 
 * @todo : Understand what statement is this one.
 */
linked_upd_cmd 
  : UPDATE_USING variable 
  ;

/**
 * The ALLOCATE ARRAY statement to allocate space for an array
 * This is an extension to Informix 4gl
 */
allocate_array_cmd
  : ALLOCATE_ARRAY variable
	;

/**
 * The RESIZE ARRAY statement to reallocate space for an array
 * This is an extension to Informix 4gl
 */
resize_array_cmd
  : RESIZE_ARRAY variable
	;

/**
 * The DEALLOCATE ARRAY statement to allocate space for an array
 * This is an extension to Informix 4gl
 */
deallocate_array_cmd
  : DEALLOCATE_ARRAY variable
	;


/**
 * AT TERMINATION CALL statement.
 * This is an extension to standard Informix 4gl.
 */
at_term_cmd 
  : AT_TERMINATION_CALL  identifier 
  ;

/**
 * Abstract Function definition.
 * This rule is called func_or_main in Mike parser.
 * It is abstract because could be all function types (function, main,
 * report, etc).
 */
abstract_function	
  :	function_definition 
	  { $$ = $1; }
	|	main_def
	|	mem_func_def
	|	report_def
	|	pdf_report_def
  | menu_def
	| whenever_cmd 
  | formhandler_def
	|	code_cmd
	| import_m
	|	comment_cmd
	;

/**
 * A module code, including embedded C code and global whenever statements.
 * Note that Informix 4gl does not suport C code outside functions.
 * 4gl code examples:
 *    WHENEVER ERROR stop
 *    START C
 *     ... C Code...
 *    END C
 */
module_code 
  : code_cmd 
	| whenever_cmd  
	;

/**
 * Optional commands that can apear at the beginig of a function.
 * 4gl code exemples:
 *   
 */
op_code 
  : 
	| code_cmd 
	| whenever_cmd  
	;

/**
 * Modular variables define section._
 * 4gl code example:
 *   DEFINE a SMALLINT
 */
module_define_section 
  : define_multiple 
  ;

/** 
 * The kind of function definition.
 * The local function is an extension to standard Informix 4gl
 * 4gl code examples:
 *   FUNCTION
 *   LOCAL FUNCTION
 */
ldeffunction 
  : FUNCTION 
	| LOCAL_FUNCTION
  ;

/**
 * The return statements
 * 4gl code examples:
 *   RETURN
 *   RETURN a
 *   RETURN 1, x.p
 *   RETURN a+b
 */
return_cmd 
  : RETURN op_fgl_expr_ret_list 
  ;

/**
 * Optional 4gl expression list
 * 4gl code examples:
 *   a + 1
 *   a + func() - 20
 */
op_fgl_expr_list 
  : 
	| fgl_expr_list 
  ;

/**
 * The main rule for the GLOBALS section of a 4gl module.
 */
module_globals_section 
  : actual_globals_section 
  ;

/**
 * A list of possible diferent globals statements.
 */
actual_globals_section 
  : xglobals_entry
	| actual_globals_section xglobals_entry
  ;

/**
 * A global definition, including the GLOBALS statement, the global DATABASE
 * embedded C code and WHENEVER statements.
 * 4gl code examples:
 *   GLOBALS "globalsFile"
 *   GLOBALS
 *      ... define statements ...
 *   END GLOBALS
 *   DATABASE xpto
 */
xglobals_entry 
  : globals_entry 
	| module_code  
	| db_section
  ;

/**
 * A globals statement.
 * 4gl code examples:
 *   GLOBALS "globalsFile"
 *   GLOBALS
 *      ... define statements ...
 *   END GLOBALS
 */
globals_entry
  : GLOBALS glob_section 
  ;

/**
 * The possible kind of globals: define statements or file name.
 * 4gl code examples:
 *   "globalsFile"
 *      ... define statements ...
 *   END GLOBALS
 */
glob_section 
  : define_section END_GLOBALS 
  | file_name 
  ;

/**
 * This is an extension to standard Informix 4gl.
 */
mem_func_def 
  : MEMBER_FUNCTION identifier MEMBER_OF identifier OPEN_BRACKET
    op_param_var_list CLOSE_BRACKET
    define_section
    op_code commands end_func_command
	;


/* </MAIN_RULE> */


/* <MENU_STATEMENT> */

/**
 * The MENU statement.
 * 4gl code example:
 *   MENU "Options"
 *      COMMAND "Op 1" "First option"
 *        ... 4gl statements ...
 *   END MENU
 */
menu_cmd	
  :	MENU menu_title menu_commands end_menu_command 
  ;

/**
 * The end menu
 * @todo : Understand why this is a separated RULE.
 */
end_menu_command  
  : END_MENU 
  ;

/**
 * The possible menu declarative subsections.
 * 4gl code examples:
 *   BEFORE MENU 
 *      ... 4gl statements ...
 *   COMMAND "Op 1" 
 *      ... 4gl statements ...
 *   COMMAND KEY "X" "Op 1" "First option" HELP 100
 *      ... 4gl statements ...
 */
menu_block_command 
  : BEFORE_MENU commands 
  | COMMAND opt_key menu_opt_name menu_optional_desc opt_help_no commands 
  | COMMAND opt_key opt_help_no commands 
  ;

/**
 * The list of possible menu commands
 */
menu_commands 
  : menu_block_command 
	| menu_commands menu_block_command
	;

/**
 * Optional key to use in the COMMAND of the MENU statement.
 */
opt_key	
  :	
	| key_val 

/**
 * Name for a COMMAND substatement in the MENU statement.
 * @todo : This should change name because it is not optional and 
 *         is part of COMMAND. maybe "command_option_name"
 */
menu_opt_name	
  :	CHAR_VALUE 
  | variable 
  ;

/**
 * Optional description of the COMMAND substatement in the MENU statement.
 * @todo : Change to opt_menu_description.
 */
menu_optional_desc	
  :
  | variable 
  | CHAR_VALUE 
	;

/**
 * A NEXT option command to be used in the MENU events. The
 * next option continue the menu execution in a specific 
 * option.
 * 4gl code example:
 *    NEXT OPTION "Xpto"
 */
next_option_cmd 
  : NEXT_OPTION opt_name 
  ;

/**
 * The SHOW OPTION command of the MENU statement. This statement
 * turns visible one option.
 * 4gl code examples:
 *   SHOW OPTION "Xpto"
 *   SHOW OPTION "Xpto", "Xpta"
 */
show_option_cmd 
  : SHOW_OPTION opt_name_list 
  ;

/**
 * The HIDE OPTION command of the MENU statement. This statement
 * turns invisible one option.
 * 4gl code example:
 *   HIDE OPTION "Xpto"
 *   HIDE OPTION "Xpto", "Xpta"
 */
hide_option_cmd 
  : HIDE_OPTION opt_name_list 
  ;

/**
 * Name of a menu option.
 * @todo : Change the rule name because it is not optional
 */
opt_name	
  :	ALL 
  | CHAR_VALUE 
  | variable 
  ;

/**
 * A comma separated menu option name.
 */
opt_name_list	
  :	opt_name
	|	opt_name_list COMMA opt_name 
	;

/** 
 * The title of the menu.
 */
menu_title 	
  :	variable 
  | CHAR_VALUE
  ;

/* </MENU_STATEMENT> */


/**
 * A special function type for menu(s).
 * This is an extension to standard Informix 4gl.
 * 4gl code example:
 *    MENUHANDLER mhName
 *      ... define of variables...
 *      ... menu handler statements ...
 *    END MENUHANDLER
 */
menu_def 
  : MENUHANDLER identifier  define_section menu_handler_elements END_MENUHANDLER
  ;

/**
 * A list of possible menu handler statements.
 */
menu_handler_elements 
  : menu_handler_element 
	| menu_handler_elements menu_handler_element
  ;

/**
 * A menu handler statement / element.
 * This is an extension to standard informix 4gl.
 * 4gl code examples:
 *    BEFORE SHOW MENU
 *       ... 4gl statements...
 *    ON xpto
 *       ... 4gl statements...
 */
menu_handler_element 
  : BEFORE_SHOW_MENU commands 
  | ON identifier commands 
  ;

/**
 * The 4gl MESSAGE statement.
 * 4gl code example:
 *    MESSAGE 
 */
message_cmd 
  : msg_start msg_next 
  ;

/**
 * Optional part of message.
 * This statement contains extensions to informix 4gl.
 * 4gl code examples:
 *    ATTRIBUTES (REVERSE,DIM) WAIT FOR KEY
 *    WAIT FOR KEY
 */
msg_next 
  : 
 	| attributes_def op_msg_wait 
 	| msg_wait 
	| gui_message
  ;

/**
 * A Gui message to be used in the MESSAGE statements.
 * This is an extension to Informix 4gl.
 * 4gl code example:
 */
gui_message
  : gm_caption
  | gm_icon
  | gm_buttons
  | gm_disable_msg
  | gm_returning_msg 
  ;

/**
 * The first part of the MESSAGE statement.
 * 4gl code example:
 *   MESSAGE "XXXX", i
 */
msg_start 
  : KWMESSAGE fgl_expr_list 
	;

/**
 * Optional MESSAGE wait for key
 * This is an extension to informix 4gl.
 * 4gl code example:
 *    WAIT FOR KEY
 */
op_msg_wait 
  : 
	| WAIT_FOR_KEY 
  ;

/**
 * Not optional MESSAGE wait for key
 * This is an extension to informix 4gl.
 * 4gl code example:
 *    WAIT FOR KEY
 */
msg_wait 
  : WAIT_FOR_KEY 
  ;


/* <NEWVARIABLE_RULE> */

/**
 * A variable definition.
 *
 * @todo : Fix the AST assignment
 *
 * 4gl code example:
 *   
 */
variable
  : var_int
      { $$ = AST_STATE->VariableCreate("VAR"); }
  ;

/**
 *
 */
var_int 
  : var 
	| DOLLAR var 
  ;

/**
 * A rule for a variable name (simple or composed) folowed by a DOT.
 * 4gl code examples:
 *   xpto.
 *   a.b.xpto.
 */
varsetidentdot 
  : var DOT
  ;

/**
 * 4gl variable definition.
 * @todo : Understand why the array_r_variable rule is used.
 * 4gl code examples:
 *   xpto.*
 *   xpto.a
 *   xpto[1,2,i]
 *   xpto[1,2,i][1,j]
 *   xpto<"ZZZ">
 */
var
  : varsetidentdot dot_part_var
  | varsetidentdot identifier OPEN_SQUARE num_list CLOSE_SQUARE 
  | varsetidentdot identifier 
	  OPEN_SQUARE num_list CLOSE_SQUARE OPEN_SQUARE num_list CLOSE_SQUARE 
  | array_r_variable
  | identifier
  | assoc_var_read
  ;

/**
 * Associative variable. This is a kind of hash include in aubit 
 * syntax.
 * This is an extension to informix 4gl.
 * 4gl code example:
 *   xpto<"ZZZ">
 */
assoc_var_read  
  : identifier OPEN_SHEV assoc_sub CLOSE_SHEV
  ;

/**
 * Associative variable. This is a kind of hash include in aubit 
 * syntax.
 * This is an extension to informix 4gl.
 * 4gl code example:
 *   xpto<"ZZZ">
 */
assoc_var_write  
  : identifier OPEN_SHEV assoc_sub CLOSE_SHEV
  ;

/**
 * The key for associative variables.
 */
assoc_sub 
  : variable 
	| CHAR_VALUE
  ;

/**
 * The things that can apear after a dot of a variable definition.
 * 4gl code examples:
 *   *
 *   xpto
 */
dot_part_var
  : MULTIPLY 
	| identifier 
  ;

/**
 * An array variable definition.
 * 4gl code example:
 *   xpto[1,2,p]
 *   xpto[6,1][j,k]
 */
array_r_variable
  : identifier arr_subscripts
  ;

/**
 * An array variable definition.
 * 4gl code example:
 *   xpto[1,2,p]
 *   xpto[6,1][j,k]
 * @todo : Understand why do i need the two rules 
 */
array_r_variable_or_ident
  : identifier arr_subscripts
  ;

/**
 * The definition of the subscripts for an array variable.
 * 4gl code examples:
 *   [1,2,p]
 *   [6,1][j,k]
 */
arr_subscripts 
  : OPEN_SQUARE num_list CLOSE_SQUARE 
  | OPEN_SQUARE num_list CLOSE_SQUARE OPEN_SQUARE num_list CLOSE_SQUARE 
  ;

/**
 * A comma separated list of numbers to be used in the array definition
 * or access.
 * 4gl code examples:
 *    1,2
 *    i,2,j
 */
num_list
  : num_list_element
  | num_list COMMA num_list_element
  ;

/**
 * A possible number element to use in the subscripts of an array definition.
 */
num_list_element
  : arr_expr
  ;

/**
 * A single variable to be used on the left hand side of an assignment.
 * @todo : See if it can ocur a merge between obind_let_var, let_variable and
 * let_var
 * 4gl code examples:
 *   i
 *   pXpto.*
 */
let_variable
  : let_var
  ;

/**
 * A single variable to be used on the left hand side of an assignment.
 * @todo : See if it can ocur a merge between obind_let_var, let_variable and
 * let_var
 * 4gl code examples:
 *   i
 *   pXpto.*
 */
let_var
  : let_array_r_variable 
  | let_var DOT let_var_dot 
  | let_var DOT identifier OPEN_SQUARE num_list CLOSE_SQUARE
  | let_var DOT identifier OPEN_SQUARE num_list CLOSE_SQUARE 
	  OPEN_SQUARE num_list CLOSE_SQUARE
  | identifier
  | assoc_var_write
  ;

/**
 * In the left hand side of an assigmnent statement this is the part after a
 * DOT in the receiving variable definition.
 * 4gl code example:
 *   *
 *   xpto
 */
let_var_dot 
  : MULTIPLY 
  | identifier 
  ;

/**
 * Definition of an array variable when it is present in the left hand side
 * of a LET statement.
 * 4gl code examples:
 *   xpto[a,2]
 */
let_array_r_variable
  : identifier arr_subscripts
  ;

/**
 * Optional parameters definition list.
 * This are the variabe names between brackets after the function or 
 * report name.
 */
op_param_var_list
  : 
  | fparam_var_list
	;

/**
 * Not optional comma separated parameters definition list.
 * This are the variabe names between brackets after the function or 
 * report name.
 * 4gl code examples:
 *   xpto
 *   xpto,a,b
 */
fparam_var_list
  :	func_def_var 
	|	fparam_var_list COMMA func_def_var 
  ;

/** 
 * Input binded comma separated variable list.
 * This is used as variable list(s) of the USING in EXECUTE statement, 
 * RETURNING section of CALL statement and DISPLAY statement.
 * 4gl code examples:
 *   a, b, c
 *   xpto
 */
ibind_var_list
  :	ibind_var 
	|	ibind_var_list COMMA ibind_var 
  ;

/**
 * A parameter variable to be used between brackets after the FUNCTION or
 * report name when they are defined.
 * 4gl code example:
 *   a
 *   xpto
 *   firstVar THRU lastVar
 */
func_def_var 
  : identifier 
	| identifier DOT identifier 
  ;

/**
 * The possibilities of variables used as INPUT BINDED.
 * 4gl code examples:
 *   xpto
 *   firstVar THRU lastVar
 *   "XPTO"
 *   2.45
 *   69
 */
ibind_var 
  : variable  
	| variable THRU variable 
	| CHAR_VALUE 
	| real_number 
	| INT_VALUE 
  ;

/**
 * Comma separated list of output variables (where to assign values) to be 
 * used in statements like FECTH (in INTO) or FOREACH.
 * 4gl code examples:
 *   xpto.a, xpto.b
 *   i
 */
obind_var_list
  :	obind_var  
	|	obind_var_list COMMA obind_var 
  ;

/**
 * A definition of output variables. It could represent a list because 
 * the THRU defines a list of variables.
 * It is used in statements like FETCH OR FOREACH (in INTO).
 * 4gl code examples:
 *   xpto.a THRU xpto.b
 *   i
 */
obind_var 
  : variable
	| variable THRU variable 
  ;

/** 
 * The left hand side of an LET statement.
 * The receiving variable(s) in an assignment.
 * 4gl code examples:
 *    i 
 *    pRecord.* 
 *    i, j
 */
obind_var_let_list
  :	obind_let_var  
	|	obind_var_let_list COMMA obind_let_var 
  ;

/**
 * A single variable to be used on the left hand side of an assignment.
 * @todo : See if it can ocur a merge between obind_let_var, let_variable and
 * let_var
 * 4gl code examples:
 *   i
 *   pXpto.*
 */
obind_let_var 
  : let_variable
  ;

/**
 * Usage of array variables. To INPUT ARRAY or DISPLAY ARRAY statements.
 * 4gl code examples:
 *   paVariable
 */
use_arr_var 
  : variable 
  ;

/**
 * Comma separated output variable list used to definition of order in sort 
 * instructions like ORDER EXTERNAL BY in REPORTS.
 * 4gl code examples:
 *   a DESC, a ASC
 */
obind_var_list_ord
  :	obind_var_ord
	| obind_var_list_ord COMMA obind_var_ord
  ;

/**
 * A single output variable to be used in the definition of instructions
 * to order information like ORDER EXTERNAL BY in REPORT(s).
 * 4gl code examples:
 *   a ASC
 */
obind_var_ord 
  : variable optional_asc_desc
	;

/**
 * Optional acending or descending order, to be used things like ORDER.
 * @todo : Understand if this rule could be merged with opt_asc_desc
 */
optional_asc_desc
  : 
	| ASC 
	| DESC
	;

/**
 * @todo : Make sopme comment to this rule.
 * 4gl code example:
 *   xpto[1,2]
 */
array_r_varid
  : identifier OPEN_SQUARE num_list CLOSE_SQUARE
  ;

/* </NEWVARIABLE_RULE> */


/* <OPEN_STATEMENTS> */

/**
 * Open a connection to a database with a named connection.
 * This is an extension to Informix 4gl.
 * 4gl code examples:
 *   OPEN SESSION connName TO DATABASE dbName AS USER sergio PASSWORD xpto
 *   OPEN SESSION connName TO DATABASE dbName AS USER sergio, PASSWORD xpto
 *   OPEN SESSION connName TO DATABASE dbName AS sergio, xpto
 *   OPEN SESSION connName TO DATABASE 
 */
open_session_cmd 
  : OPEN_SESSION conn_id TO_DATABASE var_ident user_details
  ;

/**
 * Opening a database cursor.
 * 4gl code examples:
 *   OPEN crName
 *   OPEN crName USING a,b, xpto.*
 */
open_cursor_cmd 
  : OPEN cursor_name 
	| OPEN cursor_name KW_USING fgl_expr_list 
  ;

/**
 * User details to be used in the OPEN SESSION statement.
 * @todo : Understand if this rule could be merged with con_user_details 
 *   AS USER sergio PASSWORD xpto
 *   AS USER sergio, PASSWORD xpto
 *   AS sergio, xpto
 */
user_details 
  :
	| AS USER char_or_var PASSWORD char_or_var
	| AS USER char_or_var COMMA PASSWORD char_or_var
	| AS char_or_var COMMA char_or_var
  ;

/**
 * Optional disable to be used in GUI open form statement.
 * 4gl code examples:
 *   DISABLE PROGRAM
 *   DISABLE ALL
 */
op_disable 
  : 
	| DISABLE_PROGRAM 
  | DISABLE_ALL 
  ;

/**
 * The statement to connect to a database.
 * 4gl code examples:
 *   CONNECT TO dbName AS connName AS USER sergio USING xpto
 *   CONNECT TO dbName USER sergio USING xpto
 */
connect_cmd 
  : CONNECT_TO var_ident op_connect_as con_user_details 
  ;

/**
 * Optional connection name definition for the connect statement.
 * 4gl code examples:
 *   AS connName 
 */
op_connect_as  
  :
  | AS var_ident 
  ;

/**
 * The optional user identification to connect to a database.
 * 4gl code examples:
 *   AS USER sergio USING xpto
 *   USER sergio USING xpto
 */
con_user_details 
  :
  | AS USER char_or_var KW_USING char_or_var
  | USER char_or_var KW_USING char_or_var
  ;

/* </OPEN_STATEMENTS> */


/* <OPTIONS_STATEMENT> */

/**
 * The configuration of options statement.
 */
options_cmd 
  : OPTIONS opt_options
	;

/**
 * Comma separated list of options.
 */
opt_options 
  : opt_allopts
	| opt_options COMMA opt_allopts
	;

/**
 * Allowed options that could be configurated.
 */
opt_allopts 	
  : COMMENT_LINE line_no 
	| ERROR_LINE line_no 
	| FORM_LINE line_no 
	| MENU_LINE line_no 
	| MSG_LINE line_no 
	| PROMPT_LINE line_no 
	| accept_key 
	| DELETE single_key_val 
	| INSERT single_key_val 
	| NEXT single_key_val 
	| PREVIOUS single_key_val 
	| HELP single_key_val 
	| HELP_FILE file_name
	| LANG_FILE file_name
	| DISPLAY attributes_def
	| INPUT attributes_def 
	| INPUT_WRAP 
	| INPUT_NO_WRAP 
	| FOCONSTR 
	| FOUNCONSTR 
	| SQL_INTERRUPT_ON  
	| SQL_INTERRUPT_OFF 
  ;

/* </OPTIONS_STATEMENT> */



/* <PREPARE_STATEMENT> */

/**
 * Dynamic SQL preparation.
 * 4gl code examples:
 *    PREPARE stXpto FROM sqlStr
 *    USE SESSION connName FOR PREPARE stXpto FROM sqlStr
 */
prepare_cmd 
  : opt_use PREPARE stmt_id FROM var_or_char 
  ;

var_or_char
  : variable 
	| CHAR_VALUE
	;

/**
 * Execution of a prepared statement.
 * 4gl code examples:
 *   EXECUTE stXpto
 *   EXECUTE stXpto USING var, 1, 3
 *   EXECUTE IMEDIATE sqlStr
 */
execute_cmd 
  : EXECUTE stmt_id
  | EXECUTE stmt_id KW_USING ibind_var_list 
	| EXECUTE_IMMEDIATE var_or_char 
  ;

stmt_id 
  : ident_or_var 
	;

/* </PREPARE_STATEMENT> */


/* <PUT_STATEMENT> */

/**
 * The statement to PUT values in an insert cursor.
 * 4gl code examples:
 *   PUT crXPTO FROM a,b,3, NULL
 *   PUT crXPTO 
 */
put_cmd 
  : PUT cursor_name  put_from
  ;

/**
 * Optional variable from the PUT statement reads the values to insert
 * in an insert cursor.
 * @todo : Put the opt in this rule name.
 * 4gl code example:
 *   FROM a,b,3
 */
put_from
  :
  | FROM put_val_list 
  ;

/**
 * A comma separated of values to use as FROM substement to a PUT cursor
 * statement.
 * 4gl code examples:
 *   a,b,NULL,3
 *   1,2, "xpto", 4.0
 *   NULL
 */
put_val_list  
  : put_val 
	| put_val_list COMMA put_val 
  ;

/**
 * A single value to be used in a FROM substatement of a PUT cursor statement.
 * 4gl code examples:
 *   1
 *   "Xpto"
 *   b
 *  NULL
 */
put_val 
  : value_expression_ss 
  | KW_NULL 
  ;

/* </PUT_STATEMENT> */


/* <REPORT_RULE> */

/**
 * Start the execution of a report.
 * 4gl code examples:
 *   START REPORT repXpto to PRINTER
 *   START REPORT repXpto to "rep.out"
 *   START REPORT repXpto to commandInVar
 *   START REPORT repXpto to PIPE "more"
 *   START REPORT repXpto 
 */
start_cmd 
  : START_REPORT rep_name TO_PRINTER
	| START_REPORT rep_name TO rout
	| START_REPORT rep_name TO_PIPE rout
	| START_REPORT rep_name
  ;

/**
 * The possible place to output a report (file name or prompt command).
 * 4gl code examples:
 *   "xpto.out"
 *   "more"
 *   commandVar
 */
rout 
  : CHAR_VALUE 
	| cvariable
	;

/** 
 * The possible name of a report.
 * 4gl code examples:
 *   repXpto
 */
rep_name 
  : identifier
	;

/**
 * Optional values of a report in the OUTPUT TO REPORT statement.
 * I think this is an extension to Informix 4gl.
 * 4gl code examples:
 *   VALUES
 */
op_values 
  : 
	| VALUES 
	;

/**
 * The output to report statement to send values to a report.
 * 4gl code examples:
 *    OUTPUT TO REPORT repXpto(1,"XX",a+b)
 *    OUTPUT TO REPORT repXpto VALUES (1,"XX",a+b)
 *    OUTPUT TO REPORT repXpto()
 */
output_cmd 
  : OUTPUT_TO_REPORT rep_name op_values OPEN_BRACKET 
    op_fgl_expr_list CLOSE_BRACKET
  ;

/**
 * Closing a report execution.
 * 4gl code example:
 *   FINISH REPORT xptoReport
 */
finish_cmd 
  : FINISH_REPORT rep_name
  ;

/**
 * A synonym to FINISH REPORT statement.
 * 4gl code example:
 *   TERMINATE REPORT xptoReport
 */
term_rep_cmd 
  : TERMINATE_REPORT rep_name
  ;

/**
 * The report definition section.
 * 4gl code examples:
 *   
 */
report_section
  : op_output_section op_rep_order_by  
	;

/**
 * The possible FORMAT section(s) of a report definition.
 * 4gl code examples:
 *   FORMAT EVERY ROW
 *   FORMAT
 *     
 */
format_section
  : FORMAT EVERY_ROW 
  | FORMAT format_actions
  ;

/**
 * The list of possible report format sections.
 * 4gl code examples:
 * 
 */
format_actions 
  : format_action 
	| format_actions format_action
	;

/**
 * The possible report format sections.
 * 4gl code examples:
 *   FIRST PAGE HEADER
 *      ... 4gl report statements ...
 *   PAGE TRAILER
 *      ... 4gl report statements ...
 *   PAGE HEADER
 *      ... 4gl report statements ...
 *   ON EVERY ROW
 *      ... 4gl report statements ...
 *   ON LAST ROW
 *      ... 4gl report statements ...
 *   BEFORE GROUP OF a,b
 *      ... 4gl report statements ...
 *   AFTER GROUP OF x,y,z
 *      ... 4gl report statements ...
 */
format_action 
  : FIRST_PAGE_HEADER commands 
	| PAGE_TRAILER commands 
	| PAGE_HEADER commands 
	| ON_EVERY_ROW commands 
	| ON_LAST_ROW commands 
	| BEFGROUP variable  commands 
	| AFTGROUP variable commands 
  ;

/**
 * The specific commands that can only be used inside a format action of a 
 * REPORT.
 * 4gl code examples:
 *    PRINT column 10, "XXX"
 *    PRINT IMAGE column 10, "XXX"
 *    NEED 10 LINES
 *    PAUSE "Hit any key"
 *    SKIP 2 lines
 */
report_cmd 
  : print_command 
	| print_img_command
	| print_file_command
	| need_command
	| pause_command
	| skip_command
  ;

/**
 * The definiton of an amount of lines still needed.
 */
need_command 
  : NEED fgl_expr KWLINE 
  ;

/**
 * Optional lines to be use in the SKIP statement of reports.
 */
op_lines 
  : 
	| KWLINE 
  ;

/**
 * The skip statement of reports.
 * 4gl code examples:
 *   SKIP x LINES
 *   SKIP TO TOP OF PAGE
 *   FONT SIZE 10
 *   SKIP BY x 
 *   SKIP TO 10 
 */
skip_command 
  : SKIP INT_VALUE op_lines 
	| SKIP_TO_TOP 
	| FONT_SIZE nval 
	| SKIP_BY nval 
	| SKIP_TO nval 
  ;

/**
 * Optional report expression list. To be used in the PRINT statement
 * of the REPORTS(s).
 */
opt_rep_expr_list  
  : 
	| xrep_expr_list
  ;

/**
 * Not optional report expression list. Tobe used in the PRINT statement
 * of the REPORT(s).
 */
xrep_expr_list
  : xxrep_expr_list
	| xrep_expr_list xxrep_expr_list
  ;

/**
 * Report expression list to be used in the print statement with the 
 * optional AT place to be printed.
 */
xxrep_expr_list 
  : rep_expr_list opt_print_at 
  ;

/**
 * Optional AT of the expressions to be used in the PRINT statement of 
 * REPORT(s).
 */
opt_print_at 
  : 
	| AT nval 
  ;

/**
 * The PRINT statement to be used in the REPORT(s).
 * 4gl code examples:
 *   PRINT "Xpto ", a, b
 *   PRINT "Xpto ", a, b;
 */
print_command 
  : PRINT opt_rep_expr_list opt_semi 
  ;

/**
 * Print the contents of a file in the report.
 * 4gl code examples:
 *   PRINT FILE fileName
 *   PRINT FILE fileName;
 */
print_file_command 
  : PRINT_FILE char_or_var opt_semi 
  ;

/**
 * Print image statement to be used in the report.
 * This statement is an extensionto Informix 4gl.
 * 4gl code examples:
 *   PRINT IMAGE blobVariableName AS GIF SCALED BY 100
 *   PRINT IMAGE blobVariableName AS PNG SCALED BY 100
 *   PRINT IMAGE blobVariableName JPEG;
 */
print_img_command 
  : PRINT_IMAGE blob_var img_types opt_scaling opt_semi 
  ;

/**
 * Optional scaling of an image.
 * This is an extension to Informix 4gl.
 * 4gl code examples:
 *   SCALED BY i
 *   SCALED BY 100/i, 20
 */
opt_scaling 
  :
	| SCALED_BY fgl_expr_c 
	| SCALED_BY fgl_expr_c COMMA fgl_expr_c 
  ;

/**
 * Image types suported by the reports.
 * This is an extension to informix 4gl.
 * 4gl code examples:
 *   AS TIFF
 *   AS GIF
 *   AS PNG
 *   AS JPEG
 */
img_types 
  :	AS_TIFF 
	| AS_GIF 
	| AS_PNG
	| AS_JPEG
  ;

/**
 * A Blob variable to be used in PRINT IMAGE statement.
 */
blob_var 
  :  variable 
  ;

/**
 * Optional semicolon to be used in the end of a PRINT statement in REPORTS.
 */
opt_semi 
  : 
  | SEMICOLON 
  ;

/**
 * A comma separated list of report expressions that can be used in a REPORT.
 * 4gl code examples:
 *   "XXX"
 *   a clipped, " Hello ", b using "<<<<<"
 */
rep_expr_list 
  : rep_expr 
  | rep_expr_list COMMA rep_expr 
  ;

/**
 * A report expression part.
 * 4gl code examples:
 *  "XXX"
 *  a clipped
 *  b using "####"
 *  str WORDWRAP RIGHT MARGIN 80
 */
rep_expr 
  : fgl_expr op_wordwrap 
  ;

/**
 * The report aggregate functions to be used in the after group / before group
 * sections.
 * 4gl code examples:
 *   SUM(x+1)
 *   SUM(x) WHERE a = 1
 *   COUNT(*) WHERE b = a
 *   PERCENT(*) WHERE b = a
 *   AVERAGE(*) WHERE b = a
 *   AVG(*) WHERE b = a
 *   MIN(*) WHERE b = a
 *   MAX(*) WHERE b = a
 */
rep_agg 
  : SUM OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
  | COUNT_MULTIPLY rep_where
  | COUNT OPEN_BRACKET MULTIPLY CLOSE_BRACKET rep_where
  | PERCENT   OPEN_BRACKET MULTIPLY CLOSE_BRACKET  rep_where
  | AVERAGE   OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
  | AVG       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
  | XMIN       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
  | XMAX       OPEN_BRACKET fgl_expr_c CLOSE_BRACKET  rep_where
  ;

/**
 * The output section of a report.
 * 4gl code examples:
 *   OUTPUT
 *     PAGE LENGTH 72
 *     ... Other output commands ...
 */
op_output_section 
  : 
	| OUTPUT output_commands 
	;

/**
 * A list of possible output commands.
 */
output_commands 
  : output_command 
	| output_commands output_command
	;

/**
 * The valid output commands.
 * 4gl code examples:
 * LEFT MARGIN 5
 * RIGHT MARGIN 80
 * TOP MARGIN 2
 * BOTTOM MARGIN 2
 * PAGE LENGTH 72
 * REPORT TO PRINTER  
 * REPORT TO "xx.out"
 * REPORT TO outVar
 * REPORT TO PIPE "more"
 * TOP OF PAGE "XPTO"
 */
output_command 
  : LEFT_MARGIN INT_VALUE 
  | RIGHT_MARGIN INT_VALUE 
  | TOP_MARGIN INT_VALUE 
  | BOTTOM_MARGIN INT_VALUE 
  | PAGE_LENGTH INT_VALUE 
  | REPORT_TO_PRINTER  
  | REPORT_TO CHAR_VALUE 
  | REPORT_TO variable 
  | REPORT_TO_PIPE CHAR_VALUE 
  | TOP_OF_PAGE CHAR_VALUE 
  ;

/**
 * Output commands to be used in the PDF reports.
 */
pdf_output_commands 
  : pdf_output_command 
	| pdf_output_commands pdf_output_command
	;

/**
 * The possible PDF dimensions.
 * 4gl code examples:
 *   10 POINTS
 *   1.5 INCHES
 *   150 MM
 *   20
 */
nval
  : nval_number POINTS 
	| nval_number INCHES 
	| nval_number MM     
	| nval_number       
  ;

/**
 * Possible numbers to be used in the PDF dimensions.
 */
nval_number
  : real_number 
	| INT_VALUE
  ;

/**
 * The specific PDF OUTPUT section of a REPORT.
 * 4gl code examples:
 *   OUTPUT
 */
pdf_op_output_section 
  : 
	| OUTPUT pdf_output_commands 
	;

/*
 * The possible specific commands that can be used in a PDF report.
 * 4gl code examples:
 *   LEFT MARGIN 10 MM
 *   RIGHT MARGIN 1.5 IN 
 *   TOP MARGIN 50 POINTS
 *   BOTTOM MARGIN 20
 *   PAGE LENGTH 297 MM
 *   PAGE WIDTH 297 MM
 *   FONT NAME "Courier"
 *   FONT SIZE 10 POINTS
 *   PAPER SIZE IS A4  
 *   PAPER SIZE IS LETTER
 *   PAPER SIZE IS LEGAL 
 *   PAPER SIZE IS A5 
 *   PAGE TRAILER SIZE 10
 *   PAGE HEADER SIZE 10 MM
 *   FIRST PAGE HEADER SIZE 10 MM
 *   REPORT TO "out.pdf"
 *   REPORT TO PIPE "acroread"
 *   DEFAULT
 *   ASCII HEIGHT ALL
 *   ASCII WIDTH ALL
 */
pdf_output_command 
  : LEFT_MARGIN nval 
  | RIGHT_MARGIN nval 
  | TOP_MARGIN nval 
  | BOTTOM_MARGIN nval 
  | PAGE_LENGTH nval 
  | PAGE_WIDTH nval 
  | FONT_NAME CHAR_VALUE 
  | FONT_SIZE nval 
  | PAPER_SIZE_IS_A4  
  | PAPER_SIZE_IS_LETTER
  | PAPER_SIZE_IS_LEGAL 
  | PAPER_SIZE_IS_A5 
  | PAPER_SIZE_IS_A4_L 
  | PAPER_SIZE_IS_LETTER_L 
  | PAPER_SIZE_IS_LEGAL_L
  | PAPER_SIZE_IS_A5_L 
  | PAGE_TRAILER_SIZE nval 
  | PAGE_HEADER_SIZE nval 
  | FIRST_PAGE_HEADER_SIZE nval 
  | REPORT_TO CHAR_VALUE 
  | REPORT_TO_PIPE CHAR_VALUE 
  | DEFAULT
  | ASCII_HEIGHT_ALL
  | ASCII_WIDTH_ALL
  ;

/**
 * Optional report ORDER BY section.
 * 4gl code examples:
 *   ORDER BY x, y
 *   ORDER EXTERNAL BY a, b
 */
op_rep_order_by 
  : 
  | ORDER BY obind_var_list_ord
  | ORDER_EXTERNAL_BY obind_var_list_ord 
  ;

/**
 * Optional where to be used in the aggregate functions of the report
 * statement(s).
 * 4gl code examples:
 *   WHERE c = 2 AND b>c
 */ 
rep_where 
  :  
  | WHERE fgl_expr_c 
  ;

/**
 * Pause command to be used in the report statement when it wantrs to stop
 * the processing for each page (as an example).
 * 4gl code examples:
 *   PAUSE "Hit any key"
 *   PAUSE mesgVar
 */ 
pause_command
  : PAUSE pause_msg
  ;

/**
 * The optional pause message.
 * @todo : Change the name of the rule top opt_pause_msg.
 */
pause_msg  
  : 
	| var_or_char 
  ;

/**
 * The PDF report definition.
 * This is an extension to Informix 4gl.
 * 4gl code examples:
 *   REPORT xptoRepName(a,b,c)
 *      DEFINE a,b,c SMALLINT
 *      ... Report definition sections ...
 *   END REPORT
 */
pdf_report_def 
  : PDF_REPORT identifier OPEN_BRACKET op_param_var_list CLOSE_BRACKET 
    define_section  pdf_report_section format_section END_REPORT 
  ;

/**
 * The possible report formating sections.
 */
pdf_report_section
  : pdf_op_output_section op_rep_order_by  
	;

/**
 * A PDF function that can be called inside a PDF report.
 * 4gl code examples:
 *   PDF_FUNCTION("funcName",a,b) 
 *   PDF_FUNCTION("funcName",a,b) RETURNING x,y
 */
pdf_functions 
  : PDF_FUNCTION OPEN_BRACKET CHAR_VALUE COMMA 
   	opt_func_call_args CLOSE_BRACKET opt_return
  ;

/**
 * The optional WORDWRAP subsection of a PRINT statement of a report.
 * 4gl code examples:
 *   WORDWRAP
 *   WORDWRAP RIGHT MARGIN 20
 *   WORDWRAP RIGHT MARGIN x
 */
op_wordwrap
  :
 	| WORDWRAP 
	| WORDWRAP RIGHT_MARGIN INT_VALUE 
	| WORDWRAP RIGHT_MARGIN variable 
  ;

/* </REPORT_RULE> */


/* <RUN_STATEMENT> */

/**
 * Run an external program making a fork and eventually a wait.
 * 4gl code examples:
 *   RUN "fgrep xx *" RETURNING x
 *   RUN "vi" WITHOUT WAITING
 *   RUN "vi" EXIT
 */
run_cmd 
  : RUN fgl_expr 
  | RUN fgl_expr RETURNING variable 
  | RUN fgl_expr WITHOUT_WAITING 
  | RUN fgl_expr WAIT 
  | RUN fgl_expr EXIT 
  ;

/* </RUN_STATEMENT> */

/**
 * The possible DROP commands.
 * @todo : Understamd if this rule is realy needed.
 */ 
drops_cmd 
  : drops_c 
  ;

/**
 * The specific possible DROP commands.
 * 4gl code examples:
 *   DROP TABLE tblName
 *   DROP TABLE owner.tblName
 *   DROP VIEW owner.viewName
 *   DROP INDEX owner.idxName
 */
drops_c 
  : DROP_TABLE  
	| DROP_VIEW  
	| DROP_INDEX  
  ;

/**
 * The possible CREATE statements.
 */
create_cmd 
  : create_c_1 
	| create_c_2_ss 
  ;

/**
 * A group of several possible CREATE statements.
 * 4gl code examples:
 *   CREATE TABLE tblName ( 
 *     ... TBL DEFINITION ...
 *   )
 *   CREATE TEMP TABLE tempTblName ( 
 *     ... TBL DEFINITION ...
 *   )
 *   CREATE TEMP TABLE tempTblName ( 
 *     ... TBL DEFINITION ...
 *   ) WITH NO LOG
 */
create_c_2_ss  
  : CREATE_TABLE table_name OPEN_BRACKET table_element_list_ss CLOSE_BRACKET 
	| CREATE_TEMP_TABLE table_name 
	  OPEN_BRACKET table_element_list_ss CLOSE_BRACKET op_no_log 
  ;

/**
 * Another group of possible CREATE statements (index and database).
 * The possible index types are defined by kwords and the lexer.
 * 4gl code examples:
 *   CREATE DISTINCT INDEX idxName ON tblName (aCol, bCol)
 *   CREATE UNIQUE CLUSTER INDEX idxName ON tblName (aCol, bCol)
 *   CREATE UNIQUE INDEX idxName ON tblName (aCol DESC, bCol)
 *   CREATE CLUSTER INDEX idxName ON tblName (aCol, bCol ASC)
 *   CREATE INDEX idxName ON tblName (aCol, bCol)
 *   CREATE DATABASE dbName
 *   CREATE DATABASE "xpto"
 */
create_c_1  
  : CREATE_IDX table_name ON table_name 
	  OPEN_BRACKET idx_column_list CLOSE_BRACKET 
	| CREATE_DATABASE ident_or_var 
	;

/**
 * Optional WITH NO LOG to be used in temporary table creation.
 * 4gl code example:
 *   WITH NO LOG
 */
op_no_log 
  : 
  | WITH_NO_LOG
  ;

/**
 * A possible name for an index
 */
idx_name
  : CHAR_VALUE DOT identifier 
	| CHAR_VALUE 
	| identifier 
	| identifier COLON identifier 
  ;

/**
 * Comma separated list of columns.
 * 4gl code example:
 *   a,b
 *   a ASC, b DESC
 */
idx_column_list 
  : idx_column 
	| idx_column_list COMMA idx_column 
  ;

/**
 * The definition of an index column.
 */
idx_column 
  : identifier ASC 
  | identifier DESC 
  | identifier
	;

/**
 * Comma separated list of elements in a table.
 * 4gl code examples:
 *   
 */
table_element_list_ss
  : table_element_ss 
	| table_element_list_ss COMMA table_element_ss 
  ;
	
/**
 * One table element definition. The table elements are the columns,
 * constraints, primary or foreign key(s).
 * 4gl code examples:
 *
 */
table_element_ss
  : ct_column_definiton_ss 
	| table_constraint_definition_ss 
	; 

/**
 * The command to tell to the database to update the internal statistics.
 * 4gl code examples:
 *   UPDATE STATISTICS FOR TABLE xptoTable
 *   UPDATE STATISTICS
 */
upd_stats_cmd 
  : UPDATESTATS_T	identifier 
	| UPDATESTATS	
  ;

/**
 * The alter table and ALTER INDEX SQL statement.
 * 4gl code example:
 *   ALTER TABLE xptoTable (
 *      ???? 
 *   )
 *   ALTER INDEX xpto TO CLUSTER
 *   ALTER INDEX xpto TO NOT CLUSTER
 */
alter_cmd 
  : ALTER_TABLE identifier alter_clauses_ss 
  | ALTER_INDEX idx_name TO_CLUSTER 
	| ALTER_INDEX idx_name TO_NOT_CLUSTER 
  ;

/**
 * Comma separated of alter table possibilities.
 * @todo : Understand what ss means.
 */
alter_clauses_ss
  : alter_clause_ss 
	| alter_clauses_ss COMMA alter_clause_ss 
  ;

/**
 * The possible ALTER TABLE subsections.
 */
alter_clause_ss
  : alter_add_clause_ss 
	| alter_drop_clause 
	| alter_modify_clause 
	| alter_add_constraint_clause 
	| alter_drop_contraint_clause 
	| alter_modify_next 
	| alter_lock_mode 
  ;

/**
 * Adition of a new column to a table to be used in the ALTER TABLE statement.
 * 4gl code example:
 *   ADD a CHAR(10) NOT NULL BEFORE xpto
 *   ADD (a CHAR(10) NOT NULL, b SMALLINT) BEFORE xpto
 */
alter_add_clause_ss
  : ADD add_column_clause_ss  
	| ADD OPEN_BRACKET add_column_clauses_ss CLOSE_BRACKET 
  ;

/**
 * A single column adition in a table to be used in the ADD substatement of
 * the ALTER TABLE statement.
 * 4gl code examples:
 *   a CHAR(10)
 *   a CHAR(10) NOT NULL BEFORE xpto
 *   b SMALLINT BEFORE xpto
 */
add_column_clause_ss
  : table_element_ss 
	| table_element_ss BEFORE identifier 
  ;

/** 
 * Comma separated list of columns to be added to a table.
 * This is used in the ALTER TABLE statement.
 * 4gl code examples:
 *   a CHAR(10) NOT NULL, b SMALLINT
 */
add_column_clauses_ss
  : add_column_clause_ss 
	| add_column_clauses_ss COMMA add_column_clause_ss 
  ;

/**
 * Droping a column from a table in the ALTER TABLE statement.
 * 4gl code example:
 *   DROP xpto
 *   DROP (a,b,c)
 */
alter_drop_clause
  : DROP drop_column 
	| DROP OPEN_BRACKET drop_column_list CLOSE_BRACKET 
  ;

/**
 * Comma separated of column names to be droped from a table.
 * 4gl code examples:
 *   xpto
 *   a,b
 */
drop_column_list 
  : drop_column 
	| drop_column_list COMMA drop_column 
  ;

/**
 * A possible column to be droped from a table.
 * 4gl code examples:
 *   xpto
 *   a
 *   b
 */
drop_column 
  : identifier
  ;

/**
 * Modification of a column in the ALTER TABLE statement.
 * 4gl code examples: 
 *   MODIFY 
 */
alter_modify_clause 
  : MODIFY modify_column_clause_ss 
	| MODIFY OPEN_BRACKET modify_column_clauses_ss CLOSE_BRACKET 
  ;

/**
 * Comma separated list of column modifications used in the ALTER TABLE 
 * statement.
 * 4gl code examples:
 */
modify_column_clauses_ss 
  : modify_column_clause_ss 
	| modify_column_clauses_ss COMMA modify_column_clause_ss 
  ;

/**
 * Column modification used in the ALTER TABLE statement.
 * 4gl code example:
 */
modify_column_clause_ss 
  : table_element_ss 
  ;

/**
 * Possible lock modes of a table. Used in the create table statement.
 * 4gl code examples:
 *   LOCK MODE PAGE
 *   LOCK MODE ROW
 */
alter_lock_mode 
  : LOCK_MODE_PAGE 
	| LOCK_MODE_ROW 
  ;

/**
 * Changing the next size in kilobytes of an extent of a table.
 * 4gl code example:
 *   MODIFY NEXT SIZE 100
 */
alter_modify_next 
  : MODIFY_NEXT_SIZE INT_VALUE 
  ;

/**
 * Adition of a constraint to a table, to be used inside an ALTER TABLE 
 * statement.
 * 4gl code examples:
 *   ADD CONSTRAINT NOT NULL
 *   ADD CONSTRAINT REFERENCES xptoTable (aCol)
 *   ADD CONSTRAINT CHECK (aCol = 10)
 *   ADD CONSTRAINT (constName NOT NULL, otherConst REFERENCES xptoTable (aCol))
 *   ADD CONSTRAINT constName REFERENCES xptoTable (aCol)
 *   ADD CONSTRAINT constName CHECK (aCol = 10)
 */
alter_add_constraint_clause
  : ADD_CONSTRAINT column_constraint_ss 
	| ADD_CONSTRAINT OPEN_BRACKET column_constraints_ss CLOSE_BRACKET 
  ;

/**
 * Droping a constraint from a table. Used by ALTER TABLE statement.
 * 4gl code examples:
 *   DROP CONSTRAINT xptoConst
 *   DROP CONSTRAINT (xptoConst,secondConst)
 */
alter_drop_contraint_clause
  : DROP_CONSTRAINT constraint_name
	| DROP_CONSTRAINT OPEN_BRACKET column_constraints_ss CLOSE_BRACKET 
  ;

/**
 * A list of comma separated constraints.
 * 4gl code examples:
 *   xptoConst
 *   xptoConst,secondConst
 */
column_constraints_ss
  : column_constraint_ss 
	| column_constraints_ss COMMA column_constraint_ss 
  ;

/**
 * A constraint name.
 * 4gl code example:
 *   xptoConst
 *   constraint
 */
constraint_name
  : identifier
  ;

/* <SET_STATEMENT> */

/**
 * The possible SET statements.
 * The set session and set cursor statements.
 * 4gl code examples:
 *   SET EXPLAIN ON
 *   SET EXPLAIN OFF
 *   SET LOCK MODE TO WAIT i*2
 *   SET LOCK MODE TO NOT WAIT
 *   SET ISOLATION TO DIRTY READ
 *   SET ISOLATION TO REPEATABLE READ
 *   SET ISOLATION TO CURSOR STABILITY
 *   SET ISOLATION TO COMMITTED READ
 *   SET SESSION TO connectionName
 *   SET SESSION TO connectionName OPTION "xx" TO "yy"
 *   SET CURSOR crName OPTION "xx" TO "yy"
 */
set_cmd 
  : SQLSEON
  | SQLSEOFF
  | SQLSLMW op_fgl_expr 
  | SQLSLMNW 
  | SQLSIDR
  | SQLSIRR
  | SQLSICS
  | SQLSICR
  | SET_SESSION_TO conn_id 
  | SET_SESSION op_conn_id OPTION char_or_var TO char_or_var 
  | SET_CURSOR cursor_name OPTION char_or_var TO char_or_var 
  ;

/**
 * Optional connection identification. Used in the SET SESSION statements.
 * 4gl code examples:
 *   connName
 */
op_conn_id 
  : 
	| conn_id;

/**
 * Optional 4gl expression.
 * 4gl code examples:
 *   i + 1
 *   func() / 2 + i
 */
op_fgl_expr 
  :
  | fgl_expr
	;

/* </SET_STATEMENT> */


/* <SQL1_RULE> */

/**
 * Rollback of a transaction.
 * 4gl code example:
 *   ROLLBACK WORK
 */
rollback_statement
  : ROLLBACK_W 
	;

/**
 * Database insert statement.
 * @todo : Understand what ss means.
 * 4gl code examples:
 *   INSERT INTO xptoTable 
 *   INSERT INTO xptoTable (firstCol,secondCol,b,c) VALUES (a,b,8,"xx")
 *   INSERT INTO xptoTable (x,y,z) SELECT a,b,c FROM otherTable WHERE a > 1
 *   INSERT INTO xptoTable VALUES (a,b,8,"xx")
 *   INSERT INTO xptoTable SELECT a,b,c FROM otherTable WHERE a > 1
 */
insert_statement_ss
  : INSERT_INTO table_name op_insert_column_list ins_2_ss 
  ;

/**
 * The second part of the INSERT statement.
 * 4gl code examples:
 *   VALUES (a,b,8,"xx")
 *   SELECT a,b,c FROM otherTable WHERE a > 1
 */
ins_2_ss 
  : VALUES OPEN_BRACKET insert_value_list_ss CLOSE_BRACKET 
	| query_specification_ss
	;

/**
 * Optional INSERT statement column list.
 * 4gl code example:
 *   (a,b,8,"xx")
 */
op_insert_column_list
  : 
	| OPEN_BRACKET insert_column_list CLOSE_BRACKET
	;

/**
 * Comma separated column list used in the INSERT statement.
 * 4gl code examples:
 *   a
 *   x,y,z,w
 */
insert_column_list
  : column_name
	| insert_column_list COMMA column_name
  ;

/**
 * Comma separated list of values to be inserted in a table with the INSERT 
 * statement.
 * @todo : understand what ss means.
 * 4gl code examples:
 *    a,b,8,"xx",NULL
 */
insert_value_list_ss
  : insert_value_ss 
	| insert_value_list_ss COMMA insert_value_ss 
  ;

/**
 * Single value that can be inserted to be used in the INSERT statement.
 * @todo : understand what ss means.
 * 4gl code example:
 *   NULL
 *   a
 *   "xx"
 *   i+1
 */
insert_value_ss
  : value_expression_ss 
	| KW_NULL 
	;

/**
 * The cursor FETCH statement.
 * 4gl code examples:
 *   FETCH crName 
 *   FETCH crName INTO x,y,z
 *   FETCH FIRST crName
 *   FETCH LAST crName INTO x,y,z
 *   FETCH NEXT crName
 *   FETCH PREVIOUS crName
 *   FETCH PRIOR crName INTO x,y,z
 *   FETCH CURRENT crName
 *   FETCH RELATIVE 10 crName  INTO x,y,z
 *   FETCH ABSOLUTE i + 1 crName 
 */
fetch_statement
  : FETCH fetch_part opt_into_fetch_part
  ;

/**
 * The possible name to declare a CURSOR with the DECLARE statement.
 * 4gl statement examples:
 *   crName
 */
declare_cursor_name  
  : ident_or_var 
  ;

/**
 * The specification about what kind of fetch is made.
 * 4gl code examples:
 *   crName
 *   
 */
fetch_part
  : fetch_place fetch_cursor_name
  | fetch_cursor_name
  ;

/**
 * Optional INTO subcommand of the FETCH statement.
 * 4gl code examples:
 *   INTO a,b,c
 */
opt_into_fetch_part
  :
  | INTO obind_var_list 
  ;

/**
 * Optional INTO subcommand of the FOREACH statement.
 * 4gl code examples:
 *   INTO a,b,c
 */
opt_foreach_into_fetch_part
  :
  | INTO obind_var_list 
  ;

/**
 * The kind of place for where the cursor should be positioned.
 * Used in the FETCH statement.
 * 4gl code examples:
 *   FIRST 
 *   LAST
 *   NEXT
 *   PREVIOUS
 *   PRIOR
 *   CURRENT
 *   RELATIVE 10
 *   ABSOLUTE i + 1
*/
fetch_place 
  : FIRST 
	| LAST
	| NEXT
	| PREVIOUS
	| PRIOR
	| CURRENT
	| RELATIVE fgl_expr
	| ABSOLUTE fgl_expr
  ;

/**
 * Delete a row from a table using a cursor.
 * 4gl code examples:
 *   DELETE FROM tblName WHERE CURRENT OF crName
 */
delete_statement_position
  : DELETE_FROM table_name WHERE_CURRENT_OF fetch_cursor_name
	;

/**
 * Remove a row from a table with the DELETE statement using a WHERE 
 * clause.
 * 4gl code examples:
 *   DELETE FROM tableName 
 *   DELETE FROM tableName WHERE a = 1
 */
delete_statement_search_ss
  : DELETE_FROM table_name op_where_clause_ss
	;

/**
 * The order by clause when reading from a table.
 * To be used in the SELECT statements.
 * 4gl code examples:
 *   ORDER BY a,b,c 
 *   ORDER BY a ASC, b, c DESC
 *   ORDER BY 1 ASC, 2, 4 DESC
 */
order_by_clause
  : ORDER BY sort_specification_list
	;

/**
 * The comma separated list of columns and order of a ORDER BY statement.
 * 4gl code examples:
 *   a ASC, b, 3, 4 ASC
 */
sort_specification_list
  : sort_specification
	| sort_specification_list COMMA sort_specification
	;

/**
 * A column definition and kind of order when used in a ORDER BY statement.
 * 4gl code examples:
 *   a ASC
 *   b
 *   c DESC
 *   1 ASC
 *   2
 */
sort_specification
  : sort_spec op_asc_desc 
  ;

/**
 * The specification of the order column.
 * 4gl code examples:
 *   a
 *   1
 */
sort_spec
  : INT_VALUE 
	| column_name 
	;

/**
 * Optional ascending or descending to use in the ORDER BY of a SELECT statement
 * @todo : Understand if this rule could be merged with optional_asc_desc
 */
op_asc_desc
  : 
	| ASC 
	| DESC
	;

/**
 * Starting a new database transaction.
 * 4gl code example:
 *    BEGIN WORK
 */
begin_statement
  : BEGIN_WORK 
  ;

/**
 * Commiting a transaction to the database.
 * 4gl code example:
 *   COMMIT WORK
 */
commit_statement
  : COMMIT_W 
	;

/**
 * Optional exclusive to be used in the database statement.
 * When used with exclusive this opens the database just for the session.
 */
op_exclusive 
  :
	|	EXCLUSIVE 
  ;

/**
 * The DATABASE command that opens a database.
 * 4gl code examples:
 *   DATABASE xptoDB EXCLUSIVE
 */
set_database_cmd 
  : DATABASE var_ident_qchar op_exclusive
  ;

/**
 * A variable, identifier to be used as name of a database.
 * @todo : Change this to db_name
 */
var_ident_qchar
  : var_ident ATSIGN identifier 
	| var_ident
	| CHAR_VALUE 
  ;

/**
 * The SQL statements of 4gl with optional connection used definition.
 * The USE command is an extension to Informix 4gl.
 * 4gl code examples:
 *    USE SESSION connName FOR INSERT INTO tbl SELECT * FROM tbl3
 *    UPDATE tbl set a=1 WHERE b > 3
 */
sql_cmd 
  : opt_use sql_commands 
  ;

/**
 * The 4gl sql statements without the USE part.
 * This rule breaks the SQL statements in kinds.
 * 4gl code examples:
 */
sql_commands 
  : schema_ss 
	| schema_element_ss 
	| commit_statement 
	| misc_sql 
	| begin_statement 
	| delete_statement_position 
	| delete_statement_search_ss 
	| fetch_statement 
	| insert_statement_ss 
	| rollback_statement 
	| select_statement_full_ss 
	| update_statement_ss 
	;

/**
 * The SQL statement to GRANT privileges on database tables.
 * 4gl code examples:
 *   GRANT ALL PRIVILEGES ON tblName TO sergio, mike WITH GRANT OPTION
 *   GRANT UPDATE ON tblName TO sergio
 *   GRANT SELECT, UPDATE, DELETE, UPDATE(a,b) TO sergio
 */
privilege_definition
  : GRANT privileges ON table_name TO grantee_list op_with_grant_option
	;

/**
 * Optional WITH GRANT OPTION to be used in the GRANT sql statement.
 */
op_with_grant_option
  : 
	| WITH_GRANT_OPTION
	;

/**
 * Kinds of privileges that can be granted to a database table.
 * 4gl code examples:
 *   ALL PRIVILEGES
 *   SELECT, UPDATE, DELETE, UPDATE(a,b)
 */
privileges
  : ALL_PRIVILEGES
	| action_list
	;

/**
 * Comma separated list of actions to do in the GRANT statement to tables
 * of the database.
 * 4gl code examples:
 *    SELECT, UPDATE, DELETE, UPDATE(a,b)
 *    UPDATE
 */
action_list
  : action
	| action_list COMMA action
	;

/**
 * A database action to wich can be given provileges with the GRANT statement.
 * 4gl code examples:
 *   SELECT
 *   INSERT
 *   DELETE
 *   UPDATE (a,b)
 */
action
  : SELECT
	| INSERT
	| DELETE
	| UPDATE op_grant_column_list
	;

/**
 * Optional column list to be used in the UPDATE action to wich permissions
 * can be given with the GRANT statement.
 * 4gl code example:
 *   (a,b)
 */
op_grant_column_list
  : 
	| OPEN_BRACKET grant_column_list CLOSE_BRACKET
	;

/**
 * Comma separated of columns wich can be givem permissions with the GRANT
 * statement.
 * 4gl code examples:
 *   a,b
 */
grant_column_list
  : column_name
	| grant_column_list COMMA column_name
	;

/**
 * The comma separated list of people to wich the permissions are given
 * to make an action in the database with the GRANT statement.
 * 4gl code examples:
 *    andrej, mike, sergio
 *    PUBLIC
 */
grantee_list
  : grantee
	| grantee_list COMMA grantee
	;

/**
 * The specific definition of all possible people to wich permissions can 
 * be granted to make actions in the database.
 * 4gl code examples:
 *   PUBLIC
 *   andrej
 */
grantee
  : PUBLIC
	| authorization_identifier
	;

/**
 * The statement to create a VIEW.
 * 4gl code examples:
 *    CREATE VIEW viewName (colA, colB) AS SELECT acolA,acolB from xptoTable
 *    CREATE VIEW viewName (colA, colB) AS SELECT acolA,acolB from xptoTable 
 *      WITH CHECK OPTION
 */
view_definition_ss
  : CREATE_VIEW table_name op_view_column_list AS query_specification_ss 
	  op_with_check_option 
  ;

/**
 * Optional comma separated view column list to be used in the CREATE VIEW 
 * statement.
 * 4gl code examples:
 *   (colA,colB)
 */
op_view_column_list
  : 
	| OPEN_BRACKET view_column_list CLOSE_BRACKET
	;

/**
 * Comma separarted of name of the columns of a view.
 * 4gl code examples:
 *   colA
 *   colA,colB
 */
view_column_list
  : column_name
	| view_column_list COMMA column_name
	;

/**
 * Optional WITH CHECK OPTION to be used in the CREATE VIEW statement.
 */
op_with_check_option
  : 
	| WITH_CHECK_OPTION
	;

/**
 * A check constraint definition to be used in the CREATE TABLE and
 * ALTER TABLE statements.
 * 4gl code examples:
 *   CHECK ( a = 1 )
 */
check_constraint_definition_ss
  : CHECK OPEN_BRACKET search_condition_ss CLOSE_BRACKET 
	;

/**
 * Foreign key constraint definition to be used in the CREATE TABLE and 
 * ALTER TABLE statements.
 * 4gl code examples:
 *   FOREIGN KEY (colA,colB) REFERENCES referencedTable (rcolA,rcolB)
 */
referential_constraint_definition
  : FOREIGN_KEY OPEN_BRACKET references_columns CLOSE_BRACKET 
	  references_specification
	;

/**
 * The references section of the foreign key definition.
 * 4gl code examples:
 *   REFERENCES refTabName (rcolA,rcolB)
 */
references_specification
  : REFERENCES referenced_table_and_columns
	;

/**
 * The list of the referenced column list to be used in the foreign key 
 * definition.
 * 4gl code examples:
 *   (rcolA,rcolB)
 */
references_columns
  : references_column_list
	;

/**
 * The referenced table and columns of the FOREIGN KEY definition.
 * 4gl code examples:
 *    rtabName (rcolA,rcolB)
 */
referenced_table_and_columns
  : table_name
	| table_name OPEN_BRACKET references_column_list CLOSE_BRACKET
	;

/**
 * Comma separated of columns to be used as referenced columns in 
 * the FOREIGN KEY definition.
 * 4gl code examples:
 *   rcolA,rcolB
 */
references_column_list
  : column_name
	| references_column_list COMMA column_name
	;

/**
 * Unique and primary key statements to be used in the CREATE TABLE and ALTER 
 * TABLE statements.
 * 4gl code examples:
 *   UNIQUE (colA,colB)
 *   PRIMARY KEY (colA,colB)
 */
unique_constraint_definition
  : UNIQUE OPEN_BRACKET unique_column_list CLOSE_BRACKET
	| PRIMARY_KEY OPEN_BRACKET unique_column_list CLOSE_BRACKET
	;

/**
 * Comma separated of columns to be used in the UNIQUE or PRIMARY KEY
 * constraint definition.
 * 4gl code examples:
 *   colAName, colBName
 */
unique_column_list
  : column_name
	| unique_column_list COMMA column_name
	;
	
/**
 * The definition of the possible table level contraints.
 * 4gl code examples:
 *   UNIQUE (colA,colB)
 *   PRIMARY KEY (colA,colB)
 *   CHECK ( a = 1 )
 *   FOREIGN KEY (colA,colB) REFERENCES referencedTable (rcolA,rcolB)
 */
table_constraint_definition_ss
  : unique_constraint_definition 
	| referential_constraint_definition 
	| check_constraint_definition_ss  
	;

/**
 * The default value that is inserted in a table when the INSERT statement
 * does not use the column.
 * This is used by CREATE TABLE and ALTER TABLE statements.
 * 4gl code examples:
 *   DEFAULT 1
 *   DEFAULT NULL
 */
default_clause
  : DEFAULT literal
	| DEFAULT_NULL
	;

/*
column_definiton_ss:
	column_name data_type op_default_clause op_column_constraint_list_ss 
	;
*/

/**
 * A column definition to be used in a CREATE TABLE and ALTER TABLE
 * statements.
 * 4gl code examples:
 *   colAName INTEGER DEFAULT 10 REFERENCES refTable (rColA)
 *   colAName INTEGER DEFAULT 10 PRIMARY KEY REFERENCES refTable (rColA)
 */ 
ct_column_definiton_ss
  : identifier data_type op_default_clause op_column_constraint_list_ss 
  ;

/**
 * Optional default values for a column, to be used in a CREATE TABLE or
 * ALTER TABLE statements.
 * 4gl code example:
 *   DEFAULT 10
 */
op_default_clause
  : 
	| default_clause
  ;

/**
 * Optional column constraint (Check, not null, etc) definition list to 
 * be used in the CREATE TABLE and ALTER TABLE statements.
 * 4gl code examples:
 *   NOT NULL UNIQUE CHECK(aCol=1)
 */
op_column_constraint_list_ss
  : 
  | column_constraint_list_ss 
  ;

/**
 * Not optional column constraint (Check, not null, etc) definition list to 
 * be used in the CREATE TABLE and ALTER TABLE statements.
 * 4gl code examples:
 *   NOT NULL UNIQUE CHECK(aCol=1)
 */
column_constraint_list_ss 
  : column_constraint_ss 
	| column_constraint_list_ss column_constraint_ss 
  ;

/**
 * Possible column level constraint definition to be used in the CREATE 
 * TABLE or ALTER TABLE statements.
 * 4gl code examples:
 *   NOT NULL
 *   NOT NULL UNIQUE
 *   UNIQUE
 *   REFERENCES xptoTable (aCol)
 *   CHECK (aCol = 10)
 */
column_constraint_ss
  : NOT_NULL 
	| NOT_NULL_UNIQUE 
	| UNIQUE 
	| references_specification 
	| CHECK OPEN_BRACKET search_condition_ss CLOSE_BRACKET 
	;

/**
 * The statement to create a group of authorizations.
 * It implements the CREATE SCHEMA statement.
 * 4gl code examples:
 *   CREATE SCHEMA autName
 */
schema_ss
  : CREATE_SCHEMA schema_authorization_clause schema_element_list_ss
	;

/**
 * The identification/name of a schema autorization.
 * @todo : Understand if this rule can be merged with 
 *         schema_autorization_identifier
 * 4gl code example:
 *   schemaAutName
 */
schema_authorization_clause
  : schema_authorization_identifier
	;

/**
 * The identification/name of a schema autorization.
 *   schemaAutName
 */
schema_authorization_identifier
  : authorization_identifier
	;

/**
 * List of subcommands that can be used as part of a schema in the CREATE 
 * SCHEMA statement.
 * 4gl code examples:
 *   CREATE VIEW viewName (colA, colB) GRANT SELECT ON tblName TO sergio
 */
schema_element_list_ss
  : schema_element_ss
	| schema_element_list_ss schema_element_ss 
	;

/**
 * A definition of a schema element to be used in the CREATE SCHEMA statement.
 * 4gl code examples:
 *   CREATE VIEW viewName (colA, colB) AS SELECT acolA,acolB from xptoTable
 *   CREATE VIEW viewName (colA, colB) AS SELECT acolA,acolB from xptoTable 
 *      WITH CHECK OPTION
 *   GRANT ALL PRIVILEGES ON tblName TO sergio, mike WITH GRANT OPTION
 *   GRANT UPDATE ON tblName TO sergio
 *   GRANT SELECT, UPDATE, DELETE, UPDATE(a,b) TO sergio
 */
schema_element_ss
  : view_definition_ss 
	| privilege_definition 
	;

/**
 * Having clause that can be used in the query(s). Used in SELECT statements.
 * 4gl code examples:
 *   HAVING count(*) > 1
 */
having_clause_ss
  : HAVING search_condition_ss 
  ;

/**
 * The group by clause to be used in the SELECT statement.
 * 4gl code examples:
 *    GROUP BY a, b
 *    GROUP BY 1, 3
 */
group_by_clause_ss
  : GROUP_BY column_specification_list_ss 
  ;

/**
 * Comma separated of the columns used in GROUP BY statements.
 * 4gl code examples:
 *   a,b
 *   1,3
 */
column_specification_list_ss
  : column_specification_ss 
	| column_specification_list_ss COMMA column_specification_ss 
  ;

/**
 * Where clause to be used in the SELECT and DELETE statements.
 * 4gl codse examples:
 *   WHERE a=1
 *   WHERE tabName.a = secondTable.b
 */
where_clause_ss
  : WHERE search_condition_ss 
  ;

/**
 * The from clause to be used in the SELECT statement.
 * 4gl code examples:
 *   FROM tabName
 *   FROM tabName, secondTable
 *   FROM tabName, OUTER secondTable
 *   FROM tabName, OUTER (secondTable,thirdTable)
 */
from_clause
  : FROM table_reference_list 
  ;

/**
 * Comma separated of columns to be used in the FROM clause of the SELECT
 * statement.
 * 4gl code examples:
 *   tabName
 *   tabName, secondTable
 *   tabName, OUTER secondTable
 *   tabName, OUTER (secondTable,thirdTable)
 */
table_reference_list
  : table_reference
	| table_reference_list COMMA table_reference 
	;

/**
 * A table to be used in the FROM clause of the SELECT statement.
 * 4gl code examples:
 *   tableName
 *   OUTER tableName
 *   OUTER (tableName, secondTable)
 */
table_reference
  : tname 
	| OUTER tname 
	| OUTER OPEN_BRACKET tname_list  CLOSE_BRACKET 
	;

/**
 * The name of a table to be used in the FROM clause of the SELECT statement.
 * 4gl code examples:
 *   tableName
 *   owner.tableName
 *   owner.tableName tableAlias
 */
tname
  : table_name
	| table_name correlation_name 
  ;

/**
 * A comma separated list of table names.
 * 4gl code examples:
 *   tableName, secondTableName
 *   tableName, OUTER tableName
 *   tableName OUTER (tableName, secondTable)
 */
tname_list 
  : table_reference 
	| tname_list COMMA table_reference 
  ;

/**
 * The second part of a SELECT statement.
 * Define the rules for the FROM, WHERE, GROUP BY and HAVING clauses.
 * 4gl code examples:
 *   FROM tableName WHERE a=1 GROUP BY x GAVING count(*) > 1
 */
table_expression_ss
  : from_clause  op_where_clause_ss op_group_by_clause_ss op_having_clause_ss 
	;

/**
 * Optional where clause to be used in the SELECT statements.
 */
op_where_clause_ss
  : /* empty */ 
	| where_clause_ss 
	;

/**
 * Optional group by clause to be used in the SELECT statement.
 */ 
op_group_by_clause_ss
  : /*empty */ 
	| group_by_clause_ss 
	;

/**
 * Optional HAVING clause to be used in the SELECT statement.
 */ 
op_having_clause_ss
  : 
	| having_clause_ss 
	;

/**
 * Search conditions to be used in the WHERE or HAVING clauses of the 
 * SELECT, UPDATE or DELETE statements.
 * 4gl code examples:
 *   a = 1
 *   a = 1 OR tabName.x = secondTable.b
 */ 
search_condition_ss
  : boolean_term_ss 
	| search_condition_ss KW_OR boolean_term_ss 
	;

/**
 * A Boolean term used in the search conditions of WHERE or HAVING clauses.
 * The boolean term is some expression that is alone or between two OR(s) 
 * (the logical sum) either in the left hand side or the right hand side.
 * 4gl code examples:
 *   b=2 AND x=3
 */
boolean_term_ss
  : boolean_factor_ss 
	| boolean_term_ss KW_AND boolean_factor_ss 
	;

/**
 * A boolean factor used in the search conditions of WHERE or HAVING clauses.
 * The boolean factor is one or two expressions that are alone or between
 * two AND(s) (the logical multiplication) either in the left hand side or
 * the right hand side.
 * 4gl code examples:
 *   c = 4 
 *   NOT a = 2
 *   (x+5)*2 = 23
 *   (y+2)(c+5)
 */
boolean_factor_ss
  : boolean_primary_ss 
	| NOT boolean_primary_ss 
  ;

/**
 * A boolean primary is an primary expression to be used in search conditions
 * of WHERE or HAVING clause.
 * A boolean primary is recursive because between brackets we can have 
 * again a search condition.
 * 4gl code examples:
 *   a = 5
 *   x+y
 *   (v+b)*35
 */
boolean_primary_ss
  : predicate_ss 
	| OPEN_BRACKET search_condition_ss CLOSE_BRACKET 
  ;

/**
 * The exists predicate to be used in the boolean primary expression.
 * The exists predicate is true when the value checked exists in the subquery 
 * that it references.
 * 4gl code example:
 *   EXISTS (SELECT a FROM tableName)
 *   NOT EXISTS (select b FROM tableName WHERE p=1)
 */
exists_predicate_ss
  : EXISTS subquery_ss 		
	| NOT_EXISTS subquery_ss 	
	;

/**
 * Optional escape caracter used in LIKE or MATCHES expressions as the 
 * regular expression character.
 * 4gl code examples:
 *   ESCAPE "%"
 */
op_escape
  :
	| ESCAPE escape_character
	;

/**
 * A specific pattern definition used in the LIKE or MATCHES expressions.
 * 4gl code examples:
 *   "%andrej%"
 *   "sergio*"
 */
pattern_ss
  : value_expression_initial_ss 
/*
	  value_specification 
	| var_ident_ibind_ss 
*/
	;

/**
 * The definition of the specific escape character to be used in the ESCAPE
 * section of the LIKE or MATCHES expression.
 * 4gl code examples:
 *   "%"
 *   "&"
 */
escape_character
  : value_specification
	;

/**
 * The in predicate to be used as boolean primary expression of the
 * search conditions of WHERE or HAVING clauses.
 * The IN predicate check if the lvalue is in a list. The list could be 
 * a concrete list an interval or a subquery.
 * 4gl code examples:
 *   varName IN ("Y","N")
 *   varName IN (1..3)
 *   varName IN (select x from tableName)
 *   varName IN (select x from tableName where tableName.x = 1)
 */
in_predicate_ss
  : value_expression_ss IN OPEN_BRACKET in_value_list CLOSE_BRACKET 
	| value_expression_ss IN subquery_ss 
	| value_expression_ss NOT_IN OPEN_BRACKET in_value_list CLOSE_BRACKET 
	| value_expression_ss NOT_IN subquery_ss 
  ;

/**
 * A comma separated list of a concrete values to be used on a IN predicate.
 * 4gl code examples:
 *    "Y","N"
 */
in_value_list
  : in_value_specification
	| in_value_list COMMA in_value_specification
	;

/**
 * The specification of a value to be used on an IN predicate.
 * 4gl code examples:
 *   "Y"
 *   "N"
 */
in_value_specification 
  : var_ident_ibind_ss 
	| literal
  ;

/**
 * Optional NOT to be used in a comparison of an expression.
 */
op_not
  : 
	| NOT
	;

/**
 * A comparison predicate to be used in an expression.
 * 4gl code examples:
 *   a IS NULL
 *   a IS NOT NULL
 *   a+b = x
 *   a+b > 2
 *   a+b >= 2
 *   a+b < 2
 *   a+b <> 2
 *   a+b != 2
 *   x between 10 AND 20
 *   name LIKE '%andrej%'
 *   name MATCHES '%sergio%'
 *   name NOT LIKE '%mike%'
 *   name MATCHES '*mike*' ESCAPE "*"
 *   name LIKE '%mike%' ESCPAPE "%"
 */
comparison_predicate_ss
  : value_expression_ss op_not IS_NULL 
	| value_expression_ss op_not IS_NOT_NULL 
	| value_expression_ss comp_op value_expression_ss 
	| value_expression_ss op_not BETWEEN value_expression_ss KW_AND 
	  value_expression_ss 
	| value_expression_ss LIKE pattern_ss op_escape 
	| value_expression_ss NOT_LIKE pattern_ss op_escape 
	| value_expression_ss ILIKE pattern_ss op_escape 
	| value_expression_ss NOT_ILIKE pattern_ss op_escape 
	| value_expression_ss op_not MATCHES pattern_ss op_escape 
	;

/**
 * Comparison operator.
 * 4gl code example:
 *   =
 *   !=
 *   <
 *   <=
 *   >
 *   >=
 *   MATCHES
 *   LIKE
 *   ~
 */
comp_op
  : EQUAL
	| NOT_EQUAL 
	| LESS_THAN
	| GREATER_THAN 
  | NOT_MATCHES
  //| NOT_LIKE
  | MATCHES
	| TILDE
	//| LIKE {strcpy($<str>$,"likE");}
	| LESS_THAN_EQ 
	| GREATER_THAN_EQ 
	;

/**
 * The possible predicates to be used in the expressions of WHERE or HAVING 
 * clause.
 * 4gl code examples:
 *   a = b
 *   EXISTS (SELECT a FROM tableName)
 */
predicate_ss
  : comparison_predicate_ss 
	| in_predicate_ss 
	//| quantified_predicate_ss 
	| exists_predicate_ss 
	;

/**
 * Optional ALL / DISTINCT / UNIQUE to be used in the SELECT list.
 */
op_all
  : 
	| ALL 
	| DISTINCT 
	| UNIQUE 
	;

/**
 * The data type definition of the CREATE TABLE and(or) ALTER TABLE.
 * 4gl code examples:
 *   CHAR(10)
 *   INTEGER
 *   DECIMAL(10,2)
 */
data_type
  : char_string_type
	| exact_numeric_type
	| approx_numeric_type
	;

/**
 * The character data types to use in the CREATE TABLE and(or) ALTER TABLE
 * statements.
 * 4gl code examples:
 *   CHAR
 *   CHAR(10)
 *   CHARACTER(20)
 */
char_string_type
  : CHAR
	| CHAR OPEN_BRACKET length CLOSE_BRACKET
	;

/**
 * A numeric datatype to use in the CREATE TABLE statement.
 * 4gl code examples:
 *   NUMERIC(10,2)
 *   SERIAL
 *   DECIMAL(16,3)
 */
exact_numeric_type
  : NUMERIC OPEN_BRACKET precision op_scale CLOSE_BRACKET
	| SERIAL  
	| DECIMAL OPEN_BRACKET precision op_scale CLOSE_BRACKET
	| MONEY OPEN_BRACKET precision op_scale CLOSE_BRACKET
  | DATE
	| INTEGER
	| SMALLINT
	| DATETIME s_curr TO e_curr
	| DATETIME 
	| INTERVAL s_curr TO e_curr
	| INTERVAL
	| INTERVAL s_curr OPEN_BRACKET INT_VALUE CLOSE_BRACKET TO e_curr
	| TEXT
	| BYTE
	| VARCHAR
	| VARCHAR OPEN_BRACKET INT_VALUE CLOSE_BRACKET
	| VARCHAR OPEN_BRACKET INT_VALUE COMMA INT_VALUE CLOSE_BRACKET
	;

/**
 * Optional scale for the numeric data types. 
 * The scale is the number of decimals in the number.
 * 4gl code examples:
 *   ,10
 */
op_scale
  : 
	| COMMA scale 
	;

/**
 * Numeric data types
 * 4gl code examples:
 *   FLOAT(16)
 *   REAL
 *   SMALLFLOAT
 *   FLOAT
 *   DOUBLE PRECISION
 */
approx_numeric_type
  : FLOAT OPEN_BRACKET precision CLOSE_BRACKET
	| REAL
	| SMALLFLOAT
	| FLOAT
	| DOUBLE_PRECISION
	;

/**
 * The length of a character data type.
 * 4gl code examples:
 *   10
 */
length
  : INT_VALUE
	;

/**
 * The possible precision of the Float, decimal, real, numeric, money.
 * The precision is the number of digits of the number including the
 * decimal part.
 * 4gl code examples:
 *   10
 */
precision
  : INT_VALUE
	;

/*
 * Optional scale for the numeric data types. 
 * The scale is the number of decimals in the number.
 * 4gl code examples:
 *   10
 */
scale
  : INT_VALUE
	;

/**
 * The name of a database table.
 * 4gl code examples:
 *    "sergio".tableName
 *    "tableName"
 *    tableName
 *    dbName:tableName
 */
table_name
  : CHAR_VALUE DOT identifier 
	| CHAR_VALUE 
	| identifier 
	| identifier COLON identifier 
	;

/**
 * An identifier to be used as the GRANTEE in the GRANT statement.
 * 4gl code examples:
 *   sergio
 */ 
authorization_identifier
  : identifier
	;

/**
 * Optional array subscripts to be used in column names.
 * 4gl code examples:
 *   [1]
 *   [2,4]
 */
col_arr 
  : 
	| OPEN_SQUARE INT_VALUE CLOSE_SQUARE 
	| OPEN_SQUARE INT_VALUE COMMA INT_VALUE CLOSE_SQUARE 
  ;

/**
 * A possible name of a column to be used in all SQL statements.
 * 4gl code examples
 *   colname
 *   @colname
 *   @colname[1]
 *   @colname[1,4]
 *   tableName.colName
 */
column_name 
  : column_name_specific 
	| ATSIGN column_name_specific 
  ;

/**
 * The specification of a column name without @ to be used in all SQL statements
 * 4gl code examples:
 *   colName[1]
 *   colName[1,5]
 *   tableName.columnName
 *   tableName.columnName[2,5]
 *   tableName.*
 */
column_name_specific
  : identifier col_arr
	| table_name DOT identifier col_arr
	| table_name  DOT MULTIPLY
	;

/**
 * A name that can be correlated with a table name to be used as a table alias
 * in the FROM clause of SELECT statements.
 */
correlation_name
  : identifier
	;

/**
 * A specific constant value to be used in all kinds of expressions.
 * 4gl code examples:
 *   "Xpto"
 *   123
 *   3.45
 */
literal
  : CHAR_VALUE 
	| NUMERIC
	| real_number
	| INT_VALUE
  | curr_clause
	;

/**
 * A Current value part.
 * 4gl code examples:
 *   CURRENT 
 */
curr_v_clause 
  : CURRENT  cur_v_part 
  ;

/**
 * The current date and(or) time constant.
 * 4gl code examples:
 *   CURRENT
 */
curr_clause 
  : CURRENT  cur_part 
  ;

/**
 * Optional current precision and scale definition.
 * 4gl code examples:
 *   YEAR TO DAY
 *   YEAR TO FRACTION(3)
 *   DAY TO DAY
 */
cur_part
  : 
  | s_curr TO e_curr
  ;

/**
 * Optional current precision and scale definition.
 * 4gl code examples:
 *   YEAR TO DAY
 *   DAY TO MINUTE
 *   HOUR TO SECOND
 */
cur_v_part
  : 
  | s_curr_v TO s_curr_v
  ;

/**
 * The possible scales (start) to use in the current literals.
 * 4gl code examples:
 *   YEAR 
 *   MONTH
 *   FRACTION(3)
 */
s_curr_v
  : YEAR
	| MONTH
	| DAY
	| HOUR
	| MINUTE
	| SECOND
	| FRACTION
  | FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
  ;

/**
 * The possible precision (end) to be used in the CURRENT literals.
 * 4gl code examples:
 *   YEAR 
 *   MONTH
 *   FRACTION(3)
 */
e_curr_v
  : YEAR 
	| MONTH
	| DAY
	| HOUR
	| MINUTE 
	| SECOND
  | FRACTION
  | FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET 
  ;

/**
 * The possible scales (start) to use in the current literals.
 * 4gl code examples:
 *   YEAR 
 *   MONTH
 *   FRACTION(3)
 */
s_curr
  : YEAR 
	| MONTH 
	| DAY 
	| HOUR 
	| MINUTE 
	| SECOND 
	| FRACTION
	;

/**
 * The possible precision (end) to be used in the CURRENT literals.
 * 4gl code examples:
 *   YEAR 
 *   MONTH
 *   FRACTION(3)
 */
e_curr
  : YEAR 
	| MONTH 
	| DAY 
	| HOUR 
	| MINUTE 
	| SECOND 
	| FRACTION
  | FRACTION OPEN_BRACKET INT_VALUE CLOSE_BRACKET
	;

/**
 * Flushing of an insert cursor into the database.
 * 4gl code examples:
 *    FLUSH crXpto
 *    USE SESSION connName FLUSH crXpto
 */
flush_cmd 
  : opt_use FLUSH fetch_cursor_name  
  ;

/**
 * The statement to declare cursors.
 * The usage of diferent connections is an extension to Informix 4gl.
 * 4gl code examples:
 *   DECLARE crName CURSOR FOR SELECT * from table
 *   USE SESSION connName FOR DECLARE crName CURSOR FOR SELECT * from table
 *   DECLARE crName SCROLL CURSOR FOR SELECT * from table
 *   DECLARE crName CURSOR WITH HOLD FOR SELECT * from table
 *   DECLARE crName SCROLL CURSOR WITH HOLD FOR SELECT * from table
 */
declare_cmd 
  : opt_use DECLARE declare_cursor_name CURSOR FOR cursor_specification_all_ss 
	| opt_use DECLARE declare_cursor_name CURSOR WITH_HOLD FOR 
	  cursor_specification_sel_ss 
  | opt_use DECLARE declare_cursor_name SCROLL_CURSOR_FOR 
	  cursor_specification_sel_ss 
  | opt_use DECLARE declare_cursor_name SCROLL_CURSOR WITH_HOLD FOR 
	  cursor_specification_sel_ss 
  ;
 
/**
 * Optional declaration of a cursor as FOR UPDATE.
 * 4gl code examples:
 *   FOR UPDATE
 *   FOR UPDATE OF fisrtCol,secondCol
 */
curs_forupdate 
  : 
	| FOR_UPDATE 
	| FOR_UPDATE_OF cur_update_list 
	;

/**
 * a comma separated list of columns that can be updated in a cursor for
 * update.
 * 4gl code examples:
 *   colName
 *   firstCol,secondCol
 */
cur_update_list 
  : colident 
	| cur_update_list COMMA colident 
  ;

/**
 * A column name identifier to be used in a CURSOR FOR UPDATE list.
 * 4gl code examples:
 *   colName
 *   tableName.colName
 *   "sergio".tableName.secondCol
 */ 
colident
  : identifier
	| identifier DOT identifier 
	| CHAR_VALUE DOT identifier DOT identifier 
  ;
	
/**
 * The statement specification of the cursor (SELECT or INSERT).
 * 4gl code examples:
 *   SELECT * FROM tableName
 *   INSERT INTO tableName (firstCol,secondCol)
 */
cursor_specification_all_ss
  : cursor_specification_sel_ss 
	| insert_statement_ss 
  ;

/**
 * A cursor statement specification when it is with a SELECT or prepared 
 * statement.
 * 4gl code examples:
 *   statementName
 *   SELECT * FROM tableName
 */
cursor_specification_sel_ss
  : stmt_id 
	| select_statement_ss  
  ;

/**
 * A complete SELECT statement.
 * 4gl code examples:
 *   SELECT * FROM tableName
 *   SELECT * FROM tableName WHERE table.column = 10
 *   SELECT * FROM tableName WHERE column IN (SELECT column FROM otherTable)
 */
select_statement_full_ss 
  : select_statement_ss 
  ;

/**
 * A complete SELECT statement.
 * 4gl code examples:
 *   SELECT * FROM tableName
 *   SELECT * FROM tableName WHERE table.column = 10
 *   SELECT * FROM tableName WHERE column IN (SELECT column FROM otherTable)
 *   SELECT * FROM tableName WHERE table.column = 10 ORDER BY 1
 *   SELECT colA,count(*) FROM tableName GROUP BY 1 HAVING count(*) > 1
 */
select_statement_ss
  : SELECT op_ad select_list_ss opt_into_sel_ss table_expression_ss
    sel_p2_ss curs_forupdate 
  ;

/**
 * A SELECT statement to be used as a subquery with IN and EXISTS clauses.
 * 4gl code examples:
 *   SELECT UNIQUE colA FROM tableName xpto
 */ 
in_select_statement_ss
  : SELECT op_ad select_list_ss table_expression_ss sel_p2_ss 
  ;

/**
 * A SELECT statement to be used in the RHS of a UNION of query(s).
 * It could be a select statment defined in a character variable or constant.
 */
select_statement2_ss
  : select_statement21_ss 
	| char_or_var 
	;

/**
 * An explicit SELECT statement to be used in the RHS of a UNION of query(s).
 */
select_statement21_ss
  : SELECT  op_ad select_list_ss opt_into_sel_ss table_expression_ss sel_p2_ss 
  ;

/**
 * Several optional clauses to be used as RHS of a SELECT statement.
 * 4gl code examples:
 *   UNION SELECT * from TABLE NAME
 *   ORDER BY 1, a
 *   INTO TEMP aTempTable
 *   ORDER BY 1, a INTO TEMP aTempTable
 */
sel_p2_ss 
  : 
  | UNION op_all select_statement2_ss 
  | order_by_clause  
  | INTO_TEMP tmp_tabname op_no_log 
  | order_by_clause INTO_TEMP tmp_tabname op_no_log 
  ;

/**
 * A possible name for a temporary table.
 * 4gl code example:
 *    aTempTable
 */
tmp_tabname
  : identifier
	;

/**
 * Optional INTO clause to be used in a SELECT statement.
 * The INTO defines the variables to where the selected values are copied.
 * 4gl code examples:
 *   INTO varName, seconVar
 *   INTO recordName.*
 */
opt_into_sel_ss 
  :  
	| INTO  obind_var_list 
  ;

/**
 * A query (SELECT) statement to be used in the INSERT and(or) CREATE VIEW
 * statements.
 * 
 */
query_specification_ss
  : SELECT op_ad select_list_ss table_expression_ss 
  ;

/**
 * A subsquery (SELECT statement) to be used in all statements that this
 * could apear (UPDATE, DELETE, SELECT).
 * 4gl code example:
 *   (SELECT tableName.column FROM tableName)
 *   (SELECT tableName.column FROM tableName WHERE columnName = "a")
 */
subquery_ss
  : OPEN_BRACKET SELECT op_ad select_list_ss table_expression_ss CLOSE_BRACKET 
  ;

/**
 * Optional ALL/DISTINCT/UNIQUE clause to be used in all SELECT STATEMENTS.
 * 4gl code examples:
 *   ALL
 *   DISTINCT
 *   UNIQUE
 */
op_ad 
  : 
	| ALL 
	| DISTINCT 
	| UNIQUE 
	;

/**
 * A comma separated list of item that could be selected. Used in SELECT
 * statement.
 * 4gl code examples:
 *   tableName.columnName
 *   columnName, 1, "xpto", variableName
 *   columnName, 1, "xpto" | "Xpta", variableName
 */
select_list_ss
  : value_expression_pls_ss  
	| select_list_ss COMMA value_expression_pls_ss 
  ;

/**
 * A possible expression that can be used in each item from the select 
 * list. 
 * This specific rule is used to define the alias name for the item.
 * 4gl code examples:
 *   columnName aliasName
 *   "strConstant" constant
 */
value_expression_pls_ss 
  : value_expression_ss 
	| value_expression_ss  identifier 
  ;

/**
 * A possible expression that can be used in each item from the select 
 * list.
 * @todo : Understand if this rule is necessary.
 * 4gl code examples:
 *   columnName 
 *   "xpto" | "Xpta"
 *   columnName + 1
 */
column_specification_ss 
  : value_expression_ss 
  ;

/**
 * A possible expression that can be used in each item from the select 
 * list. It is used also in UPDATE statement.
 * This specific rule is necessary to define the +/- signals before the
 * expression.
 * 4gl code examples:
 *   - columnName
 *   + columnName
 */
value_expression_ss
  : value_expression_initial_ss 
	| MINUS value_expression_initial_ss 
	| PLUS value_expression_initial_ss 
  ;

/**
 * A division of the expressions that can be used in each item of the
 * select list for the SELECT statement.
 * This rule defines the possible usage of the variables o the columns 
 * using the atsign to diferentiate between column names and (or) variables.
 * 4gl code examples:
 *   varName
 *   (select x from tblName)
 *   @colName
 *   @tblName.colName
 */
value_expression_initial_ss 
  : value_expression_complex_ss 
	| var_ident_ibind_ss 	
	| subquery_ss 
	| ATSIGN identifier 
	| ATSIGN identifier DOT identifier 
  ;

/**
 * A more complex possibility of expressions that can be used in each 
 * item of the select list.
 * 4gl code examples:
 *   columnName / otherColumn
 *   dtTimeColumn + 1 UNITS MONTH
 *   columnName * 3
 *   varName + 2 / columnName
 *   varName - columnName 
 *   "xpto"
 *   TRUE
 *   FALSE
 *   USER
 *   *
 *   count(*)
 */
value_expression_complex_ss 
  : value_expression_initial_ss DIVIDE value_expression_ss
	| value_expression_initial_ss units_qual
	| value_expression_initial_ss MULTIPLY value_expression_ss
	| value_expression_initial_ss PLUS value_expression_ss
	| value_expression_initial_ss MINUS value_expression_ss
	| literal 
	| KW_TRUE 
	| KW_FALSE 
	| USER 
	| MULTIPLY 
	| COUNT_MULTIPLY 
 	| AVG OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
	| XMAX OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
	| XMIN OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
	| SUM OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
	| COUNT OPEN_BRACKET op_all value_expression_ss CLOSE_BRACKET
	| identifier OPEN_BRACKET value_expr_list_ss CLOSE_BRACKET
	| DATE OPEN_BRACKET value_expr_list_ss CLOSE_BRACKET
	| OPEN_BRACKET value_expression_ss CLOSE_BRACKET 
	| EXTEND OPEN_BRACKET extend_qual_ss CLOSE_BRACKET
  ;

/**
 * A comma separated list of items to be used in items of the select list 
 * and(or) update list or values.
 * 4gl code examples:
 *   
 */
value_expr_list_ss 
  : value_expression_ss 
	| value_expr_list_ss COMMA value_expression_ss 
  ;

/**
 * The specification of a possible value used in the MATCHES, LIKE or IN
 * pattern(s).
 * 4gl code values:
 *   "%andrej"
 *   varName
 */
value_specification
  : literal
	;

/**
 * Unload data from the database into a text file.
 * 4gl code examples:
 *    UNLOAD TO "xpto.u" DELIMITER "," SELECT * FROM xpto
 *    USE SESSION connName UNLOAD TO "xpto.u" SELECT * FROM xpto
 */
unload_cmd 
  : opt_use UNLOAD_TO ufile opt_delim select_statement2_ss 
  ;

/**
 * Load data from a text file into a database table.
 * 4gl code examples:
 *    LOAD FROM "xpto.u" DELIMITER "," INSERT INTO xpto
 *    LOAD FROM "xpto.u" DELIMITER "," INSERT INTO xpto(a,b,c)
 *    USE SESSION connName LOAD FROM "xpto.u" DELIMITER "," INSERT INTO xpto
 */
load_cmd 
  : opt_use LOAD_FROM ufile opt_delim INSERT_INTO table_name opt_col_list 
  | opt_use LOAD_FROM ufile opt_delim variable 
  ;

/**
 * Optional delimiter to use in the load and unload statements.
 * 4gl code examples:
 *    DELIMITER "|"
 *    DELIMITER varContainingDelimiter
 */
opt_delim 
  : 
	| DELIMITER char_or_var 
  ;

/**
 * A character variable or string literal.
 * 4gl code examples:
 *   "xpto"
 *   varName
 */
char_or_var 
  : CHAR_VALUE 
	| variable 
  ;

/**
 * An optional between brackets comma separated column list.
 * 4gl code examples:
 *   ( firstColumn, secondColumn )
 */
opt_col_list
  : 
	| OPEN_BRACKET col_list CLOSE_BRACKET 

/**
 * Not optional comma separated column list.
 * 4gl code examples:
 *   ( firstColumn, secondColumn )
 */
col_list 
  : simple_column_name 
	| col_list COMMA simple_column_name 
  ;

/**
 * A simple column name.
 * 4gl code examples:
 *   firstColumn
 */
simple_column_name 
  : identifier 
  ;

/**
 * A possible file name to be used in UNLOAD and LOAD statements.
 * 4gl code examples:
 *   "fileName"
 *   varContainingFileName
 */
ufile 
  : CHAR_VALUE 
	| variable
	;

/**
 * Optional use of a specific Session to SQL actions.
 * This is an extension to Informix 4gl.
 * 4gl code example:
 *    USE SESSION connName FOR
 */
opt_use 
  : 
	| USE_SESSION conn_id FOR 
  ;

/**
 * A connection identifier to be used in the statements where the connections
 * are named (USE SESSION, CLOSE SESSION, OPEN SESSION)
 * 4gl code examples:
 *   connName
 */
conn_id 
  : ident_or_var
	;

/**
 * Rule to classify some SQL statements.
 * 4gl code examples:
 *   LOCK TABLE xpto IN EXCLUSIVE MODE
 *   UNLOCK TABLE xpto
 *   RENAME TABLE xtpo TO xptaTable
 */
misc_sql 
  : lock_stmt
	| unlock_stmt
	| rename_stmt
  ;

/**
 * A statement to rename a name of a table in the database.
 * 4gl code examples:
 *   RENAME TABLE xpto TO xptaTable
 *   RENAME TABLE "sergio".xpto TO xptaTable
 */
rename_stmt 
  : RENTAB rentabname TO rentabname 
	| RENCOL rentabname DOT rencolname TO rencolname 
  ;

/**
 * Name of a table that can be renamed.
 * 4gl code example:
 *   xpto
 */
rentabname 
  : identifier
	;

/**
 * A possible new name for a table. This is used in the RENAME TABLE statement.
 * 4gl code examples:
 *   xptaTable
 */ 
rencolname 
  : identifier
	;

/**
 * Releases a lock to a database table.
 * 4gl code example:
 *   UNLOCK TABLE xtpoTable
 */
unlock_stmt
  : UNLOCK_TABLE tab_name 
  ;

/**
 * Lock a database table.
 * 4gl code examples:
 *    LOCK TABLE xptoTable IN SHARE MODE
 *    LOCK TABLE xptoTable IN EXCLUSIVE MODE
 */
lock_stmt 
  : LOCK_TABLE tab_name share_or_exclusive  
  ;

/**
 * Share or exclusive lock mode definition to lock statement.
 * 4gl code example:
 *   IN SHARE MODE
 *   IN EXCLUSIVE MODE
 */
share_or_exclusive 
  : INSHARE
	| INEXCLUSIVE
  ;

/**
 * The units qualifyer to be used in expressions with datetime or interval
 * data types.
 * 4gl code examples:
 *   UNITS YEAR
 *   UNITS MONTH
 *   UNITS DAY
 *   UNITS HOUR
 *   UNITS MINUTE
 *   UNITS SECOND
 */
units_qual
  : UNITS_YEAR 
	| UNITS_MONTH
	| UNITS_DAY
	| UNITS_HOUR
	| UNITS_MINUTE
	| UNITS_SECOND
  ;

/**
 * The extend clause qualifier of SQL statement.
 * 4gl code examples:
 *   CURRENT , YEAR TO MINUTE
 *   varName THRU otherVarName YEAR TO DAY
 *   varName, otherVarName HOUR TO FRACTION(3)
 *   CURRENT YEAR TO MINUTE
 */
extend_qual_ss
  : CURRENT COMMA s_curr TO e_curr 
  | var_ident_ibind_ss COMMA s_curr TO e_curr 
  | CURRENT s_curr TO e_curr 
  ;

/* </SQL1_RULE> */

/**
 * An embedded SQL block.
 * This is an extension to Informix 4gl.
 * In a SQL block the statements are not parsed. This way we can use specific
 * statements of a concrete database (ex: postgresql) with a diferent SQL
 * dialect.
 * The only thing validated are the reserved words.
 * 4gl code examples:
 *   SQL
 *      SELECT * FROM xptoTable
 *   END SQL
 */
sql_block_cmd 
  : SQL sql_block END_SQL 
  ;

/**
 * The internal part of a SQL embededd block.
 */
sql_block 
  : sql_block_entry 
	| sql_block sql_block_entry  
  ;

/**
 * A piece of SQL code of an embedded SQL block.
 * This rule accepts any kind of reserved SQL token without validating
 * the syntax of the SQL statement.
 */
sql_block_entry
  : SQL_TEXT 
	| in_var 
	| sql_block_into 
  | ABSOLUTE
  | ACCEPT
  | ACL_BUILTIN
  | ADD
  | AFTER
  | ALL
  | ALTER
  | ANSI
  | ANY
  | APPEND
  | ARRAY
  | AS
  | ASC
  | ASCENDING
  | ASCII
  | ASSOCIATE
  | AT
  | ATSIGN
  | ATTRIBUTES
  | AUDIT
  | AUTHORIZATION
  | AVERAGE
  | AVG
  | BEFORE
  | BETWEEN
  | BLACK
  | BLINK
  | BLUE
  | BOLD
  | BORDER
  | BOTTOM
  | BUFFERED
  | BUTTONS
  | BY
  | BYTE
  | CAPTION
  | CASE
  | CCODE
  | CHAR
  | CHECK
  | CLEAR
  | CLIPPED
  | CLOSE
  | CLOSE_BRACKET
  | CLOSE_SQUARE
  | CODE_C
  | COLON
  | COLUMN
  | COLUMNS
  | COMMA
  | COMMAND
  | COMMENT
  | COMMIT
  | CONNECT
  | CONST
  | CONSTANT
  | CONSTRUCT
  | COUNT
  | CREATE
  | CURRENT
  | CURSOR
  | CYAN
  | DATABASE
  | DATE
  | DATETIME
  | DAY
  | DBA
  | DBYNAME
  | DEC
  | DECIMAL
  | DECLARE
  | DEFAULT
  | DEFAULTS
  | DEFER
  | DEFINE
  | DELETE
  | DELIMITER
  | DESC
  | DESCENDING
  | DIM
  | DISABLE
  | DISPLAY
  | DISTINCT
  | DIVIDE
  | DOT
  | DOUBLE
  | DOWNSHIFT
  | DROP
  | ELIF
  | ELSE
  | ENABLE
  | ENDCODE
  | EQUAL
  | ERROR
  | ESCAPE
  | EVERY
  | EXCLUSIVE
  | EXEC
  | EXECUTE
  | EXISTS
  | EXIT
  | EXTEND
  | EXTENT
  | EXTERNAL
  | FCALL
  | FETCH
  | FIELDTOWIDGET
  | FIELD_TOUCHED
  | FINISH
  | FIRST
  | FKEY
  | FLOAT
  | FLUSH
  | FOR
  | FOREACH
  | FOREIGN
  | FORMAT
  | FORMHANDLER
  | INPUT
  | FORM_IS_COMPILED
  | FOUND
  | FRACTION
  | FREE
  | FROM
  | FUNCTION
  | GET_FLDBUF
  | GLOBALS
  | GO
  | GOTO
  | GRANT
  | GREATER_THAN
  | GREEN
  | GROUP
  | HAVING
  | HEADER
  | HELP
  | HIDE
  | HOUR
  | ICON
  | ID_TO_INT
  | IF
  | IN
  | INCHES
  | INDEX
  | INFIELD
  | INITIALIZE
  | INPUT
  | INSERT
  | INTEGER
  | INTERRUPT
  | INTERVAL
  | INT_TO_ID
  | INVISIBLE
  | KEY
  | KWDOWN
  | KWFIELD
  | KWFORM
  | KWLINE
  | KWMESSAGE
  | KWNO
  | KWUP
  | KWWINDOW
  | KW_AND
  | KW_FALSE
  | KW_IS
  | KW_NULL
  | KW_OR
  | KW_TRUE
  | KW_USING
  | LAST
  | LEFT
  | LESS_THAN
  | LET
  | LIKE
  | LOCAL
  | LOCATE
  | LOG
  | MAGENTA
  | MAIN
  | MARGIN
  | MATCHES
  | MAXCOUNT
  | MEMORY
  | MENU
  | MENUHANDLER
  | MESSAGEBOX
  | MINUS
  | MINUTE
  | MM
  | MOD
  | MODE
  | MODIFY
  | MONEY
  | MONTH
  | MULTIPLY
  | NEED
  | NEXT
  | NEXTPAGE
  | NOCR
  | NORMAL
  | NOT
  | NUMERIC
  | OF
  | OFF
  | ON
  | OPEN
  | OPEN_BRACKET
  | OPEN_SQUARE
  | OPTION
  | OPTIONS
  | ORDER
  | OTHERWISE
  | OUTER
  | OUTPUT
  | PAD
  | PASSWORD
  | PAUSE
  | PDF_FUNCTION
  | PDF_REPORT
  | PERCENT
  | PLUS
  | POINTS
  | PRECISION
  | PREPARE
  | PREPEND
  | PREVIOUS
  | PREVPAGE
  | PRINT
  | PRIOR
  | PROCEDURE
  | PROGRAM
  | PROMPT
  | PUBLIC
  | PUT
  | QUIT
  | READONLY
  | REAL
  | RECORD
  | RECOVER
  | RED
  | REFERENCES
  | REGISTER
  | RELATIVE
  | REPORT
  | RESOURCE
  | RETURN
  | RETURNING
  | REVERSE
  | REVOKE
  | RIGHT
  | ROLLFORWARD
  | ROW
  | ROWS
  | RUN
  | SCHEMA
  | SCROLL
  | SECOND
  | SECTION
  | SELECT
  | SEMICOLON
  | SERIAL
  | SESSION
  | SHARED
  | SHOW
  | SINGLE_KEY
  | SIZE
  | SKIP
  | SLEEP
  | SMALLFLOAT
  | SMALLINT
  | SOME
  | SPACES
  | SQL
  | SQLSUCCESS
  | STATUSBOX
  | STEP
  | STOP
  | SUM
  | SYNONYM
  | TAB
  | TEMP
  | TEMPLATE
  | TEXT
  | THEN
  | THRU
  | TIMEOUT
  | TO
  | TOP
  | TRAILER
  | TUPLE
  | UNCONSTRAINED
  | UNDERLINE
  | UNION
  | UNIQUE
  | UNLOCK
  | UPDATE
  | UPSHIFT
  | USE
  | USER
  | VALIDATE
  | VALUES
  | VARCHAR
  | VARIABLE
  | WAIT
  | WAITING
  | WHEN
  | WHERE
  | WHILE
  | WHITE
  | WITH
  | WORDWRAP
  | WORK
  | XMAX
  | XMIN
  | XSET
  | YEAR
  | YELLOW
	;

/**
 * The definition of a 4gl variable usage inside an embedded SQL block.
 * 4gl code example:
 *   $varName
 */
in_var  
  : DOLLAR var_ident_ibind_ss 
  ;

/**
 * An optional INTO to be used in the embedded SQL blocks.
 * 4gl code examples:
 *   INTO a
 *   INTO aRecord.*
 */
sql_block_into
  : INTO obind_var_list 
  ;




/** @todo : See if this is to be used and if so uncomment it.
op_template :
	| template_m
  ;

template_m :
	TEMPLATE 
		template_list
	END_TEMPLATE {list_print_all();}
  ;

template_list : template_item
	| template_list template_item
  ;

template_item 
  : identifier EQUAL template_value 
	| identifier OPEN_SQUARE CLOSE_SQUARE EQUAL template_value 
	|	DATABASE EQUAL template_single_value 
  ;

template_single_value 
  : PROMPT CHAR_VALUE  
	| PROMPT_MANY CHAR_VALUE  
	|	PROMPT INT_VALUE COMMA CHAR_VALUE  
	|	CHAR_VALUE 
	|	INT_VALUE 
  ;

template_value 
  : COLUMNS identifier  
	| identifier
	|	template_single_value
	| template_value PLUS template_value 
	|	template_value MINUS template_value 
	|	template_value IN template_value 
	| OPEN_BRACKET template_value CLOSE_BRACKET 
	|	APPEND template_single_value TO template_value  
	|	PREPEND template_single_value TO template_value  
	| USE template_value WITH template_single_value ON template_value  
  ;

*/

/*
=====================================================================
                        Source: update.rule
=====================================================================
*/


/* <UPDATE_RULE> */

/**
 * The SQL update statement to change data in the database.
 * 4gl code examples:
 *   UPDATE table SET ??? WHERE  table.a = 1
 */
update_statement_ss
  : UPDATE table_name set_clause_list_ss  where_upd_ss 
  ;

/**
 * The where current definition to make cursor for update changes.
 * 4gl code examples:
 *   WHERE CURRENT OF cursorName
 *   WHERE a = 1
 */
where_upd_ss 
  : 
	| WHERE_CURRENT_OF fetch_cursor_name 
	| WHERE search_condition_ss 
	;

/**
 * Set clause of a SQL Update Statement.
 * 4gl code examples:
 *   SET (columnOne,columnTwo) = (valOne,1)
 *   SET * = ( valOne,1,"xpto")
 *   SET tabName.* = ( valOne,1,"xpto")
 *   SET (colOne,columnTwo)
 *   SET * = colOne,colTwo
 *   SET tabName.* = colOne,colTwo
 */
set_clause_list_ss
  : XSET_OPEN_BRACKET upd_col_list CLOSE_BRACKET EQUAL 
	  OPEN_BRACKET upd_val_list_ss CLOSE_BRACKET 
  | XSET_MULTIPLY_EQUAL_OPEN_BRACKET upd_val_list_ss CLOSE_BRACKET 
  | XSET_ident_DOT_MULTIPLY_EQUAL_OPEN_BRACKET upd_val_list_ss CLOSE_BRACKET 
  | XSET upd_columns_ss  
  | XSET_MULTIPLY_EQUAL upd_val_list_ss  
  | XSET_ident_DOT_MULTIPLY_EQUAL upd_val_list_ss  
  ;

/**
 * Comma separated list of values that can be changed with an UPDATE statement.
 * 4gl code examples:
 *   columnOne,columnTwo
 */
upd_columns_ss 
  : col_1_ss  
	| upd_columns_ss COMMA col_1_ss 
  ;

/**
 * A possible column name to be used in the UPDATE SQL statement.
 * 4gl code example:
 *   columnOne
 *   define
 */
upd_column_name 
  : column_name  
	;

/**
 * A SET assignment in a single column.
 * 4gl code examples:
 *   colName = 1
 *   colName = "xpto"
 */
col_1_ss 
  : upd_column_name EQUAL upd_val_ss 
  ;

/**
 * A comma separated list of columns to be updated.
 * This rule is to use inside brackets.
 */
upd_col_list  
  : upd_column_name	
	| upd_col_list COMMA upd_column_name 
  ;

/**
 * A comma separated list of values to update columns.
 * To be used in the UPDATE statement.
 * 4gl code examples:
 *   valOne, 1
 *   valTwo, "xpto", NULL
 *   varName + 1 / 2
 */
upd_val_list_ss  
  : upd_val_ss 
	| upd_val_list_ss COMMA upd_val_ss 
  ;

/**
 * A possible value to use in the update statements.
 * 4gl code examples:
 *   NULL
 *   varName + 1 / 2
 */ 
upd_val_ss 
  : KW_NULL 
	| upd_value_expression_ss  
  ;

/**
 * An update value expression to use in an update statement.
 * 4gl code examples:
 *   varName
 *   1
 *   -10
 *   +14.6
 */
upd_value_expression_ss
  : upd_value_expression_initial_ss 
  | MINUS upd_value_expression_initial_ss 
  | PLUS upd_value_expression_initial_ss 
  ;

/**
 * The definition of a value to use as update value in the UPDATE statement.
 * 4gl code examples:
 *   1
 *   (select count(*) from xpto)
 *   @columnName
 *   @tableName.columnName
 *   "xpto"
 *   TRUE
 *   FALSE
 *   USER
 *   COUNT(*)
 */
upd_value_expression_initial_ss 
  : upd_var_ident_ibind_ss    
  | subquery_ss 
  | ATSIGN identifier 
  | ATSIGN identifier DOT identifier 
  | upd_value_expression_complex_ss 
  | literal
  | KW_TRUE
  | KW_FALSE
  | USER
  | COUNT_MULTIPLY
  ;

/**
 * A more complex expression to be used as a value to change column contents
 * with the UPDATE statement.
 * @todo : More examples
 * 4gl code examples:
 *   10 / 2
 *   10:10 + 1 UNITS HOUR
 */
upd_value_expression_complex_ss 
  : upd_value_expression_initial_ss DIVIDE upd_value_expression_ss 
  | upd_value_expression_initial_ss units_qual 
  | upd_value_expression_initial_ss MULTIPLY upd_value_expression_ss 
  | upd_value_expression_initial_ss PLUS upd_value_expression_ss 
  | upd_value_expression_initial_ss MINUS upd_value_expression_ss 
  | AVG OPEN_BRACKET op_all upd_value_expression_ss CLOSE_BRACKET 
  | XMAX OPEN_BRACKET op_all upd_value_expression_ss CLOSE_BRACKET 
  | XMIN OPEN_BRACKET op_all upd_value_expression_ss CLOSE_BRACKET 
  | SUM OPEN_BRACKET op_all upd_value_expression_ss CLOSE_BRACKET 
  | COUNT OPEN_BRACKET op_all upd_value_expression_ss CLOSE_BRACKET 
  | identifier OPEN_BRACKET upd_value_expr_list_ss CLOSE_BRACKET 
  | DATE OPEN_BRACKET upd_value_expr_list_ss CLOSE_BRACKET 
  | OPEN_BRACKET upd_value_expression_ss CLOSE_BRACKET 
  | EXTEND OPEN_BRACKET extend_qual_ss CLOSE_BRACKET 
  ;


upd_var_ident_ibind_ss
  : var_ident_ibind_ss 
  ;

/**
 * A comma separated list of expressions to be used in the complex expressions
 * of the update statement.
 * 4gl code examples:
 *   10 * 3 / varName, 5/varName
 */
upd_value_expr_list_ss 
  : upd_value_expression_ss 
  | upd_value_expr_list_ss COMMA upd_value_expression_ss 
  ;

/* </UPDATE_RULE> */


/* <VAR_RULE> */

/**
 * @todo : Comment this
 */
var_ident 
  :  var2  
  ;

/**
 * 4gl code examples:
 *   $
 */
var2 
  : DOLLAR var3 
	| var3
  ;

/**
 * @todo : Comment this
 * 4gl code examples:
 *    xpto
 *    xpto[10].*
 *    xpto[10].recordField
 *    "sergio".xpto[10].recordField
 */
var3
  : array_r_variable_or_ident 
	| identifier
	| var3  DOT aft_dot 
	| CHAR_VALUE DOT var3 DOT aft_dot 
  ;

/**
 * After dot part in the definition of variable names.
 * 4gl code examples:
 *   *
 *   anIdentifier
 *   function
 */
aft_dot 
  : MULTIPLY
	| array_r_varid
	| identifier
  ;

/**
 * The definition of a variable to be used as a input bind in SQL statements.
 * 4gl code examples:
 *   varName
 *   firstVar THRU secondVar
 */
var_ident_ibind_ss 
  : var2  
  | var2 THRU var2 
  ;

/* </VAR_RULE> */


/* <WHILE_STATEMENT> */

/**
 * The while loop.
 * 4gl code example:
 *    WHILE i = 1 
 *      .. 4gl statements...
 *    END WHILE
 */
while_cmd 
  : WHILE fgl_expr commands END_WHILE 
  ;

/* </WHILE_STATEMENT> */


/* <WINDOW_STATEMENTS> */

/**
 * Optional fields to be cleared with the CLEAR statement.
 * 4gl code examples:
 *   FIELD (firstFormField,secondFormField)
 *   FIELDS (firstFormField,secondFormField)
 */
op_clr_fields 
  : 
	| KWFIELD fld_list
  ;

/**
 * Optional TO DEFAULTS clause to be used in the CLEAR statement.
 * The TO DEFAULTS reads the values from the tables used with upscol and
 * use that values to initialize the screen fields.
 */
op_to_defs 
  : 
  | TO_DEFAULTS 
  ;

/**
 * All possible CLEAR commands in 4gl.
 * 4gl code examples:
 *   CLEAR SCREEN
 *   CLEAR WINDOW wXpto
 *   CLEAR FORM
 *   CLEAR FORM TO DEFAULTS
 *   CLEAR FORM fNAme (fieldOne,fieldTwo) TO DEFAULTS
 *   CLEAR (fieldOne,fieldTwo) TO DEFAULTS
 */
clear_cmd	
  :	CLEARSCR 
	|	CLEARWIN win_name 
	|	CLEARSTAT win_name 
	|	CLEARFORM 
	|	CLEARFORMTODEFAULTS 
	|	CLEAR_X_FORM form_name op_clr_fields  op_to_defs 
	|	CLEAR fld_list op_to_defs 
  ;

/**
 * A comma separated list of fieldsa to be cleared.
 * 4gl code examples:
 *   fieldOne
 *   fieldOne, fieldTwo
 */
fld_list	
  :	field_name  
	|	fld_list COMMA field_name 
  ;

/**
 * The statement to make current (the visible window) a specific window.
 * 4gl code examples:
 *   CURRENT WINDOW IS SCREEN
 *   CURRENT WINDOW IS wName
 */
current_win_cmd	
  :	CWIS 
	|	CURRENT_WINDOW_IS win_name 
  ;

/**
 * In the OPEN WINDOW statement defines if its with fixed length or with
 * a form.
 * 4gl code example:
 *   2 ROWS, 5 COLUMNS
 *   FORM "XX"
 */
window_type	
  :	fgl_expr ROWS COMMA fgl_expr COLUMNS 
	|	KWFORM fgl_expr 
  ;

/**
 * The statement to show a window or a menu.
 * 4gl code examples:
 *   SHOW WINDOW wName
 *   SHOW MENU mName USING mHandler FROM "mFileName"
 */
show_cmd 
  : SHOW_WINDOW win_name 
  | SHOW_MENU menu_name KW_USING menu_handler op_mnfile 
  ;

/**
 * The file from where a menu is opened / showed.
 * This is an extension to Informix 4gl.
 * 4gl code examples:
 *   FROM varNameWhereFileNameIs
 *   FROM "xxxx"
 */
op_mnfile 
  : 
  | FROM fgl_expr
  ;

/**
 * The name of a menu to be used in the SHOW MENU clause of the menu command.
 * 4gl code example:
 *   "menuName"
 */
menu_name
  : identifier
  ;

/**
 * A possible name for a menu handler.
 * A menu handler is a kind of function that is an extension to Informix 4gl.
 * 4gl code examples:
 *   menuName
 */
menu_handler
  : identifier
	;

/**
 * The command to hide a window.
 * 4gl code examples:
 *   HIDE WINDOW wName
 */
hide_cmd 
  : HIDE_WINDOW win_name 
  ;

/**
 * A statement to move a window in the screen.
 * 4gl code examples:
 *   MOVE WINDOW wName TO x+3/2, y-4
 *   MOVE WINDOW wName BY x+3/2, y-4
 */ 
move_cmd 
  : MOVE_WINDOW win_name TO fgl_expr COMMA fgl_expr 
  |  MOVE_WINDOW win_name BY fgl_expr COMMA fgl_expr
  ;

/* </WINDOW_STATEMENTS> */


 /* ================ from make_enable ================= */

/**
 * This rule is one of the most important of the parser.
 * It is used to dynamicaly create a table of states (from y.output) where 
 * the lexer should return a reserved word as identifiers.
 *
 * @return A pointer to a Token object
 */
NAMED 
  : NAMED_GEN
  { $$ = $1; }
  { /*printf("NAMED %s in source line \n",$1->getText(),$1->getStartLine());*/ }
  ;

 /* ================ end make_enable ================= */

/* ========================== from mkyacc =========================== */

/**
 * An optional 4gl statements. The purpose of this rule is only to be
 * optional.
 * 4gl code examples:
 *   LET x = 1
 *   WHILE x > 10   LET y = 30   END WHILE
 *   IF xpto < t  DISPLAY "Hello"  END IF
 */
commands 
  : 
  | command1 
	;

/**
 * 4gl statements optionaly folowed by a semicolon.
 */
all_commands 
  : commands_all opt_semi 
	;

/**
 * An entry point to all 4gl statements.
 * 4gl code examples:
 *   LET x = 1
 *   WHILE x > 10   LET y = 30   END WHILE
 *   IF xpto < t  DISPLAY "Hello"  END IF
 */
command1	
  : all_commands  
  | command1  all_commands 
  ;

/**
 * @todo : Undesrtand if this rule is necessary.
 */
commands_all 
  : commands_all1 
	;

/**
 * A rule where it separates between all 4gl statement by kind.
 */
commands_all1 	
  : pause_screen_on_cmd
	|	pause_screen_off_cmd
	|	start_rpc_cmd
	|	stop_rpc_cmd
	|	call_cmd
	|	case_cmd
	|	close_cmd
	|	code_cmd
	|	comment_cmd
	|	construct_cmd
	|	defer_cmd
	|	display_b_n_cmd
	|	display_cmd
	|	display_form_cmd
	|	display_array_cmd
	|	error_cmd
	|	exit_cmd
	|	continue_cmd
	|	exit_prog_cmd
	|	for_cmd
	|	foreach_cmd
	|	free_cmd
	|	goto_cmd
	|	check_menu_cmd
	|	uncheck_menu_cmd
	|	disable_cmd
	|	enable_cmd
	|	msg_box_cmd
	|	if_cmd
	|	init_cmd
	|	next_field_cmd
	|	next_form_cmd
	|	input_cmd
	|	scroll_cmd
	|	label_cmd
	|	let_cmd
	|	linked_cmd
	|	linked_del_cmd
	|	linked_upd_cmd
	|	locate_cmd
	|	at_term_cmd
	|	return_cmd
	|	menu_cmd
	|	next_option_cmd
	|	show_option_cmd
	|	hide_option_cmd
	|	message_cmd
	|	open_window_cmd
	|	open_statusbox_cmd
	|	open_form_cmd 
	  { $$ = $1; }
	|	open_session_cmd
	|	open_cursor_cmd
	|	connect_cmd
	|	options_cmd
	|	prepare_cmd
	|	execute_cmd
	|	prompt_cmd
	|	gui_prompt_cmd
	|	put_cmd
	|	start_cmd
	|	output_cmd
	|	finish_cmd
	|	term_rep_cmd
	|	report_cmd
	|	run_cmd
	|	drops_cmd
	|	create_cmd
	|	upd_stats_cmd
	|	alter_cmd
	|	set_cmd
	|	sleep_cmd
	|	set_database_cmd
	|	sql_cmd
	|	flush_cmd
	|	declare_cmd
	|	unload_cmd
	|	load_cmd
	|	sql_block_cmd
	|	whenever_cmd
	|	while_cmd
	|	clear_cmd
	|	current_win_cmd
	|	show_cmd
	|	hide_cmd
	|	move_cmd
	|	validate_cmd
	|	allocate_array_cmd
	|	deallocate_array_cmd
	|	resize_array_cmd
	;

/* ========================== end from mkyacc =========================== */

;
%%


/* ===================== EOF (fgl.y) =========================== */


