#
# This script is the core of the mechanism that permits the 
# aubit4gl compiler to work with reserved words as identifiers.
#
# It reads the y.output generated by bison to check what are the states
# where the lexer should return identifier even if it founds a reserved 
# word.
#
# Generate two files:
#   mk_states_1.h - Contains an array of shorts (token_groups) with variables to
#                   the specific token_groups that are defined in mk_states.c
#   mk_states.c - Contains the definition of severall array of shorts each one 
#                 with a list of tokens and with a function called 
#                 allow_token_state(yystate,yytoken)
#
# Aparentemente tem a ver com um TOKEN named
#
# In the y.output reads.
#

mawk '
BEGIN  {
	cnt=0
  print "#include \"FglAst.h\""
  print "#include \"../fgl.tab.h\""
	print "const short *token_groups[]={" > "generated/mk_states_1.h";
}

/^state/ {
	if (state!="") {
		val=""
		for (a in arr) {
			if (substr(a,1,1)=="$") continue;
			if (val) val=val "," a 
			else val=a
		}

		#print "val = " val
		if (val=="") val="-1"
		if (arr_vals[val]!="") this_val=arr_vals[val]
		else {
			this_val=cnt;
			arr_vals[val]=cnt++;
		}
		print "    token_group_" this_val "," > "generated/mk_states_1.h"
	}
	state=$2
	delete arr
}

(state=="") {next}

/\. / {
	for (a=1;a<=NF;a++) {

		if ($a==".") {
			rest=""
			a++;
			x=substr($a,1,1)

			if (x>="A"&&x<="Z") {
				x=$a
				if (x=="NAMED") x="NAMED_GEN";
				arr[x]=1
			}

			if (x=="[") {
				for (b=a;b<=NF;b++) {
					if (b==a) {
						x=substr($b,2)
					} else {
						x=$b
					}
					gsub(",","",x)
					gsub("]","",x)
					if (x=="NAMED") x="NAMED_GEN";
					arr[x]=1
				}
				
			}
		}
	}
}

END {
   print "   0};" > "generated/mk_states_1.h"
   print " "

   for (a in arr_vals) {
      if (printed[arr_vals[a]]!="") continue; printed[arr_vals[a]]="YES"
      #print "const short *token_group_" arr_vals[a] ";" > "mk_states.h"
      if (a=="") a="-1"
      print "const short token_group_" arr_vals[a] "[]={" a ",-1};"
      print " "
   }
   print "#include \"mk_states_1.h\""
	print "int allow_token_state(int yystate,int yytoken) {"
	print "int a;"
        print "  if (yytoken<0) return 1;"
	print "  for (a=0;token_groups[yystate][a]>=0;a++) {";
	print "   if (token_groups[yystate][a]==yytoken) return 1;"
	print "  }"
	print "  return 0;"
	print "}"

}' < $1 > generated/mk_states.c
touch generated/mk_states.h
