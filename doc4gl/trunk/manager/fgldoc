#!/usr/bin/perl

#  =========================================================================
#  Interface gráfico interactivo para documentação de aplicações em Informix
#  4gl.
#
#  Está desenvolvido em Perl / tk e apresenta-se de forma bastante mais 
#  profissional.
#
#  @todo Cancel(s) não funcionam correctamente
#  @todo Gestão de sinais (quit)
#  @todo I18N
#  @todo Testes unitários
#  @todo Gestão do repositório
#
#  $Id: fgldoc,v 1.1.1.1 2001-12-26 07:32:21 afalout Exp $
#  $Author: afalout $
#
#  =========================================================================

use Getopt::Long;
use POSIX;
use Tk;
use Tk::FileSelect;
use Tk::Dialog;
use Tk::Label;
use Tk::HList;

use FglDocumenter::Utils;
use FglDocumenter::Log;
use FglDocumenter::Error;
use FglDocumenter::ExportCSV;
use FglDocumenter::fgldocrep;
use FglDocumenter::FormDb;
use FglDocumenter::FormExport4gl;
use FglDocumenter::ExportFgl;
use FglDocumenter::DatabaseConnection;
use FglDocumenter::P4glRepository;
use FglDocumenter::Options;
use FglDocumenter::FormImportCSV;
use FglDocumenter::ImportCSV;
use FglDocumenter::FormP4gl;
use FglDocumenter::ImportFgl;
use FglDocumenter::ExportHtml;
use FglDocumenter::Test;

#  =========================================================================
#  Iniciualizações diversas para já fixas mas que poderão ser armazenadas
#  em ficheiros de configuração em XML
#  =========================================================================
sub initFglDoc
{
	$user = $ENV{USER};
	$log = new FglDocumenter::Log("/tmp/fgldoc_$user.log");
	$log->openLogFile();
	$err = new FglDocumenter::Error();
	$err->setLog($log);
	FglDocumenter::Options::loadOptions();
	$FglDocumenter::Options::p4glRepository->setLog($log);
	$FglDocumenter::Options::p4glRepository->setError($err);
	FglDocumenter::P4glRepository::setError($err);
	FglDocumenter::FormP4gl::setError($err);
	FglDocumenter::FormDb::setError($err);
	FglDocumenter::FormDb::setLog($log);
}

#  =========================================================================
#  Inicializações especificas em ambiente GUI
#  =========================================================================
sub initGui
{
  $log->setUI("GUI");
}

#  =========================================================================
#  Inicializações especificas para ambiente CUI (Command line User Interface)
#  =========================================================================
sub initCui
{
  $log->setUI("CUI");
  $err->setUI("CUI");
}

#  =========================================================================
#  Cria a barra de menus com as respectivas opções
#  =========================================================================
sub createMenu
{
  my $f = $mw->Frame(-relief => 'ridge', -borderwidth => 2);
	$f->pack(-side => 'top', -anchor => 'n', -expand => 1, -fill => 'x');

	push(@menus, $f->Menubutton(-text => "Ficheiro", -underline => 0));
	push(@menus, $f->Menubutton(-text => "Importar", -underline => 0));
	push(@menus, $f->Menubutton(-text => "Exportar", -underline => 0));
	push(@menus, $f->Menubutton(-text => "Opções", -underline => 0));
	push(@menus, $f->Menubutton(-text => "Help", -underline => 0));

  $menus[4]->pack(-side => 'right' );
  $menus[0]->pack(-side => 'left' );
  $menus[1]->pack(-side => 'left' );
  $menus[2]->pack(-side => 'left' );
  $menus[3]->pack(-side => 'left' );

	$menus[0]->AddItems(["command" => "~Open (Options)",
	                      command => \&openOptionsFile],
                      ["command" => "S~ave (Options)", 
	                      command => \&saveOptionsFile],
                      ["command" => "~Sair", 
	                      command => \&exitFgldoc],
  );

	$menus[1]->AddItems(["command" => "~CSV (Tab separated)", 
	                      command => \&importCSV],
                      ["command" => "Sources ~4gl", 
	                      command => \&importFgl],
												#["command" => "XML", 
												#command => \&importXml],
												#["command" => "Syspgm4gl", 
												#command => \&importSyspgm]
  );

	$menus[2]->AddItems(["command" => "~CSV (Tab separated)", 
	                      command => \&export2CSV],
                      ["command" => "Sources ~4gl", 
	                      command => \&export2FglGui],
												#["command" => "XML", 
												#command => \&exportXml],
												#["command" => "Makefile", 
												#command => \&exportMakefile],
                      ["command" => "~HTML", 
	                      command => \&export2Html]
  );

	$menus[3]->AddItems(["checkbutton" => "~Show Log", 
	                      -command => \&toogleLog,
	                      -variable => \$FglDocumenter::Options::logShowed],
	                      #command => \&selectDatabase],
                      ["command" => "~Configure", 
	                      command => \&configureOptions]
  );
	if ( $FglDocumenter::Options::logShowed )
	{
	  $log->showLogWindow();
	}
}

#  =========================================================================
#  Muda o estado do log
#  =========================================================================
sub toogleLog
{
  if ( $FglDocumenter::Options::logShowed == 1 )
	{
    $log->setShowGUI(true);
    $log->showLogWindow();
  }
	else
	{
    $log->setShowGUI(false);
    $log->hideLogWindow();
  }
}

#  =========================================================================
#  Abre o ficheiro das opções e carrega para o objecto de opções
#  =========================================================================
sub openOptionsFile
{
	FglDocumenter::Options::setParentWin($mw);
	FglDocumenter::Options::open();
}

#  =========================================================================
#  Salva as opções num ficheiro
#  =========================================================================
sub saveOptionsFile
{
	FglDocumenter::Options::setParentWin($mw);
	FglDocumenter::Options::save();
}

#  =========================================================================
#  Abre o forma para configuração das opções
#  =========================================================================
sub configureOptions
{
	use FglDocumenter::FormOptions;
  FglDocumenter::FormOptions::show();
}


#  =========================================================================
#  Janela para seleccionar a base de dados usada como repositório
#  =========================================================================
sub selectDatabase
{
	DbConnection::setErrorFunction(\&showError);
	DbConnection::setMessageFunction(\&showMessage);
	FormDb::showDbForm($Options::p4glRepository);
}

#  =========================================================================
#  Abre a base de dados que está configurada para ser usada como repositório
#  dos comentários
#  Se estiver aberta não estabelece a conexão
#  =========================================================================
sub openRepository
{
	# @todo Tem de eventualmente abrir form para login e password
  $FglDocumenter::Options::p4glRepository->connect();
}

#  =========================================================================
#  Faz o display do progresso na progress bar
#    @param $_[0] Valor do contador
#    @param $_[1] String identificadora da acção
#  =========================================================================
sub displayProgress
{
	$msg1 = shift;
	$msg2 = shift;
	$percent_done = $actionCount;
	$actionCount++;

  if ( $FglDocumenter::Options::UI eq "CUI" )
	{
	  printf("[PROGRESS] $msg1\n");
	  printf("[PROGRESS] $msg2\n");
		return;
	}

	$msg1Label->configure(-text => $msg1);
	$msg2Label->configure(-text => $msg2);
  $dialog->update;
}

#  =========================================================================
#  Executar form para importar ficheiro com sperador TAB
#  =========================================================================
sub importCSV
{
	FglDocumenter::FormImportCSV::show();
	FglDocumenter::FormImportCSV::addOkListener(\&executeImportCSV);
}

#  =========================================================================
#  Import CSV com interface CUI (Command line User Interface)
#  =========================================================================
sub importCSVCui
{
	if ( !defined($FglDocumenter::Options::csvImportFile) )
	{
	  $err->error(
		  "Import comments to repository",
		  "Name of cvs file not defined"
    );
	  printUsage();
		exit;
	}
  executeImportCSV();
}

#  =========================================================================
#  Após o utilizador carregar no botão OK executa a importação da informação
#  de um ficheiro com separador TAB
#    @todo - Transformar em objecto a execução de import CSV
#  =========================================================================
sub executeImportCSV
{

	openRepository();

	$importObject = new FglDocumenter::ImportCSV();

	$importObject->setSheetFile(
	  $FglDocumenter::Options::csvImportFile
  );

	$importObject->setRepository(
	  $FglDocumenter::Options::p4glRepository
  );

	$importObject->setLog($log);
	$importObject->setError($err);
	$importObject->setSendLineToLog(
	  $FglDocumenter::Options::sendLineToLog
	);
	$numActions = $importObject->getNumActions();
	if ( $FglDocumenter::Options::clearRepositoryOnImportCsv == 1 )
	{
	  $numActions += 4;
	}

	actionStarted("Import CSV File");
	$importObject->addProgressListener(\&displayProgress);
	if ( $FglDocumenter::Options::clearRepositoryOnImportCsv == 1 )
	{
	  $importObject->cleanRepository();
	}
	$result = "Importação terminada com sucesso";
	if ( $importObject->loadSheet() )
	{
		if ( $FglDocumenter::Options::normalize == 1 ) 
		{
	    $importObject->normalize();
	  }
  }
	else
	{
	  $result = "Importação com erros";
	}

	$percent_done = 100;
	finishProgressBar();
	# @todo A Importação pode não ter tido sucesso e portanto isto devia 
	#       ter passado para outro sitio
  actionFinished(
	  "Importar dados de ficheiro",
		$result
  );
}

use Tk::ProgressBar;

#  =========================================================================
#  Iniciar interface que indica que importação iniciada
#  =========================================================================
sub actionStarted
{
  if ( $FglDocumenter::Options::UI eq "CUI" )
	{
    printf("[ACTION] New action started ($_[0])\n");
		return;
	}

	$mw->configure(-cursor => "watch");
	$actionCount = 0;
	startProgressBar();
}

#  =========================================================================
#  Inicializa a progress bar
#  =========================================================================
sub startProgressBar
{
  #$dialog = $mw->Dialog(-title => "Importar documentação",
	  #-buttons => []);

  $dialog = MainWindow->new;
  
	# @todo Meter a mensagem configuravel
  $dialog->title("Importar documentação de CSV");
  $height = 300;
  $width = 200;
	FglDocumenter::Utils::setWindowAtCenter($dialog,$width,$height);
  
	$percent_done = 0;

  $progress = $dialog->ProgressBar(
    -width => 20,
    -length => 200,
    -anchor => 'w',
    -from => 0,
    -to => $numActions,
    -blocks => 1,
    #-colors => [0, 'green', 50, 'yellow' , 80, 'red'],
    -variable => \$percent_done
  );
  #$progress->value($position);
	$progress->grid;

	$msg1Label = $dialog->Label(-text => $msg1);
	$msg1Label->grid;

	$msg2Label = $dialog->Label(-text => $msg2);
	$msg2Label->grid;
}

#  =========================================================================
#  Termina a progress bar
#  =========================================================================
sub finishProgressBar
{
  if ( $FglDocumenter::Options::UI eq "CUI" )
	{
	  return
	}
  $dialog->destroy();
}

#  =========================================================================
#  Abre uma dialog que informa que o import terminou
#  =========================================================================
sub actionFinished
{
  if ( $FglDocumenter::Options::UI eq "CUI" )
	{
		printf("[ACTIONS] Action finished\n");
	  return;
	}

	$mw->configure(-cursor => "arrow" );
  $dialog = $mw->Dialog(-title => $_[0],
	  -text => $_[1]
  );
	$dialog->Show();
}

#  =========================================================================
#  Apresenta uma dialog que apresenta um erro ocorrido
#  =========================================================================
sub showError
{
  $dialog = $mw->Dialog(-title => "Error : " . $_[0],
	  -text => $_[1]
  );
	$dialog->Show();
}

#  =========================================================================
#  Apresenta uma dialog que apresenta uma mensagem
#  =========================================================================
sub showMessage
{
  $dialog = $mw->Dialog(-title => $_[0],
	  -text => $_[1]
  );
	$dialog->Show();
}

#  =========================================================================
#  Importar XML
#  =========================================================================
sub importXml
{ 
  my $types = [
            ['XML',              ['.xml', 'XML']],
            ['Text',              '.txt', 'TEXT'],
            ['GIF Files',        '.gif',          ],
            ['GIF Files',        '',        'GIFF'],
            ['All Files',        '*',             ],
        ];
  my $filename = $mw->getOpenFile(-filetypes=>$types);

  print "import XML\n";
}

#  =========================================================================
#  Importar syspgm
#  =========================================================================
sub importSyspgm
{
  print "import syspgm4gl\n";
}

#  =========================================================================
#  Exportar para CSV
#  @todo - Ainda não convertido
#  =========================================================================
sub export2CSV
{
  my $types = [ ['TEXT', ['.txt', '.TXT']] ,
                ['All Files', '*', ]
	];
  $FglDocumenter::Options::csvExportFile = $mw->getSaveFile(
	  -filetypes=>$types
	);
	if ( defined($FglDocumenter::Options::csvExportFile) )
	{
	  executeExport2CSV();
	}
}

#  =========================================================================
#  Execução para CSV em ambiente CUI
#  =========================================================================
sub export2CSVCui
{
   executeExport2CSV();
}

#  =========================================================================
#  Executa a exportação para um ficheiro com CSV
#  =========================================================================
sub executeExport2CSV
{
	actionStarted("Export CSV");
	openRepository();
	$exportCSVObject = new FglDocumenter::ExportCSV();
	$exportCSVObject->setRepository(
	  $FglDocumenter::Options::p4glRepository
  );
	$exportCSVObject->setLog($log);
	$exportCSVObject->setError($err);
	$exportCSVObject->setFileName(
    $FglDocumenter::Options::csvExportFile
  );
	$exportCSVObject->export2CSV();
	actionFinished(
	  "Exportar dados para flat file com CSV (TAB)",
	  "Exportação terminada com sucesso"
  );
}

#  =========================================================================
#  Exportar os comentários existentes no repositório para os sources de 4gl
#
#  Esta função é executada apenas no ambiente GUI
#
#    @todo Permitir escolher mais do que um ficheiro
#  =========================================================================
sub export2FglGui
{
	$formExportObject = new FglDocumenter::FormExport4gl();

	$formExportObject->setLog($log);
	$formExportObject->setError($err);
	# Afectar valores de default (directorio, etc com valores das opçoes)
	$formExportObject->setSourceDir($FglDocumenter::Options::sourceDir);
	$formExportObject->setFglSource($FglDocumenter::Options::fglSource);
	$formExportObject->setReplaceFglDoc($FglDocumenter::Options::replaceFglDoc);

	$formExportObject->addOkListener(\&executeExport2Fgl);
	$formExportObject->addCancelListener(sub {
    my $dialog = $mw->Dialog(-title => "Exportação para 4gl",
	      -text => "Exportação cancelada"
    );
	  $dialog->Show();
		$mw->update;
	});
	$formExportObject->show();
}

#  =========================================================================
#  Exportação dos comentários para 4gl no ambiente CUI 
#  (Command Line User Interface)
#  =========================================================================
sub export2FglCui
{
	if ( !defined($FglDocumenter::Options::fglSource) )
	{
	  $err->error(
		  "Export comments to 4gl source",
		  "Name of fglSource not defined"
    );
	  printUsage();
		exit;
	}
	if ( !defined($FglDocumenter::Options::sourceDir) )
	{
	  $err->error(
		  "Export comments to 4gl source",
		  "Name of source directory not defined"
    );
	  printUsage();
		exit;
	}
  executeExport2Fgl();
}

#  =========================================================================
#  Executa a acção de exportação para 4gl
#  Executado quando o utilizador carrega em OK no form (se em funcionamento
#  interactivo)
#  =========================================================================
sub executeExport2Fgl
{

	openRepository();
	# @todo Isto deve ser responsabilidade da classe que documenta os fontes
  my $currentDir = getcwd();
	if ( ! chdir $FglDocumenter::Options::sourceDir )
	{
	  $err->error(
		  "Mudança de directório",
		  "Can't change to ($FglDocumenter::Options::sourceDir):\n$!"
    );
		return 0;
  }

	$exportFglObject = new FglDocumenter::ExportFgl();
	$exportFglObject->setRepository(
	  $FglDocumenter::Options::p4glRepository
  );
	$exportFglObject->setLog($log);
	$exportFglObject->setError($err);
	$exportFglObject->setReplaceFgldoc(
	  $FglDocumenter::Options::replaceFgldoc
  );
	$exportFglObject->setInsertEmptyComment(
	  $FglDocumenter::Options::insertEmptyComment
  );

	# @todo Meter a funcionar listas de ficheiros
	my @mod = ($FglDocumenter::Options::fglSource); 
	my @dir = ($FglDocumenter::Options::sourceDir);

	$exportFglObject->setFglModules(\@mod);
	$exportFglObject->setFglDirectoryList(\@dir);
	$exportFglObject->addProgressListener(\&displayProgress);

	$numActions = $exportFglObject->getNumActions();
	actionStarted("Export to Fgl");

	$exportFglObject->insertDocComments();

	# @todo Gestão dos erros
	actionFinished(
	  "Exportar dados para 4gl",
	  "Exportação terminada"
  );

	chdir $currentDir;
	return 1;
}


#  =========================================================================
#  Exportar para XML
#  =========================================================================
sub exportXml
{
  my $types = [ ['XML', ['.xml', '.XML']] ,
                ['All Files', '*', ]
	];
  my $fileName = $mw->getSaveFile(-filetypes=>$types);
	actionStarted("Export to Xml");
	setFileName($fileName);
	export2Xml();
	actionFinished(
	  "Exportar dados para ficheiro XML",
	  "Exportação terminada com sucesso"
  );
}

#  =========================================================================
#  Exportar para makefile
#  =========================================================================
sub exportMakefile
{
  print "Export Makefile\n";
}

#  =========================================================================
#  Exportar para HTML
#  =========================================================================
sub export2Html
{
}

#  =========================================================================
#  Exportar para HTML em ambiente CUI
#  =========================================================================
sub export2HtmlCui
{
  executeExportHtml();
}

#  =========================================================================
#  Executa a exportaçao dos comentarios para uma arvore de html
#  =========================================================================
sub executeExportHtml
{
	$exportHtmlObject = new FglDocumenter::ExportHtml();

	openRepository();
	$exportHtmlObject->setRepository(
	  $FglDocumenter::Options::p4glRepository
  );
	$exportHtmlObject->setLog($log);
	$exportHtmlObject->setError($err);
	#my @mod = @$FglDocumenter::Options::importFglModules;
	#my @dir = @$FglDocumenter::Options::importFglDirs;
	#$exportHtmlObject->setFglModules(\@mod);
	#$exportHtmlObject->setFglDirectoryList(\@dir);
	$exportHtmlObject->setDestinationDir(
	  $FglDocumenter::Options::htmlExportDir
	);
	$exportHtmlObject->setIgnoreExistDir(
	  $FglDocumenter::Options::ignoreExistDir
	);
	$exportHtmlObject->addProgressListener(\&displayProgress);

	actionStarted("Export to HTML");
	$exportHtmlObject->export();

	actionFinished(
	  "Exportar informação para Html",
	  "Exportaçao de repositório terminada"
  );
	# @todo - Resolver erro da destruiçao do objecto
	#destroy $exportHtmlObject;
}

#  =========================================================================
#  Importar dados para o repositório tendo como origem os fontes 4gl
#  Usa o parser de informix 4gl
#  =========================================================================
sub importFgl
{

	FglDocumenter::FormP4gl::addOkListener(\&executeImportFgl);
	FglDocumenter::FormP4gl::addCancelListener(sub {
    $dialog = $mw->Dialog(-title => "Importação de informação de sources 4gl",
	      -text => "Importação cancelada"
    );
	  $dialog->Show();
		$mw->update;
	});
	FglDocumenter::FormP4gl::show();
}

#  =========================================================================
#  Importação dos comentários com origem por parse dos .4gl(s) em modo CUI
#  (Command Line User Interface)
#
#  @todo Limpar esta borrada de aceder a getModules()
#  =========================================================================
sub importFglCui
{
	@fileList = FglDocumenter::FormP4gl::getModules(
		  $FglDocumenter::Options::importFglLocation
	);
	$FglDocumenter::Options::importFglModules = \@fileList;
	$FglDocumenter::Options::importFglDirs    = 
	  \@FglDocumenter::FormP4gl::directoryList
	;
  executeImportFgl();
}

#  =========================================================================
#  Executa o p4gl de acordo com os parametros configurados para os módulos
#  seleccionados
#  =========================================================================
sub executeImportFgl
{
	my $importFglObject = new FglDocumenter::ImportFgl();

	$importFglObject->setRepository(
	  $FglDocumenter::Options::p4glRepository
  );
	$importFglObject->setLog($log);
	$importFglObject->setError($err);
	#my @mod = @FglDocumenter::FormP4gl::modules;
	#my @dir = @FglDocumenter::FormP4gl::directoryList;
	my @mod = @$FglDocumenter::Options::importFglModules;
	my @dir = @$FglDocumenter::Options::importFglDirs;
	$importFglObject->setFglModules(\@mod);
	$importFglObject->setFglDirectoryList(\@dir);
	$importFglObject->addProgressListener(\&displayProgress);
	$numActions = $importFglObject->getNumActions();

	actionStarted("Import 4gl information");
	$importFglObject->parseSources();
	finishProgressBar();

	actionFinished(
	  "Importar informação de 4gl",
	  "Importação por parsing terminada"
  );
}


#  =========================================================================
#  Sair da ferramenta
#  =========================================================================
sub exitFgldoc
{
	FglDocumenter::Options::saveOptions();
	$log->closeLogFile();
  exit;
}

#  =========================================================================
#  Print program usage
#  =========================================================================
sub printUsage()
{
	  print qq/Usage: fgldoc [options]
  Options:
    --help
    --quiet
    --action=<ActionToDo>
    --ui={GUI|CUI}
    --export_directory=<directory>
    --export_source=<fglSourceName>
    --insertEmptyComment
    --sheet_file=<CSVfileName>
    --normalize
    --clean_repository
    --send_line_to_log
    --package_name=s
    --clean_repository
    --load_recursive
    --import_directory=s
    --export_html_directory=<htmlDirectoryName>
    --ignore_exist_dir
  Actions:
    importCsv
    importFgl
    export2Fgl
    export2Csv
    export2Html
/;
}


#  =========================================================================
#  Inicialização/validação dos parâmetros de execução
#
#  Falta trabalhar com opcoes so com um - (resumidas)
#
#  Possible parameters to the program:
#    - no_gui : Com gui por default
#    - export_directory = %s
#    - export_source = %s
#  =========================================================================
sub getParameters
{
  my $optResult = GetOptions(
		"help"              => \$help,
		"test"              => \$test,
		"ui=s"              => \$FglDocumenter::Options::UI,
		"export_directory=s"=> \$FglDocumenter::Options::sourceDir,
		"export_source=s"   => \$FglDocumenter::Options::fglSource,
		"insert_empty_comment=i"=> \$FglDocumenter::Options::insertEmptyComment,
		"sheet_file=s"      => \$FglDocumenter::Options::csvImportFile,
		"normalize"         => \$FglDocumenter::Options::normalize,
		"clean_repository"  => \$FglDocumenter::Options::clearRepositoryOnImportCsv,
		"send_line_to_log"  => \$FglDocumenter::Options::sendLineToLog,
		"package_name=s"    => \$FglDocumenter::Options::packageName,
		"load_recursive"    => \$FglDocumenter::Options::loadFilesRecursive,
		"import_directory=s"=> \$FglDocumenter::Options::importFglLocation,
		"export_html_directory=s"=> \$FglDocumenter::Options::htmlExportDir,
		"ignore_exist_dir"  => \$FglDocumenter::Options::ignoreExistDir,
		"action=s"          => \$FglDocumenter::Options::action,
  );

	if ( $help )
	{
		printf("Error in options\n");
	  printUsage();
		exit;
	}

  if ( ! $optResult )
	{
		print "Error";
	  printUsage();
    exit;
	}
}

#  =========================================================================
#  Inicia o ambiente em modo GUI (Grafical User Interface)
#  =========================================================================
sub startGui
{
  $mw = MainWindow->new;

  $mw->title("4Doc - Fgl documentation tool");
  #$height = $mw->screenheight();
  $height = 25;
  $width = $mw->screenwidth();
  $mw->geometry("${width}x${height}+0+0");
  createMenu();
  MainLoop
}

#  =========================================================================
#  Uma vez que foi executado com a opçao de linha de comando, tem de existir
#  alguma a acçao a executar.
#  =========================================================================
sub analiseCuiOptions
{
	$numActions = 0;
	if ( $FglDocumenter::Options::action eq "importCsv" )
	{
	  $numActions++;
	}
	if ( $FglDocumenter::Options::action eq "importFgl" )
	{
	  $numActions++;
	}
	if ( $FglDocumenter::Options::action eq "export2Fgl" )
	{
	  $numActions++;
	}
	if ( $FglDocumenter::Options::action eq "export2CSV" )
	{
	  $numActions++;
	}
	if ( $FglDocumenter::Options::action eq "export2Html" )
	{
	  $numActions++;
	}
  
	if ( $numActions <= 0 )
	{
		printf("There must be at least one option defined in CUI\n");
	  return 0;
	}
	return 1;
}

#  =========================================================================
#  Inicia o funcionamento em CUI (Command User Interface)
#
#  Executa as acçoes com dados recebidos com parametros enviando
#  os resultados para ficheiro(s) de log ou standard output
#
#  @todo Implementar todas as acções possiveis
#  =========================================================================
sub startCui
{
  printf("Starting with no GUI\n");
	if ( analiseCuiOptions() == 0)
	{
    printUsage();
		exit;
	}

	initCui();


	if ( $FglDocumenter::Options::action eq "importFgl" )
	{
	  importFglCui();
	}

	if ( $FglDocumenter::Options::action eq "importCsv" )
	{
	  importCSVCui();
  }

	if ( $FglDocumenter::Options::action eq "export2Fgl" )
	{
	  export2FglCui();
	}

	if ( $FglDocumenter::Options::action eq "export2Csv" )
	{
	  export2CSVCui();
	}

	if ( $FglDocumenter::Options::action eq "export2Html" )
	{
	  export2HtmlCui();
	}

  exitFgldoc();
}

#  =========================================================================
#  Executes unit tests of fgldocumenter in order to check if everithing
#  is working.
#  The tests are executed in CUI mode
#  =========================================================================
sub testFglDocumenter
{
  $FglDocumenter::Options::UI = "CUI";
	initCui();
	$testObject = new FglDocumenter::Test();
	$testObject->setLog($log);
	$testObject->setError($err);
	$testObject->setRepository(
	  $FglDocumenter::Options::p4glRepository
  );
	$testObject->runTests();
}

#  Handler for trapping interrupt
sub gotInterrupt()
{
  my $obj = shift;
  die "\n\nINTERRUPT !\n";
}


# Main
$SIG{INT} = \&gotInterrupt;
initFglDoc();

getParameters();

if ( $test )
{
  testFglDocumenter();
  exitFgldoc();
}

if ( $FglDocumenter::Options::UI eq "CUI" )
{
	startCui();
}
else
{
  startGui();
}

 

